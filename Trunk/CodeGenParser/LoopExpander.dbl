;; *****************************************************************************
;; 
;;  Title:       LoopExpander.dbl
;; 
;;  Type:        Class
;; 
;;  Description: Implements logic to iterate various template file loop constructs
;; 
;;  Date:        30th August 2014
;; 
;;  Authors:     Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.IO
import System.Linq
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

	public class LoopExpander

        private static loopProcessors, @Dictionary<string, Action<LoopNode, FileNode, IEnumerable<LoopNode>, ITreeNodeVisitor>>

        static method LoopExpander
            endparams
        proc
            loopProcessors = new Dictionary<string, Action<LoopNode, FileNode, IEnumerable<LoopNode>, ITreeNodeVisitor>>()
            loopProcessors.Add("FIELD_LOOP", processFieldLoop)
            loopProcessors.Add("KEY_LOOP", processKeyLoop)
            loopProcessors.Add("ALTERNATE_KEY_LOOP", processAlternateKeyLoop)
            loopProcessors.Add("PRIMARY_KEY", processPrimaryKeyLoop)
			loopProcessors.Add("UNIQUE_KEY", processUniqueKeyLoop)
            loopProcessors.Add("ENUM_LOOP", processEnumLoop)
            loopProcessors.Add("ENUM_LOOP_STRUCTURE", processStructureEnumLoop)
            loopProcessors.Add("RELATION_LOOP", processRelationLoop)
            loopProcessors.Add("BUTTON_LOOP", processButtonLoop)
            loopProcessors.Add("FILE_LOOP", processFileLoop)
            loopProcessors.Add("TAG_LOOP", processTagLoop)
            loopProcessors.Add("SELECTION_LOOP", processFieldSelectionLoop)
            loopProcessors.Add("SEGMENT_LOOP", processKeySegmentLoop)
            loopProcessors.Add("SEGMENT_LOOP_FILTER", processKeySegmentFilterLoop)
            loopProcessors.Add("FIRST_SEGMENT", processFirstKeySegmentLoop)
            loopProcessors.Add("SECOND_SEGMENT", ProcessSecondKeySegmentLoop)
            loopProcessors.Add("ENUM_MEMBER_LOOP", processEnumMemberLoop)
            loopProcessors.Add("STRUCTURE_LOOP", processStructureLoop)
        endmethod

        ;;;  <summary>
        ;;;  This method is called by TreeExpander whenever a loop node is encountered in the tree.
        ;;;  It determines which method should be used to expand the loop and calls that method.
        ;;;  </summary>
        ;;;  <param name="node"></param>
        ;;;  <param name="file"></param>
        ;;;  <param name="loopContext"></param>
        ;;;  <param name="visitor"></param>
        public static method ProcessLoop, void
            node, @LoopNode 
            file, @FileNode 
            loopContext, @IEnumerable<LoopNode> 
            visitor, @ITreeNodeVisitor 
            endparams
        proc
            if (loopProcessors.ContainsKey(node.OpenToken.Value)) then
                loopProcessors[node.OpenToken.Value](node, file, loopContext, visitor)
            else
                throw new ApplicationException(String.Format("CODEGEN BUG: LoopExpander doesn't define a processor for <{0}>!", node.OpenToken.Value))
        endmethod

        private static method processFieldLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data loop, @FieldLoopNode, ^as(node, FieldLoopNode)
            data context, @CodeGenContext, file.Context
			
			if (file.Context.CurrentStructure.Fields.Count == 0)
                throw new ApplicationException(String.Format("The <{0}> loop at line {1} in template {2} can't be processed because structure {3} has no fields!", node.OpenToken.Value, node.OpenToken.StartLineNumber, file.Context.CurrentTemplateBaseName, file.Context.CurrentStructure.Name))
			
			loop.MaxIndex = file.Context.CurrentStructure.Fields.Count - 1
			
			context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} fields", string.Format("<{0}>", loop.OpenToken.Value), loop.MaxIndex + 1))
			
			data ix, int
			for ix from 0 thru file.Context.CurrentStructure.Fields.Count - 1
			begin
				loop.CurrentField = file.Context.CurrentStructure.Fields[ix]
				loop.CurrentIndex = ix

				data child, @ITreeNode
				foreach child in node.Body
					child.Accept(expander)
			end
		
		endmethod

        private static method processKeyLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data loop, @KeyLoopNode, ^as(node, KeyLoopNode)
			data context, @CodeGenContext, file.Context

            if (file.Context.CurrentStructure.Keys.Count == 0)
                throw new ApplicationException(String.Format("The <{0}> loop at line {1} in template {2} can't be processed because structure {3} has no keys!", node.OpenToken.Value, node.OpenToken.StartLineNumber, file.Context.CurrentTemplateBaseName, file.Context.CurrentStructure.Name))
			
			loop.MaxIndex = file.Context.CurrentStructure.Keys.Count - 1
			
			context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} keys", string.Format("<{0}>", loop.OpenToken.Value), loop.MaxIndex + 1))
			
			data ix, int
			for ix from 0 thru file.Context.CurrentStructure.Keys.Count - 1
			begin
				loop.CurrentKey = file.Context.CurrentStructure.Keys[ix]
				loop.CurrentIndex = ix

				data child, @ITreeNode
				foreach child in node.Body
					child.Accept(expander)
			end
		
		endmethod

        private static method processAlternateKeyLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data loop, @KeyLoopNode, ^as(node, KeyLoopNode)
            data context, @CodeGenContext, file.Context
			
			if (file.Context.CurrentStructure.Keys.Count == 0)
                throw new ApplicationException(String.Format("The <{0}> loop at line {1} in template {2} can't be processed because structure {3} has no keys!", node.OpenToken.Value, node.OpenToken.StartLineNumber, file.Context.CurrentTemplateBaseName, file.Context.CurrentStructure.Name))
			
			loop.MaxIndex = file.Context.CurrentStructure.Keys.Count - 1

			context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} keys", string.Format("<{0}>", loop.OpenToken.Value), loop.MaxIndex + 1))

			data ix, int
			for ix from 0 thru file.Context.CurrentStructure.Keys.Count - 1
			begin
				;; Skip the first key
				if (ix == 0)
					nextloop

				;; Then process as normal
				loop.CurrentKey = file.Context.CurrentStructure.Keys[ix]
				loop.CurrentIndex = ix

				data child, @ITreeNode
				foreach child in node.Body
					child.Accept(expander)
			end
			
        endmethod

        private static method processPrimaryKeyLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data loop, @KeyLoopNode, ^as(node, KeyLoopNode)
			data context, @CodeGenContext, file.Context

            if (file.Context.CurrentStructure.Keys.Count == 0)
                throw new ApplicationException(String.Format("The <{0}> loop at line {1} in template {2} can't be processed because structure {3} has no keys!", node.OpenToken.Value, node.OpenToken.StartLineNumber, file.Context.CurrentTemplateBaseName, file.Context.CurrentStructure.Name))
			
			if ((file.Context.CurrentTask.PrimaryKeyNumber > 0) && (file.Context.CurrentTask.PrimaryKeyNumber > (file.Context.CurrentStructure.Keys.Count - 1)))
                throw new ApplicationException(String.Format("The <{0}> loop at line {1} in template {2} can't be processed using alternate key {3} because structure {4} only has {5} keys!", node.OpenToken.Value, node.OpenToken.StartLineNumber, file.Context.CurrentTemplateBaseName, file.Context.CurrentTask.PrimaryKeyNumber, file.Context.CurrentStructure.Name, file.Context.CurrentStructure.Keys.Count + 1))
			
			loop.CurrentKey = file.Context.CurrentStructure.Keys[file.Context.CurrentTask.PrimaryKeyNumber]
            loop.CurrentIndex = file.Context.CurrentTask.PrimaryKeyNumber
			loop.MaxIndex = file.Context.CurrentTask.PrimaryKeyNumber

            context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> 1 key", string.Format("<{0}>", loop.OpenToken.Value)))
			
			data child, @ITreeNode
			foreach child in node.Body
				child.Accept(expander)
				
        endmethod

		private static method processUniqueKeyLoop, void
			node, @LoopNode 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			expander, @ITreeNodeVisitor 
			endparams
		proc
			data loop, @KeyLoopNode, ^as(node, KeyLoopNode)
			data context, @CodeGenContext, file.Context
			
			if (file.Context.CurrentStructure.Keys.Count == 0)
				throw new ApplicationException(String.Format("The <{0}> loop at line {1} in template {2} can't be processed because structure {3} has no keys!", node.OpenToken.Value, node.OpenToken.StartLineNumber, file.Context.CurrentTemplateBaseName, file.Context.CurrentStructure.Name))
			
			if (!file.Context.CurrentStructure.Keys.Any(lambda (k) {k.Duplicates == RpsKeyDuplicates.NoDuplicates}))
				throw new ApplicationException(String.Format("The <{0}> loop at line {1} in template {2} can't be processed because structure {3} has no unique keys!",node.OpenToken.Value,node.OpenToken.StartLineNumber,file.Context.CurrentTemplateBaseName,file.Context.CurrentStructure.Name))
			
			loop.CurrentKey = file.Context.CurrentStructure.Keys.First(lambda (k) {k.Duplicates == RpsKeyDuplicates.NoDuplicates})
			loop.CurrentIndex = file.Context.CurrentStructure.Keys.IndexOf(loop.CurrentKey)
			loop.MaxIndex = loop.CurrentIndex
			
			context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> 1 key", string.Format("<{0}>", loop.OpenToken.Value)))
			
			data child, @ITreeNode
			foreach child in node.Body
				child.Accept(expander)
			
		endmethod
		
		private static method processEnumLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data loop, @EnumLoopNode, ^as(node, EnumLoopNode)
			data context, @CodeGenContext, file.Context

            if (file.Context.Enumerations.Count == 0)
                throw new ApplicationException(String.Format("The <{0}> loop at line {1} in template {2} can't be processed because no enumerations are defined!", node.OpenToken.Value, node.OpenToken.StartLineNumber, file.Context.CurrentTemplateBaseName))
			
			loop.MaxIndex = file.Context.Enumerations.Count - 1

			context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} enums", string.Format("<{0}>", loop.OpenToken.Value), loop.MaxIndex + 1))

			data ix, int
			for ix from 0 thru file.Context.Enumerations.Count - 1
			begin
				loop.CurrentEnumeration = file.Context.Enumerations[ix]
				loop.CurrentIndex = ix

				data child, @ITreeNode
				foreach child in node.Body
					child.Accept(expander)
			end
			
        endmethod

        private static method processStructureEnumLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data loop, @EnumLoopNode, ^as(node, EnumLoopNode)
			data context, @CodeGenContext, file.Context

            if (file.Context.Enumerations.Count == 0)
				throw new ApplicationException(String.Format("The <{0}> loop at line {1} in template {2} can't be processed because no enumerations are defined!", node.OpenToken.Value, node.OpenToken.StartLineNumber, file.Context.CurrentTemplateBaseName))

            ;; TODO: Needs work because we don't visit all enumerations in the collection!
            loop.MaxIndex = file.Context.Enumerations.Count - 1
			
			context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} enums", string.Format("<{0}>", loop.OpenToken.Value), loop.MaxIndex + 1))
			
			data ix, int
			for ix from 0 thru file.Context.Enumerations.Count - 1
			begin
				loop.CurrentEnumeration = file.Context.Enumerations[ix]
				
				data field, @RpsField
				foreach field in file.Context.CurrentStructure.Fields
				begin
					if ((field.DataType == RpsFieldDataType.Enum) && (field.EnumName == loop.CurrentEnumeration.Name))
					begin
						loop.CurrentIndex = ix

						data child, @ITreeNode
						foreach child in node.Body
							child.Accept(expander)
							
					end
				end
			end
			
        endmethod

        private static method processRelationLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data loop, @RelationLoopNode, ^as(node, RelationLoopNode)
            data context, @CodeGenContext, file.Context
			
			if (file.Context.CurrentStructure.Relations.Count == 0)
                throw new ApplicationException(String.Format("The <{0}> loop at line {1} in template {2} can't be processed because structure {3} has no relations!", node.OpenToken.Value, node.OpenToken.StartLineNumber, file.Context.CurrentTemplateBaseName, file.Context.CurrentStructure.Name))
			
			loop.MaxIndex = file.Context.CurrentStructure.Relations.Count - 1

			context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} relations", string.Format("<{0}>", loop.OpenToken.Value), loop.MaxIndex + 1))

			data ix, int
			for ix from 0 thru file.Context.CurrentStructure.Relations.Count - 1
			begin
				loop.CurrentRelation = file.Context.CurrentStructure.Relations[ix]
				loop.CurrentIndex = ix

				data child, @ITreeNode
				foreach child in node.Body
					child.Accept(expander)
			end
			
        endmethod

        private static method processButtonLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            ;; TODO: Button loops need context data
			
			data loop, @ButtonLoopNode, ^as(node, ButtonLoopNode)
            data context, @CodeGenContext, file.Context
			
			file.Context.Buttons = new WscButtonCollection()
			
			if ((file.Context.Buttons == ^null) || (file.Context.Buttons.Count == 0))
				mreturn

            loop.MaxIndex = file.Context.Buttons.Count - 1
			
			context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} buttons", string.Format("<{0}>", loop.OpenToken.Value), loop.MaxIndex + 1))
			
			data ix, int
			for ix from 0 thru file.Context.Buttons.Count - 1
			begin
				loop.CurrentButton = file.Context.Buttons[ix]
				loop.CurrentIndex = ix

				data child, @ITreeNode
				foreach child in node.Body
					child.Accept(expander)
			end
			
        endmethod

        private static method processFileLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data loop, @FileLoopNode, ^as(node, FileLoopNode)
            data context, @CodeGenContext, file.Context
			
			if (context.CurrentStructure.Files.Count == 0)
                throw new ApplicationException(String.Format("The <{0}> loop at line {1} in template {2} can't be processed because structure {3} is not assigned to any files!", node.OpenToken.Value, node.OpenToken.StartLineNumber, file.Context.CurrentTemplateBaseName, context.CurrentStructure.Name))
			
			loop.MaxIndex = context.CurrentStructure.Files.Count - 1

			context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} files", string.Format("<{0}>", loop.OpenToken.Value), loop.MaxIndex + 1))

			data ix, int
			for ix from 0 thru context.CurrentStructure.Files.Count - 1
			begin
				loop.CurrentFile = context.CurrentStructure.Files[ix]
				loop.CurrentIndex = ix

				data child, @ITreeNode
				foreach child in node.Body
					child.Accept(expander)
			end
			
        endmethod

        private static method processTagLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data loop, @TagLoopNode, ^as(node, TagLoopNode)
            data context, @CodeGenContext, file.Context
			
			loop.MaxIndex = file.Context.CurrentStructure.Tags.Count - 1
			
			context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} tags", string.Format("<{0}>", loop.OpenToken.Value), loop.MaxIndex + 1))
			
			;; Tag loops just do nothing if no tags are defined!
			data ix, int
			for ix from 0 thru file.Context.CurrentStructure.Tags.Count - 1
			begin
				loop.CurrentTag = file.Context.CurrentStructure.Tags[ix]
				loop.CurrentIndex = ix
				
				data child, @ITreeNode
				foreach child in node.Body
					child.Accept(expander)
					
			end
			
        endmethod

        private static method processFieldSelectionLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data outerLoop, @FieldLoopNode, ^as(loops.First(lambda (loopnode) {loopnode .is. FieldLoopNode}), FieldLoopNode)
            data loop, @SelectionLoopNode, ^as(node, SelectionLoopNode)
			data context, @CodeGenContext, file.Context

            if (outerLoop.CurrentField.SelectionList.Count > 0)
            begin
                loop.MaxIndex = outerLoop.CurrentField.SelectionList.Count - 1
				loop.CurrentField = outerLoop.CurrentField

				context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} selections", string.Format("<{0}>", loop.OpenToken.Value), loop.MaxIndex + 1))

				data ix, int
				for ix from 0 thru outerLoop.CurrentField.SelectionList.Count - 1
				begin
					loop.CurrentSelection = outerLoop.CurrentField.SelectionList[ix]
					loop.CurrentIndex = ix
					
					data child, @ITreeNode
					foreach child in node.Body
						child.Accept(expander)
						
				end
			end

        endmethod

        private static method processKeySegmentLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data outerLoop, @KeyLoopNode, ^as(loops.First(lambda (loopnode) {loopnode .is. KeyLoopNode}), KeyLoopNode)
            data loop, @SegmentLoopNode, ^as(node, SegmentLoopNode)
			data context, @CodeGenContext, file.Context

            if (outerLoop.CurrentKey.Segments.Count > 0)
            begin
                loop.CurrentKey = outerLoop.CurrentKey
                loop.MaxIndex = outerLoop.CurrentKey.Segments.Count - 1
				
				context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} segments", string.Format("<{0}>", loop.OpenToken.Value), loop.MaxIndex + 1))
				
				data ix, int
				for ix from 0 thru outerLoop.CurrentKey.Segments.Count - 1
				begin
					loop.CurrentSegment = outerLoop.CurrentKey.Segments[ix]
					loop.CurrentIndex = ix
					loop.CurrentField = getFieldForSegment(context.CurrentStructure, loop.CurrentSegment)

					data child, @ITreeNode
					foreach child in node.Body
						child.Accept(expander)
				end
				
			end

        endmethod

        private static method getFieldForSegment, @RpsField
            str, @RpsStructure 
            seg, @RpsKeySegment 
            endparams
        proc
            if (seg.SegmentType == RpsKeySegmentType.Field) then
                mreturn (str.Fields.First(lambda (fld) {(fld.Name == seg.Field)}))
            else
                mreturn ^null
        endmethod

        private static method processKeySegmentFilterLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data outerLoop, @KeyLoopNode, ^as(loops.First(lambda (loopnode) {loopnode .is. KeyLoopNode}), KeyLoopNode)
            data loop, @SegmentLoopNode, ^as(node, SegmentLoopNode)
            data context, @CodeGenContext, file.Context
			
			if (outerLoop.CurrentKey.Segments.Count > 0)
            begin
                loop.CurrentKey = outerLoop.CurrentKey
                loop.MaxIndex = outerLoop.CurrentKey.Segments.Count - 2
				
				context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} segments", string.Format("<{0}>", loop.OpenToken.Value), loop.MaxIndex + 1))
				
				data ix, int, 0
                while (ix < outerLoop.CurrentKey.Segments.Count - 1) do
                begin
                    loop.CurrentSegment = outerLoop.CurrentKey.Segments[ix]
                    loop.CurrentIndex = ix
                    loop.CurrentField = getFieldForSegment(context.CurrentStructure, loop.CurrentSegment)
					
					data child, @ITreeNode
					foreach child in node.Body
						child.Accept(expander)
						
                    ^incr(ix, true)
                end
			end

        endmethod

        private static method processFirstKeySegmentLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data outerLoop, @KeyLoopNode, ^as(loops.First(lambda (loopnode) {loopnode .is. KeyLoopNode}), KeyLoopNode)
            data loop, @SegmentLoopNode, ^as(node, SegmentLoopNode)
            data context, @CodeGenContext, file.Context
			
			if (outerLoop.CurrentKey.Segments.Count > 0)
            begin
                ;; Only process the first segment
                loop.CurrentKey = outerLoop.CurrentKey
                loop.CurrentSegment = outerLoop.CurrentKey.Segments[0]
                loop.CurrentIndex = 0
                loop.MaxIndex = 0
                loop.CurrentField = getFieldForSegment(context.CurrentStructure, loop.CurrentSegment)
				
				context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> 1 segment", string.Format("<{0}>", loop.OpenToken.Value)))
				
				data child, @ITreeNode
				foreach child in node.Body
					child.Accept(expander)
			end

        endmethod

        private static method ProcessSecondKeySegmentLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data outerLoop, @KeyLoopNode, ^as(loops.First(lambda (loopnode) {loopnode .is. KeyLoopNode}), KeyLoopNode)
            data loop, @SegmentLoopNode, ^as(node, SegmentLoopNode)
			data context, @CodeGenContext, file.Context

            if (outerLoop.CurrentKey.Segments.Count > 1)
            begin
                ;; Only process the second segment
                loop.CurrentKey = outerLoop.CurrentKey
                loop.CurrentSegment = outerLoop.CurrentKey.Segments[1]
                loop.CurrentIndex = 1
                loop.MaxIndex = 1
                loop.CurrentField = getFieldForSegment(context.CurrentStructure, loop.CurrentSegment)
				
				context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> 1 segment", string.Format("<{0}>", loop.OpenToken.Value)))

				data child, @ITreeNode
				foreach child in node.Body
					child.Accept(expander)
			end

        endmethod

        private static method processEnumMemberLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data outerLoop, @EnumLoopNode, ^as(loops.First(lambda (loopnode) {loopnode .is. EnumLoopNode}), EnumLoopNode)
            data loop, @EnumMemberLoopNode, ^as(node, EnumMemberLoopNode)
			data context, @CodeGenContext, file.Context

            loop.CurrentEnumeration = outerLoop.CurrentEnumeration
			loop.MaxIndex = outerLoop.CurrentEnumeration.Members.Count - 1

			context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} enum members", string.Format("<{0}>", loop.OpenToken.Value), loop.MaxIndex + 1))

			data ix, int
			for ix from 0 thru outerLoop.CurrentEnumeration.Members.Count - 1
			begin
				loop.CurrentMember = loop.CurrentEnumeration.Members[ix]
				loop.CurrentIndex = ix

				data child, @ITreeNode
				foreach child in node.Body
					child.Accept(expander)
			end

        endmethod

        private static method processStructureLoop, void
            node, @LoopNode 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            expander, @ITreeNodeVisitor 
            endparams
        proc
            data loop, @StructureLoopNode, ^as(node, StructureLoopNode)
            data context, @CodeGenContext, file.Context
            data task, @CodeGenTask, context.CurrentTask
			
			if (!context.MultiStructureMode)
                throw new ApplicationException(String.Format("The <{0}> loop at line {1} in template {2} can't be processed because multi-structure mode (-ms) has not been enabled!", node.OpenToken.Value, node.OpenToken.StartLineNumber, context.CurrentTemplateBaseName))
			
			loop.MaxIndex = context.Structures.Count - 1

            ;; Debug log beginning of structure loop
			context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1} structures", string.Format("<{0}>", loop.OpenToken.Value), context.Structures.Count))

			data ix, int
			for ix from 0 thru context.Structures.Count - 1
			begin
				context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1}", String.Format("Structure {0}/{1}", ix + 1, context.Structures.Count - 1), context.Structures[ix].Name), true, false)
				context.CurrentStructure = context.Structures[ix]
				loop.CurrentIndex = ix

				data child, @ITreeNode
				foreach child in node.Body
					child.Accept(expander)
			end

            ;; Debug log end of structure loop
            context.CurrentTask.DebugLog(String.Format("   - {0,-30} ->", string.Format("</{0}>", loop.CloseToken.Value)))
		
		endmethod
	
	endclass

endnamespace

