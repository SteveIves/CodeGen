
import System
import System.Collections.Generic
import System.Text

import Symphony.Conductor.Content

namespace Symphony.Orchestrator.Library.Content
	
	public class REPOSITORY_Collection extends SelectionItemList
		
		public method REPOSITORY_Collection
			endparams
		proc

			if (internalList == ^null)
				Symphony.Orchestrator.Content.Repository_Collection.buildInternalList()
				
			data item	,@SelectionItem
			
			foreach item in internalList
			begin
				this.add(item)
			end
			
		endmethod

		private static internalList	,@SelectionItemList
		
		private static method buildInternalList	,void
			endparams
			
			.include 'RPSLIB:ddinfo.def'

			record
				count	,d4
				ii		,i4
				memPnt	,i4
				memHdl	,i4
				rpsname	,a30
			endrecord

			structure strArray
				name	,a30
			endstructure

		proc
			internalList = new SelectionItemList()

			try
			begin
				dd_init(dcs)
				
				dd_name(dcs, DDN_STRUCT, DDN_STRUCT, count)
				memPnt = mem_proc(DM_ALLOC, ii = ^size(strArray) * count)
				
				dd_name(dcs, DDN_LIST, DDN_STRUCT, count, ^m(strArray, memPnt))
				
				for ii from 1 thru count by 1
				begin
					rpsname = ^m(strArray[ii].name, memPnt)
					internalList.Add(new SelectionItem(%atrim(rpsname), %atrim(rpsname)))
				end
			end
			catch (e, @Exception)
			begin
				internalList.Add(new SelectionItem("Empty", "Empty"))
			end
			endtry
		endmethod
	endclass
	
endnamespace
