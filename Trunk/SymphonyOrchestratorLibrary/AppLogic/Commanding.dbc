import System
import System.Collections.Generic
import System.Text

import Symphony.Conductor.Types

import Symphony.Orchestrator.Library.Model

import System.Collections.ObjectModel

import CodeGen.Engine

import System.IO
namespace Symphony.Orchestrator.Library.AppLogic
	
	
	public enum ProcessState
		Starting
		Updating
		ErrorEncountered
		Completed
	endenum
	
	public class Commanding
		
		private mResultsCollection	,@AsyncObservableCollection<Execution_results_Data>
		
		public method Commanding
			endparams
		proc
			
		endmethod
		
		public method ExecuteCommandSetOnThread	,void
			in req onlySelected					,boolean
			in req defaults						,@Orchestrator_defaults_Data
			in req commands						,@ObservableCollection<Codegen_command_Data>
			in req results						,@AsyncObservableCollection<Execution_results_Data>
			endparams
		proc
			
			mResultsCollection = results
			
			lambda processCommandOnThread()
			begin
				
				doCommandExecutionTasks(onlySelected, defaults, commands)
				
			end
			
			Symphony.Conductor.Utility.BackgroundDispatcher.UtilityBackgroundDispatcher.Dispatch(processCommandOnThread)
			
		endmethod
		
		public method ExecuteCommandSetInProc	,void
			in req onlySelected					,boolean
			in req defaults						,@Orchestrator_defaults_Data
			in req commands						,@ObservableCollection<Codegen_command_Data>
			in req results						,@AsyncObservableCollection<Execution_results_Data>
			endparams
		proc
			
			mResultsCollection = results
			
			doCommandExecutionTasks(onlySelected, defaults, commands)
			
		endmethod
		
		private method doCommandExecutionTasks, void
			in req onlySelected			,boolean
			in req defaults				,@Orchestrator_defaults_Data
			in req commands				,@ObservableCollection<Codegen_command_Data>
			endparams
		proc
			
			data item	,@Codegen_command_Data
			
			raiseevent(ProcessNotification, ProcessState.Starting, "Build process statring.")
			
			;;command to run
			data cGen	,@CodeGenerator
			data cTaskSet			,@CodeGenTaskSet	,new CodeGenTaskSet()
			
			foreach item in commands
			begin
				
				if (onlySelected == true && item.Select_to_build == false)
					nextloop	;;they only want the ones selected
				
				raiseevent(ProcessNotification, ProcessState.Updating, item.NiceName)
				
				defaults.Use_command_line = 0
				
				;;have we got a data mapping file
				if (^size(defaults.Custom_data_mapping))
				begin
					cTaskSet.DataMappingsFile = defaults.Custom_data_mapping
				end
				
				;;task
				
				data cTask		,@CodeGenTask	,new CodeGenTask()
				
				cTask.Description = item.NiceName
				
				cTask.RepositoryMainFile = item.Rps_main_file
				cTask.RepositoryTextFile = item.Rps_text_file
				cTask.Structures.Add(item.Structure_name)
				cTask.Aliases.Add(item.Main_alias)
					
				;;do we have additional structure & alias defined?
				data strItem	,@Codegen_structures_Data
				foreach strItem in item.AdditionalStructures
				begin
					if (^size(strItem.Structure_name))
					begin
						cTask.Structures.Add(strItem.Structure_name)
						cTask.Aliases.Add(strItem.Alias_name)
					end
				end
				
				cTask.TemplateFolder = System.IO.FileInfo(item.Template_name).DirectoryName
				cTask.Templates.Add(item.Template_file_name)
				cTask.OutputFolder = item.Output_folder
				
				;;how to handle field overrides
				
				if (item.Includeoverlayfields) cTask.IncludeOverlayFields = true
				if (item.Ignoreexcludelanguage) cTask.IgnoreExcludeLanguage = true
				if (item.Honorexcludetoolkit) cTask.HonorExcludeToolkit = true
				if (item.Honorexcludereportwriter) cTask.HonorExcludeReportWriter = true
				if (item.Honorexcludeweb) cTask.HonorExcludeWeb = true
				if (item.Groupfieldnoprefix) cTask.GroupFieldNoGroupPrefix = true
				if (item.Groupnoexpand) cTask.GroupNoExpand = true
				if (item.Groupfieldnorpsprefix) cTask.GroupFieldNoRpsPrefix = true
					
				;;what to do about buttons
				using item.Button_loop_override select
				("A"),
					cTask.AlwaysLoadDefaultButtons = true
				("D"),
					cTask.NeverLoadDefaultButtons = true
				("N"),
					cTask.NeverLoadAnyButtons = true
				endusing
				
				;;have we got a window script file? (-w)
				if (item.Wsc_file != "             ")
				begin
					if (^size(item.Input_window_name)) then
						cTask.WindowScript = %atrim(item.Wsc_file) + "#" + %atrim(item.Input_window_name)
					else
						cTask.WindowScript = item.Wsc_file
					if (item.Use_wsc_fields_only)
						cTask.IgnoreScriptFieldAttributes = true
				end
				
				;;window script provided (-ws)
				if (^size(item.Wsc_selection_file))
				begin
					cTask.SelectionWindowScript = item.Wsc_selection_file
				end
				
				if (!Directory.Exists(item.Output_folder))
				begin
					Directory.CreateDirectory(item.Output_folder)
				end
				cTask.ReplaceFiles = (item.Replace_file == 1)
				cTask.Namespace = item.Namespace
				if (!item.Character_width) then
					cTask.CharacterWidth = 12
				else
					cTask.CharacterWidth = item.Character_width
				cTask.FieldPrefix = item.Prefix
				
				;;add user tokens
				data token	,@Codegen_user_token_Data
				foreach token in item.UserTokens
				begin
					if (token.Token_value .nes. "  ")
					begin
						cTask.UserTokens.Add(new UserToken( %atrim(token.Token_name), token.Token_value))
					end
				end
				
				;;we may have been given a token file
				if (^size(item.User_token_file))
				begin
					cTask.UserTokenFile = item.User_token_file
				end

				;;this tells me the task is done!!					
				addhandler(cTask.TaskComplete, taskCompleteNotification)
				
				cTaskSet.Tasks.Add(cTask)
				
			end
			
			data cgResult	,ProcessState	,ProcessState.Completed
			
			if (!defaults.Use_command_line)
			begin
				if (defaults.Show_verbose)
					cTaskSet.LoggingLevel = LoggingLevel.Verbose
					
				;cTaskSet.LoggingLevel = LoggingLevel.DeveloperDebug
				
				;;actually do the code gen
				try
				begin
					cGen = new CodeGenerator(cTaskSet)
					cGen.GenerateCode()
				end
				catch (e, @Exception)
				begin
					cgResult = ProcessState.ErrorEncountered
					Symphony.Core.DebugView.WriteException(e)
				end
				endtry
			end
			
			raiseevent(ProcessNotification, cgResult, "Code generation complete.")
			
		endmethod
		
		public delegate ProcessNotificationEventHandler	,void
			in req pState								,ProcessState
			in req pString								,String
		enddelegate
		
		public event ProcessNotification	,@ProcessNotificationEventHandler
		
		private method performCommand	,String
			in req defaults				,@Orchestrator_defaults_Data
			in req command				,@Codegen_command_Data
			endparams
			
		proc
			data resultString		,String
			
			;;build up the command to execute
			
			data commandToExecute	,String
			
			;;optionally add -v
			
			commandToExecute = " -lf "
			
			if (defaults.Show_verbose)
				commandToExecute = string.Concat(commandToExecute,  " -v ")
			
			;;add the structure name
			commandToExecute = string.Concat(commandToExecute,  " -s " , command.Structure_name)
			;;add tempalte name
			commandToExecute = string.Concat(commandToExecute,  " -t " , command.Template_file_name - '.tpl')
			;;out to...
			if (command.Output_folder .nes. "   ")
				commandToExecute = string.Concat(commandToExecute,  ' -o "' , command.Output_folder, '"')
			;;repalce file?
			if (command.Replace_file == 1)
				commandToExecute = string.Concat(commandToExecute,  " -r " )
			;;namespace
			if (command.Namespace .nes. "  ")
				commandToExecute = string.Concat(commandToExecute,  " -n " , command.Namespace)
			;;character width
			if (command.Character_width > 0)
				commandToExecute = string.Concat(commandToExecute,  " -cw " , command.Character_width)
			;;prefix
			if (command.Prefix .nes. "  ")
				commandToExecute = string.Concat(commandToExecute,  " -prefix " , command.Prefix)
			
			;;now the user tokens
			
			data item	,@Codegen_user_token_Data
			foreach item in command.UserTokens
			begin
				if (item.Token_value .nes. "  ")
				begin
					commandToExecute = string.Concat(commandToExecute,  " -ut " , item.Token_name , "=", item.Token_value)
				end
			end
			
			;;execute the command and record the results...
			try
			begin
				data process	,@System.Diagnostics.Process
				data startInfo	,@System.Diagnostics.ProcessStartInfo
				process = new System.Diagnostics.Process()
				startInfo = new System.Diagnostics.ProcessStartInfo()
				startInfo.CreateNoWindow = true
				startInfo.UseShellExecute = false
				startInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden
				startInfo.FileName = "codegen"
				startInfo.Arguments = commandToExecute
				startInfo.RedirectStandardOutput = true
				startInfo.RedirectStandardError = true
				
				;;now set the template folder
				startInfo.EnvironmentVariables.Remove("CODEGEN_TPLDIR")
				startInfo.EnvironmentVariables.Add("CODEGEN_TPLDIR", System.IO.FileInfo(command.Template_name).DirectoryName)
				
				;;use the command repository files.
				startInfo.EnvironmentVariables.Remove("RPSMFIL")
				startInfo.EnvironmentVariables.Add("RPSMFIL", command.Rps_main_file)
				startInfo.EnvironmentVariables.Remove("RPSTFIL")
				startInfo.EnvironmentVariables.Add("RPSTFIL", command.Rps_text_file)
				
				startInfo.UseShellExecute = false
				
				process.StartInfo = startInfo
				process.Start()
				
				;;include any error information first
				resultString = string.Concat(process.StandardError.ReadToEnd(), %char(13))
				
				data sr	,@System.IO.StreamReader
				sr = process.StandardOutput
				
				process.WaitForExit()
				process.Close()
				
				repeat	
				begin
					data s,String
					s=sr.ReadLine()
					if (s == ^null)
						exitloop
					resultString = string.Concat(resultString, s, %char(13), %char(10))
				end
				
			end
			catch (e, @Exception)
			begin
				resultString = e.Message
			end
			endtry
			
			mreturn resultString
			
		endmethod
		
		public ProjectFileInjector	,@ISymphonyOrchestratorInjector
		
		private method taskCompleteNotification	,void
			eTask								,@CodeGenTask
			endparams
		proc
			;;we get a collection of "messages" on the passed task
			
			data resultString	,String	,""
			
			data exResult	,@Execution_results_Data	,new Execution_results_Data()
			
			exResult.Title = eTask.Description
			exResult.Status = 1
			if (eTask.Complete == false)
			begin
				exResult.Status = 0
				resultString = string.Concat(eTask.LastErrorMessage, %char(13), %char(10), %char(13), %char(10))
;;				resultString = string.Concat(eTask.ErrorMessage, %char(13), %char(10))
			end
			
			
			data item	,String
			foreach item in eTask.Messages
			begin
				resultString = string.Concat(resultString, item, %char(13), %char(10))
			end
			
			exResult.Response = resultString
			
			mResultsCollection.AddToCollection(exResult)
			
			;;now add the created file to the project.
			
			data createdFile	,String
			foreach createdFile in eTask.FilesGenerated
			begin
				ProjectFileInjector.AddToProjectHierarchy(createdFile, false, "Compile")
			end
			
		endmethod
		
		
	endclass
	
endnamespace
