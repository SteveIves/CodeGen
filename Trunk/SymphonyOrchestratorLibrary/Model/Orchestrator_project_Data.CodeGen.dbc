;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author: Richard C. Morris, Synergex Professional Services Group
;;
;; Template Name:   Symphony Framework : SYMPHONY_DATANOEXCEL.tpl
;;
;;***************************************************************************
import System
import System.Collections.Generic
import System.Text

import Symphony.Conductor.Model

namespace Symphony.Orchestrator.Library.Model

    ;;define a structure that we can use around the applicaiton

    .include 'orchestrator_project' repository  , structure = 'STROrchestrator_project', prefix = "str_", end

    public partial class Orchestrator_project_Data extends Symphony.Conductor.Model.DataObjectBase

		public const RPSStructureName	,String	,"ORCHESTRATOR_PROJECT"

        ;;make the record availalbe and a copy
        .include 'orchestrator_project' repository  , private record = 'orchestrator_project_main', prefix = "m", end
        .include 'orchestrator_project' repository  , private record = 'orchestrator_project_store', prefix = "m", end

		private mDoneSynergyRecordValue	,boolean	,true 
		
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Orchestrator_project_Data
            endparams
            parent()
        proc
			configureFieldInfo()
			setFieldNames()
			InitData()
			mDoneSynergyRecordValue = false
			extendedConstructor()
        endmethod

        ;;; <summary>
        ;;; Alternate constructor, accepts the inital value to assign to the object
        ;;; </summary>
        ;;; <param name="results">Provide the loaded Excel results object</param>
        public method Orchestrator_project_Data
            in req synRec       ,String
            endparams
            parent()
        proc
			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			SynergyRecord = synRec
			OriginalSynergyRecord = synRec
			extendedConstructor()
        endmethod
		
		;;; <summary>
		;;; Alternate constructor, accepts the inital value to assign to the object.
		;;; Also accepts the boolean value to assign to the ObjectRaisesPropertyChanged property.
		;;; </summary>
		;;; <param name="results">Provide the loaded Excel results object.</param>
		;;; <param name="notifyUI">values passed onto the ObjectRaisesPropertyChanged property.</param>
		public method Orchestrator_project_Data
			in req synRec       ,String
			in req notifyUI		,DataObjectNotificationState
			endparams
			parent()
		proc
			ObjectRaisesPropertyChanged = notifyUI
			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			SynergyRecord = synRec
			OriginalSynergyRecord = synRec
			extendedConstructor()
		endmethod

		
        ;;Set up the arrays of field details
        private method configureFieldInfo	,void
			endparams
		proc
			
			
			setFieldInfo("PROJECT_FILE", "Project_file",  "", "",
			&	"", "PROJECT_FILE", 1, 255,
			&	0, 0, 0, 0,
			&	"ALPHA", true, 0, 0)

			
			setFieldInfo("BUILD_FILE_NAME", "Build_file_name",  "", "",
			&	"", "BUILD_FILE_NAME", 256, 255,
			&	0, 0, 0, 0,
			&	"ALPHA", true, 0, 0)

			
			setFieldInfo("RPS_MAIN_FILE", "Rps_main_file",  "", "",
			&	"", "RPS_MAIN_FILE", 511, 255,
			&	0, 0, 0, 0,
			&	"ALPHA", true, 0, 0)

			
			setFieldInfo("RPS_TEXT_FILE", "Rps_text_file",  "", "",
			&	"", "RPS_TEXT_FILE", 766, 255,
			&	0, 0, 0, 0,
			&	"ALPHA", true, 0, 0)

		endmethod

        ;;Set up the arrays of field names and headings
        private method setFieldNames	,void
			endparams
		proc
			mFieldNames.Add("Project_file")
			mFieldHeadings.Add("Project file")
			mFieldNames.Add("Build_file_name")
			mFieldHeadings.Add("Generate file name")
			mFieldNames.Add("Rps_main_file")
			mFieldHeadings.Add("Repository main file")
			mFieldNames.Add("Rps_text_file")
			mFieldHeadings.Add("Repository text file")
		endmethod

        ;;Expose fields as properties for data binding
        
        ;;mProject_file
		public property Project_file, a255
			method get
			proc
				mreturn %atrim(Orchestrator_project_main.mProject_file)
            endmethod
			method set
			proc
				Orchestrator_project_main.mProject_file = value
				if (Orchestrator_project_main.mProject_file != Orchestrator_project_store.mProject_file)
				begin
															ValidateEnteredData(1)
					RaisePropertyChanged("Project_file")
                    Orchestrator_project_store.mProject_file = Orchestrator_project_main.mProject_file
				end
			endmethod
		endproperty
        ;;mBuild_file_name
		public property Build_file_name, a255
			method get
			proc
				mreturn %atrim(Orchestrator_project_main.mBuild_file_name)
            endmethod
			method set
			proc
				Orchestrator_project_main.mBuild_file_name = value
				if (Orchestrator_project_main.mBuild_file_name != Orchestrator_project_store.mBuild_file_name)
				begin
															ValidateEnteredData(2)
					RaisePropertyChanged("Build_file_name")
                    Orchestrator_project_store.mBuild_file_name = Orchestrator_project_main.mBuild_file_name
				end
			endmethod
		endproperty
        ;;mRps_main_file
		public property Rps_main_file, a255
			method get
			proc
				mreturn %atrim(Orchestrator_project_main.mRps_main_file)
            endmethod
			method set
			proc
				Orchestrator_project_main.mRps_main_file = value
				if (Orchestrator_project_main.mRps_main_file != Orchestrator_project_store.mRps_main_file)
				begin
															ValidateEnteredData(3)
					RaisePropertyChanged("Rps_main_file")
                    Orchestrator_project_store.mRps_main_file = Orchestrator_project_main.mRps_main_file
				end
			endmethod
		endproperty
        ;;mRps_text_file
		public property Rps_text_file, a255
			method get
			proc
				mreturn %atrim(Orchestrator_project_main.mRps_text_file)
            endmethod
			method set
			proc
				Orchestrator_project_main.mRps_text_file = value
				if (Orchestrator_project_main.mRps_text_file != Orchestrator_project_store.mRps_text_file)
				begin
															ValidateEnteredData(4)
					RaisePropertyChanged("Rps_text_file")
                    Orchestrator_project_store.mRps_text_file = Orchestrator_project_main.mRps_text_file
				end
			endmethod
		endproperty
			
		private mSynchanged	,boolean
		
        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, String
            method get
            proc
                mreturn Orchestrator_project_main
            endmethod
            method set
            proc
				mSynchanged = false
				
				if (!mDoneSynergyRecordValue)
					OriginalSynergyRecord = value

				mDoneSynergyRecordValue = true

				setUsed()
                Orchestrator_project_main = value

                ;;Signal that all fields have changed
                
                if (Orchestrator_project_main.mProject_file != Orchestrator_project_store.mProject_file)
                begin
					mSynchanged = true
                    SetFieldValid("Project_file")
											Orchestrator_project_store.mProject_file = Orchestrator_project_main.mProject_file
					if (mValidateSynergyData) ValidateEnteredData(1)
                    RaisePropertyChanged("Project_file")
                end
                if (Orchestrator_project_main.mBuild_file_name != Orchestrator_project_store.mBuild_file_name)
                begin
					mSynchanged = true
                    SetFieldValid("Build_file_name")
											Orchestrator_project_store.mBuild_file_name = Orchestrator_project_main.mBuild_file_name
					if (mValidateSynergyData) ValidateEnteredData(2)
                    RaisePropertyChanged("Build_file_name")
                end
                if (Orchestrator_project_main.mRps_main_file != Orchestrator_project_store.mRps_main_file)
                begin
					mSynchanged = true
                    SetFieldValid("Rps_main_file")
											Orchestrator_project_store.mRps_main_file = Orchestrator_project_main.mRps_main_file
					if (mValidateSynergyData) ValidateEnteredData(3)
                    RaisePropertyChanged("Rps_main_file")
                end
                if (Orchestrator_project_main.mRps_text_file != Orchestrator_project_store.mRps_text_file)
                begin
					mSynchanged = true
                    SetFieldValid("Rps_text_file")
											Orchestrator_project_store.mRps_text_file = Orchestrator_project_main.mRps_text_file
					if (mValidateSynergyData) ValidateEnteredData(4)
                    RaisePropertyChanged("Rps_text_file")
                end
				if (mSynchanged)
					RaiseSynergyRecordChanged()
				Orchestrator_project_store = Orchestrator_project_main
            endmethod
        endproperty

        ;;; <summary>
        ;;; Allow the host to initialise all fields.
        ;;; </summary>
        public override method InitData ,void
        proc
            init Orchestrator_project_main
            if (Orchestrator_project_main.mProject_file != Orchestrator_project_store.mProject_file)
				RaisePropertyChanged("Project_file")
            if (Orchestrator_project_main.mBuild_file_name != Orchestrator_project_store.mBuild_file_name)
				RaisePropertyChanged("Build_file_name")
            if (Orchestrator_project_main.mRps_main_file != Orchestrator_project_store.mRps_main_file)
				RaisePropertyChanged("Rps_main_file")
            if (Orchestrator_project_main.mRps_text_file != Orchestrator_project_store.mRps_text_file)
				RaisePropertyChanged("Rps_text_file")
			Orchestrator_project_store = Orchestrator_project_main
			parent.InitData()
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
            endparams
        proc
			
				            ValidateEnteredData(1)
            RaisePropertyChanged("Project_file")
				            ValidateEnteredData(2)
            RaisePropertyChanged("Build_file_name")
				            ValidateEnteredData(3)
            RaisePropertyChanged("Rps_main_file")
				            ValidateEnteredData(4)
            RaisePropertyChanged("Rps_text_file")

        endmethod

        ;;; <summary>
        ;;; Indicate from the UI which field now has focus. This then signals the
        ;;; CurrentFieldInfo change event so the UI can get the current field details
        ;;; </summary>
        ;;; <param name="fieldName">Name of field with focus</param>
        public override method SetFieldFocusFlag    ,void
            in req fieldName                        ,String
            endparams
        proc
            using fieldName select
			
			
            ("PROJECT_FILE"), mCurrentField = 1
			
            ("BUILD_FILE_NAME"), mCurrentField = 2
			
            ("RPS_MAIN_FILE"), mCurrentField = 3
			
            ("RPS_TEXT_FILE"), mCurrentField = 4
            (),
                mCurrentField = 0
            endusing
            RaisePropertyChanged("CurrentFieldInfo")
        endmethod

        ;;; <summary>
        ;;; Expose information about the current field
        ;;; </summary>
        ;;; <returns>Current field information</returns>
        public property CurrentFieldInfo    ,String
            method get
            proc
                using mCurrentField select
				
				
                (1),    mreturn ""
				
                (2),    mreturn ""
				
                (3),    mreturn ""
				
                (4),    mreturn ""
				(), mreturn ""  ;;if incorrect field value or not configured, ensure we clear the return value
                endusing
            endmethod
        endproperty

        ;;Expose properties to indicate whether fields are enabled
        
		

        public property Project_fileIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(1)
            endmethod
            method set
            proc
                SetFieldEnabledState(1, value)
                RaiseNonRPSPropertyChanged("Project_fileIsEnabled")
            endmethod
        endproperty
		

        public property Build_file_nameIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(2)
            endmethod
            method set
            proc
                SetFieldEnabledState(2, value)
                RaiseNonRPSPropertyChanged("Build_file_nameIsEnabled")
            endmethod
        endproperty
		

        public property Rps_main_fileIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(3)
            endmethod
            method set
            proc
                SetFieldEnabledState(3, value)
                RaiseNonRPSPropertyChanged("Rps_main_fileIsEnabled")
            endmethod
        endproperty
		

        public property Rps_text_fileIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(4)
            endmethod
            method set
            proc
                SetFieldEnabledState(4, value)
                RaiseNonRPSPropertyChanged("Rps_text_fileIsEnabled")
            endmethod
        endproperty

        ;;Expose properties to indicate whether fields are focussed
		private mProject_fileIsFocused	,Boolean
		public property Project_fileIsFocused, Boolean
			method get
			proc
				mreturn mProject_fileIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mProject_fileIsFocused = value
				RaiseNonRPSPropertyChanged("Project_fileIsFocused")
			endmethod
		endproperty
		private mBuild_file_nameIsFocused	,Boolean
		public property Build_file_nameIsFocused, Boolean
			method get
			proc
				mreturn mBuild_file_nameIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mBuild_file_nameIsFocused = value
				RaiseNonRPSPropertyChanged("Build_file_nameIsFocused")
			endmethod
		endproperty
		private mRps_main_fileIsFocused	,Boolean
		public property Rps_main_fileIsFocused, Boolean
			method get
			proc
				mreturn mRps_main_fileIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mRps_main_fileIsFocused = value
				RaiseNonRPSPropertyChanged("Rps_main_fileIsFocused")
			endmethod
		endproperty
		private mRps_text_fileIsFocused	,Boolean
		public property Rps_text_fileIsFocused, Boolean
			method get
			proc
				mreturn mRps_text_fileIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mRps_text_fileIsFocused = value
				RaiseNonRPSPropertyChanged("Rps_text_fileIsFocused")
			endmethod
		endproperty

		;;Expose properties to indicate whether fields are read only
		
		
			
		public property Project_fileIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(1)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(1, value)
				RaiseNonRPSPropertyChanged("Project_fileIsReadOnly")
			endmethod
		endproperty
		
			
		public property Build_file_nameIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(2)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(2, value)
				RaiseNonRPSPropertyChanged("Build_file_nameIsReadOnly")
			endmethod
		endproperty
		
			
		public property Rps_main_fileIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(3)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(3, value)
				RaiseNonRPSPropertyChanged("Rps_main_fileIsReadOnly")
			endmethod
		endproperty
		
			
		public property Rps_text_fileIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(4)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(4, value)
				RaiseNonRPSPropertyChanged("Rps_text_fileIsReadOnly")
			endmethod
		endproperty

		private doingClearFocus	,Boolean	,false

		private method clearFocus, void
			endparams
		proc
			if (!doingClearFocus)
			begin
				doingClearFocus = true
				if (Project_fileIsFocused) Project_fileIsFocused = false
				if (Build_file_nameIsFocused) Build_file_nameIsFocused = false
				if (Rps_main_fileIsFocused) Rps_main_fileIsFocused = false
				if (Rps_text_fileIsFocused) Rps_text_fileIsFocused = false
				doingClearFocus = false
			end
		endmethod


		public override method CompareObjects	,int
			in req obj1							,@Object
			in req obj2							,@Object
			in req colName						,String
			in req sortDir						,Symphony.Conductor.Framework.SynergySortOrder
			endparams

			.include 'orchestrator_project' repository  , record = 'data1', prefix = "m", end
			.include 'orchestrator_project' repository  , record = 'data2', prefix = "m", end

			record
				result		,int
			endrecord
		proc
			data1 = ((Orchestrator_project_Data)obj1).SynergyRecord
			data2 = ((Orchestrator_project_Data)obj2).SynergyRecord
			using colName select
			("Project_file"),
			begin
				if (data1.mproject_file == data2.mproject_file) then
					result = 0
				else
				begin
					if (data1.mproject_file > data2.mproject_file) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Build_file_name"),
			begin
				if (data1.mbuild_file_name == data2.mbuild_file_name) then
					result = 0
				else
				begin
					if (data1.mbuild_file_name > data2.mbuild_file_name) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Rps_main_file"),
			begin
				if (data1.mrps_main_file == data2.mrps_main_file) then
					result = 0
				else
				begin
					if (data1.mrps_main_file > data2.mrps_main_file) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Rps_text_file"),
			begin
				if (data1.mrps_text_file == data2.mrps_text_file) then
					result = 0
				else
				begin
					if (data1.mrps_text_file > data2.mrps_text_file) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			(),
				result = this.CustomCompareObjects(obj1, obj2, colName, sortDir)
			endusing

			mreturn result
		endmethod

	endclass
endnamespace

