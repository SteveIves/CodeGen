
import System
import System.Collections.Generic
import System.Text


import Symphony.Conductor.Model
import Symphony.Conductor.Types

import System.Collections.ObjectModel
import System.ComponentModel

import Symphony.Conductor.Content

import Symphony.Conductor.Commands
namespace Symphony.Orchestrator.Library.Model
	
	public partial class Codegen_command_Data
		
		public static DoNotSetDefaults	,boolean	,false

		protected override method extendedConstructor, void
			endparams
		proc
			;;create the required user tokens
			mUserTokens = new ObservableCollection<Codegen_user_token_Data>()

			addhandler(SynergyRecordChanged, doSynergyRecordChange)
			addhandler(ValidateData, doValidation)
			
			if (!DoNotSetDefaults)
			begin
				;;set some defaults
				codegen_command_main.mrps_main_file = Symphony.Orchestrator.Model.ApplicationStatic.RPSMainFile
				codegen_command_main.mrps_text_file = Symphony.Orchestrator.Model.ApplicationStatic.RPSTextFile
				codegen_command_main.mtemplate_name = Symphony.Orchestrator.Model.ApplicationStatic.TPLFolder
				
				;;always default to no token file assigned
				UserTokenEntryEnabled = false
				
				;;create the additional structure list and assign a blank one
				mAdditionalStructures = new AsyncObservableCollection<Codegen_structures_Data>()
				data str	,@Codegen_structures_Data	,new Codegen_structures_Data()
				addhandler(str.ValidateData, checkStructureChanges)
				str.InitData()
				AdditionalStructures.Add(str)				
				
			end

			;;if injected with data, go process!!
			if (System.IO.File.Exists(codegen_command_main.mtemplate_name))
			begin
				loadUserTokensFromTemplate()
			end
			
			;;create the additional structure list and assign a blank one
			mAdditionalStructures = new AsyncObservableCollection<Codegen_structures_Data>()
			data str	,@Codegen_structures_Data	,new Codegen_structures_Data()
			addhandler(str.ValidateData, checkStructureChanges)

			str.InitData()
			AdditionalStructures.Add(str)				
			
		endmethod
		
		private method doValidation, void
			inout req message			,@DataChangedMessage
			endparams
		proc
			using message.FieldName select
			("TEMPLATE_NAME"),
			begin
				;;check the file exists
				if (!System.IO.File.Exists(codegen_command_main.mtemplate_name)) then
				begin
					message.ValidationState = DataValidationState.Error
					message.FailReason = "Template file can not be found"
				end
				else
				begin
					;;we have a valid tempalte file - go sort out the user tokens
					codegen_command_main.mtemplate_file_name = System.IO.Path.GetFileName(codegen_command_main.mtemplate_name)
					loadUserTokensFromTemplate()
				end
			end
			("OUTPUT_FOLDER"),
			begin
				;;check the file exists
				if (!System.IO.Directory.Exists(codegen_command_main.moutput_folder))
				begin
					message.ValidationState = DataValidationState.Warning
					message.FailReason = "Output folder will be created!"
				end
			end
			("RPS_MAIN_FILE"),
			begin
				;;check the file exists
				if (!System.IO.File.Exists(codegen_command_main.mrps_main_file)) then
				begin
					message.ValidationState = DataValidationState.Error
					message.FailReason = "Repository main file can not be found"
				end
				else
				begin
					codegen_command_main.mrps_main_file_name = System.IO.Path.GetFileName(codegen_command_main.mrps_main_file)
				end
				RaisePropertyChanged("RepositoryStructures")
				
			end
			("RPS_TEXT_FILE"),
			begin
				;;check the file exists
				if (!System.IO.File.Exists(codegen_command_main.mrps_text_file)) then
				begin
					message.ValidationState = DataValidationState.Error
					message.FailReason = "Repository text file can not be found"
				end
				else
				begin
					codegen_command_main.mrps_main_file_name = System.IO.Path.GetFileName(codegen_command_main.mrps_main_file)
				end
				RaisePropertyChanged("RepositoryStructures")
			end
			("USER_TOKENS_ENTERED"),
			begin
				if (UserTokenEntryEnabled == false) then
				begin
					message.ValidationState = DataValidationState.OK
				end
				else
				begin
					data item	,@Codegen_user_token_Data
					data required	,boolean	,false
					foreach item in mUserTokens
					begin
						if (item.Token_type == 1 && item.Token_value .eqs. "   ")
							required = true
					end
					if (required == true) then
					begin
						message.ValidationState = DataValidationState.Error
						message.FailReason = "User tokens required."
					end
					else
					begin
						message.ValidationState = DataValidationState.OK
					end
				end
				
			end
			("NAMESPACE"),
			begin
				if (Namespace .eqs. "  " && mNamespaceRequired == true) then
				begin
					message.ValidationState = DataValidationState.Error
					message.FailReason = "Template requires the Namespace value specifying."
				end
				else	
				begin
					message.ValidationState = DataValidationState.OK
				end
			end
			("PREFIX"),
			begin
				if (Prefix .eqs. "  " && mPrefixRequired == true) then
				begin
					message.ValidationState = DataValidationState.Error
					message.FailReason = "Template requires the prefix specifying."
				end
				else	
				begin
					message.ValidationState = DataValidationState.OK
				end
			end
			("WSC_FILE"),
			begin
				if (codegen_command_main.mwsc_file != "                              ") then
				begin
					;;check the file exists
					if (!System.IO.File.Exists(codegen_command_main.mwsc_file)) then
					begin
						message.ValidationState = DataValidationState.Error
						message.FailReason = "Window script file can not be found"
						Use_wsc_fields_onlyIsEnabled = false
						Input_window_nameIsEnabled = false
					end
					else
					begin
						message.ValidationState = DataValidationState.OK
						Use_wsc_fields_onlyIsEnabled = true
						Input_window_nameIsEnabled = true
					end
				end
				else
				begin
					Use_wsc_fields_onlyIsEnabled = false
					Input_window_nameIsEnabled = false
					message.ValidationState = DataValidationState.OK
				end
			end
			("WSC_SELECTION_FILE"),
			begin
				if (codegen_command_main.mwsc_selection_file != "                              ") then
				begin
					;;check the file exists
					if (!System.IO.File.Exists(codegen_command_main.mwsc_selection_file)) then
					begin
						message.ValidationState = DataValidationState.Error
						message.FailReason = "Window script file can not be found"
					end
					else
					begin
						message.ValidationState = DataValidationState.OK
					end
				end
				else
				begin
					message.ValidationState = DataValidationState.OK
				end
			end
			("USER_TOKEN_FILE"),
			begin
				
				if (codegen_command_main.muser_token_file != "                              ") then
				begin
					;;check the file exists
					if (!System.IO.File.Exists(codegen_command_main.muser_token_file)) then
					begin
						message.ValidationState = DataValidationState.Error
						message.FailReason = "User token file can not be found"
						UserTokenEntryEnabled = true
					end
					else
					begin
						message.ValidationState = DataValidationState.OK
						UserTokenEntryEnabled = false
					end
				end
				else
				begin
					message.ValidationState = DataValidationState.OK
					UserTokenEntryEnabled = true
				end
			end
			endusing
			RaisePropertyChanged("NiceName")
		endmethod
		
		private method doSynergyRecordChange, void
			endparams
		proc
			
			loadAdditionalStructures()
			loadUserTokensFromTemplate()
			
		endmethod
		
		public property NiceName, String
			method get
			proc
				if (codegen_command_main.mtemplate_file_name .eqs. "   " || codegen_command_main.mstructure_name .eqs. "   ") then
				begin
					mreturn "<new command>"
				end
				else
				begin
					mreturn %atrim(codegen_command_main.mstructure_name) + "  <" + %atrim(codegen_command_main.mtemplate_file_name) + ">"
				end
				
			endmethod
		endproperty
		
		private mUserTokens	,@ObservableCollection<Codegen_user_token_Data>
		
		public property UserTokens, @ObservableCollection<Codegen_user_token_Data>
			method get
			proc
				mreturn mUserTokens
			endmethod
		endproperty
		
		private mUserToken	,@Codegen_user_token_Data
		
		public property UserToken, @Codegen_user_token_Data
			method get
			proc
				mreturn mUserToken
			endmethod
			method set
			proc
				mUserToken = value
				RaisePropertyChanged("UserToken")
			endmethod
		endproperty
		
		
		private mUserTokensIndex	,int
		
		public property UserTokensIndex, int
			method get
			proc
				mreturn mUserTokensIndex
			endmethod
			method set
			proc
				mUserTokensIndex = value
				RaisePropertyChanged("UserTokensIndex")
			endmethod
		endproperty
		
.region "template processing methods"
		
		private mNamespaceRequired	,boolean	,false
		private mPrefixRequired		,boolean	,false
		
		private method loadUserTokensFromTemplate, void
			endparams
			
		proc
			
			if (System.IO.File.Exists(codegen_command_main.mtemplate_name) == true)
			begin
				try
				begin
					data inputChan	,i4	,0
					data codeLine	,a2500		;big enough??
					data stPos		,i4
					data edPos		,i4
					open(inputChan, i, codegen_command_main.mtemplate_name)
					mUserTokens.Clear()
					
					mNamespaceRequired = false
					mPrefixRequired = false
					
					repeat
					begin
						data token	,@Codegen_user_token_Data
						reads(inputChan, codeLine	,eofTemplate)
						if (stPos = %instr(1, codeLine, "<REQUIRES_USERTOKEN>"))
						begin
							token = new Codegen_user_token_Data()
							edPos = %instr(1, codeLine, "</REQUIRES_USERTOKEN>")
							token.Token_name = codeLine(stPos + 20 , edPos - 1)
							
							;;now see if we have any user entered info
							data i	,i4
							for i from 1 thru 50 by 1
							begin
								if (codegen_command_main.muser_tokens[i].mtoken_name .eqs. "   ")
									exitloop
								if (codegen_command_main.muser_tokens[i].mtoken_name .eqs. token.Token_name)
								begin
									token.Token_value = codegen_command_main.muser_tokens[i].mtoken_value
								end
							end
							
							token.Token_type = 1
							addhandler(token.ValidateData, doTokenValidation)
							mUserTokens.Add(token)
						end
						if (stPos = %instr(1, codeLine, "<OPTIONAL_USERTOKEN>"))
						begin
							token = new Codegen_user_token_Data()
							edPos = %instr(1, codeLine, "=")
							token.Token_name = codeLine(stPos + 20 , edPos - 1)
							
							;;now see if we have any user entered info
							data i	,i4
							for i from 1 thru 50 by 1
							begin
								if (codegen_command_main.muser_tokens[i].mtoken_name .eqs. "   ")
									exitloop
								if (codegen_command_main.muser_tokens[i].mtoken_name .eqs. token.Token_name)
								begin
									token.Token_value = codegen_command_main.muser_tokens[i].mtoken_value
								end
							end
							
							token.Token_type = 0
							addhandler(token.ValidateData, doTokenValidation)
							mUserTokens.Add(token)
						end
						;;check for a namespace token
						if (stPos = %instr(1, codeLine, "<NAMESPACE>"))
						begin
							mNamespaceRequired = true
						end
						if (stPos = %instr(1, codeLine, "<REQUIRES_OPTION>"))
						begin
							mPrefixRequired = true
						end
						
					end
				eofTemplate,
					close(inputChan)
				end
				catch (e, @Exception)
				begin
					;;if we can't open the file, no token processing requried
					nop
				end
				endtry
			end
			RaisePropertyChanged("User_tokens_entered")
		endmethod		
		
.endregion
		
.region "methods to handle when user token values change!"
		
		private method doTokenValidation	,void
			inout req message							,@DataChangedMessage
			endparams
		proc
			data i	,i4	,1
			data item	,@Codegen_user_token_Data
			foreach item in mUserTokens
			begin
				codegen_command_main.muser_tokens[i].mtoken_name = item.Token_name
				codegen_command_main.muser_tokens[i].mtoken_value = item.Token_value
				incr i
			end
			User_tokens_entered = ! User_tokens_entered
		endmethod
		
.endregion
		
.region "Dynamic collections for field selections"
		
		private mRepositoryStructures	,@ObservableCollection<SelectionItem>
		
		public property RepositoryStructures, @ObservableCollection<SelectionItem>
			method get
				
				.include 'RPSLIB:ddinfo.def'
				
				record
					count	,d4
					ii		,i4
					memPnt	,i4
					memHdl	,i4
					rpsname	,a30
				endrecord
				
				structure strArray
					name	,a30
				endstructure
				
			proc
				if (mRepositoryStructures == ^null)
				begin
					mRepositoryStructures = new ObservableCollection<SelectionItem>()
				end
				
				mRepositoryStructures.Clear()
				
				;;try to load things
				
				if (System.IO.File.Exists(codegen_command_main.mrps_main_file) && System.IO.File.Exists(codegen_command_main.mrps_text_file)) then
				begin
					try
					begin
						dd_init(dcs, codegen_command_main.mrps_main_file, codegen_command_main.mrps_text_file)
						
						dd_name(dcs, DDN_STRUCT, DDN_STRUCT, count)
						memPnt = mem_proc(DM_ALLOC, ii = ^size(strArray) * count)
						
						dd_name(dcs, DDN_LIST, DDN_STRUCT, count, ^m(strArray, memPnt))
						
						for ii from 1 thru count by 1
						begin
							rpsname = ^m(strArray[ii].name, memPnt)
							mRepositoryStructures.Add(new SelectionItem(%atrim(rpsname), %atrim(rpsname)))
						end
					end
					catch (e, @Exception)
					begin
						mRepositoryStructures.Add(new SelectionItem("No repository files selected", "No repository files selected"))
					end
					endtry
				end
				else
				begin
					mRepositoryStructures.Add(new SelectionItem("No repository files selected", "No repository files selected"))
				end
				
				mreturn mRepositoryStructures
			endmethod
		endproperty
		
.endregion
		
.region "Additional structure information"
		
		private mAdditionalStructures	,@AsyncObservableCollection<Codegen_structures_Data>
		
		public property AdditionalStructures, @ObservableCollection<Codegen_structures_Data>
			method get
			proc
				mreturn mAdditionalStructures
			endmethod
		endproperty
		
		private mAdditionalStructure	,@Codegen_structures_Data
		
		public property AdditionalStructure, @Codegen_structures_Data
			method get
			proc
				mreturn mAdditionalStructure
			endmethod
			method set
			proc
				mAdditionalStructure = value
				RaisePropertyChanged("AdditionalStructure")
			endmethod
		endproperty
		
		
		private mAdditionalStructuresIndex	,int
		
		public property AdditionalStructuresIndex, int
			method get
			proc
				mreturn mAdditionalStructuresIndex
			endmethod
			method set
			proc
				mAdditionalStructuresIndex = value
				RaisePropertyChanged("AdditionalStructuresIndex")
			endmethod
		endproperty
		
		private method loadAdditionalStructures, void
			endparams
		proc
			AdditionalStructures.Clear()
			data ii	,i4
			for ii from 1 thru 20
			begin
				if (codegen_command_main.madditional_structures[ii].mstructure_name != "    ")
				begin
					;;add to the list
					data str	,@Codegen_structures_Data	,new Codegen_structures_Data()
					str.Structure_name = codegen_command_main.madditional_structures[ii].mstructure_name
					str.Alias_name = codegen_command_main.madditional_structures[ii].malias_name
					addhandler(str.ValidateData, checkStructureChanges)
					AdditionalStructures.Add(str)
				end
			end

			;;always add a "new" emprt one
			data str	,@Codegen_structures_Data	,new Codegen_structures_Data()
			addhandler(str.ValidateData, checkStructureChanges)
			str.InitData()
			AdditionalStructures.Add(str)

		endmethod

		private method checkStructureChanges, void
			inout req message			,@DataChangedMessage
			endparams
		proc
			;;first clear out what we have
			data ii	,i4
			for ii from 1 thru 20
			begin
				clear codegen_command_main.madditional_structures[ii]
			end
			
			sortOutAdditionalList()

		endmethod

		private method sortOutAdditionalList, void
			endparams
		proc
			;;additional structures have changed - let's see if we need a blank one
			data ii	,i4

			for ii from 1 thru 20
			begin
				clear codegen_command_main.madditional_structures[ii]
			end

			data gotBlank	,boolean	,false

			clear ii

			data item	,@Codegen_structures_Data

			foreach item in AdditionalStructures
			begin
				if (!^size(item.Structure_name)) then	
					gotBlank = true
				else
				begin
					incr ii
					codegen_command_main.madditional_structures[ii].mstructure_name = item.Structure_name
					codegen_command_main.madditional_structures[ii].malias_name = item.Alias_name
				end
			end
			
			if (!gotBlank)
			begin
				data str	,@Codegen_structures_Data	,new Codegen_structures_Data()
				addhandler(str.ValidateData, checkStructureChanges)
				str.InitData()
				AdditionalStructures.Add(str)				
			end
			
		endmethod

		private mDeleteStructureCommand	,@GenericCommand

		public property DeleteStructureCommand, @GenericCommand
			method get
			proc
				if (mDeleteStructureCommand == ^null)
				begin
					lambda doCommand(sender, param)
					begin
						if (AdditionalStructuresIndex != -1)
						begin
							;;delete the current item
							AdditionalStructures.RemoveAt(AdditionalStructuresIndex)
							sortOutAdditionalList()
						end
					end
					mDeleteStructureCommand = new GenericCommand("DELSTR")
					addhandler(mDeleteStructureCommand.CommandExecuted, doCommand)
				end
				mreturn mDeleteStructureCommand
			endmethod
		endproperty
		

.endregion
		
.region "simple properties"
		
		private mUserTokenEntryEnabled	,boolean

		public property UserTokenEntryEnabled, boolean
			method get
			proc
				mreturn mUserTokenEntryEnabled
			endmethod
			method set
			proc
				mUserTokenEntryEnabled = value
				RaisePropertyChanged("UserTokenEntryEnabled")
			endmethod
		endproperty
		

.endregion

	endclass
	
endnamespace
