;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author:	Richard C. Morris, Synergex Professional Services Group
;;
;; Template Name:	Symphony Framework : SYMPHONY_ASXML.tpl
;;****************************************************************************

import System
import System.Collections.Generic
import System.Text
import System.Xml

namespace Symphony.Orchestrator.Library.Model
	
	public class Orchestrator_defaults_AsXML 
		
		private mfileName		,String
		private mXMLDoc			,@XmlDocument
		private mDeclaration	,@XmlDeclaration
		private mRootNode		,@XmlElement
		
		public method Orchestrator_defaults_AsXML
			in req fileName					,String
			endparams
		proc
			mfileName = fileName
			
		endmethod
		
		public method WriteCollectionToXML	,void
			in req dataCollection			,@IEnumerable<Orchestrator_defaults_Data>
			endparams
		proc
			cleanUpAndOpenNew()
			
			data item		,@Orchestrator_defaults_Data
			data mElement	,@XmlElement
			
			foreach item in dataCollection
			begin
				mElement = mXMLDoc.CreateElement("ORCHESTRATOR_DEFAULTS")
				mXMLDoc.DocumentElement.PrependChild(mElement)
				writeObject(mElement, item)
			end

			closeWriter()
			
		endmethod
		
		
		public method WriteToXML	,void
			in req dataObject		,@Orchestrator_defaults_Data
			endparams
		proc
			cleanUpAndOpenNew()			
			
			data mElement	,@XmlElement
			mElement = mXMLDoc.CreateElement("ORCHESTRATOR_DEFAULTS")
			mXMLDoc.DocumentElement.PrependChild(mElement)
			writeObject(mElement, dataObject)

			closeWriter()
			
		endmethod
		
		public method LoadFromXML, @List<Orchestrator_defaults_Data>
			endparams
		proc
			data objectItem	,@XmlNode
			data fieldItem	,@XmlNode
			data result	,@List<Orchestrator_defaults_Data>	,new List<Orchestrator_defaults_Data>()
			
			openExistingXMLFile()
			
			if (mXMLDoc == ^null)
				mreturn result
			
			foreach objectItem in mXMLDoc.DocumentElement.ChildNodes
			begin
				data dataObject	,@Orchestrator_defaults_Data	,new Orchestrator_defaults_Data()
				dataObject.InitialValidateData()
				foreach fieldItem in objectItem.ChildNodes
				begin
					using fieldItem.Name select
					("SynergyRecord"),
					begin
						dataObject.SynergyRecord = (a)fieldItem.InnerText
					end
					("Rps_main_file"),
					begin
						dataObject.Rps_main_file = (a)fieldItem.InnerText
					end
					("Rps_text_file"),
					begin
						dataObject.Rps_text_file = (a)fieldItem.InnerText
					end
					("Template_folder"),
					begin
						dataObject.Template_folder = (a)fieldItem.InnerText
					end
					("Output_folder"),
					begin
						dataObject.Output_folder = (a)fieldItem.InnerText
					end
					("Add_folder_to_namespace"),
					begin
						dataObject.Add_folder_to_namespace = ^d((a)fieldItem.InnerText)
					end
					("Replace_file"),
					begin
						dataObject.Replace_file = ^d((a)fieldItem.InnerText)
					end
					("Namespace"),
					begin
						dataObject.Namespace = (a)fieldItem.InnerText
					end
					("Character_width"),
					begin
						dataObject.Character_width = ^d((a)fieldItem.InnerText)
					end
					("Prefix"),
					begin
						dataObject.Prefix = (a)fieldItem.InnerText
					end
					("Show_verbose"),
					begin
						dataObject.Show_verbose = ^d((a)fieldItem.InnerText)
					end
					("Use_command_line"),
					begin
						dataObject.Use_command_line = ^d((a)fieldItem.InnerText)
					end
					("Create_command_script"),
					begin
						dataObject.Create_command_script = ^d((a)fieldItem.InnerText)
					end
					("Command_script_name"),
					begin
						dataObject.Command_script_name = (a)fieldItem.InnerText
					end
					("Data_mapping_filename"),
					begin
						dataObject.Data_mapping_filename = (a)fieldItem.InnerText
					end
					("Show_column_display"),
					begin
						dataObject.Show_column_display = ^d((a)fieldItem.InnerText)
					end
					("Project_relative_path_root"),
					begin
						dataObject.Project_relative_path_root = (a)fieldItem.InnerText
					end
					("Use_project_folder_as_root"),
					begin
						dataObject.Use_project_folder_as_root = ^d((a)fieldItem.InnerText)
					end
					("Custom_data_mapping"),
					begin
						dataObject.Custom_data_mapping = (a)fieldItem.InnerText
					end
					endusing
				end
				result.Add(dataObject)
			end
			
			mreturn result
			
		endmethod
		
		.region "private methods"
		
		private method cleanUpAndOpenNew, void
			endparams
		proc
			if (System.IO.File.Exists(mfileName) == true)
			begin
				System.IO.File.Delete(mfileName)
			end
			
			mXMLDoc = new XmlDocument()
			
			mDeclaration = mXMLDoc.CreateXmlDeclaration("1.0", "utf-8", ^null)

			mRootNode = mXMLDoc.CreateElement("ORCHESTRATOR_DEFAULTSCollection")

			mXMLDoc.InsertBefore(mDeclaration, mXMLDoc.DocumentElement)

			mXMLDoc.AppendChild(mRootNode)
			
		endmethod
		
		private method writeObject, void
			in req element			,@XmlElement
			in req dataObject		,@Orchestrator_defaults_Data
			endparams
		proc
			;;write each field/value pair out
			data fieldElement	,@XmlElement
			data fieldValue		,@XmlText

			;;lets sore the full synergy record stuff first!!
			fieldElement = mXMLDoc.CreateElement("SynergyRecord")
			fieldValue = mXMLDoc.CreateTextNode(dataObject.SynergyRecord)
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)

			fieldElement = mXMLDoc.CreateElement("Rps_main_file")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Rps_main_fileIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Rps_main_fileIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(dataObject.Rps_main_file)
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Rps_text_file")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Rps_text_fileIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Rps_text_fileIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(dataObject.Rps_text_file)
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Template_folder")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Template_folderIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Template_folderIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(dataObject.Template_folder)
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Output_folder")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Output_folderIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Output_folderIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(dataObject.Output_folder)
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Add_folder_to_namespace")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Add_folder_to_namespaceIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Add_folder_to_namespaceIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(%string(dataObject.Add_folder_to_namespace))
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Replace_file")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Replace_fileIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Replace_fileIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(%string(dataObject.Replace_file))
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Namespace")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.NamespaceIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.NamespaceIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(dataObject.Namespace)
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Character_width")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Character_widthIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Character_widthIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(%string(dataObject.Character_width))
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Prefix")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.PrefixIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.PrefixIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(dataObject.Prefix)
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Show_verbose")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Show_verboseIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Show_verboseIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(%string(dataObject.Show_verbose))
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Use_command_line")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Use_command_lineIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Use_command_lineIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(%string(dataObject.Use_command_line))
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Create_command_script")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Create_command_scriptIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Create_command_scriptIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(%string(dataObject.Create_command_script))
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Command_script_name")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Command_script_nameIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Command_script_nameIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(dataObject.Command_script_name)
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Data_mapping_filename")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Data_mapping_filenameIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Data_mapping_filenameIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(dataObject.Data_mapping_filename)
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Show_column_display")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Show_column_displayIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Show_column_displayIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(%string(dataObject.Show_column_display))
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Project_relative_path_root")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Project_relative_path_rootIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Project_relative_path_rootIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(dataObject.Project_relative_path_root)
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Use_project_folder_as_root")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Use_project_folder_as_rootIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Use_project_folder_as_rootIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(%string(dataObject.Use_project_folder_as_root))
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			fieldElement = mXMLDoc.CreateElement("Custom_data_mapping")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.Custom_data_mappingIsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.Custom_data_mappingIsReadOnly.ToString())
			fieldValue = mXMLDoc.CreateTextNode(dataObject.Custom_data_mapping)
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			mreturn
		endmethod
		
		private method closeWriter, void
			endparams
		proc
			mXMLDoc.Save(mfileName)
		endmethod
		
		private method openExistingXMLFile, void
			endparams
		proc
			if (System.IO.File.Exists(mfileName) == false)
			begin
				mreturn
			end
			
			mXMLDoc = new XmlDocument()
			
			mXMLDoc.Load(mfileName)
			

		endmethod

		
		.endregion
		
	endclass
	
endnamespace

