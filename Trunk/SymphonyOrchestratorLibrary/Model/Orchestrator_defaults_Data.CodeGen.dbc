;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author: Richard C. Morris, Synergex Professional Services Group
;;
;; Template Name:   Symphony Framework : SYMPHONY_DATANOEXCEL.tpl
;;
;;***************************************************************************
import System
import System.Collections.Generic
import System.Text

import Symphony.Conductor.Model

namespace Symphony.Orchestrator.Library.Model

    ;;define a structure that we can use around the applicaiton

    .include 'orchestrator_defaults' repository  , structure = 'STROrchestrator_defaults', prefix = "str_", end

    public partial class Orchestrator_defaults_Data extends Symphony.Conductor.Model.DataObjectBase

		public const RPSStructureName	,String	,"ORCHESTRATOR_DEFAULTS"

        ;;make the record availalbe and a copy
        .include 'orchestrator_defaults' repository  , private record = 'orchestrator_defaults_main', prefix = "m", end
        .include 'orchestrator_defaults' repository  , private record = 'orchestrator_defaults_store', prefix = "m", end

		private mDoneSynergyRecordValue	,boolean	,true 
		
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Orchestrator_defaults_Data
            endparams
            parent()
        proc
			configureFieldInfo()
			setFieldNames()
			InitData()
			mDoneSynergyRecordValue = false
			extendedConstructor()
        endmethod

        ;;; <summary>
        ;;; Alternate constructor, accepts the inital value to assign to the object
        ;;; </summary>
        ;;; <param name="results">Provide the loaded Excel results object</param>
        public method Orchestrator_defaults_Data
            in req synRec       ,String
            endparams
            parent()
        proc
			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			SynergyRecord = synRec
			OriginalSynergyRecord = synRec
			extendedConstructor()
        endmethod
		
		;;; <summary>
		;;; Alternate constructor, accepts the inital value to assign to the object.
		;;; Also accepts the boolean value to assign to the ObjectRaisesPropertyChanged property.
		;;; </summary>
		;;; <param name="results">Provide the loaded Excel results object.</param>
		;;; <param name="notifyUI">values passed onto the ObjectRaisesPropertyChanged property.</param>
		public method Orchestrator_defaults_Data
			in req synRec       ,String
			in req notifyUI		,DataObjectNotificationState
			endparams
			parent()
		proc
			ObjectRaisesPropertyChanged = notifyUI
			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			SynergyRecord = synRec
			OriginalSynergyRecord = synRec
			extendedConstructor()
		endmethod

		
        ;;Set up the arrays of field details
        private method configureFieldInfo	,void
			endparams
		proc
			
			
			setFieldInfo("RPS_MAIN_FILE", "Rps_main_file",  "", "",
			&	"", "RPS_MAIN_FILE", 1, 255,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

			
			setFieldInfo("RPS_TEXT_FILE", "Rps_text_file",  "", "",
			&	"", "RPS_TEXT_FILE", 256, 255,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

			
			setFieldInfo("TEMPLATE_FOLDER", "Template_folder",  "", "",
			&	"", "TEMPLATE_FOLDER", 511, 255,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

			
			setFieldInfo("OUTPUT_FOLDER", "Output_folder",  "", "",
			&	"", "OUTPUT_FOLDER", 766, 255,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

			
			setFieldInfo("ADD_FOLDER_TO_NAMESPACE", "Add_folder_to_namespace",  "", "",
			&	"", "ADD_FOLDER_TO_NAMESPACE", 1021, 1,
			&	0, 0, 0, 0,
			&	"DECIMAL", false, 0, 1)

			
			setFieldInfo("REPLACE_FILE", "Replace_file",  "", "",
			&	"", "REPLACE_FILE", 1022, 1,
			&	0, 0, 0, 0,
			&	"DECIMAL", false, 0, 1)

			
			setFieldInfo("NAMESPACE", "Namespace",  "", "",
			&	"", "NAMESPACE", 1023, 100,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

			
			setFieldInfo("CHARACTER_WIDTH", "Character_width",  "", "",
			&	"", "CHARACTER_WIDTH", 1123, 3,
			&	0, 0, 0, 0,
			&	"DECIMAL", false, 0, 999)

			
			setFieldInfo("PREFIX", "Prefix",  "", "",
			&	"", "PREFIX", 1126, 30,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

			
			setFieldInfo("SHOW_VERBOSE", "Show_verbose",  "", "",
			&	"", "SHOW_VERBOSE", 1156, 1,
			&	0, 0, 0, 0,
			&	"DECIMAL", false, 0, 1)

			
			setFieldInfo("USE_COMMAND_LINE", "Use_command_line",  "", "",
			&	"", "USE_COMMAND_LINE", 1157, 1,
			&	0, 0, 0, 0,
			&	"DECIMAL", false, 0, 1)

			
			setFieldInfo("CREATE_COMMAND_SCRIPT", "Create_command_script",  "", "",
			&	"", "CREATE_COMMAND_SCRIPT", 1158, 1,
			&	0, 0, 0, 0,
			&	"DECIMAL", false, 0, 1)

			
			setFieldInfo("COMMAND_SCRIPT_NAME", "Command_script_name",  "", "",
			&	"", "COMMAND_SCRIPT_NAME", 1159, 255,
			&	0, 0, 0, 0,
			&	"ALPHA", true, 0, 0)

			
			setFieldInfo("DATA_MAPPING_FILENAME", "Data_mapping_filename",  "", "",
			&	"", "DATA_MAPPING_FILENAME", 1414, 255,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

			
			setFieldInfo("SHOW_COLUMN_DISPLAY", "Show_column_display",  "", "",
			&	"", "SHOW_COLUMN_DISPLAY", 1669, 1,
			&	0, 0, 0, 0,
			&	"DECIMAL", false, 0, 1)

			
			setFieldInfo("PROJECT_RELATIVE_PATH_ROOT", "Project_relative_path_root",  "", "",
			&	"", "PROJECT_RELATIVE_PATH_ROOT", 1670, 255,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

			
			setFieldInfo("USE_PROJECT_FOLDER_AS_ROOT", "Use_project_folder_as_root",  "", "",
			&	"", "USE_PROJECT_FOLDER_AS_ROOT", 1925, 1,
			&	0, 0, 0, 0,
			&	"DECIMAL", false, 0, 1)

			
			setFieldInfo("CUSTOM_DATA_MAPPING", "Custom_data_mapping",  "", "",
			&	"", "CUSTOM_DATA_MAPPING", 1926, 255,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

		endmethod

        ;;Set up the arrays of field names and headings
        private method setFieldNames	,void
			endparams
		proc
			mFieldNames.Add("Rps_main_file")
			mFieldHeadings.Add("RPS Main file")
			mFieldNames.Add("Rps_text_file")
			mFieldHeadings.Add("RPS Text file")
			mFieldNames.Add("Template_folder")
			mFieldHeadings.Add("Template folder")
			mFieldNames.Add("Output_folder")
			mFieldHeadings.Add("Output folder")
			mFieldNames.Add("Add_folder_to_namespace")
			mFieldHeadings.Add("Add folder name to namespace?")
			mFieldNames.Add("Replace_file")
			mFieldHeadings.Add("Replace exiting file?")
			mFieldNames.Add("Namespace")
			mFieldHeadings.Add("Namespace")
			mFieldNames.Add("Character_width")
			mFieldHeadings.Add("Character width")
			mFieldNames.Add("Prefix")
			mFieldHeadings.Add("Field prefix value")
			mFieldNames.Add("Show_verbose")
			mFieldHeadings.Add("Show verbose CodeGen output")
			mFieldNames.Add("Use_command_line")
			mFieldHeadings.Add("Use command line interface?")
			mFieldNames.Add("Create_command_script")
			mFieldHeadings.Add("Create CodeGen input script?")
			mFieldNames.Add("Command_script_name")
			mFieldHeadings.Add("Command script name")
			mFieldNames.Add("Data_mapping_filename")
			mFieldHeadings.Add("Data mapping filename")
			mFieldNames.Add("Show_column_display")
			mFieldHeadings.Add("Show column display")
			mFieldNames.Add("Project_relative_path_root")
			mFieldHeadings.Add("Root folder path")
			mFieldNames.Add("Use_project_folder_as_root")
			mFieldHeadings.Add("Use project folder?")
			mFieldNames.Add("Custom_data_mapping")
			mFieldHeadings.Add("Custom mapping")
		endmethod

        ;;Expose fields as properties for data binding
        
        ;;mRps_main_file
		public property Rps_main_file, a255
			method get
			proc
				mreturn %atrim(Orchestrator_defaults_main.mRps_main_file)
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mRps_main_file = value
				if (Orchestrator_defaults_main.mRps_main_file != Orchestrator_defaults_store.mRps_main_file)
				begin
															ValidateEnteredData(1)
					RaisePropertyChanged("Rps_main_file")
                    Orchestrator_defaults_store.mRps_main_file = Orchestrator_defaults_main.mRps_main_file
				end
			endmethod
		endproperty
        ;;mRps_text_file
		public property Rps_text_file, a255
			method get
			proc
				mreturn %atrim(Orchestrator_defaults_main.mRps_text_file)
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mRps_text_file = value
				if (Orchestrator_defaults_main.mRps_text_file != Orchestrator_defaults_store.mRps_text_file)
				begin
															ValidateEnteredData(2)
					RaisePropertyChanged("Rps_text_file")
                    Orchestrator_defaults_store.mRps_text_file = Orchestrator_defaults_main.mRps_text_file
				end
			endmethod
		endproperty
        ;;mTemplate_folder
		public property Template_folder, a255
			method get
			proc
				mreturn %atrim(Orchestrator_defaults_main.mTemplate_folder)
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mTemplate_folder = value
				if (Orchestrator_defaults_main.mTemplate_folder != Orchestrator_defaults_store.mTemplate_folder)
				begin
															ValidateEnteredData(3)
					RaisePropertyChanged("Template_folder")
                    Orchestrator_defaults_store.mTemplate_folder = Orchestrator_defaults_main.mTemplate_folder
				end
			endmethod
		endproperty
        ;;mOutput_folder
		public property Output_folder, a255
			method get
			proc
				mreturn %atrim(Orchestrator_defaults_main.mOutput_folder)
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mOutput_folder = value
				if (Orchestrator_defaults_main.mOutput_folder != Orchestrator_defaults_store.mOutput_folder)
				begin
															ValidateEnteredData(4)
					RaisePropertyChanged("Output_folder")
                    Orchestrator_defaults_store.mOutput_folder = Orchestrator_defaults_main.mOutput_folder
				end
			endmethod
		endproperty
        ;;mAdd_folder_to_namespace
		public property Add_folder_to_namespace, d1
			method get
			proc
                mreturn Orchestrator_defaults_main.mAdd_folder_to_namespace
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mAdd_folder_to_namespace = value
				if (Orchestrator_defaults_main.mAdd_folder_to_namespace != Orchestrator_defaults_store.mAdd_folder_to_namespace)
				begin
															ValidateEnteredData(5)
					RaisePropertyChanged("Add_folder_to_namespace")
                    Orchestrator_defaults_store.mAdd_folder_to_namespace = Orchestrator_defaults_main.mAdd_folder_to_namespace
				end
			endmethod
		endproperty
        ;;mReplace_file
		public property Replace_file, d1
			method get
			proc
                mreturn Orchestrator_defaults_main.mReplace_file
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mReplace_file = value
				if (Orchestrator_defaults_main.mReplace_file != Orchestrator_defaults_store.mReplace_file)
				begin
															ValidateEnteredData(6)
					RaisePropertyChanged("Replace_file")
                    Orchestrator_defaults_store.mReplace_file = Orchestrator_defaults_main.mReplace_file
				end
			endmethod
		endproperty
        ;;mNamespace
		public property Namespace, a100
			method get
			proc
				mreturn %atrim(Orchestrator_defaults_main.mNamespace)
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mNamespace = value
				if (Orchestrator_defaults_main.mNamespace != Orchestrator_defaults_store.mNamespace)
				begin
															ValidateEnteredData(7)
					RaisePropertyChanged("Namespace")
                    Orchestrator_defaults_store.mNamespace = Orchestrator_defaults_main.mNamespace
				end
			endmethod
		endproperty
        ;;mCharacter_width
		public property Character_width, d3
			method get
			proc
                mreturn Orchestrator_defaults_main.mCharacter_width
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mCharacter_width = value
				if (Orchestrator_defaults_main.mCharacter_width != Orchestrator_defaults_store.mCharacter_width)
				begin
															ValidateEnteredData(8)
					RaisePropertyChanged("Character_width")
                    Orchestrator_defaults_store.mCharacter_width = Orchestrator_defaults_main.mCharacter_width
				end
			endmethod
		endproperty
        ;;mPrefix
		public property Prefix, a30
			method get
			proc
				mreturn %atrim(Orchestrator_defaults_main.mPrefix)
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mPrefix = value
				if (Orchestrator_defaults_main.mPrefix != Orchestrator_defaults_store.mPrefix)
				begin
															ValidateEnteredData(9)
					RaisePropertyChanged("Prefix")
                    Orchestrator_defaults_store.mPrefix = Orchestrator_defaults_main.mPrefix
				end
			endmethod
		endproperty
        ;;mShow_verbose
		public property Show_verbose, d1
			method get
			proc
                mreturn Orchestrator_defaults_main.mShow_verbose
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mShow_verbose = value
				if (Orchestrator_defaults_main.mShow_verbose != Orchestrator_defaults_store.mShow_verbose)
				begin
															ValidateEnteredData(10)
					RaisePropertyChanged("Show_verbose")
                    Orchestrator_defaults_store.mShow_verbose = Orchestrator_defaults_main.mShow_verbose
				end
			endmethod
		endproperty
        ;;mUse_command_line
		public property Use_command_line, d1
			method get
			proc
                mreturn Orchestrator_defaults_main.mUse_command_line
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mUse_command_line = value
				if (Orchestrator_defaults_main.mUse_command_line != Orchestrator_defaults_store.mUse_command_line)
				begin
															ValidateEnteredData(11)
					RaisePropertyChanged("Use_command_line")
                    Orchestrator_defaults_store.mUse_command_line = Orchestrator_defaults_main.mUse_command_line
				end
			endmethod
		endproperty
        ;;mCreate_command_script
		public property Create_command_script, d1
			method get
			proc
                mreturn Orchestrator_defaults_main.mCreate_command_script
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mCreate_command_script = value
				if (Orchestrator_defaults_main.mCreate_command_script != Orchestrator_defaults_store.mCreate_command_script)
				begin
															ValidateEnteredData(12)
					RaisePropertyChanged("Create_command_script")
                    Orchestrator_defaults_store.mCreate_command_script = Orchestrator_defaults_main.mCreate_command_script
				end
			endmethod
		endproperty
        ;;mCommand_script_name
		public property Command_script_name, a255
			method get
			proc
				mreturn %atrim(Orchestrator_defaults_main.mCommand_script_name)
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mCommand_script_name = value
				if (Orchestrator_defaults_main.mCommand_script_name != Orchestrator_defaults_store.mCommand_script_name)
				begin
															ValidateEnteredData(13)
					RaisePropertyChanged("Command_script_name")
                    Orchestrator_defaults_store.mCommand_script_name = Orchestrator_defaults_main.mCommand_script_name
				end
			endmethod
		endproperty
        ;;mData_mapping_filename
		public property Data_mapping_filename, a255
			method get
			proc
				mreturn %atrim(Orchestrator_defaults_main.mData_mapping_filename)
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mData_mapping_filename = value
				if (Orchestrator_defaults_main.mData_mapping_filename != Orchestrator_defaults_store.mData_mapping_filename)
				begin
															ValidateEnteredData(14)
					RaisePropertyChanged("Data_mapping_filename")
                    Orchestrator_defaults_store.mData_mapping_filename = Orchestrator_defaults_main.mData_mapping_filename
				end
			endmethod
		endproperty
        ;;mShow_column_display
		public property Show_column_display, d1
			method get
			proc
                mreturn Orchestrator_defaults_main.mShow_column_display
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mShow_column_display = value
				if (Orchestrator_defaults_main.mShow_column_display != Orchestrator_defaults_store.mShow_column_display)
				begin
															ValidateEnteredData(15)
					RaisePropertyChanged("Show_column_display")
                    Orchestrator_defaults_store.mShow_column_display = Orchestrator_defaults_main.mShow_column_display
				end
			endmethod
		endproperty
        ;;mProject_relative_path_root
		public property Project_relative_path_root, a255
			method get
			proc
				mreturn %atrim(Orchestrator_defaults_main.mProject_relative_path_root)
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mProject_relative_path_root = value
				if (Orchestrator_defaults_main.mProject_relative_path_root != Orchestrator_defaults_store.mProject_relative_path_root)
				begin
															ValidateEnteredData(16)
					RaisePropertyChanged("Project_relative_path_root")
                    Orchestrator_defaults_store.mProject_relative_path_root = Orchestrator_defaults_main.mProject_relative_path_root
				end
			endmethod
		endproperty
        ;;mUse_project_folder_as_root
		public property Use_project_folder_as_root, d1
			method get
			proc
                mreturn Orchestrator_defaults_main.mUse_project_folder_as_root
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mUse_project_folder_as_root = value
				if (Orchestrator_defaults_main.mUse_project_folder_as_root != Orchestrator_defaults_store.mUse_project_folder_as_root)
				begin
															ValidateEnteredData(17)
					RaisePropertyChanged("Use_project_folder_as_root")
                    Orchestrator_defaults_store.mUse_project_folder_as_root = Orchestrator_defaults_main.mUse_project_folder_as_root
				end
			endmethod
		endproperty
        ;;mCustom_data_mapping
		public property Custom_data_mapping, a255
			method get
			proc
				mreturn %atrim(Orchestrator_defaults_main.mCustom_data_mapping)
            endmethod
			method set
			proc
				Orchestrator_defaults_main.mCustom_data_mapping = value
				if (Orchestrator_defaults_main.mCustom_data_mapping != Orchestrator_defaults_store.mCustom_data_mapping)
				begin
															ValidateEnteredData(18)
					RaisePropertyChanged("Custom_data_mapping")
                    Orchestrator_defaults_store.mCustom_data_mapping = Orchestrator_defaults_main.mCustom_data_mapping
				end
			endmethod
		endproperty
			
		private mSynchanged	,boolean
		
        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, String
            method get
            proc
                mreturn Orchestrator_defaults_main
            endmethod
            method set
            proc
				mSynchanged = false
				
				if (!mDoneSynergyRecordValue)
					OriginalSynergyRecord = value

				mDoneSynergyRecordValue = true

				setUsed()
                Orchestrator_defaults_main = value

                ;;Signal that all fields have changed
                
                if (Orchestrator_defaults_main.mRps_main_file != Orchestrator_defaults_store.mRps_main_file)
                begin
					mSynchanged = true
                    SetFieldValid("Rps_main_file")
											Orchestrator_defaults_store.mRps_main_file = Orchestrator_defaults_main.mRps_main_file
					if (mValidateSynergyData) ValidateEnteredData(1)
                    RaisePropertyChanged("Rps_main_file")
                end
                if (Orchestrator_defaults_main.mRps_text_file != Orchestrator_defaults_store.mRps_text_file)
                begin
					mSynchanged = true
                    SetFieldValid("Rps_text_file")
											Orchestrator_defaults_store.mRps_text_file = Orchestrator_defaults_main.mRps_text_file
					if (mValidateSynergyData) ValidateEnteredData(2)
                    RaisePropertyChanged("Rps_text_file")
                end
                if (Orchestrator_defaults_main.mTemplate_folder != Orchestrator_defaults_store.mTemplate_folder)
                begin
					mSynchanged = true
                    SetFieldValid("Template_folder")
											Orchestrator_defaults_store.mTemplate_folder = Orchestrator_defaults_main.mTemplate_folder
					if (mValidateSynergyData) ValidateEnteredData(3)
                    RaisePropertyChanged("Template_folder")
                end
                if (Orchestrator_defaults_main.mOutput_folder != Orchestrator_defaults_store.mOutput_folder)
                begin
					mSynchanged = true
                    SetFieldValid("Output_folder")
											Orchestrator_defaults_store.mOutput_folder = Orchestrator_defaults_main.mOutput_folder
					if (mValidateSynergyData) ValidateEnteredData(4)
                    RaisePropertyChanged("Output_folder")
                end
                if (Orchestrator_defaults_main.mAdd_folder_to_namespace != Orchestrator_defaults_store.mAdd_folder_to_namespace)
                begin
					mSynchanged = true
                    SetFieldValid("Add_folder_to_namespace")
											Orchestrator_defaults_store.mAdd_folder_to_namespace = Orchestrator_defaults_main.mAdd_folder_to_namespace
					if (mValidateSynergyData) ValidateEnteredData(5)
                    RaisePropertyChanged("Add_folder_to_namespace")
                end
                if (Orchestrator_defaults_main.mReplace_file != Orchestrator_defaults_store.mReplace_file)
                begin
					mSynchanged = true
                    SetFieldValid("Replace_file")
											Orchestrator_defaults_store.mReplace_file = Orchestrator_defaults_main.mReplace_file
					if (mValidateSynergyData) ValidateEnteredData(6)
                    RaisePropertyChanged("Replace_file")
                end
                if (Orchestrator_defaults_main.mNamespace != Orchestrator_defaults_store.mNamespace)
                begin
					mSynchanged = true
                    SetFieldValid("Namespace")
											Orchestrator_defaults_store.mNamespace = Orchestrator_defaults_main.mNamespace
					if (mValidateSynergyData) ValidateEnteredData(7)
                    RaisePropertyChanged("Namespace")
                end
                if (Orchestrator_defaults_main.mCharacter_width != Orchestrator_defaults_store.mCharacter_width)
                begin
					mSynchanged = true
                    SetFieldValid("Character_width")
											Orchestrator_defaults_store.mCharacter_width = Orchestrator_defaults_main.mCharacter_width
					if (mValidateSynergyData) ValidateEnteredData(8)
                    RaisePropertyChanged("Character_width")
                end
                if (Orchestrator_defaults_main.mPrefix != Orchestrator_defaults_store.mPrefix)
                begin
					mSynchanged = true
                    SetFieldValid("Prefix")
											Orchestrator_defaults_store.mPrefix = Orchestrator_defaults_main.mPrefix
					if (mValidateSynergyData) ValidateEnteredData(9)
                    RaisePropertyChanged("Prefix")
                end
                if (Orchestrator_defaults_main.mShow_verbose != Orchestrator_defaults_store.mShow_verbose)
                begin
					mSynchanged = true
                    SetFieldValid("Show_verbose")
											Orchestrator_defaults_store.mShow_verbose = Orchestrator_defaults_main.mShow_verbose
					if (mValidateSynergyData) ValidateEnteredData(10)
                    RaisePropertyChanged("Show_verbose")
                end
                if (Orchestrator_defaults_main.mUse_command_line != Orchestrator_defaults_store.mUse_command_line)
                begin
					mSynchanged = true
                    SetFieldValid("Use_command_line")
											Orchestrator_defaults_store.mUse_command_line = Orchestrator_defaults_main.mUse_command_line
					if (mValidateSynergyData) ValidateEnteredData(11)
                    RaisePropertyChanged("Use_command_line")
                end
                if (Orchestrator_defaults_main.mCreate_command_script != Orchestrator_defaults_store.mCreate_command_script)
                begin
					mSynchanged = true
                    SetFieldValid("Create_command_script")
											Orchestrator_defaults_store.mCreate_command_script = Orchestrator_defaults_main.mCreate_command_script
					if (mValidateSynergyData) ValidateEnteredData(12)
                    RaisePropertyChanged("Create_command_script")
                end
                if (Orchestrator_defaults_main.mCommand_script_name != Orchestrator_defaults_store.mCommand_script_name)
                begin
					mSynchanged = true
                    SetFieldValid("Command_script_name")
											Orchestrator_defaults_store.mCommand_script_name = Orchestrator_defaults_main.mCommand_script_name
					if (mValidateSynergyData) ValidateEnteredData(13)
                    RaisePropertyChanged("Command_script_name")
                end
                if (Orchestrator_defaults_main.mData_mapping_filename != Orchestrator_defaults_store.mData_mapping_filename)
                begin
					mSynchanged = true
                    SetFieldValid("Data_mapping_filename")
											Orchestrator_defaults_store.mData_mapping_filename = Orchestrator_defaults_main.mData_mapping_filename
					if (mValidateSynergyData) ValidateEnteredData(14)
                    RaisePropertyChanged("Data_mapping_filename")
                end
                if (Orchestrator_defaults_main.mShow_column_display != Orchestrator_defaults_store.mShow_column_display)
                begin
					mSynchanged = true
                    SetFieldValid("Show_column_display")
											Orchestrator_defaults_store.mShow_column_display = Orchestrator_defaults_main.mShow_column_display
					if (mValidateSynergyData) ValidateEnteredData(15)
                    RaisePropertyChanged("Show_column_display")
                end
                if (Orchestrator_defaults_main.mProject_relative_path_root != Orchestrator_defaults_store.mProject_relative_path_root)
                begin
					mSynchanged = true
                    SetFieldValid("Project_relative_path_root")
											Orchestrator_defaults_store.mProject_relative_path_root = Orchestrator_defaults_main.mProject_relative_path_root
					if (mValidateSynergyData) ValidateEnteredData(16)
                    RaisePropertyChanged("Project_relative_path_root")
                end
                if (Orchestrator_defaults_main.mUse_project_folder_as_root != Orchestrator_defaults_store.mUse_project_folder_as_root)
                begin
					mSynchanged = true
                    SetFieldValid("Use_project_folder_as_root")
											Orchestrator_defaults_store.mUse_project_folder_as_root = Orchestrator_defaults_main.mUse_project_folder_as_root
					if (mValidateSynergyData) ValidateEnteredData(17)
                    RaisePropertyChanged("Use_project_folder_as_root")
                end
                if (Orchestrator_defaults_main.mCustom_data_mapping != Orchestrator_defaults_store.mCustom_data_mapping)
                begin
					mSynchanged = true
                    SetFieldValid("Custom_data_mapping")
											Orchestrator_defaults_store.mCustom_data_mapping = Orchestrator_defaults_main.mCustom_data_mapping
					if (mValidateSynergyData) ValidateEnteredData(18)
                    RaisePropertyChanged("Custom_data_mapping")
                end
				if (mSynchanged)
					RaiseSynergyRecordChanged()
				Orchestrator_defaults_store = Orchestrator_defaults_main
            endmethod
        endproperty

        ;;; <summary>
        ;;; Allow the host to initialise all fields.
        ;;; </summary>
        public override method InitData ,void
        proc
            init Orchestrator_defaults_main
            if (Orchestrator_defaults_main.mRps_main_file != Orchestrator_defaults_store.mRps_main_file)
				RaisePropertyChanged("Rps_main_file")
            if (Orchestrator_defaults_main.mRps_text_file != Orchestrator_defaults_store.mRps_text_file)
				RaisePropertyChanged("Rps_text_file")
            if (Orchestrator_defaults_main.mTemplate_folder != Orchestrator_defaults_store.mTemplate_folder)
				RaisePropertyChanged("Template_folder")
            if (Orchestrator_defaults_main.mOutput_folder != Orchestrator_defaults_store.mOutput_folder)
				RaisePropertyChanged("Output_folder")
            if (Orchestrator_defaults_main.mAdd_folder_to_namespace != Orchestrator_defaults_store.mAdd_folder_to_namespace)
				RaisePropertyChanged("Add_folder_to_namespace")
            Orchestrator_defaults_main.mReplace_file = 1
            if (Orchestrator_defaults_main.mReplace_file != Orchestrator_defaults_store.mReplace_file)
				RaisePropertyChanged("Replace_file")
            if (Orchestrator_defaults_main.mNamespace != Orchestrator_defaults_store.mNamespace)
				RaisePropertyChanged("Namespace")
            if (Orchestrator_defaults_main.mCharacter_width != Orchestrator_defaults_store.mCharacter_width)
				RaisePropertyChanged("Character_width")
			Orchestrator_defaults_main.mPrefix = "m"
            if (Orchestrator_defaults_main.mPrefix != Orchestrator_defaults_store.mPrefix)
				RaisePropertyChanged("Prefix")
            if (Orchestrator_defaults_main.mShow_verbose != Orchestrator_defaults_store.mShow_verbose)
				RaisePropertyChanged("Show_verbose")
            if (Orchestrator_defaults_main.mUse_command_line != Orchestrator_defaults_store.mUse_command_line)
				RaisePropertyChanged("Use_command_line")
            if (Orchestrator_defaults_main.mCreate_command_script != Orchestrator_defaults_store.mCreate_command_script)
				RaisePropertyChanged("Create_command_script")
            if (Orchestrator_defaults_main.mCommand_script_name != Orchestrator_defaults_store.mCommand_script_name)
				RaisePropertyChanged("Command_script_name")
            if (Orchestrator_defaults_main.mData_mapping_filename != Orchestrator_defaults_store.mData_mapping_filename)
				RaisePropertyChanged("Data_mapping_filename")
            if (Orchestrator_defaults_main.mShow_column_display != Orchestrator_defaults_store.mShow_column_display)
				RaisePropertyChanged("Show_column_display")
            if (Orchestrator_defaults_main.mProject_relative_path_root != Orchestrator_defaults_store.mProject_relative_path_root)
				RaisePropertyChanged("Project_relative_path_root")
            if (Orchestrator_defaults_main.mUse_project_folder_as_root != Orchestrator_defaults_store.mUse_project_folder_as_root)
				RaisePropertyChanged("Use_project_folder_as_root")
            if (Orchestrator_defaults_main.mCustom_data_mapping != Orchestrator_defaults_store.mCustom_data_mapping)
				RaisePropertyChanged("Custom_data_mapping")
			Orchestrator_defaults_store = Orchestrator_defaults_main
			parent.InitData()
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
            endparams
        proc
			
				            ValidateEnteredData(1)
            RaisePropertyChanged("Rps_main_file")
				            ValidateEnteredData(2)
            RaisePropertyChanged("Rps_text_file")
				            ValidateEnteredData(3)
            RaisePropertyChanged("Template_folder")
				            ValidateEnteredData(4)
            RaisePropertyChanged("Output_folder")
				            ValidateEnteredData(5)
            RaisePropertyChanged("Add_folder_to_namespace")
				            ValidateEnteredData(6)
            RaisePropertyChanged("Replace_file")
				            ValidateEnteredData(7)
            RaisePropertyChanged("Namespace")
				            ValidateEnteredData(8)
            RaisePropertyChanged("Character_width")
				            ValidateEnteredData(9)
            RaisePropertyChanged("Prefix")
				            ValidateEnteredData(10)
            RaisePropertyChanged("Show_verbose")
				            ValidateEnteredData(11)
            RaisePropertyChanged("Use_command_line")
				            ValidateEnteredData(12)
            RaisePropertyChanged("Create_command_script")
				            ValidateEnteredData(13)
            RaisePropertyChanged("Command_script_name")
				            ValidateEnteredData(14)
            RaisePropertyChanged("Data_mapping_filename")
				            ValidateEnteredData(15)
            RaisePropertyChanged("Show_column_display")
				            ValidateEnteredData(16)
            RaisePropertyChanged("Project_relative_path_root")
				            ValidateEnteredData(17)
            RaisePropertyChanged("Use_project_folder_as_root")
				            ValidateEnteredData(18)
            RaisePropertyChanged("Custom_data_mapping")

        endmethod

        ;;; <summary>
        ;;; Indicate from the UI which field now has focus. This then signals the
        ;;; CurrentFieldInfo change event so the UI can get the current field details
        ;;; </summary>
        ;;; <param name="fieldName">Name of field with focus</param>
        public override method SetFieldFocusFlag    ,void
            in req fieldName                        ,String
            endparams
        proc
            using fieldName select
			
			
            ("RPS_MAIN_FILE"), mCurrentField = 1
			
            ("RPS_TEXT_FILE"), mCurrentField = 2
			
            ("TEMPLATE_FOLDER"), mCurrentField = 3
			
            ("OUTPUT_FOLDER"), mCurrentField = 4
			
            ("ADD_FOLDER_TO_NAMESPACE"), mCurrentField = 5
			
            ("REPLACE_FILE"), mCurrentField = 6
			
            ("NAMESPACE"), mCurrentField = 7
			
            ("CHARACTER_WIDTH"), mCurrentField = 8
			
            ("PREFIX"), mCurrentField = 9
			
            ("SHOW_VERBOSE"), mCurrentField = 10
			
            ("USE_COMMAND_LINE"), mCurrentField = 11
			
            ("CREATE_COMMAND_SCRIPT"), mCurrentField = 12
			
            ("COMMAND_SCRIPT_NAME"), mCurrentField = 13
			
            ("DATA_MAPPING_FILENAME"), mCurrentField = 14
			
            ("SHOW_COLUMN_DISPLAY"), mCurrentField = 15
			
            ("PROJECT_RELATIVE_PATH_ROOT"), mCurrentField = 16
			
            ("USE_PROJECT_FOLDER_AS_ROOT"), mCurrentField = 17
			
            ("CUSTOM_DATA_MAPPING"), mCurrentField = 18
            (),
                mCurrentField = 0
            endusing
            RaisePropertyChanged("CurrentFieldInfo")
        endmethod

        ;;; <summary>
        ;;; Expose information about the current field
        ;;; </summary>
        ;;; <returns>Current field information</returns>
        public property CurrentFieldInfo    ,String
            method get
            proc
                using mCurrentField select
				
				
                (1),    mreturn ""
				
                (2),    mreturn ""
				
                (3),    mreturn ""
				
                (4),    mreturn ""
				
                (5),    mreturn ""
				
                (6),    mreturn ""
				
                (7),    mreturn ""
				
                (8),    mreturn ""
				
                (9),    mreturn ""
				
                (10),    mreturn ""
				
                (11),    mreturn ""
				
                (12),    mreturn ""
				
                (13),    mreturn ""
				
                (14),    mreturn ""
				
                (15),    mreturn ""
				
                (16),    mreturn ""
				
                (17),    mreturn ""
				
                (18),    mreturn ""
				(), mreturn ""  ;;if incorrect field value or not configured, ensure we clear the return value
                endusing
            endmethod
        endproperty

        ;;Expose properties to indicate whether fields are enabled
        
		

        public property Rps_main_fileIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(1)
            endmethod
            method set
            proc
                SetFieldEnabledState(1, value)
                RaiseNonRPSPropertyChanged("Rps_main_fileIsEnabled")
            endmethod
        endproperty
		

        public property Rps_text_fileIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(2)
            endmethod
            method set
            proc
                SetFieldEnabledState(2, value)
                RaiseNonRPSPropertyChanged("Rps_text_fileIsEnabled")
            endmethod
        endproperty
		

        public property Template_folderIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(3)
            endmethod
            method set
            proc
                SetFieldEnabledState(3, value)
                RaiseNonRPSPropertyChanged("Template_folderIsEnabled")
            endmethod
        endproperty
		

        public property Output_folderIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(4)
            endmethod
            method set
            proc
                SetFieldEnabledState(4, value)
                RaiseNonRPSPropertyChanged("Output_folderIsEnabled")
            endmethod
        endproperty
		

        public property Add_folder_to_namespaceIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(5)
            endmethod
            method set
            proc
                SetFieldEnabledState(5, value)
                RaiseNonRPSPropertyChanged("Add_folder_to_namespaceIsEnabled")
            endmethod
        endproperty
		

        public property Replace_fileIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(6)
            endmethod
            method set
            proc
                SetFieldEnabledState(6, value)
                RaiseNonRPSPropertyChanged("Replace_fileIsEnabled")
            endmethod
        endproperty
		

        public property NamespaceIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(7)
            endmethod
            method set
            proc
                SetFieldEnabledState(7, value)
                RaiseNonRPSPropertyChanged("NamespaceIsEnabled")
            endmethod
        endproperty
		

        public property Character_widthIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(8)
            endmethod
            method set
            proc
                SetFieldEnabledState(8, value)
                RaiseNonRPSPropertyChanged("Character_widthIsEnabled")
            endmethod
        endproperty
		

        public property PrefixIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(9)
            endmethod
            method set
            proc
                SetFieldEnabledState(9, value)
                RaiseNonRPSPropertyChanged("PrefixIsEnabled")
            endmethod
        endproperty
		

        public property Show_verboseIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(10)
            endmethod
            method set
            proc
                SetFieldEnabledState(10, value)
                RaiseNonRPSPropertyChanged("Show_verboseIsEnabled")
            endmethod
        endproperty
		

        public property Use_command_lineIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(11)
            endmethod
            method set
            proc
                SetFieldEnabledState(11, value)
                RaiseNonRPSPropertyChanged("Use_command_lineIsEnabled")
            endmethod
        endproperty
		

        public property Create_command_scriptIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(12)
            endmethod
            method set
            proc
                SetFieldEnabledState(12, value)
                RaiseNonRPSPropertyChanged("Create_command_scriptIsEnabled")
            endmethod
        endproperty
		

        public property Command_script_nameIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(13)
            endmethod
            method set
            proc
                SetFieldEnabledState(13, value)
                RaiseNonRPSPropertyChanged("Command_script_nameIsEnabled")
            endmethod
        endproperty
		

        public property Data_mapping_filenameIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(14)
            endmethod
            method set
            proc
                SetFieldEnabledState(14, value)
                RaiseNonRPSPropertyChanged("Data_mapping_filenameIsEnabled")
            endmethod
        endproperty
		

        public property Show_column_displayIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(15)
            endmethod
            method set
            proc
                SetFieldEnabledState(15, value)
                RaiseNonRPSPropertyChanged("Show_column_displayIsEnabled")
            endmethod
        endproperty
		

        public property Project_relative_path_rootIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(16)
            endmethod
            method set
            proc
                SetFieldEnabledState(16, value)
                RaiseNonRPSPropertyChanged("Project_relative_path_rootIsEnabled")
            endmethod
        endproperty
		

        public property Use_project_folder_as_rootIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(17)
            endmethod
            method set
            proc
                SetFieldEnabledState(17, value)
                RaiseNonRPSPropertyChanged("Use_project_folder_as_rootIsEnabled")
            endmethod
        endproperty
		

        public property Custom_data_mappingIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(18)
            endmethod
            method set
            proc
                SetFieldEnabledState(18, value)
                RaiseNonRPSPropertyChanged("Custom_data_mappingIsEnabled")
            endmethod
        endproperty

        ;;Expose properties to indicate whether fields are focussed
		private mRps_main_fileIsFocused	,Boolean
		public property Rps_main_fileIsFocused, Boolean
			method get
			proc
				mreturn mRps_main_fileIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mRps_main_fileIsFocused = value
				RaiseNonRPSPropertyChanged("Rps_main_fileIsFocused")
			endmethod
		endproperty
		private mRps_text_fileIsFocused	,Boolean
		public property Rps_text_fileIsFocused, Boolean
			method get
			proc
				mreturn mRps_text_fileIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mRps_text_fileIsFocused = value
				RaiseNonRPSPropertyChanged("Rps_text_fileIsFocused")
			endmethod
		endproperty
		private mTemplate_folderIsFocused	,Boolean
		public property Template_folderIsFocused, Boolean
			method get
			proc
				mreturn mTemplate_folderIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mTemplate_folderIsFocused = value
				RaiseNonRPSPropertyChanged("Template_folderIsFocused")
			endmethod
		endproperty
		private mOutput_folderIsFocused	,Boolean
		public property Output_folderIsFocused, Boolean
			method get
			proc
				mreturn mOutput_folderIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mOutput_folderIsFocused = value
				RaiseNonRPSPropertyChanged("Output_folderIsFocused")
			endmethod
		endproperty
		private mAdd_folder_to_namespaceIsFocused	,Boolean
		public property Add_folder_to_namespaceIsFocused, Boolean
			method get
			proc
				mreturn mAdd_folder_to_namespaceIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mAdd_folder_to_namespaceIsFocused = value
				RaiseNonRPSPropertyChanged("Add_folder_to_namespaceIsFocused")
			endmethod
		endproperty
		private mReplace_fileIsFocused	,Boolean
		public property Replace_fileIsFocused, Boolean
			method get
			proc
				mreturn mReplace_fileIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mReplace_fileIsFocused = value
				RaiseNonRPSPropertyChanged("Replace_fileIsFocused")
			endmethod
		endproperty
		private mNamespaceIsFocused	,Boolean
		public property NamespaceIsFocused, Boolean
			method get
			proc
				mreturn mNamespaceIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mNamespaceIsFocused = value
				RaiseNonRPSPropertyChanged("NamespaceIsFocused")
			endmethod
		endproperty
		private mCharacter_widthIsFocused	,Boolean
		public property Character_widthIsFocused, Boolean
			method get
			proc
				mreturn mCharacter_widthIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mCharacter_widthIsFocused = value
				RaiseNonRPSPropertyChanged("Character_widthIsFocused")
			endmethod
		endproperty
		private mPrefixIsFocused	,Boolean
		public property PrefixIsFocused, Boolean
			method get
			proc
				mreturn mPrefixIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mPrefixIsFocused = value
				RaiseNonRPSPropertyChanged("PrefixIsFocused")
			endmethod
		endproperty
		private mShow_verboseIsFocused	,Boolean
		public property Show_verboseIsFocused, Boolean
			method get
			proc
				mreturn mShow_verboseIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mShow_verboseIsFocused = value
				RaiseNonRPSPropertyChanged("Show_verboseIsFocused")
			endmethod
		endproperty
		private mUse_command_lineIsFocused	,Boolean
		public property Use_command_lineIsFocused, Boolean
			method get
			proc
				mreturn mUse_command_lineIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mUse_command_lineIsFocused = value
				RaiseNonRPSPropertyChanged("Use_command_lineIsFocused")
			endmethod
		endproperty
		private mCreate_command_scriptIsFocused	,Boolean
		public property Create_command_scriptIsFocused, Boolean
			method get
			proc
				mreturn mCreate_command_scriptIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mCreate_command_scriptIsFocused = value
				RaiseNonRPSPropertyChanged("Create_command_scriptIsFocused")
			endmethod
		endproperty
		private mCommand_script_nameIsFocused	,Boolean
		public property Command_script_nameIsFocused, Boolean
			method get
			proc
				mreturn mCommand_script_nameIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mCommand_script_nameIsFocused = value
				RaiseNonRPSPropertyChanged("Command_script_nameIsFocused")
			endmethod
		endproperty
		private mData_mapping_filenameIsFocused	,Boolean
		public property Data_mapping_filenameIsFocused, Boolean
			method get
			proc
				mreturn mData_mapping_filenameIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mData_mapping_filenameIsFocused = value
				RaiseNonRPSPropertyChanged("Data_mapping_filenameIsFocused")
			endmethod
		endproperty
		private mShow_column_displayIsFocused	,Boolean
		public property Show_column_displayIsFocused, Boolean
			method get
			proc
				mreturn mShow_column_displayIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mShow_column_displayIsFocused = value
				RaiseNonRPSPropertyChanged("Show_column_displayIsFocused")
			endmethod
		endproperty
		private mProject_relative_path_rootIsFocused	,Boolean
		public property Project_relative_path_rootIsFocused, Boolean
			method get
			proc
				mreturn mProject_relative_path_rootIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mProject_relative_path_rootIsFocused = value
				RaiseNonRPSPropertyChanged("Project_relative_path_rootIsFocused")
			endmethod
		endproperty
		private mUse_project_folder_as_rootIsFocused	,Boolean
		public property Use_project_folder_as_rootIsFocused, Boolean
			method get
			proc
				mreturn mUse_project_folder_as_rootIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mUse_project_folder_as_rootIsFocused = value
				RaiseNonRPSPropertyChanged("Use_project_folder_as_rootIsFocused")
			endmethod
		endproperty
		private mCustom_data_mappingIsFocused	,Boolean
		public property Custom_data_mappingIsFocused, Boolean
			method get
			proc
				mreturn mCustom_data_mappingIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mCustom_data_mappingIsFocused = value
				RaiseNonRPSPropertyChanged("Custom_data_mappingIsFocused")
			endmethod
		endproperty

		;;Expose properties to indicate whether fields are read only
		
		
			
		public property Rps_main_fileIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(1)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(1, value)
				RaiseNonRPSPropertyChanged("Rps_main_fileIsReadOnly")
			endmethod
		endproperty
		
			
		public property Rps_text_fileIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(2)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(2, value)
				RaiseNonRPSPropertyChanged("Rps_text_fileIsReadOnly")
			endmethod
		endproperty
		
			
		public property Template_folderIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(3)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(3, value)
				RaiseNonRPSPropertyChanged("Template_folderIsReadOnly")
			endmethod
		endproperty
		
			
		public property Output_folderIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(4)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(4, value)
				RaiseNonRPSPropertyChanged("Output_folderIsReadOnly")
			endmethod
		endproperty
		
			
		public property Add_folder_to_namespaceIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(5)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(5, value)
				RaiseNonRPSPropertyChanged("Add_folder_to_namespaceIsReadOnly")
			endmethod
		endproperty
		
			
		public property Replace_fileIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(6)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(6, value)
				RaiseNonRPSPropertyChanged("Replace_fileIsReadOnly")
			endmethod
		endproperty
		
			
		public property NamespaceIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(7)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(7, value)
				RaiseNonRPSPropertyChanged("NamespaceIsReadOnly")
			endmethod
		endproperty
		
			
		public property Character_widthIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(8)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(8, value)
				RaiseNonRPSPropertyChanged("Character_widthIsReadOnly")
			endmethod
		endproperty
		
			
		public property PrefixIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(9)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(9, value)
				RaiseNonRPSPropertyChanged("PrefixIsReadOnly")
			endmethod
		endproperty
		
			
		public property Show_verboseIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(10)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(10, value)
				RaiseNonRPSPropertyChanged("Show_verboseIsReadOnly")
			endmethod
		endproperty
		
			
		public property Use_command_lineIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(11)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(11, value)
				RaiseNonRPSPropertyChanged("Use_command_lineIsReadOnly")
			endmethod
		endproperty
		
			
		public property Create_command_scriptIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(12)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(12, value)
				RaiseNonRPSPropertyChanged("Create_command_scriptIsReadOnly")
			endmethod
		endproperty
		
			
		public property Command_script_nameIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(13)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(13, value)
				RaiseNonRPSPropertyChanged("Command_script_nameIsReadOnly")
			endmethod
		endproperty
		
			
		public property Data_mapping_filenameIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(14)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(14, value)
				RaiseNonRPSPropertyChanged("Data_mapping_filenameIsReadOnly")
			endmethod
		endproperty
		
			
		public property Show_column_displayIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(15)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(15, value)
				RaiseNonRPSPropertyChanged("Show_column_displayIsReadOnly")
			endmethod
		endproperty
		
			
		public property Project_relative_path_rootIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(16)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(16, value)
				RaiseNonRPSPropertyChanged("Project_relative_path_rootIsReadOnly")
			endmethod
		endproperty
		
			
		public property Use_project_folder_as_rootIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(17)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(17, value)
				RaiseNonRPSPropertyChanged("Use_project_folder_as_rootIsReadOnly")
			endmethod
		endproperty
		
			
		public property Custom_data_mappingIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(18)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(18, value)
				RaiseNonRPSPropertyChanged("Custom_data_mappingIsReadOnly")
			endmethod
		endproperty

		private doingClearFocus	,Boolean	,false

		private method clearFocus, void
			endparams
		proc
			if (!doingClearFocus)
			begin
				doingClearFocus = true
				if (Rps_main_fileIsFocused) Rps_main_fileIsFocused = false
				if (Rps_text_fileIsFocused) Rps_text_fileIsFocused = false
				if (Template_folderIsFocused) Template_folderIsFocused = false
				if (Output_folderIsFocused) Output_folderIsFocused = false
				if (Add_folder_to_namespaceIsFocused) Add_folder_to_namespaceIsFocused = false
				if (Replace_fileIsFocused) Replace_fileIsFocused = false
				if (NamespaceIsFocused) NamespaceIsFocused = false
				if (Character_widthIsFocused) Character_widthIsFocused = false
				if (PrefixIsFocused) PrefixIsFocused = false
				if (Show_verboseIsFocused) Show_verboseIsFocused = false
				if (Use_command_lineIsFocused) Use_command_lineIsFocused = false
				if (Create_command_scriptIsFocused) Create_command_scriptIsFocused = false
				if (Command_script_nameIsFocused) Command_script_nameIsFocused = false
				if (Data_mapping_filenameIsFocused) Data_mapping_filenameIsFocused = false
				if (Show_column_displayIsFocused) Show_column_displayIsFocused = false
				if (Project_relative_path_rootIsFocused) Project_relative_path_rootIsFocused = false
				if (Use_project_folder_as_rootIsFocused) Use_project_folder_as_rootIsFocused = false
				if (Custom_data_mappingIsFocused) Custom_data_mappingIsFocused = false
				doingClearFocus = false
			end
		endmethod


		public override method CompareObjects	,int
			in req obj1							,@Object
			in req obj2							,@Object
			in req colName						,String
			in req sortDir						,Symphony.Conductor.Framework.SynergySortOrder
			endparams

			.include 'orchestrator_defaults' repository  , record = 'data1', prefix = "m", end
			.include 'orchestrator_defaults' repository  , record = 'data2', prefix = "m", end

			record
				result		,int
			endrecord
		proc
			data1 = ((Orchestrator_defaults_Data)obj1).SynergyRecord
			data2 = ((Orchestrator_defaults_Data)obj2).SynergyRecord
			using colName select
			("Rps_main_file"),
			begin
				if (data1.mrps_main_file == data2.mrps_main_file) then
					result = 0
				else
				begin
					if (data1.mrps_main_file > data2.mrps_main_file) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Rps_text_file"),
			begin
				if (data1.mrps_text_file == data2.mrps_text_file) then
					result = 0
				else
				begin
					if (data1.mrps_text_file > data2.mrps_text_file) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Template_folder"),
			begin
				if (data1.mtemplate_folder == data2.mtemplate_folder) then
					result = 0
				else
				begin
					if (data1.mtemplate_folder > data2.mtemplate_folder) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Output_folder"),
			begin
				if (data1.moutput_folder == data2.moutput_folder) then
					result = 0
				else
				begin
					if (data1.moutput_folder > data2.moutput_folder) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Add_folder_to_namespace"),
			begin
				if (data1.madd_folder_to_namespace == data2.madd_folder_to_namespace) then
					result = 0
				else
				begin
					if (data1.madd_folder_to_namespace > data2.madd_folder_to_namespace) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Replace_file"),
			begin
				if (data1.mreplace_file == data2.mreplace_file) then
					result = 0
				else
				begin
					if (data1.mreplace_file > data2.mreplace_file) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Namespace"),
			begin
				if (data1.mnamespace == data2.mnamespace) then
					result = 0
				else
				begin
					if (data1.mnamespace > data2.mnamespace) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Character_width"),
			begin
				if (data1.mcharacter_width == data2.mcharacter_width) then
					result = 0
				else
				begin
					if (data1.mcharacter_width > data2.mcharacter_width) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Prefix"),
			begin
				if (data1.mprefix == data2.mprefix) then
					result = 0
				else
				begin
					if (data1.mprefix > data2.mprefix) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Show_verbose"),
			begin
				if (data1.mshow_verbose == data2.mshow_verbose) then
					result = 0
				else
				begin
					if (data1.mshow_verbose > data2.mshow_verbose) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Use_command_line"),
			begin
				if (data1.muse_command_line == data2.muse_command_line) then
					result = 0
				else
				begin
					if (data1.muse_command_line > data2.muse_command_line) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Create_command_script"),
			begin
				if (data1.mcreate_command_script == data2.mcreate_command_script) then
					result = 0
				else
				begin
					if (data1.mcreate_command_script > data2.mcreate_command_script) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Command_script_name"),
			begin
				if (data1.mcommand_script_name == data2.mcommand_script_name) then
					result = 0
				else
				begin
					if (data1.mcommand_script_name > data2.mcommand_script_name) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Data_mapping_filename"),
			begin
				if (data1.mdata_mapping_filename == data2.mdata_mapping_filename) then
					result = 0
				else
				begin
					if (data1.mdata_mapping_filename > data2.mdata_mapping_filename) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Show_column_display"),
			begin
				if (data1.mshow_column_display == data2.mshow_column_display) then
					result = 0
				else
				begin
					if (data1.mshow_column_display > data2.mshow_column_display) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Project_relative_path_root"),
			begin
				if (data1.mproject_relative_path_root == data2.mproject_relative_path_root) then
					result = 0
				else
				begin
					if (data1.mproject_relative_path_root > data2.mproject_relative_path_root) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Use_project_folder_as_root"),
			begin
				if (data1.muse_project_folder_as_root == data2.muse_project_folder_as_root) then
					result = 0
				else
				begin
					if (data1.muse_project_folder_as_root > data2.muse_project_folder_as_root) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Custom_data_mapping"),
			begin
				if (data1.mcustom_data_mapping == data2.mcustom_data_mapping) then
					result = 0
				else
				begin
					if (data1.mcustom_data_mapping > data2.mcustom_data_mapping) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			(),
				result = this.CustomCompareObjects(obj1, obj2, colName, sortDir)
			endusing

			mreturn result
		endmethod

	endclass
endnamespace

