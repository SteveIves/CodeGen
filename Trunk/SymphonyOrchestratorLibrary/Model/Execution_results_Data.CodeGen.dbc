;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author: Richard C. Morris, Synergex Professional Services Group
;;
;; Template Name:   Symphony Framework : SYMPHONY_DATANOEXCEL.tpl
;;
;;***************************************************************************
import System
import System.Collections.Generic
import System.Text

import Symphony.Conductor.Model

namespace Symphony.Orchestrator.Library.Model

    ;;define a structure that we can use around the applicaiton

    .include 'execution_results' repository  , structure = 'STRExecution_results', prefix = "str_", end

    public partial class Execution_results_Data extends Symphony.Conductor.Model.DataObjectBase

		public const RPSStructureName	,String	,"EXECUTION_RESULTS"

        ;;make the record availalbe and a copy
        .include 'execution_results' repository  , private record = 'execution_results_main', prefix = "m", end
        .include 'execution_results' repository  , private record = 'execution_results_store', prefix = "m", end

		private mDoneSynergyRecordValue	,boolean	,true 
		
        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method Execution_results_Data
            endparams
            parent()
        proc
			configureFieldInfo()
			setFieldNames()
			InitData()
			mDoneSynergyRecordValue = false
			extendedConstructor()
        endmethod

        ;;; <summary>
        ;;; Alternate constructor, accepts the inital value to assign to the object
        ;;; </summary>
        ;;; <param name="results">Provide the loaded Excel results object</param>
        public method Execution_results_Data
            in req synRec       ,String
            endparams
            parent()
        proc
			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			SynergyRecord = synRec
			OriginalSynergyRecord = synRec
			extendedConstructor()
        endmethod
		
		;;; <summary>
		;;; Alternate constructor, accepts the inital value to assign to the object.
		;;; Also accepts the boolean value to assign to the ObjectRaisesPropertyChanged property.
		;;; </summary>
		;;; <param name="results">Provide the loaded Excel results object.</param>
		;;; <param name="notifyUI">values passed onto the ObjectRaisesPropertyChanged property.</param>
		public method Execution_results_Data
			in req synRec       ,String
			in req notifyUI		,DataObjectNotificationState
			endparams
			parent()
		proc
			ObjectRaisesPropertyChanged = notifyUI
			mIsNew = false
			configureFieldInfo()
			setFieldNames()
			SynergyRecord = synRec
			OriginalSynergyRecord = synRec
			extendedConstructor()
		endmethod

		
        ;;Set up the arrays of field details
        private method configureFieldInfo	,void
			endparams
		proc
			
			
			setFieldInfo("STATUS", "Status",  "", "",
			&	"", "STATUS", 1, 1,
			&	0, 0, 0, 0,
			&	"DECIMAL", false, 0, 9)

			
			setFieldInfo("TITLE", "Title",  "", "",
			&	"", "TITLE", 2, 100,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

			
			setFieldInfo("RESPONSE", "Response",  "", "",
			&	"", "RESPONSE", 102, 1000,
			&	0, 0, 0, 0,
			&	"ALPHA", false, 0, 0)

		endmethod

        ;;Set up the arrays of field names and headings
        private method setFieldNames	,void
			endparams
		proc
			mFieldNames.Add("Status")
			mFieldHeadings.Add("STATUS")
			mFieldNames.Add("Title")
			mFieldHeadings.Add("TITLE")
			mFieldNames.Add("Response")
			mFieldHeadings.Add("RESPONSE")
		endmethod

        ;;Expose fields as properties for data binding
        
        ;;mStatus
		public property Status, d1
			method get
			proc
                mreturn Execution_results_main.mStatus
            endmethod
			method set
			proc
				Execution_results_main.mStatus = value
				if (Execution_results_main.mStatus != Execution_results_store.mStatus)
				begin
															ValidateEnteredData(1)
					RaisePropertyChanged("Status")
                    Execution_results_store.mStatus = Execution_results_main.mStatus
				end
			endmethod
		endproperty
        ;;mTitle
		public property Title, a100
			method get
			proc
				mreturn %atrim(Execution_results_main.mTitle)
            endmethod
			method set
			proc
				Execution_results_main.mTitle = value
				if (Execution_results_main.mTitle != Execution_results_store.mTitle)
				begin
															ValidateEnteredData(2)
					RaisePropertyChanged("Title")
                    Execution_results_store.mTitle = Execution_results_main.mTitle
				end
			endmethod
		endproperty
        ;;mResponse
		public property Response, a1000
			method get
			proc
				mreturn %atrim(Execution_results_main.mResponse)
            endmethod
			method set
			proc
				Execution_results_main.mResponse = value
				if (Execution_results_main.mResponse != Execution_results_store.mResponse)
				begin
															ValidateEnteredData(3)
					RaisePropertyChanged("Response")
                    Execution_results_store.mResponse = Execution_results_main.mResponse
				end
			endmethod
		endproperty
			
		private mSynchanged	,boolean
		
        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, String
            method get
            proc
                mreturn Execution_results_main
            endmethod
            method set
            proc
				mSynchanged = false
				
				if (!mDoneSynergyRecordValue)
					OriginalSynergyRecord = value

				mDoneSynergyRecordValue = true

				setUsed()
                Execution_results_main = value

                ;;Signal that all fields have changed
                
                if (Execution_results_main.mStatus != Execution_results_store.mStatus)
                begin
					mSynchanged = true
                    SetFieldValid("Status")
											Execution_results_store.mStatus = Execution_results_main.mStatus
					if (mValidateSynergyData) ValidateEnteredData(1)
                    RaisePropertyChanged("Status")
                end
                if (Execution_results_main.mTitle != Execution_results_store.mTitle)
                begin
					mSynchanged = true
                    SetFieldValid("Title")
											Execution_results_store.mTitle = Execution_results_main.mTitle
					if (mValidateSynergyData) ValidateEnteredData(2)
                    RaisePropertyChanged("Title")
                end
                if (Execution_results_main.mResponse != Execution_results_store.mResponse)
                begin
					mSynchanged = true
                    SetFieldValid("Response")
											Execution_results_store.mResponse = Execution_results_main.mResponse
					if (mValidateSynergyData) ValidateEnteredData(3)
                    RaisePropertyChanged("Response")
                end
				if (mSynchanged)
					RaiseSynergyRecordChanged()
				Execution_results_store = Execution_results_main
            endmethod
        endproperty

        ;;; <summary>
        ;;; Allow the host to initialise all fields.
        ;;; </summary>
        public override method InitData ,void
        proc
            init Execution_results_main
            if (Execution_results_main.mStatus != Execution_results_store.mStatus)
				RaisePropertyChanged("Status")
            if (Execution_results_main.mTitle != Execution_results_store.mTitle)
				RaisePropertyChanged("Title")
            if (Execution_results_main.mResponse != Execution_results_store.mResponse)
				RaisePropertyChanged("Response")
			Execution_results_store = Execution_results_main
			parent.InitData()
        endmethod

        ;;; <summary>
        ;;; Allow the host to validate all fields. Each field will fire the validation method.
        ;;; </summary>
        public override method InitialValidateData, void
            endparams
        proc
			
				            ValidateEnteredData(1)
            RaisePropertyChanged("Status")
				            ValidateEnteredData(2)
            RaisePropertyChanged("Title")
				            ValidateEnteredData(3)
            RaisePropertyChanged("Response")

        endmethod

        ;;; <summary>
        ;;; Indicate from the UI which field now has focus. This then signals the
        ;;; CurrentFieldInfo change event so the UI can get the current field details
        ;;; </summary>
        ;;; <param name="fieldName">Name of field with focus</param>
        public override method SetFieldFocusFlag    ,void
            in req fieldName                        ,String
            endparams
        proc
            using fieldName select
			
			
            ("STATUS"), mCurrentField = 1
			
            ("TITLE"), mCurrentField = 2
			
            ("RESPONSE"), mCurrentField = 3
            (),
                mCurrentField = 0
            endusing
            RaisePropertyChanged("CurrentFieldInfo")
        endmethod

        ;;; <summary>
        ;;; Expose information about the current field
        ;;; </summary>
        ;;; <returns>Current field information</returns>
        public property CurrentFieldInfo    ,String
            method get
            proc
                using mCurrentField select
				
				
                (1),    mreturn ""
				
                (2),    mreturn ""
				
                (3),    mreturn ""
				(), mreturn ""  ;;if incorrect field value or not configured, ensure we clear the return value
                endusing
            endmethod
        endproperty

        ;;Expose properties to indicate whether fields are enabled
        
		

        public property StatusIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(1)
            endmethod
            method set
            proc
                SetFieldEnabledState(1, value)
                RaiseNonRPSPropertyChanged("StatusIsEnabled")
            endmethod
        endproperty
		

        public property TitleIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(2)
            endmethod
            method set
            proc
                SetFieldEnabledState(2, value)
                RaiseNonRPSPropertyChanged("TitleIsEnabled")
            endmethod
        endproperty
		

        public property ResponseIsEnabled, Boolean
            method get
            proc
                mreturn GetFieldEnabledState(3)
            endmethod
            method set
            proc
                SetFieldEnabledState(3, value)
                RaiseNonRPSPropertyChanged("ResponseIsEnabled")
            endmethod
        endproperty

        ;;Expose properties to indicate whether fields are focussed
		private mStatusIsFocused	,Boolean
		public property StatusIsFocused, Boolean
			method get
			proc
				mreturn mStatusIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mStatusIsFocused = value
				RaiseNonRPSPropertyChanged("StatusIsFocused")
			endmethod
		endproperty
		private mTitleIsFocused	,Boolean
		public property TitleIsFocused, Boolean
			method get
			proc
				mreturn mTitleIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mTitleIsFocused = value
				RaiseNonRPSPropertyChanged("TitleIsFocused")
			endmethod
		endproperty
		private mResponseIsFocused	,Boolean
		public property ResponseIsFocused, Boolean
			method get
			proc
				mreturn mResponseIsFocused
			endmethod
			method set
			proc
				clearFocus()
				mResponseIsFocused = value
				RaiseNonRPSPropertyChanged("ResponseIsFocused")
			endmethod
		endproperty

		;;Expose properties to indicate whether fields are read only
		
		
			
		public property StatusIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(1)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(1, value)
				RaiseNonRPSPropertyChanged("StatusIsReadOnly")
			endmethod
		endproperty
		
			
		public property TitleIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(2)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(2, value)
				RaiseNonRPSPropertyChanged("TitleIsReadOnly")
			endmethod
		endproperty
		
			
		public property ResponseIsReadOnly, Boolean
			method get
			proc
				mreturn GetFieldReadOnlyState(3)
			endmethod
			method set
			proc
				SetFieldReadOnlyState(3, value)
				RaiseNonRPSPropertyChanged("ResponseIsReadOnly")
			endmethod
		endproperty

		private doingClearFocus	,Boolean	,false

		private method clearFocus, void
			endparams
		proc
			if (!doingClearFocus)
			begin
				doingClearFocus = true
				if (StatusIsFocused) StatusIsFocused = false
				if (TitleIsFocused) TitleIsFocused = false
				if (ResponseIsFocused) ResponseIsFocused = false
				doingClearFocus = false
			end
		endmethod


		public override method CompareObjects	,int
			in req obj1							,@Object
			in req obj2							,@Object
			in req colName						,String
			in req sortDir						,Symphony.Conductor.Framework.SynergySortOrder
			endparams

			.include 'execution_results' repository  , record = 'data1', prefix = "m", end
			.include 'execution_results' repository  , record = 'data2', prefix = "m", end

			record
				result		,int
			endrecord
		proc
			data1 = ((Execution_results_Data)obj1).SynergyRecord
			data2 = ((Execution_results_Data)obj2).SynergyRecord
			using colName select
			("Status"),
			begin
				if (data1.mstatus == data2.mstatus) then
					result = 0
				else
				begin
					if (data1.mstatus > data2.mstatus) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Title"),
			begin
				if (data1.mtitle == data2.mtitle) then
					result = 0
				else
				begin
					if (data1.mtitle > data2.mtitle) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			("Response"),
			begin
				if (data1.mresponse == data2.mresponse) then
					result = 0
				else
				begin
					if (data1.mresponse > data2.mresponse) then
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Ascending) then
							result = -1
						else
							result = 1
					end
					else
					begin
						if (sortDir == Symphony.Conductor.Framework.SynergySortOrder.Descending) then
							result = -1
						else
							result = 1
					end
				end
			end
			(),
				result = this.CustomCompareObjects(obj1, obj2, colName, sortDir)
			endusing

			mreturn result
		endmethod

	endclass
endnamespace

