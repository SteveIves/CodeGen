;; *****************************************************************************
;; 
;;  Title:       ErrorReporting.dbl
;; 
;;  Type:        Class
;; 
;;  Description: Tree visitor that validates the structure of a a tree of nodes
;;               and determines whether any specific requirements are in place
;;               for code generation from the tree to be successful.
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Jeff Greene, Synergex Development
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.IO

.array 0

namespace CodeGen.Engine
	
	;;;  <summary>
	;;;  
	;;;  </summary>
	public class ErrorReporting implements ITreeNodeVisitor
		
		private currentFileNode, @FileNode
		private currentLoops, @List<LoopNode>, new List<LoopNode>()
		private validator, @TokenValidation, new TokenValidation()
		
		;;;  <summary>
		;;;  
		;;;  </summary>
		public Errors, @List<Tuple<string, int, int, string>>, new List<Tuple<string, int, int, string>>()
		
		private method reportValidity, void
			tkn, @Token 
			endparams
		proc
			data validity, @List<TokenValidity>, ^as(tkn.Bucket, List<TokenValidity>)
			data valid, TokenValidity
			foreach valid in validity
				if (validator.IsValid(valid, currentFileNode, currentLoops))
					mreturn
			Errors.Add(Tuple.Create(String.Format("Token {0} was found in an invalid location.", tkn.Value), tkn.StartLineNumber, tkn.StartColumn, tkn.File))
		endmethod
		
		private method Visit, void
			nodes, @IEnumerable<ITreeNode> 
			endparams
		proc
			data node, @ITreeNode
			foreach node in nodes
				node.Accept(this)
		endmethod
		
		;;;  <summary>
		;;;  
		;;;  </summary>
		;;;  <param name="node"></param>
		public method Visit, void
			node, @LoopNode 
			endparams
		proc
			reportValidity(node.OpenToken)
			currentLoops.Add(node)
			Visit(node.Body)
			currentLoops.Remove(node)
		endmethod
		
		;;;  <summary>
		;;;  
		;;;  </summary>
		;;;  <param name="node"></param>
		public method Visit, void
			node, @IfNode 
			endparams
		proc
			Visit(node.Expression)
			Visit(node.Body)
			if (node.Else != ^null)
				Visit(node.Else)
		endmethod
		
		;;;  <summary>
		;;;  
		;;;  </summary>
		;;;  <param name="node"></param>
		public method Visit, void
			node, @ExpressionNode 
			endparams
		proc
			reportValidity(node.Value)
		endmethod
		
		;;;  <summary>
		;;;  
		;;;  </summary>
		;;;  <param name="node"></param>
		public method Visit, void
			node, @ElseNode 
			endparams
		proc
			Visit(node.Body)
		endmethod
		
		;;;  <summary>
		;;;  
		;;;  </summary>
		;;;  <param name="node"></param>
		public method Visit, void
			node, @ExpansionNode 
			endparams
		proc
			reportValidity(node.Value)
		endmethod
		
		;;;  <summary>
		;;;  
		;;;  </summary>
		;;;  <param name="node"></param>
		public method Visit, void
			node, @TextNode 
			endparams
		proc
			
		endmethod
		
		;;;  <summary>
		;;;  This is the main entry point used by CodeGenerator to validate a tree.
		;;;  </summary>
		;;;  <param name="node">FileNode representing the tree to be validated</param>
		public method Visit, void
			node, @FileNode 
			endparams
		proc
			;; Analyze the structure of the tree
			currentFileNode = node
			Visit(node.Body)
			
			;; Does anythng in the tree require repository structure processing?
			if ((node.RequiresRepository) && (node.Context.Structures.Count == 0))
			begin
				data message = String.Format("Template {0} requires a repository structure and no structure was specified.", node.Context.CurrentTemplateBaseName)
				Errors.Add(Tuple.Create(message, (int)0, (int)0, node.Context.CurrentTemplate))
			end

			;; Does anything in the tree require that a namespace is specified?
			if ((node.RequiresNamespace && String.IsNullOrWhiteSpace(node.Context.CurrentTask.Namespace)) && String.IsNullOrWhiteSpace(node.Context.Namespace))
			begin
				data message = String.Format("Template {0} requires a namespace and no namespace was specified.", node.Context.CurrentTemplateBaseName)
				Errors.Add(Tuple.Create(message, (int)0, (int)0, node.Context.CurrentTemplate))
			end

			;; Check for required user-defined tokens
			if ((node.RequiredUserTokens != ^null) && (node.RequiredUserTokens.Count > 0))
			begin
				data requiredToken, string
				foreach requiredToken in node.RequiredUserTokens
				begin
					data foundUserToken = false
					data ut, @UserToken
					foreach ut in node.Context.UserTokens
					begin
						if (ut.Name == requiredToken)
						begin
							foundUserToken = true
							exitloop
						end
					end
					if (!foundUserToken)
					begin
						data message = String.Format("Template {0} requires a user-defined token {1} which is not defined.", node.Context.CurrentTemplateBaseName, requiredToken)
						Errors.Add(Tuple.Create(message, (int)0, (int)0, node.Context.CurrentTemplate))
					end
				end
			end

			;; Check for required custom token expanders
			if ((node.RequiredCustomTokens != ^null) && (node.RequiredCustomTokens.Count > 0))
			begin
				data requiredToken, @Tuple<TokenValidity, string>
				foreach requiredToken in node.RequiredCustomTokens
				begin
					data tokenFound = false
					data customToken, @Tuple<string, string, TokenValidity, TokenCaseMode, Func<Token, FileNode, IEnumerable<LoopNode>, string>>
					foreach customToken in node.Context.CustomTokenExpanders
					begin
						if ((customToken.Item3 == requiredToken.Item1) && (customToken.Item1 == requiredToken.Item2))
						begin
							tokenFound = true
							exitloop
						end
					end
					if (!tokenFound)
					begin
						data message = String.Format("Template {0} requires a custom {1} token {2} which has not been loaded.", node.Context.CurrentTemplateBaseName, requiredToken.Item1, requiredToken.Item2)
						Errors.Add(Tuple.Create(message, (int)0, (int)0, node.Context.CurrentTemplate))
					end
				end
			end

			;; Check for required custom expression processors
			if ((node.RequiredCustomExpressions != ^null) && (node.RequiredCustomExpressions.Count > 0))
			begin
				data requiredExpression, @Tuple<TokenValidity, string>
				foreach requiredExpression in node.RequiredCustomExpressions
				begin
					data expressionFound = false
					data customExpression, @Tuple<string, string, TokenValidity, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>
					foreach customExpression in node.Context.CustomExpressionEvaluators
					begin
						if ((customExpression.Item3 == requiredExpression.Item1) && (customExpression.Item1 == requiredExpression.Item2))
						begin
							expressionFound = true
							exitloop
						end
					end
					if (!expressionFound)
					begin
						data message = String.Format("Template {0} requires a custom {1} expression {2} which has not been loaded.", node.Context.CurrentTemplateBaseName, requiredExpression.Item1, requiredExpression.Item2)
						Errors.Add(Tuple.Create(message, (int)0, (int)0, node.Context.CurrentTemplate))
					end
				end
			end

			;; Check for required processing options
			if ((node.RequiredOptions != ^null) && (node.RequiredOptions.Count > 0))
			begin
				data requiredOption, string
				foreach requiredOption in node.RequiredOptions
				begin
					using requiredOption select
					("FL"),
					begin
						if (!node.Context.CurrentTask.IgnoreExcludeLanguage)
						begin
							data message = String.Format("Template {0} requires that the 'ignore excluded by language' option (-f l) is used.", node.Context.CurrentTemplateBaseName)
							Errors.Add(Tuple.Create(message, (int)0, (int)0, node.Context.CurrentTemplate))
						end
					end
					("FO"),
					begin
						if (!node.Context.CurrentTask.IncludeOverlayFields)
						begin
							data message = String.Format("Template {0} requires that the 'include overlay fields' option (-f o) is used.", node.Context.CurrentTemplateBaseName)
							Errors.Add(Tuple.Create(message, (int)0, (int)0, node.Context.CurrentTemplate))
						end
					end
					("FR"),
					begin
						if (!node.Context.CurrentTask.HonorExcludeReportWriter)
						begin
							data message = String.Format("Template {0} requires that the 'honor excluded by ReportWriter' option (-f r) is used.", node.Context.CurrentTemplateBaseName)
							Errors.Add(Tuple.Create(message, (int)0, (int)0, node.Context.CurrentTemplate))
						end
					end
					("FT"),
					begin
						if (!node.Context.CurrentTask.HonorExcludeToolkit)
						begin
							data message = String.Format("Template {0} requires that the 'honor excluded by Toolkit' option (-f t) is used.", node.Context.CurrentTemplateBaseName)
							Errors.Add(Tuple.Create(message, (int)0, (int)0, node.Context.CurrentTemplate))
						end
					end
					("FW"),
					begin
						if (!node.Context.CurrentTask.HonorExcludeWeb)
						begin
							data message = String.Format("Template {0} requires that the 'honor excluded by Web' option (-f w) is used.", node.Context.CurrentTemplateBaseName)
							Errors.Add(Tuple.Create(message, (int)0, (int)0, node.Context.CurrentTemplate))
						end
					end
					("MS"),
					begin
						if (!node.Context.CurrentTask.MultipleStructures)
						begin
							data message = String.Format("Template {0} requires that the 'multiple structures' option (-ms) is used.", node.Context.CurrentTemplateBaseName)
							Errors.Add(Tuple.Create(message, (int)0, (int)0, node.Context.CurrentTemplate))
						end
					end
					("PREFIX"),
					begin
						if (String.IsNullOrWhiteSpace(node.Context.CurrentTask.FieldPrefix))
						begin
							data message = String.Format("Template {0} requires that the 'field prefix' option (-prefix) is used.", node.Context.CurrentTemplateBaseName)
							Errors.Add(Tuple.Create(message, (int)0, (int)0, node.Context.CurrentTemplate))
						end
					end
					("SUBSET"),
					begin
						if (String.IsNullOrWhiteSpace(node.Context.CurrentTask.Subset) && (node.Context.CurrentTask.SubsetFields.Count == 0))
						begin
							data message = String.Format("Template {0} requires that subset processing is (-subset or -fields) is used.", node.Context.CurrentTemplateBaseName)
							Errors.Add(Tuple.Create(message, (int)0, (int)0, node.Context.CurrentTemplate))
						end
					end
					endusing
				end
			end

		endmethod

	endclass

endnamespace

