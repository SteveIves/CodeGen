;;*****************************************************************************
;;
;; Title:       ProcessExpression.dbl
;;
;; Type:        Function
;;
;; Description: Processes expressions
;;
;; Date:        11th November 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI
import System.Collections

namespace CodeGen.Engine
	
	function ProcessExpression				,Boolean
		required in    TokenStart           ,int
		required in    TokenEnd             ,int
		required inout LoopConditionMode    ,@ArrayList
		required inout LoopConditionApplies ,@ArrayList
		required inout LoopOutputOff		,Boolean
		required in    OuterLoopOutputOff	,Boolean
		required inout buffer               ,a
		
		endparams
		
		stack record local_data
			ReplacedToken			,Boolean
			EndConditionPos			,int
			explicitCloseTag		,Boolean
			endCloseTagLength		,int
		endrecord
		
	proc

		init local_data
		endCloseTagLength = 5
		
		;;Do we need to suppress output because of this new condition?
		if (!LoopOutputOff&&!(boolean)LoopConditionApplies[LoopConditionApplies.Count-1])
			LoopOutputOff = true
				
		if (!EndConditionPos = instr(TokenEnd,buffer,"</IF>"))
		begin
			data closeTag, String, "</IF "+(a)LoopConditionMode[LoopConditionMode.Count-1]+">"
			EndConditionPos = instr(TokenEnd,buffer,closeTag)
			explicitCloseTag = true
			endCloseTagLength = closeTag.Length
		end
			
		;;Is this a single-line condition?
		if (EndConditionPos) then
		begin
			;;Yes, this is a single line condition
			data msg, String, "     - Processing in-line "+(a)LoopConditionMode[LoopConditionMode.Count-1]+" condition, depth "+string(LoopConditionApplies.Count)
				
			;;Do we need to keep the content?
			if (LoopOutputOff) then
			begin
				;;No, remove the <IF></IF> tokens AND the content
				msg = msg + ", excluding content"
				if ((TokenStart)>1) then
					buffer = buffer(1,TokenStart-1) + buffer(EndConditionPos+endCloseTagLength,^size(buffer))
				else
					buffer = buffer(EndConditionPos+endCloseTagLength,^size(buffer))
			end
			else
			begin
				;;Yes, remove the <IF></IF> tokens but leave the content
				msg = msg + ", retaining content"
				if ((TokenStart)>1) then
					buffer = buffer(1,TokenStart-1) + buffer(TokenEnd+1,EndConditionPos-1) + buffer(EndConditionPos+endCloseTagLength,^size(buffer))
				else
					buffer = buffer(TokenEnd+1,EndConditionPos-1) + buffer(EndConditionPos+endCloseTagLength,^size(buffer))
			end
			Logging.DebugLog(msg)
				
			ReplacedToken = true
				
			;;This was a single-line condition, and we have dealt with it, so
			;;remove the condition from the "stack"
				
			LoopConditionApplies.RemoveAt(LoopConditionApplies.Count-1)
			LoopConditionMode.RemoveAt(LoopConditionMode.Count-1)
				
			;;And figure out if we need to suppress output now based on the new "stack"
			LoopOutputOff = OuterLoopOutputOff
			if (LoopConditionApplies.Count)
			begin
				data tmpval, @boolean
				foreach tmpval in LoopConditionApplies
				begin
					if (!(boolean)tmpval)
					begin
						LoopOutputOff = true
						exitloop
					end
				end
			end
		end
		else
		begin
			;;The condition spans multiple lines, wind forward
			if (Env.Debug)
			begin
				data msg, String, "     - Start multi-line "+(a)LoopConditionMode[LoopConditionMode.Count-1]+" condition, depth "+string(LoopConditionApplies.Count)
				if (LoopOutputOff) then
					msg = msg + ", output now OFF"
				else
					msg = msg + ", output now ON"
				Logging.DebugLog(msg)
			end
		end
		
		freturn ReplacedToken
		
	endfunction
	
endnamespace

