;;*****************************************************************************
;;
;; Title:       Env.dbl
;;
;; Type:        Class
;;
;; Description: Propagates environment settings within CodeGen
;;
;; Date:        9th November 2009
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI
import System.Collections
import System.Collections.Generic
import System.Collections.ObjectModel

.include "CODEGEN_SRC:codegen.def"

namespace CodeGen.Engine

    public sealed class Env

		;; * * * * IMPORTANT: IF ANYTHING IS ADDED, UPDATE THE RESET METHOD * * * *

        private static mDbr                     ,boolean                ;;Running under dbr.exe
		
        private static mVerbose                 ,boolean                ;;In verbose mode
		private static mDebug                   ,boolean                ;;Is debug mode enabled?
		private static mSuppressLogging			,Boolean				;;Suppress all logging
		private static mListFiles				,boolean				;;List files created (not in Verbose or Debug modes)
		
		private static mRpsInUse                ,boolean                ;;Is Repository being used?
        private static mGenFromWsc              ,boolean                ;;Generating from a window script
        private static mNoWscAttributes         ,Boolean                ;;Don't apply field attributes from script files
        private static mAllStructures           ,boolean                ;;Are all structures being processed
        private static mIncludeOverlays         ,boolean                ;;Include overlay fields
        private static mExcludeLanguage         ,boolean                ;;Honor excluded by language flag
        private static mExcludeToolkit          ,boolean                ;;Honor excluded by toolkit flag
        private static mExcludeReport           ,boolean                ;;Honor excluded by report writer flag
		private static mExcludeWeb              ,boolean                ;;Honor excluded by web flag
		private static mReplaceFiles			,boolean				;;Replace existing files?
        private static mFileIndex               ,int                    ;;File index currently in use
        private static mFileIndexes             ,[#]int                 ;;File index currently in use
        private static mWindowHeight            ,int ,20                ;;Script input window height
        private static mWindowWidth             ,int ,78                ;;Script input window width
        private static mCharacterWidth          ,int ,12                ;;Width of a character in pixels
        private static mCharacterHeight         ,int ,25                ;;Height of a row in pixels
        private static mFilesCreated            ,int                    ;;Number of files created
		private static mFilesFailed             ,int                    ;;Number of files failed to create
		private static mOverridePrimaryKeyNum	,int ,0					;;Override key number used for <PRIMARY_KEY>
        private static mDontExpandImplicitGroups,boolean                ;;Don't expand groups to individual fields
        private static mGroupPrefix             ,boolean                ;;Prefix group fields with group name
        private static mGroupMemberPrefix       ,boolean                ;;Use repository group field prefix
        private static mMultipleStructures      ,boolean                ;;Allow multiple structures in input window scripts
        private static mLocalFields             ,boolean                ;;Allow local fields in input window scripts
        private static mClDoFieldPrefix         ,boolean                ;;Command line specifies a field prefix
        private static mClFieldPrefix           ,String                 ;;Command line specified field prefix
        private static mTemplateDir             ,String                 ;;Template file directory
        private static mOutputDir               ,String                 ;;Output directory
        private static mDefaultNamespace        ,String                 ;;Default namespace
        private static mAuthor                  ,String                 ;;Author name
        private static mCompany                 ,String                 ;;Company name
        private static mCurrentTemplate         ,String                 ;;Template name
		private static mWindowName              ,String                 ;;Window name (only when processing an input window)
		private static mLastErrorMessage		,String					;;Last error message reported
        private static mCurrentStructure        ,@RpsStructure          ;;Current structure being processed
		private static mCurrentStructures	    ,@RpsStructureCollection;;Structures currently being processed together
		private static mUserTokens              ,@ObservableCollection<UserToken>
        private static mButtons                 ,@WscButtonCollection   ;;Collection of buttons
		private static mOutputFiles             ,@List<String>          ;;Output file names
		private static mSubSetName              ,String                 ;;Structure subset to process
		private static mSubSetFields			,@ArrayList				;;Make a subset from these fields
        private static mSelectionWindowScript   ,String

        private static mDeveloperDebug          ,boolean                ;;Save template debugging information (-debug)

		private static mProFormaStructures		,@RpsStructureCollection

		private static mCounter1				,int
		private static mCounter2				,int

		private static mGuid1					,Guid, Guid.NewGuid()
		private static mGuid2					,Guid, Guid.NewGuid()
		private static mGuid3					,Guid, Guid.NewGuid()

		public static method Reset, void
			endparams
		proc
			mRpsInUse					= false
			mGenFromWsc					= false
			mNoWscAttributes			= false
			mAllStructures				= false
			mIncludeOverlays			= false
			mExcludeLanguage			= false
			mExcludeToolkit				= false
			mExcludeReport				= false
			mExcludeWeb					= false
			mReplaceFiles				= false
			mFileIndex					= 0
			;TODO: Bug: should really be mFileIndexes = ^null. Fixed in V10
			mFileIndexes				= new int[1]
			mWindowHeight				= 0
			mWindowWidth				= 78
			mCharacterWidth				= 12
			mCharacterHeight			= 25
			mFilesCreated				= 0
			mFilesFailed				= 0
			mDontExpandImplicitGroups	= false
			mGroupPrefix				= false
			mGroupMemberPrefix			= false
			mMultipleStructures			= false
			mLocalFields				= false
			mClDoFieldPrefix			= false
			mClFieldPrefix				= ""
			mTemplateDir				= ""
			mOutputDir					= ""
			mDefaultNamespace			= ""
			mCurrentTemplate			= ""
			mWindowName					= ""
			mLastErrorMessage			= ""
			mCurrentStructure			= ^null
			mCurrentStructures			= ^null
			mUserTokens					= ^null
			mButtons					= new WscButtonCollection()
			mOutputFiles				= ^null
			mSubSetName					= ""
			mSubSetFields				= new ArrayList()
			mSelectionWindowScript		= ""
			mProFormaStructures			= new RpsStructureCollection(RpsLoadMode.NoLoad)
			mCounter1					= 0
			mCounter2					= 0
			mListFiles					= false
			mTaskMessages				= ^null
		endmethod

		private static mTaskSetMessages, @ObservableCollection<String>
		
		;;; <summary>
		;;; The output messages for the current task set.
		;;; This collection receives all messages generated during the processing of the entire task set.
		;;; </summary>
		public static property TaskSetMessages, @ObservableCollection<String>
			method get
			proc
				if (mTaskSetMessages==^null)
					mTaskSetMessages = new ObservableCollection<String>()
				mreturn mTaskSetMessages
			endmethod
			method set
			proc
				mTaskSetMessages = value
			endmethod
		endproperty
		
		private static mTaskMessages, @ObservableCollection<String>

		;;; <summary>
		;;; The output messages for the current task
		;;; </summary>
		public static property TaskMessages, @ObservableCollection<String>
			method get
			proc
				mreturn mTaskMessages
			endmethod
			method set
			proc
				mTaskMessages = value
			endmethod
		endproperty

        ;;;<summary>
        ;;;Running with DBR as opposed to DBS (Windows, Traditional)
        ;;;<summary>
        public static property Dbr, boolean
            method get
            proc
                mreturn mDbr
            endmethod
            method set
            proc
                mDbr = value
            endmethod
        endproperty

.region "Logging"

        ;;;<summary>
        ;;;Verbose logging enabled (-v)
        ;;;<summary>
        public static property Verbose, boolean
            method get
            proc
                mreturn mVerbose
            endmethod
            method set
            proc
                mVerbose = value
            endmethod
        endproperty

		;;;<summary>
		;;;Debug logging enabled (-d)
		;;;<summary>
		public static property Debug, boolean
			method get
			proc
				mreturn mDebug
			endmethod
			method set
			proc
				mDebug = value
			endmethod
		endproperty
		
		;;;<summary>
		;;;Developer debug logging enabled (-debug)
		;;;<summary>
		public static property DeveloperDebug, boolean
            method get
            proc
                mreturn mDeveloperDebug
            endmethod
            method set
            proc
                mDeveloperDebug = value
            endmethod
        endproperty
        
		;;;<summary>
		;;;Suppress all logging
		;;;<summary>
		public static property SuppressLogging, boolean
			method get
			proc
				mreturn mSuppressLogging
			endmethod
			method set
			proc
				mSuppressLogging = value
			endmethod
		endproperty
		
		;;;<summary>
		;;;List output file names (-lf, not in Verbose or Debug modes)
		;;;<summary>
		public static property ListFiles, boolean
			method get
			proc
				mreturn mListFiles
			endmethod
			method set
			proc
				mListFiles = value
			endmethod
		endproperty

.endregion

        ;;;<summary>
        ;;;Is a repository structure being processed
        ;;;<summary>
        public static property RpsInUse, boolean
            method get
            proc
                mreturn mRpsInUse
            endmethod
            method set
            proc
                mRpsInUse = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Are we generating from a UI Toolkit window script file
        ;;;<summary>
        public static property GenFromWsc, boolean
            method get
            proc
                mreturn mGenFromWsc
            endmethod
            method set
            proc
                mGenFromWsc = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Ignore field attributes in UI Toolkit window script files
        ;;;<summary>
        public static property NoWscAttributes, boolean
            method get
            proc
                mreturn mNoWscAttributes
            endmethod
            method set
            proc
                mNoWscAttributes = value
            endmethod
        endproperty
        
        ;;;<summary>
        ;;;Are we processing all repository structures
        ;;;<summary>
        public static property AllStructures, boolean
            method get
            proc
                mreturn mAllStructures
            endmethod
            method set
            proc
                mAllStructures = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Are we including overla fields
        ;;;<summary>
        public static property IncludeOverlays, boolean
            method get
            proc
                mreturn mIncludeOverlays
            endmethod
            method set
            proc
                mIncludeOverlays = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Are we excluding "excluded by language" fields
        ;;;<summary>
        public static property ExcludeLanguage, boolean
            method get
            proc
                mreturn mExcludeLanguage
            endmethod
            method set
            proc
                mExcludeLanguage = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Are we excluding "excluded by Toolkit" fields
        ;;;<summary>
        public static property ExcludeToolkit, boolean
            method get
            proc
                mreturn mExcludeToolkit
            endmethod
            method set
            proc
                mExcludeToolkit = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Are we excluding "excluded by ReportWriter" fields
        ;;;<summary>
        public static property ExcludeReport, boolean
            method get
            proc
                mreturn mExcludeReport
            endmethod
            method set
            proc
                mExcludeReport = value
            endmethod
        endproperty

		;;;<summary>
		;;;Are we excluding "excluded by Web" fields
		;;;<summary>
		public static property ExcludeWeb, boolean
			method get
			proc
				mreturn mExcludeWeb
			endmethod
			method set
			proc
				mExcludeWeb = value
			endmethod
		endproperty
		
		;;;<summary>
		;;;Are we excluding replacing existing files?
		;;;<summary>
		public static property ReplaceFiles, boolean
			method get
			proc
				mreturn mReplaceFiles
			endmethod
			method set
			proc
				mReplaceFiles = value
				if (mReplaceFiles) then
					xcall flags(300,0)
				else
					xcall flags(300,1)
			endmethod
		endproperty

		;;;<summary>
        ;;;Current file index to use
        ;;;<summary>
        public static property FileIndex, int
            method get
            proc
                mreturn mFileIndex
            endmethod
            method set
            proc
                mFileIndex = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Array of file indexes relating to each structure being processed
        ;;;<summary>
        public static property FileIndexes, [#]int
            method get
            proc
                mreturn mFileIndexes
            endmethod
            method set
            proc
                mFileIndexes = value
            endmethod
        endproperty
        
        ;;;<summary>
        ;;;Height of window in rows
        ;;;<summary>
        public static property WindowHeight, int
            method get
            proc
                mreturn mWindowHeight
            endmethod
            method set
            proc
                mWindowHeight = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Width of window in columns
        ;;;<summary>
        public static property WindowWidth, int
            method get
            proc
                mreturn mWindowWidth
            endmethod
            method set
            proc
                mWindowWidth = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Width of a character (column) in pixels
        ;;;<summary>
        public static property CharacterWidth, int
            method get
            proc
                mreturn mCharacterWidth
            endmethod
            method set
            proc
                mCharacterWidth = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Height of a character (row) in pixels
        ;;;<summary>
        public static property CharacterHeight, int
            method get
            proc
                mreturn mCharacterHeight
            endmethod
            method set
            proc
                mCharacterHeight = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;NUmber of files that have been generated
        ;;;<summary>
        public static property FilesCreated, int
            method get
            proc
                mreturn mFilesCreated
            endmethod
            method set
            proc
                mFilesCreated = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Number of files that failed to generate
        ;;;<summary>
        public static property FilesFailed, int
            method get
            proc
                mreturn mFilesFailed
            endmethod
            method set
            proc
                mFilesFailed = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Template file directory
        ;;;<summary>
        public static property TemplateDir, String
            method get
            proc
                if (mTemplateDir==^null)
                    mTemplateDir=""
                mreturn mTemplateDir
            endmethod
            method set
            proc
				mTemplateDir = atrim(value)
            endmethod
        endproperty

        ;;;<summary>
        ;;;Output file directory
        ;;;<summary>
        public static property OutputDir, String
            method get
            proc
                if (mOutputDir==^null)
                    mOutputDir=""
                mreturn mOutputDir
            endmethod
            method set
            proc
                mOutputDir = atrim(value)
            endmethod
        endproperty

        ;;;<summary>
        ;;;Value to use for <NAMESPACE> token
        ;;;<summary>
        public static property DefaultNamespace, String
            method get
            proc
                if (mDefaultNamespace==^null)
                    mDefaultNamespace=""
                mreturn mDefaultNamespace
            endmethod
            method set
            proc
                mDefaultNamespace = atrim(value)
            endmethod
        endproperty

        ;;;<summary>
        ;;;Author name for <AUTHOR> token
        ;;;<summary>
        public static property Author, String
            method get
            proc
                if (String.IsNullOrWhiteSpace(mAuthor))
					mAuthor = "CodeGen"
				mreturn mAuthor
            endmethod
            method set
            proc
                mAuthor = value.Trim()
            endmethod
        endproperty

        ;;;<summary>
        ;;;Company name for <COMPANY> token
        ;;;<summary>
        public static property Company, String
            method get
            proc
				if ((mCompany==^null)||(mCompany==""))
                    mCompany="Synergex"
                mreturn mCompany
            endmethod
            method set
            proc
                mCompany = atrim(value)
            endmethod
        endproperty

        ;;;<summary>
        ;;;Name of template being processed
        ;;;<summary>
        public static property CurrentTemplate, String
            method get
            proc
                if (mCurrentTemplate==^null)
                    mCurrentTemplate=""
                mreturn mCurrentTemplate
            endmethod
            method set
            proc
                mCurrentTemplate = atrim(value)
            endmethod
        endproperty

		;;;<summary>
		;;;Name of current window
		;;;<summary>
		public static property WindowName, String
			method get
			proc
				if (mWindowName==^null)
					mWindowName=""
				mreturn mWindowName
			endmethod
			method set
			proc
				mWindowName = atrim(value)
			endmethod
		endproperty
		
		;;;<summary>
		;;;Last error message reported
		;;;<summary>
		public static property LastErrorMessage, String
			method get
			proc
				mreturn mLastErrorMessage
			endmethod
			method set
			proc
				mLastErrorMessage = value
			endmethod
		endproperty
		
        ;;;<summary>
        ;;;Current structure being processed
        ;;;<summary>
        public static property CurrentStructure, @RpsStructure
            method get
            proc
                mreturn mCurrentStructure
            endmethod
            method set
            proc
                mCurrentStructure = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Collection of current structures being processed together (-ms option)
        ;;;<summary>
        public static property CurrentStructures, @RpsStructureCollection
            method get
            proc
                mreturn mCurrentStructures
            endmethod
            method set
            proc
                mCurrentStructures = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Collection of user-defined tokens
        ;;;<summary>
		public static property UserTokens, @ObservableCollection<UserToken>
            method get
            proc
                mreturn mUserTokens
            endmethod
            method set
            proc
                mUserTokens = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Collection of button definitions, either from DefaultButtons.xml or the current window script input window
        ;;;<summary>
        public static property Buttons, @WscButtonCollection
            method get
			proc
				if (mButtons==^null)
					mButtons = new WscButtonCollection()
                mreturn mButtons
            endmethod
            method set
            proc
                mButtons = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Don't ecpand implicit groups to individial fields (-g i)
        ;;;<summary>
        public static property DontExpandImplicitGroups, boolean
            method get
            proc
                mreturn mDontExpandImplicitGroups
            endmethod
            method set
            proc
                mDontExpandImplicitGroups = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Don't prefix group fields with group name (-g f)
        ;;;<summary>
        public static property GroupPrefix, boolean
            method get
            proc
                mreturn mGroupPrefix
            endmethod
            method set
            proc
                mGroupPrefix = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Don't use repository group field prefix (-g r)
        ;;;<summary>
        public static property GroupMemberPrefix, boolean
            method get
            proc
                mreturn mGroupMemberPrefix
            endmethod
            method set
            proc
                mGroupMemberPrefix = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Don't support input windows which reference multiple structures
        ;;;<summary>
        public static property MultipleStructures, boolean
            method get
            proc
                mreturn mMultipleStructures
            endmethod
            method set
            proc
                mMultipleStructures = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;
        ;;;<summary>
        public static property LocalFields, boolean
            method get
            proc
                mreturn mLocalFields
            endmethod
            method set
            proc
                mLocalFields = value
            endmethod
        endproperty

		;;;<summary>
		;;;Collection of file names that have been generated
		;;;<summary>
		public static property OutputFiles, @List<String>
			method get
			proc
				mreturn mOutputFiles
			endmethod
			method set
			proc
				mOutputFiles = value
			endmethod
		endproperty
			
		;;;<summary>
        ;;;Apply a prefix to field names (-prefix)
        ;;;<summary>
        public static property ClDoFieldPrefix, boolean
            method get
            proc
                mreturn mClDoFieldPrefix
            endmethod
            method set
            proc
                mClDoFieldPrefix = value
            endmethod
        endproperty

        ;;;<summary>
        ;;;Prefix to apply to field names (-prefix <prefix>)
        ;;;<summary>
        public static property ClFieldPrefix, string
            method get
            proc
                if (mClFieldPrefix==^null)
                    mClFieldPrefix=""
                mreturn mClFieldPrefix
            endmethod
            method set
            proc
                mClFieldPrefix = atrim(value)
            endmethod
        endproperty

		;;;<summary>
		;;;Name of subset of fields being processed (-subset <name>)
		;;;<summary>
		public static property SubSetName, string
			method get
			proc
				if (mSubSetName==^null)
					mSubSetName=""
				mreturn mSubSetName
			endmethod
			method set
			proc
				mSubSetName = atrim(value)
			endmethod
		endproperty
			
		;;;<summary>
		;;;Fields to make a subset from (-fields <name> ...)
		;;;<summary>
		public static property SubSetFields, @ArrayList
			method get
			proc
				if (mSubSetFields==^null)
					mSubSetFields = new ArrayList()
				mreturn mSubSetFields
			endmethod
			method set
			proc
				mSubSetFields = value
			endmethod
		endproperty
			
		;;;<summary>
        ;;;Name of UI Toolkit window script containing selection windows (-ws <filespec>)
        ;;;<summary>
        public static property SelectionWindowScript, string
            method get
            proc
                if (mSelectionWindowScript==^null)
                    mSelectionWindowScript=""
                mreturn mSelectionWindowScript
            endmethod
            method set
            proc
                mSelectionWindowScript = atrim(value)
            endmethod
        endproperty
        
		public static property ProFormaStructures, @RpsStructureCollection
			method get
			proc
				mreturn mProFormaStructures
			endmethod
			method set
			proc
				mProFormaStructures = value
			endmethod
		endproperty

		public static property OverridePrimaryKeyNum, int
			method get
			proc
				mreturn mOverridePrimaryKeyNum
			endmethod
			method set
			proc
				mOverridePrimaryKeyNum = value
			endmethod
		endproperty

.region "Extensions"

		private static mCustomTokens, @ArrayList

		;;;<summary>
        ;;;Collection of custom tokens
        ;;;<summary>
        public static property CustomTokens, @ArrayList
			method get
			proc
				if (mCustomTokens==^null)
					mCustomTokens = new ArrayList()
				mreturn mCustomTokens
			endmethod
			private method set
			proc
				mCustomTokens = value
			endmethod
		endproperty
		
		private static mCustomFieldTokens, @ArrayList
			
		;;;<summary>
        ;;;Collection of custom field loop tokens
        ;;;<summary>
        public static property CustomFieldTokens, @ArrayList
			method get
			proc
				if (mCustomFieldTokens==^null)
					mCustomFieldTokens = new ArrayList()
				mreturn mCustomFieldTokens
			endmethod
			private method set
			proc
				mCustomFieldTokens = value
			endmethod
		endproperty
		
		private static mCustomSelectionTokens, @ArrayList
			
		;;;<summary>
        ;;;Collection of custom field selection loop tokens
        ;;;<summary>
        public static property CustomSelectionTokens, @ArrayList
			method get
			proc
				if (mCustomSelectionTokens==^null)
					mCustomSelectionTokens = new ArrayList()
				mreturn mCustomSelectionTokens
			endmethod
			private method set
			proc
				mCustomSelectionTokens = value
			endmethod
		endproperty
			
		private static mCustomKeyTokens, @ArrayList
			
		;;;<summary>
        ;;;Collection of custom key loop tokens
        ;;;<summary>
        public static property CustomKeyTokens, @ArrayList
			method get
			proc
				if (mCustomKeyTokens==^null)
					mCustomKeyTokens = new ArrayList()
				mreturn mCustomKeyTokens
			endmethod
			private method set
			proc
				mCustomKeyTokens = value
			endmethod
		endproperty

		private static mCustomSegmentTokens, @ArrayList

        ;;;<summary>
        ;;;Collection of custom key segment loop tokens
        ;;;<summary>
        public static property CustomSegmentTokens, @ArrayList
			method get
			proc
				if (mCustomSegmentTokens==^null)
					mCustomSegmentTokens = new ArrayList()
				mreturn mCustomSegmentTokens
			endmethod
			private method set
			proc
				mCustomSegmentTokens = value
			endmethod
		endproperty

		private static mCustomRelationTokens, @ArrayList

        ;;;<summary>
        ;;;Collection of custom relation loop tokens
        ;;;<summary>
        public static property CustomRelationTokens, @ArrayList
			method get
			proc
				if (mCustomRelationTokens==^null)
					mCustomRelationTokens = new ArrayList()
				mreturn mCustomRelationTokens
			endmethod
			private method set
			proc
				mCustomRelationTokens = value
			endmethod
		endproperty
		
		private static mCustomEnumTokens, @ArrayList

        ;;;<summary>
        ;;;Collection of custom enumeration loop tokens
        ;;;<summary>
        public static property CustomEnumTokens, @ArrayList
			method get
			proc
				if (mCustomEnumTokens==^null)
					mCustomEnumTokens = new ArrayList()
				mreturn mCustomEnumTokens
			endmethod
			private method set
			proc
				mCustomEnumTokens = value
			endmethod
		endproperty
		
		private static mCustomEnumMemberTokens, @ArrayList

        ;;;<summary>
        ;;;Collection of custom enumeration member loop tokens
        ;;;<summary>
        public static property CustomEnumMemberTokens, @ArrayList
			method get
			proc
				if (mCustomEnumMemberTokens==^null)
					mCustomEnumMemberTokens = new ArrayList()
				mreturn mCustomEnumMemberTokens
			endmethod
			private method set
			proc
				mCustomEnumMemberTokens = value
			endmethod
		endproperty
		
		private static mCustomButtonTokens, @ArrayList

		;;;<summary>
        ;;;Collection of custom button loop tokens
        ;;;<summary>
        public static property CustomButtonTokens, @ArrayList
			method get
			proc
				if (mCustomButtonTokens==^null)
					mCustomButtonTokens = new ArrayList()
				mreturn mCustomButtonTokens
			endmethod
			private method set
			proc
				mCustomButtonTokens = value
			endmethod
		endproperty
		
		private static mCustomFileTokens, @ArrayList

        ;;;<summary>
        ;;;Collection of custom file loop tokens
        ;;;<summary>
        public static property CustomFileTokens, @ArrayList
			method get
			proc
				if (mCustomFileTokens==^null)
					mCustomFileTokens = new ArrayList()
				mreturn mCustomFileTokens
			endmethod
			private method set
			proc
				mCustomFileTokens = value
			endmethod
		endproperty

		private static mCustomTagTokens, @ArrayList

		;;;<summary>
		;;;Collection of custom tag loop tokens
		;;;<summary>
		public static property CustomTagTokens, @ArrayList
			method get
			proc
				if (mCustomTagTokens==^null)
					mCustomTagTokens = new ArrayList()
				mreturn mCustomTagTokens
			endmethod
			private method set
			proc
				mCustomTagTokens = value
			endmethod
		endproperty

		private static mCustomFieldExpressions, @ArrayList
			
		;;;<summary>
		;;;Collection of custom field loop expressions
		;;;<summary>
		public static property CustomFieldExpressions, @ArrayList
			method get
			proc
				if (mCustomFieldExpressions==^null)
					mCustomFieldExpressions = new ArrayList()
				mreturn mCustomFieldExpressions
			endmethod
			private method set
			proc
				mCustomFieldExpressions = value
			endmethod
		endproperty
		
		private static mCustomButtonExpressions, @ArrayList
				
		;;;<summary>
		;;;Collection of custom button loop expressions
		;;;<summary>
		public static property CustomButtonExpressions, @ArrayList
			method get
			proc
				if (mCustomButtonExpressions==^null)
					mCustomButtonExpressions = new ArrayList()
				mreturn mCustomButtonExpressions
			endmethod
			private method set
			proc
				mCustomButtonExpressions = value
			endmethod
		endproperty
		
		private static mCustomEnumExpressions, @ArrayList
				
		;;;<summary>
		;;;Collection of custom enum loop expressions
		;;;<summary>
		public static property CustomEnumExpressions, @ArrayList
			method get
			proc
				if (mCustomEnumExpressions==^null)
					mCustomEnumExpressions = new ArrayList()
				mreturn mCustomEnumExpressions
			endmethod
			private method set
			proc
				mCustomEnumExpressions = value
			endmethod
		endproperty

		private static mCustomEnumMemberExpressions, @ArrayList
			
		;;;<summary>
		;;;Collection of custom enum member loop expressions
		;;;<summary>
		public static property CustomEnumMemberExpressions, @ArrayList
			method get
			proc
				if (mCustomEnumMemberExpressions==^null)
					mCustomEnumMemberExpressions = new ArrayList()
				mreturn mCustomEnumMemberExpressions
			endmethod
			private method set
			proc
				mCustomEnumMemberExpressions = value
			endmethod
		endproperty
		
		private static mCustomFileExpressions, @ArrayList
				
		;;;<summary>
		;;;Collection of custom file loop expressions
		;;;<summary>
		public static property CustomFileExpressions, @ArrayList
			method get
			proc
				if (mCustomFileExpressions==^null)
					mCustomFileExpressions = new ArrayList()
				mreturn mCustomFileExpressions
			endmethod
			private method set
			proc
				mCustomFileExpressions = value
			endmethod
		endproperty

		private static mCustomTagExpressions, @ArrayList
			
		;;;<summary>
		;;;Collection of custom file loop expressions
		;;;<summary>
		public static property CustomTagExpressions, @ArrayList
			method get
			proc
				if (mCustomTagExpressions==^null)
					mCustomTagExpressions = new ArrayList()
				mreturn mCustomTagExpressions
			endmethod
			private method set
			proc
				mCustomTagExpressions = value
			endmethod
		endproperty
		
		private static mCustomKeyExpressions, @ArrayList
				
		;;;<summary>
		;;;Collection of custom key loop expressions
		;;;<summary>
		public static property CustomKeyExpressions, @ArrayList
			method get
			proc
				if (mCustomKeyExpressions==^null)
					mCustomKeyExpressions = new ArrayList()
				mreturn mCustomKeyExpressions
			endmethod
			private method set
			proc
				mCustomKeyExpressions = value
			endmethod
		endproperty

		private static mCustomSegmentExpressions, @ArrayList
			
		;;;<summary>
		;;;Collection of custom key segment loop expressions
		;;;<summary>
		public static property CustomSegmentExpressions, @ArrayList
			method get
			proc
				if (mCustomSegmentExpressions==^null)
					mCustomSegmentExpressions = new ArrayList()
				mreturn mCustomSegmentExpressions
			endmethod
			private method set
			proc
				mCustomSegmentExpressions = value
			endmethod
		endproperty
		
		private static mCustomSelectionExpressions, @ArrayList
				
		;;;<summary>
		;;;Collection of custom field selection expressions
		;;;<summary>
		public static property CustomSelectionExpressions, @ArrayList
			method get
			proc
				if (mCustomSelectionExpressions==^null)
					mCustomSelectionExpressions = new ArrayList()
				mreturn mCustomSelectionExpressions
			endmethod
			private method set
			proc
				mCustomSelectionExpressions = value
			endmethod
		endproperty

.endregion

.region "Counters"

		public static property Counter1, int
			method get
			proc
				mreturn mCounter1
			endmethod
			method set
			proc
				mCounter1 = value
			endmethod
		endproperty
			
		public static property Counter2, int
			method get
			proc
				mreturn mCounter2
			endmethod
			method set
			proc
				mCounter2 = value
			endmethod
		endproperty

.endregion

.region "GUIDs"	
			
		public static property Guid1, String
			method get
			proc
				mreturn "{" + mGuid1.ToString() + "}"
			endmethod
		endproperty
			
		public static property Guid2, String
			method get
			proc
				mreturn "{" + mGuid2.ToString() + "}"
			endmethod
		endproperty
			
		public static property Guid3, String
			method get
			proc
				mreturn "{" + mGuid3.ToString() + "}"
			endmethod
		endproperty
			
.endregion

	endclass

endnamespace
