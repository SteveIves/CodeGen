;;*****************************************************************************
;;
;; Title:       WinDir.dbl
;;
;; Type:        Function
;;
;; Description: Returns dynamic memory section containing filenames matching
;;              a passed file specification.
;;
;; Date:        16th October 2010
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI
import System.Collections

namespace CodeGen.Engine

    enum WinDirCase
        NoChange
        UpperCase
        LowerCase
    endenum

    function WinDir, boolean

        required in  searchSpec		,a			;;Search spec
        required out matchingFiles  ,@ArrayList ;;Template names
        required in  resultsCase    ,WinDirCase ;;Return filenames in upper or lower case
        endparams

        stack record
            dll         ,D_ADDR ;;DLL Handle
        endrecord

        stack record WIN32_FIND_DATA
            FileAttributes      ,i4     ;;File attribute bit flags
            CreationTimeLow     ,i4     ;; Low-order 32 bits of file creation time (UTC format)
            CreationTimeHigh    ,i4     ;;High-order 32 bits of file creation time (UTC format)
            LastAccessTimeLow   ,i4     ;; Low-order 32 bits of last access time (UTC format)
            LastAccessTimeHigh  ,i4     ;;High-order 32 bits of last access time (UTC format)
            LastWriteTimeLow    ,i4     ;; Low-order 32 bits of last write time (UTC format)
            LastWriteTimeHigh   ,i4     ;;High-order 32 bits of last write time (UTC format)
            FileSizeHigh        ,i4     ;;High-order 32 bits of file size (bytes)
            FileSizeLow         ,i4     ;; Low-order 32 bits of file size (bytes)
            Reserved0           ,i4     ;;
            Reserved1           ,i4     ;;
            FileName            ,a260   ;;Name of file (null-terminated string)
            AlternateFileName   ,a14    ;;8.3 file name (null-terminated string
        endrecord

		stack record
			sh					,i4     ;;Search handle
			spec				,a260   ;;Search spec
            dllArgs             ,[#]@Object
		endrecord
		
        .define INVALID_HANDLE_VALUE		-1
        .define FILE_ATTRIBUTE_READONLY     %x(1)
        .define FILE_ATTRIBUTE_HIDDEN       %x(2)
        .define FILE_ATTRIBUTE_SYSTEM       %x(4)
        .define FILE_ATTRIBUTE_DIRECTORY    %x(10)
        .define FILE_ATTRIBUTE_ARCHIVE      %x(20)
        .define FILE_ATTRIBUTE_NORMAL       %x(80)
        .define FILE_ATTRIBUTE_TEMPORARY    %x(100)
        .define FILE_ATTRIBUTE_COMPRESSED   %x(800)
        .define FILE_ATTRIBUTE_OFFLINE      %x(1000)
	
	proc

		dll = dll_open("kernel32.dll")

        fill(char(0),spec)
        spec(1:trim(searchSpec))=searchSpec

        ;;Look for the first file
        dllArgs = new Object[2]
        dllArgs[1] = (Object)^addr(spec)
        dllArgs[2] = (Object)^addr(WIN32_FIND_DATA)
        sh = dll_netcall(dll,DLL_TYPE_WINAPI,"FindFirstFileA",dllArgs)

        if (sh!=INVALID_HANDLE_VALUE)
        begin
            ;;First file not a directory?
            if (!(FileAttributes & FILE_ATTRIBUTE_DIRECTORY))
            begin
                matchingFiles = new ArrayList()
				WinDirChangeCase(FileName,resultsCase)
				
                ;;Store away the first file name
				matchingFiles.Add((String)FileName(1:(instr(1,FileName,char(0))-1)))
            end

            ;;Continue the search
            repeat
            begin
                dllArgs = new Object[2]
                dllArgs[1] = (Object)sh
                dllArgs[2] = (Object)^addr(WIN32_FIND_DATA)
                if (dll_netcall(dll,DLL_TYPE_WINAPI,"FindNextFileA",dllArgs)) then
                begin
                    ;;Found another file, check it's not a directory
                    if (!(FileAttributes & FILE_ATTRIBUTE_DIRECTORY))
                    begin
						WinDirChangeCase(FileName,resultsCase)
						
                        ;;Store away the next file name
						matchingFiles.Add((String)FileName(1:(instr(1,FileName,char(0))-1)))
                    end
                end
                else
                    exitloop
            end

            ;;Close the search handle
            dllArgs = new Object[1]
            dllArgs[1] = (Object)sh
            dll_netcall(dll,DLL_TYPE_WINAPI,"FindClose",dllArgs)

        end

        dll = dll_close(dll)

        freturn ((matchingFiles!=^null)&&(matchingFiles.Count>0))

    endfunction

	;;;<summary>
	;;;Changes the case of a file name.
	;;;</summary>
	;;;<param name="fileName">File name to change</param>
	;;;<param name="newCase">Case to change to</param>
	subroutine WinDirChangeCase
		required inout fileName, a
		required in    newCase, WinDirCase
		endparams
	proc
		using newCase select
		(WinDirCase.UpperCase),
			upcase fileName
		(WinDirCase.LowerCase),
			locase fileName
		(),
			nop
		endusing

		xreturn

	endsubroutine

endnamespace

