;;*****************************************************************************
;;
;; Title:       UserTokenCollection.dbl
;;
;; Type:        Class
;;
;; Description: Represents a collection of user-defined tokens
;;
;; Date:        9th November 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System.Collections.Generic
import System.Collections.ObjectModel
import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

	public static sealed class UserTokenCollection

		;;; <summary>
		;;;	This method is used to do an initial load of user defined tokens in a token file
		;;; into the Env.UserTokens collection.
		;;; </summary>
		public static method LoadTokensFromFile, void
			required in UserTokenFile, String
			endparams
			record Local_Data
				tmpch       ,int
				RecCount    ,int
				tmpbuf      ,a256
				tokenFile	,String
			endrecord
		proc

			;;This method is used by CodeGenLauncher and CodeGenerator for user token files

			init Local_Data
			tokenFile = UserTokenFile.Trim()

			try
				open(tmpch=0,i:s,tokenFile)
			catch (ex)
				throw new CodegenException("Failed to open user defined token file " + tokenFile)
			endtry
			
			Logging.VerboseLog("Loading user defined tokens from " + tokenFile,true,false)
			
			Env.UserTokens = new ObservableCollection<UserToken>()

			repeat
			begin
				
				data pos1, int, 0
				data pos2, int, 0
				data pos3, int, 0
				data pos4, int, 0
				data lastRec, boolean, false
				
				begin
					reads(tmpch,tmpbuf,eout)
					exit
		eout,       if (rdlen()) then
						lastRec = true
					else
						exitloop
				end
				
				;;Ignore blank lines
				if (!tmpbuf)
				begin
					if (lastRec) then
						exitloop
					else
						nextloop
				end
				
				;;Ignore comment lines
				if (tmpbuf==";")
				begin
					if (lastRec) then
						exitloop
					else
						nextloop
				end
				
				RecCount += 1
				
				pos1=instr(1,tmpbuf,"<")
				if (pos1) pos2=instr(pos1,tmpbuf,">")
				if (pos2) pos3=instr(pos2,tmpbuf,"</")
				if (pos3) pos4=instr(pos3,tmpbuf,">")
					
				;;Make sure the record looks like a open/close tag record
				if ((!pos1)||(!pos2)||(!pos3)||(!pos4))
					throw new CodegenException("Record " + string(RecCount) + " in user defined token file is invalid!")
					
				;;Make sure the open and close tags match
				if (tmpbuf(pos1+1,pos2-1)!=tmpbuf(pos3+2,pos4-1))
					throw new CodegenException("Record " + string(RecCount) + " in user defined token file is invalid!")
					
				;;Store details of this user token
				Env.UserTokens.Add(new UserToken(tmpbuf(pos1,pos2),tmpbuf(pos2+1,pos3-1)))
				
				if (lastRec)
					exitloop
			end
			
			close tmpch
			if (Env.UserTokens.Count&&Env.Verbose)
			begin
				data tmpToken, @UserToken
				foreach tmpToken in Env.UserTokens
					Logging.Log(" - User token " + tmpToken.Name + " = " + tmpToken.Value)
			end

		endmethod

		;;; <summary>
		;;; This method adds user defined tokens passed in via a papameter to the tokens already
		;;; present in Env.UserTokens. If a named token already exists then its value is replaced.
		;;; </summary>
		public static method AddTokens, void
			required in tokens, @ObservableCollection<UserToken>
			endparams
		proc

			;;This method is used by CodeGenerator for user tokens provided by CodeGenTask

			data token, @UserToken
			foreach token in tokens
			begin
				;;If the token name doesn't include the < and > then add them now
				if (!token.Name.Trim().StartsWith("<"))
					token.Name = "<" + token.Name.Trim()
				if (!token.Name.Trim().EndsWith(">"))
					token.Name = token.Name.Trim() + ">"

				;;Make sure names are always upper case
				token.Name = token.Name.ToUpper()
					
				;;Does the token already exist?
				data existingToken, @UserToken
				data existingTokenUpdated, Boolean, false
				foreach existingToken in Env.UserTokens
				begin
					if existingToken.Name.Equals(token.Name)
					begin
						;;Yes, update it's value
						existingToken.value = token.value
						existingTokenUpdated = true
						exitloop
					end
				end
				;;No, add the new token
				if (!existingTokenUpdated)
					Env.UserTokens.Add(token)
				Logging.VerboseLog(" - User token " + token.Name + " = " + token.value)
			end

		endmethod

		;;; <summary>
		;;; This method adds user defined tokens passed in via a parameter to the tokens already
		;;; present in Env.UserTokens. If a named token already exists then its value is replaced.
		;;; </summary>
		public static method AddTokens, void
			required in TokenArray, @List<String>
			endparams
			record
				ix      ,int
				delim   ,int
				token   ,string
				value   ,string
			endrecord
		proc
			
			;;This methos is used by CodeGenLauncher for command-line user tokens.
			
			Logging.VerboseLog("Loading user defined tokens from command line:",true,false)
			
			if (Env.UserTokens == ^null)
				Env.UserTokens = new ObservableCollection<UserToken>()
				
			for ix from 0 thru TokenArray.Count-1
			begin
				;;Make sure the token looks right (name=value)
				data source, String, TokenArray[ix]
				if (!source.Contains("=")||source.StartsWith("=")||source.EndsWith("="))
					throw new CodegenException("Command line token " + source + " is invalid!")
					
				delim = %instr(1,source,"=")
				token = "<" + source(1:delim-1) + ">"
				value = source(delim+1:%trim(source))
				
				;;If the token is already in the collection then update its value
				;;Otherwise add a new user token
				begin
					data existingToken, @UserToken
					data existingTokenUpdated, Boolean, false
					foreach existingToken in Env.UserTokens
					begin
						if (existingToken.Name.eqs.token)
						begin
							existingToken.Value = value
							existingTokenUpdated = true
							exitloop
						end
					end
					if (!existingTokenUpdated)
						Env.UserTokens.Add(new UserToken(token,value))
				end
				
				Logging.VerboseLog(" - User token " + token + " = " + value)
			end
			
		endmethod
		
	endclass

endnamespace
