;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluatorLoopUtility.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates loop utility expression nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI
import System.IO

.array 0

namespace CodeGen.Engine

    public partial class ExpressionEvaluator

        loopUtilityExpressionEvaluators, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>

        private method registerLoopUtilityExpressions, void
            endparams
        proc
			
			loopUtilityExpressionEvaluators = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>()
			
			loopUtilityExpressionEvaluators.Add("FIRST", evaluateFirst)
            loopUtilityExpressionEvaluators.Add("LAST", evaluateLast)
            loopUtilityExpressionEvaluators.Add("MORE", evaluateMore)
			loopUtilityExpressionEvaluators.Add("NOMORE", evaluateNoMore)

        endmethod

        private static method evaluateFirst, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node) (node .is. LoopNode)
			data loop, @LoopNode, loops.First(isLoopNode)
            mreturn (loop.CurrentIndex == 1)
        endmethod

        private static method evaluateLast, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
			lambda isLoopNode(node) (node .is. LoopNode)
			data loop, @LoopNode, loops.First(isLoopNode)
            ;; TODO: Should always return true if it's a primary key loop
            mreturn (loop.CurrentIndex == loop.MaxIndex)
        endmethod

        private static method evaluateMore, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
			lambda isLoopNode(node) (node .is. LoopNode)
			data loop, @LoopNode, loops.First(isLoopNode)
            ;; TODO: Should always return false if it's a primary key loop
            mreturn (loop.CurrentIndex < loop.MaxIndex)
        endmethod

        private static method evaluateNoMore, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
			lambda isLoopNode(node) (node .is. LoopNode)
			data loop, @LoopNode, loops.First(isLoopNode)
            ;; TODO: Should always return true if it's a primary key loop
            mreturn (loop.CurrentIndex == loop.MaxIndex)
        endmethod
	
	endclass

endnamespace

