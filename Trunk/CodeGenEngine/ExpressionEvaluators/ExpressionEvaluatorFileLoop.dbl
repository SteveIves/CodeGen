;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluatorFileLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates file loop expression nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class ExpressionEvaluator

        fileLoopExpressionEvaluators, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>

        private method registerFileLoopExpressions, void
            endparams
        proc
			
			fileLoopExpressionEvaluators = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>()
			
			fileLoopExpressionEvaluators.Add("ASCII", evaluateFloopAscii)
            fileLoopExpressionEvaluators.Add("CHANGE_TRACKING", evaluateFloopChangeTracking)
            fileLoopExpressionEvaluators.Add("DESCRIPTION", evaluateFloopDescription)
            fileLoopExpressionEvaluators.Add("ISAM", evaluateFloopIsam)
            fileLoopExpressionEvaluators.Add("NOCHANGE_TRACKING", evaluateFloopNoChangeTracking)
            fileLoopExpressionEvaluators.Add("NODESCRIPTION", evaluateFloopNoDescription)
            fileLoopExpressionEvaluators.Add("NORECORDCOMPRESSION", evaluateFloopNoRecordCompression)
            fileLoopExpressionEvaluators.Add("NOSTORED_GRFA", evaluateFloopNoStoredGrfa)
            fileLoopExpressionEvaluators.Add("NOTASCII", evaluateFloopNotAscii)
            fileLoopExpressionEvaluators.Add("NOTISAM", evaluateFloopNotIsam)
            fileLoopExpressionEvaluators.Add("NOTRECORDTYPEFIXED", evaluateFloopNotRecordTypeFixed)
            fileLoopExpressionEvaluators.Add("NOTRECORDTYPEMULTIPLE", evaluateFloopNotRecordTypeMultiple)
            fileLoopExpressionEvaluators.Add("NOTRECORDTYPEVARIABLE", evaluateFloopNotRecordTypeVariable)
            fileLoopExpressionEvaluators.Add("NOTRELATIVE", evaluateFloopNotRelative)
            fileLoopExpressionEvaluators.Add("NOTSTATICRFA", evaluateFloopNotStaticRfa)
            fileLoopExpressionEvaluators.Add("NOTTERABYTE", evaluateFloopNotTerabyte)
            fileLoopExpressionEvaluators.Add("NOTUSERDEFINED", evaluateFloopNotUserDefined)
            fileLoopExpressionEvaluators.Add("NOUSERTEXT", evaluateFloopNoUserText)
            fileLoopExpressionEvaluators.Add("PAGESIZE1024", evaluateFloopPageSize1024)
            fileLoopExpressionEvaluators.Add("PAGESIZE16384", evaluateFloopPageSize16384)
            fileLoopExpressionEvaluators.Add("PAGESIZE2048", evaluateFloopPageSize2048)
            fileLoopExpressionEvaluators.Add("PAGESIZE32768", evaluateFloopPageSize32768)
            fileLoopExpressionEvaluators.Add("PAGESIZE4096", evaluateFloopPageSize4096)
            fileLoopExpressionEvaluators.Add("PAGESIZE512", evaluateFloopPageSize512)
            fileLoopExpressionEvaluators.Add("PAGESIZE8192", evaluateFloopPageSize8192)
            fileLoopExpressionEvaluators.Add("RECORDCOMPRESSION", evaluateFloopRecordCompression)
            fileLoopExpressionEvaluators.Add("RECORDTYPEFIXED", evaluateFloopRecordTypeFixed)
            fileLoopExpressionEvaluators.Add("RECORDTYPEMULTIPLE", evaluateFloopRecordTypeMultiple)
            fileLoopExpressionEvaluators.Add("RECORDTYPEVARIABLE", evaluateFloopRecordTypeVariable)
            fileLoopExpressionEvaluators.Add("RELATIVE", evaluateFloopRelative)
            fileLoopExpressionEvaluators.Add("STATICRFA", evaluateFloopStaticRfa)
            fileLoopExpressionEvaluators.Add("STORED_GRFA", evaluateFloopStoredGrfa)
            fileLoopExpressionEvaluators.Add("TERABYTE", evaluateFloopTerabyte)
            fileLoopExpressionEvaluators.Add("USERDEFINED", evaluateFloopUserDefined)
			fileLoopExpressionEvaluators.Add("USERTEXT", evaluateFloopUserText)

        endmethod
		
		;; -------------------------------------------------------------------------------------------------------------------------------
        ;;;  <summary>
        ;;;  
        ;;;  </summary>
        ;;;  <param name="tkn"></param>
        ;;;  <param name="file"></param>
        ;;;  <param name="loops"></param>
        ;;;  <param name="specific"></param>
        ;;;  <returns></returns>
        public static method EvaluateFileLoopExpression, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<RpsFileCollection, RpsFile, int, boolean> 
            endparams
        proc
            lambda isFileLoop(node) node .is. FileLoopNode
			data loop, @FileLoopNode, ^as(loops.First(isFileLoop), FileLoopNode)
            mreturn specific(file.Context.CurrentStructure.Files, loop.CurrentFile, loop.CurrentIndex)
		endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------
		
		private static method evaluateFloopAscii, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.FileType == "ASCII")
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopChangeTracking, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.ChangeTracking)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopDescription, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (!String.IsNullOrWhiteSpace(currentfile.Description))
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopIsam, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.FileType == "DBL ISAM")
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNoChangeTracking, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (!currentfile.ChangeTracking)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNoDescription, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (String.IsNullOrWhiteSpace(currentfile.Description))
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNoRecordCompression, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (!currentfile.RecordCompression)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNoStoredGrfa, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (!currentfile.StoredGRFA)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNotAscii, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.FileType != "ASCII")
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNotIsam, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.FileType != "DBL ISAM")
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNotRecordTypeFixed, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.RecordType != RpsRecordType.FixedLength)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNotRecordTypeMultiple, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.RecordType != RpsRecordType.MultipleFixedLength)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNotRecordTypeVariable, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.RecordType != RpsRecordType.VariableLength)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNotRelative, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.FileType != "RELATIVE")
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNotStaticRfa, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (!currentfile.StaticRFA)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNotTerabyte, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.Addressing == RpsFileAddressing.Addressing32Bit)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNotUserDefined, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.FileType != "USER DEFINED")
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopNoUserText, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (String.IsNullOrWhiteSpace(currentfile.UserText))
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopPageSize1024, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.PageSize == RpsFilePageSize.PageSize1024)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopPageSize16384, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.PageSize == RpsFilePageSize.PageSize16384)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopPageSize2048, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.PageSize == RpsFilePageSize.PageSize2048)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopPageSize32768, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.PageSize == RpsFilePageSize.PageSize32768)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopPageSize4096, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.PageSize == RpsFilePageSize.PageSize4096)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopPageSize512, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.PageSize == RpsFilePageSize.PageSize512)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopPageSize8192, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.PageSize == RpsFilePageSize.PageSize8192)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopRecordCompression, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.RecordCompression)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopRecordTypeFixed, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.RecordType == RpsRecordType.FixedLength)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopRecordTypeMultiple, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.RecordType == RpsRecordType.MultipleFixedLength)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopRecordTypeVariable, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.RecordType == RpsRecordType.VariableLength)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopRelative, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.FileType == "RELATIVE")
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopStaticRfa, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.StaticRFA)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopStoredGrfa, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.StoredGRFA)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopTerabyte, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.Addressing == RpsFileAddressing.Addressing40Bit)
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopUserDefined, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (currentfile.FileType == "USER DEFINED")
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateFloopUserText, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(files, currentfile, index) (!String.IsNullOrWhiteSpace(currentfile.UserText))
            mreturn EvaluateFileLoopExpression(tkn, file, loops, doEvaluate)
        endmethod
	
	endclass

endnamespace

