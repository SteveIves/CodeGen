;;*****************************************************************************
;;
;; Title:       ExpandToken.dbl
;;
;; Type:        Function
;;
;; Description: Expands generic and structure tokens
;;
;; Date:        6th November 2009
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

    function ExpandToken                ,boolean
        required in Str                 ,@RpsStructure  ;;Current structure (could be ^null)
        required in TokenStart          ,int            ;;Start positopm pf token in buffer
		required in TokenEnd            ,int            ;;End positopm pf token in buffer
		required inout buffer           ,a              ;;Buffer containing token to be replaced
		required inout ErrStatus        ,int            ;;Error status, return 1 to abort processing
        endparams

        .include "CODEGEN_SRC:codegen.def"
        .define BTN_ROW_PIXELS      45

        stack record
            ReplacedToken   ,boolean
        endrecord

    proc

        ReplacedToken = false

        using buffer(TokenStart,TokenEnd) select

        ("<AUTHOR>"),
            ReplacedToken = ReplaceToken(buffer,"<AUTHOR>",Env.Author)

        ("<CODEGEN_VERSION>"),
            ReplacedToken = ReplaceToken(buffer,"<CODEGEN_VERSION>",CODEGEN_APPNAME+" "+CODEGEN_VERSION)

		("<COMPANY>"),
            ReplacedToken = ReplaceToken(buffer,"<COMPANY>",Env.Company)

		("<DATE>"),
        begin
            data sysdate, a20
            data datemdy, a10
            sysdate = %datetime
            datemdy = sysdate(5:2) + "/" + sysdate(7:2) + "/" + sysdate(1:4)
            ReplacedToken = ReplaceToken(buffer,"<DATE>",datemdy)
        end

        ("<DATE1>"),
        begin
            data sysdate, a20
            data datemdy, a10
            sysdate = %datetime
            datemdy = sysdate(7:2) + "/" + sysdate(5:2) + "/" + sysdate(1:4)
            ReplacedToken = ReplaceToken(buffer,"<DATE1>",datemdy)
        end

        ("<YEAR>"),
        begin
            data sysdate, a20
            sysdate = %datetime
            ReplacedToken = ReplaceToken(buffer,"<YEAR>",sysdate(1:4))
        end

        ("<MONTH>"),
        begin
            data sysdate, a20
            sysdate = %datetime
            ReplacedToken = ReplaceToken(buffer,"<MONTH>",sysdate(5:2))
        end

        ("<MONTHNAME>"),
        begin
            data sysdate, a20
            data monthname, a9
            sysdate = %datetime
            using sysdate(5:2) select
            ("01"), monthname = "January"
            ("02"), monthname = "February"
            ("03"), monthname = "March"
            ("04"), monthname = "April"
            ("05"), monthname = "May"
            ("06"), monthname = "June"
            ("07"), monthname = "July"
            ("08"), monthname = "August"
            ("09"), monthname = "September"
            ("10"), monthname = "October"
            ("11"), monthname = "November"
            ("12"), monthname = "December"
            endusing
            ReplacedToken = ReplaceToken(buffer,"<MONTHNAME>",monthname)
        end

        ("<MONTHSHORTNAME>"),
        begin
            data sysdate, a20
            data monthname, a3
            sysdate = %datetime
            using sysdate(5:2) select
            ("01"), monthname = "Jan"
            ("02"), monthname = "Feb"
            ("03"), monthname = "Mar"
            ("04"), monthname = "Apr"
            ("05"), monthname = "May"
            ("06"), monthname = "Jun"
            ("07"), monthname = "Jul"
            ("08"), monthname = "Aug"
            ("09"), monthname = "Sep"
            ("10"), monthname = "Oct"
            ("11"), monthname = "Nov"
            ("12"), monthname = "Dec"
            endusing
            ReplacedToken = ReplaceToken(buffer,"<MONTHSHORTNAME>",monthname)
        end

        ("<DAY>"),
        begin
            data sysdate, a20
            sysdate = %datetime
            ReplacedToken = ReplaceToken(buffer,"<DAY>",sysdate(7:2))
        end

        ("<WEEKDAY>"),
        begin
            data dayname, a9
            using %wkday select
            (1),    dayname="Sunday"
            (2),    dayname="Monday"
            (3),    dayname="Tuesday"
            (4),    dayname="Wednesday"
            (5),    dayname="Thursday"
            (6),    dayname="Friday"
            (7),    dayname="Saturday"
            endusing
            ReplacedToken = ReplaceToken(buffer,"<WEEKDAY>",dayname)
        end

        ("<DISPLAY_FIELD>"),
        begin
            if (Env.RpsInUse) then
            begin
                if (Str.DisplayField) then
                    ReplacedToken=ReplaceToken(buffer,"<DISPLAY_FIELD>",Str.DisplayField)
                else
                begin
                    Logging.Errorlog("Token <DISPLAY_FIELD> in template "+Env.CurrentTemplate+" requires a display field!")
                    Logging.Log("       Error occurred while processing structure "+Str.Name+".")
                    Logging.Log("       Add @CODEGEN_DISPLAY_FIELD to the display fields user text string.")
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<DISPLAY_FIELD>")
                ErrStatus=1
            end
        end

        ("<STRUCTURE_FIELDS>"),
        begin
            if (Env.RpsInUse)  then
            begin
                data fld        ,@RpsField
                data fldCount   ,int, 0
                foreach fld in Str.Fields.GetEnumerator()
                    fldCount+=fld.ArrayDimension[1]
                ReplacedToken = ReplaceToken(buffer,"<STRUCTURE_FIELDS>",string(fldCount))
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<STRUCTURE_FIELDS>")
                ErrStatus=1
            end
        end

        ("<FILE_ADDRESSING>"),
        begin
            if (Env.RpsInUse) then
            begin
                if (Str.Files.Count) then
                begin
                    using Str.Files[Env.FileIndex].Addressing select
                    (RpsFileAddressing.Addressing32Bit),
                        ReplacedToken=ReplaceToken(buffer,"<FILE_ADDRESSING>","32")
                    (RpsFileAddressing.Addressing40Bit),
                        ReplacedToken=ReplaceToken(buffer,"<FILE_ADDRESSING>","40")
                    endusing
                end
                else
                begin
                    RpsComponentRequired(RpsComponent.FileDefinition,"<FILE_ADDRESSING>")
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<FILE_ADDRESSING>")
                ErrStatus=1
            end
        end

        ("<FILE_CHANGE_TRACKING>","<file_change_tracking>"),
        begin
            data tmpToken   ,a18
            data tmpValue   ,a3
            tmpToken = buffer(TokenStart,TokenEnd)
            if (Env.RpsInUse) then
            begin
                if (Str.Files.Count) then
                begin
                    using Str.Files[Env.FileIndex].ChangeTracking select
                    (true),
                        tmpValue="YES"
                    (false),
                        tmpValue="NO"
                    endusing
                    if tmpToken=="<file_change_tracking>"
                        locase tmpValue
                    ReplacedToken=ReplaceToken(buffer,tmpToken,tmpValue)
                end
                else
                begin
                    RpsComponentRequired(RpsComponent.FileDefinition,tmpToken)
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,tmpToken)
                ErrStatus=1
            end
		end

        ("<FILE_COMPRESSION>","<file_compression>"),
        begin
            data tmpToken   ,a18
            data tmpValue   ,a3
            tmpToken = buffer(TokenStart,TokenEnd)
            if (Env.RpsInUse) then
            begin
                if (Str.Files.Count) then
                begin
                    using Str.Files[Env.FileIndex].RecordCompression select
                    (true),
                        tmpValue="YES"
                    (false),
                        tmpValue="NO"
                    endusing
                    if tmpToken=="<file_compression>"
                        locase tmpValue
                    ReplacedToken=ReplaceToken(buffer,tmpToken,tmpValue)
                end
                else
                begin
                    RpsComponentRequired(RpsComponent.FileDefinition,tmpToken)
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,tmpToken)
                ErrStatus=1
            end
        end

        ("<FILE_DESC>"),
        begin
            if (Env.RpsInUse) then
            begin
                if (Str.Files.Count) then
                    ReplacedToken=ReplaceToken(buffer,"<FILE_DESC>",Str.Files[Env.FileIndex].Description)
                else
                begin
                    RpsComponentRequired(RpsComponent.FileDefinition,"<FILE_DESC>")
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<FILE_DESC>")
                ErrStatus=1
            end
        end

        ("<FILE_DENSITY>"),
        begin
            if (Env.RpsInUse) then
            begin
                if (Str.Files.Count) then
                    ReplacedToken=ReplaceToken(buffer,"<FILE_DENSITY>",string(Str.Files[Env.FileIndex].Density))
                else
                begin
                    RpsComponentRequired(RpsComponent.FileDefinition,"<FILE_DENSITY>")
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<FILE_DENSITY>")
                ErrStatus=1
            end
        end

        ("<FILE_NAME>"),
        begin
            if (Env.RpsInUse) then
            begin
                if (Str.Files.Count) then
                    ReplacedToken=ReplaceToken(buffer,"<FILE_NAME>",Str.Files[Env.FileIndex].FileSpec)
                else
                begin
                    RpsComponentRequired(RpsComponent.FileDefinition,"<FILE_NAME>")
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<FILE_NAME>")
                ErrStatus=1
            end
        end

        ("<FILE_NAME_NOEXT>"),
        begin
            if (Env.RpsInUse) then
            begin
                if (Str.Files.Count) then
                begin
                    data tmpname, a255
                    data dotpos, int
                    tmpname = Str.Files[Env.FileIndex].FileSpec
                    if (dotpos=%rvstr(1,tmpname,"."))
                        tmpname = tmpname(1:dotpos-1)
                    ReplacedToken=ReplaceToken(buffer,"<FILE_NAME_NOEXT>",atrim(tmpname))
                end
                else
                begin
                    RpsComponentRequired(RpsComponent.FileDefinition,"<FILE_NAME_NOEXT>")
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<FILE_NAME_NOEXT>")
                ErrStatus=1
            end
        end

        ("<FILE_PAGESIZE>"),
        begin
            if (Env.RpsInUse) then
            begin
                if (Str.Files.Count) then
                begin
                    using Str.Files[Env.FileIndex].PageSize select
                    (RpsFilePageSize.PageSize512),
                        ReplacedToken=ReplaceToken(buffer,"<FILE_PAGESIZE>","512")
                    (RpsFilePageSize.PageSize1024),
                        ReplacedToken=ReplaceToken(buffer,"<FILE_PAGESIZE>","1024")
                    (RpsFilePageSize.PageSize2048),
                        ReplacedToken=ReplaceToken(buffer,"<FILE_PAGESIZE>","2048")
                    (RpsFilePageSize.PageSize4096),
                        ReplacedToken=ReplaceToken(buffer,"<FILE_PAGESIZE>","4096")
                    (RpsFilePageSize.PageSize8192),
						ReplacedToken=ReplaceToken(buffer,"<FILE_PAGESIZE>","8192")
                    (RpsFilePageSize.PageSize16384),
                        ReplacedToken=ReplaceToken(buffer,"<FILE_PAGESIZE>","16384")
                    (RpsFilePageSize.PageSize32768),
						ReplacedToken=ReplaceToken(buffer,"<FILE_PAGESIZE>","32768")
                    endusing
                end
                else
                begin
                    RpsComponentRequired(RpsComponent.FileDefinition,"<FILE_PAGESIZE>")
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<FILE_PAGESIZE>")
                ErrStatus=1
            end
        end

        ("<FILE_RECTYPE>","<file_rectype>"),
        begin
            data tmptoken, a14
            tmptoken = buffer(TokenStart,TokenEnd)
            if (Env.RpsInUse) then
            begin
                if (Str.Files.Count) then
                begin
                    data tmptype, a8
                    using Str.Files[Env.FileIndex].RecordType select
                    (RpsRecordType.FixedLength),
                        tmptype="FIXED"
                    (RpsRecordType.VariableLength),
                        tmptype="VARIABLE"
                    (RpsRecordType.MultipleFixedLength),
                        tmptype="MULTIPLE"
                    endusing
                    if (tmptoken=="<file_rectype>")
                        locase tmptype
                    ReplacedToken=ReplaceToken(buffer,tmptoken,tmptype)
                end
                else
                begin
                    RpsComponentRequired(RpsComponent.FileDefinition,tmptoken)
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,tmptoken)
                ErrStatus=1
            end
        end

        ("<FILE_STATIC_RFA>","<file_static_rfa>"),
        begin
            data tmpToken   ,a17
            data tmpValue   ,a3
            tmpToken = buffer(TokenStart,TokenEnd)
            if (Env.RpsInUse) then
            begin
                if (Str.Files.Count) then
                begin
                    using Str.Files[Env.FileIndex].StaticRfa select
                    (true),
                        tmpValue="YES"
                    (false),
                        tmpValue="NO"
                    endusing
                    if tmpToken=="<file_static_rfa>"
                        locase tmpValue
                    ReplacedToken=ReplaceToken(buffer,tmpToken,tmpValue)
                end
                else
                begin
                    RpsComponentRequired(RpsComponent.FileDefinition,tmpToken)
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,tmpToken)
                ErrStatus=1
            end
        end

        ("<FILE_STORED_GRFA>","<file_stored_grfa>"),
        begin
            data tmpToken   ,a18
            data tmpValue   ,a3
            tmpToken = buffer(TokenStart,TokenEnd)
            if (Env.RpsInUse) then
            begin
                if (Str.Files.Count) then
                begin
                    using Str.Files[Env.FileIndex].StoredGRFA select
                    (true),
                        tmpValue="YES"
                    (false),
                        tmpValue="NO"
                    endusing
                    if tmpToken=="<file_stored_grfa>"
                        locase tmpValue
                    ReplacedToken=ReplaceToken(buffer,tmpToken,tmpValue)
                end
                else
                begin
                    RpsComponentRequired(RpsComponent.FileDefinition,tmpToken)
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,tmpToken)
                ErrStatus=1
            end
		end

        ("<FILE_TYPE>"),
        begin
            if (Env.RpsInUse) then
            begin
                if (Str.Files.Count) then
                    ReplacedToken=ReplaceToken(buffer,"<FILE_TYPE>",Str.Files[Env.FileIndex].FileType)
                else
                begin
                    RpsComponentRequired(RpsComponent.FileDefinition,"<FILE_TYPE>")
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<FILE_TYPE>")
                ErrStatus=1
            end
        end

        ("<FILE_UTEXT>"),
        begin
            if (Env.RpsInUse) then
            begin
                if (Str.Files.Count) then
                    ReplacedToken=ReplaceToken(buffer,"<FILE_UTEXT>",Str.Files[Env.FileIndex].UserText)
                else
                begin
                    RpsComponentRequired(RpsComponent.FileDefinition,"<FILE_UTEXT>")
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<FILE_UTEXT>")
                ErrStatus=1
            end
        end

        ("<MAPPED_FILE>"),
        begin
            data MappedFileToken, a13
            MappedFileToken=buffer(TokenStart,TokenEnd)
            if (Env.RpsInUse) then
            begin
                if (Str.MappedStructure) then
                    ReplacedToken=ReplaceToken(buffer,MappedFileToken,Str.MappedFileSpec)
                else
                begin
                    RpsComponentRequired(RpsComponent.StructureMapping,MappedFileToken)
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,MappedFileToken)
                ErrStatus=1
            end
        end

        ("<MAPPED_STRUCTURE>","<mapped_structure>"),
        begin
            data MappedStructureToken, a18
            MappedStructureToken = buffer(TokenStart,TokenEnd)
            if (Env.RpsInUse) then
            begin
                data MappedStructureStruct, a30, ""
                MappedStructureStruct = Str.MappedStructure
                if (MappedStructureStruct) then
                begin
                    if (MappedStructureToken=="<mapped_structure>")
                        locase MappedStructureStruct
                    ReplacedToken=ReplaceToken(buffer,MappedStructureToken,MappedStructureStruct)
                end
                else
                begin
                    RpsComponentRequired(RpsComponent.StructureMapping,MappedStructureToken)
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,MappedStructureToken)
                ErrStatus=1
            end
        end

		("<NAMESPACE>"),
        begin
            if (Env.DefaultNamespace) then
                ReplacedToken=ReplaceToken(buffer,"<NAMESPACE>",Env.DefaultNamespace)
            else
            begin
                Logging.Errorlog("Template "+Env.CurrentTemplate+" uses a <NAMESPACE> token. Use -n or set SYNDEFNS.")
                ErrStatus=1
            end
        end

        ("<PRIMARY_KEY_FIELD>","<primary_key_field>","<Primary_Key_Field>","<Primary_key_field>","<PrimaryKeyField>","<primaryKeyField>"),
        begin
            data TokenName, a19
            TokenName=buffer(TokenStart,TokenEnd)
            if (Env.RpsInUse) then
            begin
                if (Str.Keys.Count) then
                begin
                    using TokenName select
                    ("<PRIMARY_KEY_FIELD>"),
                        ReplacedToken=ReplaceToken(buffer,TokenName,PrimaryKeyField(Str.Keys,ErrStatus))
                    ("<primary_key_field>"),
						ReplacedToken=ReplaceToken(buffer,TokenName,StringTools.LowerCase(PrimaryKeyField(Str.Keys,ErrStatus)))
                    ("<Primary_Key_Field>"),
						ReplacedToken=ReplaceToken(buffer,TokenName,StringTools.MixedCase(PrimaryKeyField(Str.Keys,ErrStatus)))
                    ("<Primary_key_field>"),
						ReplacedToken=ReplaceToken(buffer,TokenName,StringTools.XfCase(PrimaryKeyField(Str.Keys,ErrStatus)))
                    ("<PrimaryKeyField>"),
						ReplacedToken=ReplaceToken(buffer,TokenName,StringTools.PascalCase(PrimaryKeyField(Str.Keys,ErrStatus)))
                    ("<primaryKeyField>"),
						ReplacedToken=ReplaceToken(buffer,TokenName,StringTools.CamelCase(PrimaryKeyField(Str.Keys,ErrStatus)))
                    endusing
                end
                else
                begin
                    RpsComponentRequired(RpsComponent.KeyDefinition,TokenName)
                    ErrStatus=1
                end
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,TokenName)
                ErrStatus=1
            end
        end

        ("<DATA_FIELDS_LIST>"),
        begin
            ;;Make sure we have a repository
            if (Env.RpsInUse) then
            begin
                data replacementText, String, ""
                data Fld, @RpsField
				;;Iterate through the structure fields
				foreach Fld in Str.Fields.GetEnumerator()
                begin
                    ;;Skip the primary key field
                    if (Fld.Name.eqs.PrimaryKeyField(Str.Keys,ErrStatus))
                        nextloop
                    ;;Skip fields excluded by Toolkit
                    if (Fld.ExcludedByToolkit)
                        nextloop
					;;Got a keeper
					replacementText = atrim(replacementText)+Fld.Name+","
                end
				;;Remove the trailing comma
                replacementText = replacementText(1:trim(replacementText)-1)
				;;Replace the token
				ReplacedToken=ReplaceToken(buffer,"<DATA_FIELDS_LIST>",replacementText)
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<DATA_FIELDS_LIST>")
                ErrStatus=1
            end
        end

        ("<STRUCTURE_NAME>","<structure_name>","<Structure_Name>","<Structure_name>","<StructureName>","<structureName>"),
        begin
            data StructureToken, a16
            StructureToken=buffer(TokenStart,TokenEnd)
            if (Env.RpsInUse)  then
            begin
                data StructureStruct, String
                using StructureToken select
                ("<STRUCTURE_NAME>"),
                    StructureStruct = Str.Alias
                ("<structure_name>"),
                    StructureStruct = Str.Alias.ToLower()
                ("<Structure_Name>"),
					StructureStruct = StringTools.MixedCase(Str.Alias)
                ("<Structure_name>"),
					StructureStruct = StringTools.XfCase(Str.Alias)
                ("<StructureName>"),
					StructureStruct = StringTools.PascalCase(Str.Alias)
                ("<structureName>"),
					StructureStruct = StringTools.CamelCase(Str.Alias)
                endusing
                ReplacedToken = ReplaceToken(buffer,StructureToken,StructureStruct)
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,StructureToken)
                ErrStatus=1
            end
        end

        ("<STRUCTURE_NOALIAS>","<structure_noalias>","<Structure_Noalias>","<Structure_noalias>","<StructureNoAlias>","<structureNoAlias>"),
        begin
            data StructureToken, a19
            StructureToken=buffer(TokenStart,TokenEnd)
            if (Env.RpsInUse)  then
            begin
                data StructureStruct, a30
                using StructureToken select
                ("<STRUCTURE_NOALIAS>"),
                    StructureStruct = Str.Name
                ("<structure_noalias>"),
                    StructureStruct = Str.Name.ToLower()
                ("<Structure_Noalias>"),
					StructureStruct = StringTools.MixedCase(Str.Name)
                ("<Structure_noalias>"),
					StructureStruct = StringTools.XfCase(Str.Name)
                ("<StructureNoAlias>"),
					StructureStruct = StringTools.PascalCase(Str.Name)
                ("<structureNoAlias>"),
					StructureStruct = StringTools.CamelCase(Str.Name)
                endusing
                ReplacedToken = ReplaceToken(buffer,StructureToken,StructureStruct)
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,StructureToken)
                ErrStatus=1
            end
        end

        ("<STRUCTURE_CHILDREN>"),
        begin
            if (Env.RpsInUse) then
                ReplacedToken=ReplaceToken(buffer,"<STRUCTURE_CHILDREN>",string(Str.ChildCount))
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<STRUCTURE_CHILDREN>")
                ErrStatus=1
            end
        end

        ("<STRUCTURE_DESC>"),
        begin
            if (Env.RpsInUse) then
                ReplacedToken=ReplaceToken(buffer,"<STRUCTURE_DESC>",Str.Description)
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<STRUCTURE_DESC>")
                ErrStatus=1
            end
        end

        ("<STRUCTURE_KEYS>"),
        begin
            if (Env.RpsInUse) then
                ReplacedToken=ReplaceToken(buffer,"<STRUCTURE_KEYS>",string(Str.Keys.Count))
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<STRUCTURE_KEYS>")
                ErrStatus=1
            end
        end

        ("<STRUCTURE_LDESC>"),
        begin
            if (Env.RpsInUse) then
                ReplacedToken=ReplaceToken(buffer,"<STRUCTURE_LDESC>",Str.LongDescription)
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<STRUCTURE_LDESC>")
                ErrStatus=1
            end
        end

        ("<STRUCTURE_SIZE>"),
        begin
            if (Env.RpsInUse) then
                ReplacedToken=ReplaceToken(buffer,"<STRUCTURE_SIZE>",string(Str.Length))
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<STRUCTURE_SIZE>")
                ErrStatus=1
            end
        end

        ("<STRUCTURE_UTEXT>"),
        begin
            if (Env.RpsInUse) then
                ReplacedToken=ReplaceToken(buffer,"<STRUCTURE_UTEXT>",Str.UserText)
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<STRUCTURE_UTEXT>")
                ErrStatus=1
            end
        end

        ("<TEMPLATE>","<template>"),
        begin
            data templateToken, String
            data tmptemplate, String
            templateToken = buffer(TokenStart,TokenEnd)
            tmptemplate = Env.CurrentTemplate.ToUpper()
            if (templateToken=="<template>")
                tmptemplate = tmptemplate.ToLower()
            ReplacedToken=ReplaceToken(buffer,templateToken,tmptemplate)
        end

        ("<TIME>"),
        begin
            data sysdate, a20
            data timehm, a5
            sysdate = %datetime
            timehm = sysdate(9:2) + ":" + sysdate(11:2)
            ReplacedToken=ReplaceToken(buffer,"<TIME>",timehm)
        end

        ("<WINDOW_HEIGHT>"),
        begin
            if (Env.WindowHeight) then
                ReplacedToken=ReplaceToken(buffer,"<WINDOW_HEIGHT>",string(Env.WindowHeight))
            else
                ReplacedToken=ReplaceToken(buffer,"<WINDOW_HEIGHT>","20")
        end

        ("<WINDOW_HEIGHTPX>"),
        begin
            data buttonRow, int, 0
            if (Env.Buttons.Count)
                buttonRow = BTN_ROW_PIXELS
            if (Env.WindowHeight) then
                ReplacedToken=ReplaceToken(buffer,"<WINDOW_HEIGHTPX>",string((Env.WindowHeight*Env.CharacterHeight)+buttonRow))
            else
            begin
                data fld        ,@RpsField
                data fldCount   ,int, 0
                foreach fld in Str.Fields.GetEnumerator()
                    fldCount+=fld.ArrayDimension[1]
                ReplacedToken=ReplaceToken(buffer,"<WINDOW_HEIGHTPX>",string((fldCount*Env.CharacterHeight)+buttonRow))
            end
            ;;NOTE: If these calculations are changed then also change <BUTTON_ROWPX>
        end

        ("<WINDOW_NAME>","<window_name>","<Window_Name>","<Window_name>","<WindowName>","<windowName>"),
        begin
            data tmpName, String
            if (Env.WindowName) then
                tmpName = atrim(Env.WindowName)
            else
                tmpName = Str.Name
            using buffer(TokenStart,TokenEnd) select
            ("<WINDOW_NAME>"),
                ReplacedToken=ReplaceToken(buffer,"<WINDOW_NAME>",tmpName.ToUpper())
            ("<window_name>"),
                ReplacedToken=ReplaceToken(buffer,"<window_name>",tmpName.ToLower())
            ("<Window_Name>"),
				ReplacedToken=ReplaceToken(buffer,"<Window_Name>",StringTools.MixedCase(tmpName))
            ("<Window_name>"),
				ReplacedToken=ReplaceToken(buffer,"<Window_name>",StringTools.XfCase(tmpName))
            ("<WindowName>"),
				ReplacedToken=ReplaceToken(buffer,"<WindowName>",StringTools.PascalCase(tmpName))
            ("<windowName>"),
				ReplacedToken=ReplaceToken(buffer,"<windowName>",StringTools.CamelCase(tmpName))
            endusing
        end

        ("<WINDOW_WIDTH>"),
            ReplacedToken=ReplaceToken(buffer,"<WINDOW_WIDTH>",string(Env.WindowWidth))

        ("<WINDOW_WIDTHPX>"),
            ReplacedToken=ReplaceToken(buffer,"<WINDOW_WIDTHPX>",string(Env.WindowWidth*Env.CharacterWidth))
        
        ("<FIELD_PREFIX>"),
        begin
            if (Env.RpsInUse) then
            begin
                if (Env.ClDoFieldPrefix) then
                    ReplacedToken = ReplaceToken(buffer,"<FIELD_PREFIX>",Env.ClFieldPrefix)
                else
                    ReplacedToken = ReplaceToken(buffer,"<FIELD_PREFIX>","")
            end
            else
            begin
                RpsComponentRequired(RpsComponent.General,"<FIELD_PREFIX>")
                ErrStatus=1
            end
        end
        
		("<GUID1>"),
			ReplacedToken=ReplaceToken(buffer,"<GUID1>",Env.Guid1)
		
		("<GUID2>"),
			ReplacedToken=ReplaceToken(buffer,"<GUID2>",Env.Guid2)
		
		("<GUID3>"),
			ReplacedToken=ReplaceToken(buffer,"<GUID3>",Env.Guid3)
		
		("<COUNTER_"),
			ReplacedToken = ProcessCounters(buffer(TokenStart,TokenEnd),buffer,false)

		(),
		begin
			;;If we didn't match anything so far then lets see if we have any custom generic token processors
			if (Env.CustomTokens.Count>0)
			begin
				;;We do have custom processors, look for a match
				data customToken, @CustomToken
				foreach customToken in Env.CustomTokens
				begin
					if (customToken.Token==buffer(TokenStart,TokenEnd))
					begin
						;;Found a match, expand the custom token
						ReplacedToken = customToken.Replace(Str,TokenStart,TokenEnd,buffer,ErrStatus)
						exitloop
					end
				end
			end
		end
		
        endusing

		if (ReplacedToken&&!buffer)
			buffer="~~~ REMOVE THIS RECORD ~~~"
		
		freturn ReplacedToken

    endfunction

endnamespace
