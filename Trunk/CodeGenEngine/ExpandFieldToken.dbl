;;*****************************************************************************
;;
;; Title:       ExpandFieldToken.dbl
;;
;; Type:        Function
;;
;; Description: Expands field loop tokens
;;
;; Date:        5th November 2009
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

    function ExpandFieldToken           ,boolean

        required in Str                 ,@RpsStructure
        required in Fld                 ,@RpsField
        required in TokenStart          ,int
        required in TokenEnd            ,int
        required in OutputOff			,boolean
        required inout buffer           ,a
        required inout ErrStatus        ,boolean
        endparams

        .include "CODEGEN_SRC:codegen.def"

        stack record
            ReplacedToken   ,boolean
        endrecord

    proc

        ReplacedToken = false

        using buffer(TokenStart,TokenEnd) select

        ("<,>"),
        begin
            data tmpTxt, a1," "
            if (Fld.LogicalFieldNumber<Str.Fields.Count)
                tmpTxt=","
            ReplacedToken=ReplaceToken(buffer,"<,>",tmpTxt)
        end

        ("<+>"),
        begin
            data tmpTxt, a1," "
			if (Fld.LogicalFieldNumber<Str.Fields.Count)
                tmpTxt="+"
            ReplacedToken=ReplaceToken(buffer,"<+>",tmpTxt)
        end

        ("<:>"),
        begin
            data tmpTxt, a1," "
			if (Fld.LogicalFieldNumber<Str.Fields.Count)
                tmpTxt=":"
            ReplacedToken=ReplaceToken(buffer,"<:>",tmpTxt)
        end

        ("<&&>"),
        begin
            data tmpTxt, a2,"  "
			if (Fld.LogicalFieldNumber<Str.Fields.Count)
                tmpTxt="&&"
            ReplacedToken=ReplaceToken(buffer,"<&&>",tmpTxt)
        end

        ("<.AND.>"),
        begin
            data tmpTxt, a5,"     "
			if (Fld.LogicalFieldNumber<Str.Fields.Count)
                tmpTxt=".AND."
            ReplacedToken=ReplaceToken(buffer,"<.AND.>",tmpTxt)
        end

        ("<AND>"),
        begin
            data tmpTxt, a3,"   "
			if (Fld.LogicalFieldNumber<Str.Fields.Count)
                tmpTxt="AND"
            ReplacedToken=ReplaceToken(buffer,"<AND>",tmpTxt)
        end

        ("<||>"),
        begin
            data tmpTxt, a2,"  "
			if (Fld.LogicalFieldNumber<Str.Fields.Count)
                tmpTxt="||"
            ReplacedToken=ReplaceToken(buffer,"<||>",tmpTxt)
        end

        ("<.OR.>"),
        begin
            data tmpTxt, a4,"    "
			if (Fld.LogicalFieldNumber<Str.Fields.Count)
                tmpTxt=".OR."
            ReplacedToken=ReplaceToken(buffer,"<.OR.>",tmpTxt)
        end

        ("<OR>"),
        begin
            data tmpTxt, a2,"  "
			if (Fld.LogicalFieldNumber<Str.Fields.Count)
                tmpTxt="OR"
            ReplacedToken=ReplaceToken(buffer,"<OR>",tmpTxt)
        end

        ("<FIELD_ALTNAME>","<field_altname>","<Field_Altname>","<Field_altname>","<FieldAltname>","<fieldAltname>"),
        begin
            data FieldAltnameToken, a15
            data tmpname, string
            FieldAltnameToken=buffer(TokenStart,TokenEnd)
            using FieldAltnameToken select
            ("<FIELD_ALTNAME>"),
                tmpname = Fld.AlternateName
            ("<field_altname>"),
                tmpname = Fld.AlternateName.ToLower()
            ("<Field_Altname>"),
				tmpname = StringTools.MixedCase(Fld.AlternateName)
            ("<Field_altname>"),
				tmpname = StringTools.XfCase(Fld.AlternateName)
            ("<FieldAltname>"),
				tmpname = StringTools.PascalCase(Fld.AlternateName)
            ("<fieldAltname>"),
				tmpname = StringTools.CamelCase(Fld.AlternateName)
            endusing
            ReplacedToken=ReplaceToken(buffer,FieldAltnameToken,tmpname)
        end

		("<FIELD_ARRIVEM>","<field_arrivem>","<Field_Arrivem>","<Field_arrivem>","<FieldArrivem>","<fieldArrivem>"),
		begin
			data token, a15
			data tmpname, string
			token=buffer(TokenStart,TokenEnd)
			using token select
			("<FIELD_ARRIVEM>"),
				tmpname=Fld.ArriveMethod
			("<field_arrivem>"),
				tmpname=Fld.ArriveMethod.ToLower()
			("<Field_Arrivem>"),
				tmpname=StringTools.MixedCase(Fld.ArriveMethod)
			("<Field_arrivem>"),
				tmpname=StringTools.XfCase(Fld.ArriveMethod)
			("<FieldArrivem>"),
				tmpname=StringTools.PascalCase(Fld.ArriveMethod)
			("<fieldArrivem>"),
				tmpname=StringTools.CamelCase(Fld.ArriveMethod)
			endusing
			ReplacedToken=ReplaceToken(buffer,token,tmpname)
		end
		
        ("<FIELD_BASENAME>","<field_basename>","<Field_Basename>","<Field_basename>","<FieldBaseName>","<fieldBaseName>"),
        begin
            data FieldBasenameToken, a16
            data tmpname, string
            FieldBasenameToken=buffer(TokenStart,TokenEnd)
            using FieldBasenameToken select
            ("<FIELD_BASENAME>"),
                tmpname=Fld.BaseName
            ("<field_basename>"),
                tmpname=Fld.BaseName.ToLower()
            ("<Field_Basename>"),
				tmpname=StringTools.MixedCase(Fld.BaseName)
            ("<Field_basename>"),
				tmpname=StringTools.XfCase(Fld.BaseName)
            ("<FieldBaseName>"),
				tmpname=StringTools.PascalCase(Fld.BaseName)
            ("<fieldBaseName>"),
				tmpname=StringTools.CamelCase(Fld.BaseName)
            endusing
            ReplacedToken=ReplaceToken(buffer,FieldBasenameToken,tmpname)
        end

        ("<FIELD_BREAK_MODE>"),
        begin
            data tmpVal, string
            using Fld.BreakMode select
            (RpsFieldBreak.None),
                tmpVal = "None"
            (RpsFieldBreak.Change),
                tmpVal = "Change"
            (RpsFieldBreak.Always),
                tmpVal = "Always"
            (RpsFieldBreak.OnReturn),
                tmpVal = "Return"
            endusing
            ReplacedToken=ReplaceToken(buffer,"<FIELD_BREAK_MODE>",tmpVal)
        end

		("<FIELD_CHANGEM>","<field_changem>","<Field_Changem>","<Field_changem>","<FieldChangem>","<fieldChangem>"),
		begin
			data token, a15
			data tmpname, string
			token=buffer(TokenStart,TokenEnd)
			using token select
			("<FIELD_CHANGEM>"),
				tmpname=Fld.ChangeMethod
			("<field_changem>"),
				tmpname=Fld.ChangeMethod.ToLower()
			("<Field_Changem>"),
				tmpname=StringTools.MixedCase(Fld.ChangeMethod)
			("<Field_changem>"),
				tmpname=StringTools.XfCase(Fld.ChangeMethod)
			("<FieldChangem>"),
				tmpname=StringTools.PascalCase(Fld.ChangeMethod)
			("<fieldChangem>"),
				tmpname=StringTools.CamelCase(Fld.ChangeMethod)
			endusing
			ReplacedToken=ReplaceToken(buffer,token,tmpname)
		end
		
		("<FIELD_COL>"),
		begin
			if (Fld.FieldColumn) then
				ReplacedToken = ReplaceToken(buffer,"<FIELD_COL>",string(Fld.FieldColumn))
			else
				ReplacedToken = ReplaceToken(buffer,"<FIELD_COL>","15")
		end
		
		("<FIELD_CSDEFAULT>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_CSDEFAULT>",Fld.CsDefault)

        ("<FIELD_CSTYPE>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_CSTYPE>",Fld.CsType)

        ("<FIELD_CSCONVERT>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_CSCONVERT>",Fld.CsNumericConvert)

        ("<FIELD_DEFAULT>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_DEFAULT>",Fld.DefaultValue)

        ("<FIELD_DESC>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_DESC>",Fld.Description)

		("<FIELD_DIMENSION1_INDEX>"),
		begin
			data originalIndex, int, 0
			if (Fld.WasArrayElement)
				originalIndex = Fld.OriginalElement[1]
			ReplacedToken=ReplaceToken(buffer,"<FIELD_DIMENSION1_INDEX>",string(originalIndex))
		end
		
		("<FIELD_DIMENSION2_INDEX>"),
			ReplacedToken=ReplaceToken(buffer,"<FIELD_DIMENSION2_INDEX>",string(Fld.OriginalElement[2]))
		
		("<FIELD_DIMENSION3_INDEX>"),
			ReplacedToken=ReplaceToken(buffer,"<FIELD_DIMENSION3_INDEX>",string(Fld.OriginalElement[3]))
		
		("<FIELD_DIMENSION4_INDEX>"),
			ReplacedToken=ReplaceToken(buffer,"<FIELD_DIMENSION4_INDEX>",string(Fld.OriginalElement[4]))
		
		("<FIELD_DRILLM>","<field_drillm>","<Field_Drillm>","<Field_drillm>","<FieldDrillm>","<fieldDrillm>"),
		begin
			data token, a14
			data tmpname, string
			token=buffer(TokenStart,TokenEnd)
			using token select
			("<FIELD_DRILLM>"),
				tmpname=Fld.DrillMethod
			("<field_drillm>"),
				tmpname=Fld.DrillMethod.ToLower()
			("<Field_Drillm>"),
				tmpname=StringTools.MixedCase(Fld.DrillMethod)
			("<Field_drillm>"),
				tmpname=StringTools.XfCase(Fld.DrillMethod)
			("<FieldDrillm>"),
				tmpname=StringTools.PascalCase(Fld.DrillMethod)
			("<fieldDrillm>"),
				tmpname=StringTools.CamelCase(Fld.DrillMethod)
			endusing
			ReplacedToken=ReplaceToken(buffer,token,tmpname)
		end

        ("<FIELD_ELEMENT>"),
        begin
            data tmpelem, string
            if (Fld.OriginalElement[1]&&Fld.OriginalElement[2]&&Fld.OriginalElement[3]&&Fld.OriginalElement[4]) then
                tmpelem=string(Fld.OriginalElement[1])+","+string(Fld.OriginalElement[2])+","+string(Fld.OriginalElement[3])+","+string(Fld.OriginalElement[4])
            else if (Fld.OriginalElement[1]&&Fld.OriginalElement[2]&&Fld.OriginalElement[3]) then
                tmpelem=string(Fld.OriginalElement[1])+","+string(Fld.OriginalElement[2])+","+string(Fld.OriginalElement[3])
            else if (Fld.OriginalElement[1]&&Fld.OriginalElement[2]) then
                tmpelem=string(Fld.OriginalElement[1])+","+string(Fld.OriginalElement[2])
            else if (Fld.OriginalElement[1]>1) then
                tmpelem=string(Fld.OriginalElement[1])
            else
                tmpelem=""
            ReplacedToken=ReplaceToken(buffer,"<FIELD_ELEMENT>",tmpelem)
        end

        ("<FIELD_ELEMENT0>"),
        begin
            data tmpelem, string
            if (Fld.OriginalElement[1]&&Fld.OriginalElement[2]&&Fld.OriginalElement[3]&&Fld.OriginalElement[4]) then
                tmpelem=string(Fld.OriginalElement[1])+","+string(Fld.OriginalElement[2])+","+string(Fld.OriginalElement[3])+","+string(Fld.OriginalElement[4])
            else if (Fld.OriginalElement[1]&&Fld.OriginalElement[2]&&Fld.OriginalElement[3]) then
                tmpelem=string(Fld.OriginalElement[1])+","+string(Fld.OriginalElement[2])+","+string(Fld.OriginalElement[3])
            else if (Fld.OriginalElement[1]&&Fld.OriginalElement[2]) then
                tmpelem=string(Fld.OriginalElement[1])+","+string(Fld.OriginalElement[2])
            else if (Fld.OriginalElement[1]>1) then
                tmpelem=string(Fld.OriginalElement[1])
            else
                tmpelem="0"
            ReplacedToken=ReplaceToken(buffer,"<FIELD_ELEMENT0>",tmpelem)
        end

		("<FIELD_ENUMLENGTH>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_ENUMLENGTH>",string(Fld.EnumeratedDisplayLength))

		("<FIELD_ENUMWIDTH>"),
			ReplacedToken=ReplaceToken(buffer,"<FIELD_ENUMWIDTH>",string(Fld.EnumeratedDisplayLength * Env.CharacterWidth))
			
		("<FIELD_FORMATNAME>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_FORMATNAME>",Fld.FormatName)

        ("<FIELD_HEADING>"),
        begin
            data tmpname, a80
            data pos, int
            if (Fld.ReportHeading) then
                tmpname=Fld.ReportHeading
            else if (Fld.Prompt) then
                tmpname=Fld.Prompt
            else
                tmpname=Fld.Name
            
            ;;Clean up the data (remove " and ^)
            while (%instr(1,tmpname,'"'))
                tmpname = tmpname - '"'
            while (pos=%instr(1,tmpname,"^"))
                tmpname(pos:1)=" "

            ReplacedToken = ReplaceToken(buffer,"<FIELD_HEADING>",tmpname)
        end

        ("<FIELD_HELPID>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_HELPID>",Fld.HelpIdentifier)

		("<FIELD_HYPERM>","<field_hyperm>","<Field_Hyperm>","<Field_hyperm>","<FieldHyperm>","<fieldHyperm>"),
		begin
			data token, a14
			data tmpname, string
			token=buffer(TokenStart,TokenEnd)
			using token select
			("<FIELD_HYPERM>"),
				tmpname=Fld.HyperlinkMethod
			("<field_hyperm>"),
				tmpname=Fld.HyperlinkMethod.ToLower()
			("<Field_Hyperm>"),
				tmpname=StringTools.MixedCase(Fld.HyperlinkMethod)
			("<Field_hyperm>"),
				tmpname=StringTools.XfCase(Fld.HyperlinkMethod)
			("<FieldHyperm>"),
				tmpname=StringTools.PascalCase(Fld.HyperlinkMethod)
			("<fieldHyperm>"),
				tmpname=StringTools.CamelCase(Fld.HyperlinkMethod)
			endusing
			ReplacedToken=ReplaceToken(buffer,token,tmpname)
		end
		
        ("<FIELD_INFOLINE>"),
        begin
            data tmpval, a80, Fld.InfoLineText
            while (%instr(1,tmpval,'"'))
                tmpval = tmpval - '"'
            ReplacedToken = ReplaceToken(buffer,"<FIELD_INFOLINE>",tmpval)
        end

        ("<FIELD_LDESC>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_LDESC>",Fld.LongDescription)

		("<FIELD_LEAVEM>","<field_leavem>","<Field_Leavem>","<Field_leavem>","<FieldLeavem>","<fieldLeavem>"),
		begin
			data token, a14
			data tmpname, string
			token=buffer(TokenStart,TokenEnd)
			using token select
			("<FIELD_LEAVEM>"),
				tmpname=Fld.LeaveMethod
			("<field_leavem>"),
				tmpname=Fld.LeaveMethod.ToLower()
			("<Field_Leavem>"),
				tmpname=StringTools.MixedCase(Fld.LeaveMethod)
			("<Field_leavem>"),
				tmpname=StringTools.XfCase(Fld.LeaveMethod)
			("<FieldLeavem>"),
				tmpname=StringTools.PascalCase(Fld.LeaveMethod)
			("<fieldLeavem>"),
				tmpname=StringTools.CamelCase(Fld.LeaveMethod)
			endusing
			ReplacedToken=ReplaceToken(buffer,token,tmpname)
		end
		
        ("<FIELD_MAXVALUE>"),
        begin
            data tmpMaxVal, a30, " "
            ;;If the field has a range specified then use it
            if (Fld.NumericRangeMaximum) then
            begin
                if (Fld.Precision) then
                    tmpMaxVal = Fld.NumericRangeMaximum [LEFT]
                else
                    tmpMaxVal = %integer(Fld.NumericRangeMaximum) [LEFT]
            end
            else
            begin
                ;;Make sure the field is numeric
                using Fld.DataType select
                (RpsFieldDataType.Decimal),
                begin
                    if (Fld.ViewAs==RpsFieldViewAs.CheckBox) then
                        tmpMaxVal="1"
                    else if (Fld.Enumerated) then
                    begin
                        if (Fld.EnumeratedStepValue>0) then
                            tmpMaxVal = (Fld.EnumeratedBaseValue + (Fld.EnumeratedStepValue * (Fld.SelectionList.Count-1))) [LEFT]
                        else
                            tmpMaxVal = Fld.EnumeratedBaseValue
                    end
                    else if (Fld.Precision) then
					begin
						if (Fld.Precision < Fld.Size) then
							fill("9",tmpMaxVal(1:Fld.Size-Fld.Precision))
						else
							tmpMaxVal = "0"
						tmpMaxVal = atrim(tmpMaxVal) + "."
						fill("9",tmpMaxVal(%trim(tmpMaxVal)+1:Fld.Precision))
                    end
                    else
                        fill("9",tmpMaxVal(1:Fld.Size))
                end
                (RpsFieldDataType.Integer),
                begin
                    if (Fld.ViewAs==RpsFieldViewAs.CheckBox) then
                        tmpMaxVal="1"
                    else if (Fld.Enumerated) then
                    begin
                        if (Fld.EnumeratedBaseValue>0) then
                            tmpMaxVal = (Fld.EnumeratedBaseValue + (Fld.EnumeratedStepValue * (Fld.SelectionList.Count-1))) [LEFT]
                        else
                            tmpMaxVal = Fld.EnumeratedBaseValue
                    end
                    else
                    begin
                        using Fld.Size select
                        (1),    tmpMaxVal = "127"
                        (2),    tmpMaxVal = "32767"
                        (4),    tmpMaxVal = "2147483647"
                        (8),    tmpMaxVal = "9223372036854775807"
                        endusing
                    end
                end
                (),
                begin
                    if (!OutputOff)
                    begin
                        ;;Not numeric, throw an error
                        NumericFieldRequired("<FIELD_MAXVALUE>")
                        ErrStatus = true
                    end
                end
                endusing
            end
            ;;Replace the token
            if (!ErrStatus)
                ReplacedToken = ReplaceToken(buffer,"<FIELD_MAXVALUE>",TmpMaxVal)
        end

        ("<FIELD_MINVALUE>"),
        begin
            data tmpMinVal, a30, " "
            ;;If the field has a range specified then use it
            if (Fld.NumericRangeMinimum) then
            begin
                if (Fld.Precision) then
                    tmpMinVal = Fld.NumericRangeMinimum [LEFT]
                else
                    tmpMinVal = %integer(Fld.NumericRangeMinimum) [LEFT]
            end
            else
            begin
                ;;Make sure the field is numeric
                using Fld.DataType select
                (RpsFieldDataType.Decimal),
                begin
                    if (Fld.ViewAs==RpsFieldViewAs.CheckBox) then
                        tmpMinVal="0"
                    else if (Fld.Enumerated) then
                    begin
                        if (Fld.EnumeratedStepValue > 0) then
                            tmpMinVal = Fld.EnumeratedBaseValue [LEFT]
                        else
                            tmpMinVal = (Fld.EnumeratedBaseValue + (Fld.EnumeratedStepValue * (Fld.SelectionList.Count-1))) [LEFT]
                    end
                    else if (Fld.Precision) then
                    begin
                        if (Fld.NegativeAllowed == RpsFieldNegatives.Allowed) then
                        begin
							tmpMinVal = "-"
							if (Fld.Precision < Fld.Size) then
								fill("9",tmpMinVal(2:Fld.Size-Fld.Precision))
							else
								tmpMinVal = %atrim(tmpMinVal) + "0"
							tmpMinVal = atrim(tmpMinVal) + "."
							fill("9",tmpMinVal(%trim(tmpMinVal)+1:Fld.Precision))
                        end
                        else
                            tmpMinVal = "0"
                    end
                    else
                    begin
                        if (Fld.NegativeAllowed == RpsFieldNegatives.Allowed) then
                        begin
                            tmpMinVal = "-"
                            fill("9",tmpMinVal(2:Fld.Size))
                        end
                        else
                            tmpMinVal = "0"
                    end
                end
                (RpsFieldDataType.Integer),
                begin
                    if (Fld.ViewAs==RpsFieldViewAs.CheckBox) then
                        tmpMinVal="0"
                    else if (Fld.Enumerated) then
                    begin
                        if (Fld.EnumeratedStepValue > 0) then
                            tmpMinVal = Fld.EnumeratedBaseValue [LEFT]
                        else
                            tmpMinVal = (Fld.EnumeratedBaseValue + (Fld.EnumeratedStepValue * (Fld.SelectionList.Count-1))) [LEFT]
                    end
                    else if (Fld.NegativeAllowed == RpsFieldNegatives.None) then
                        tmpMinVal = "0"
                    else
                    begin
                        using Fld.Size select
                        (1),    tmpMinVal = "-128"
                        (2),    tmpMinVal = "-32768"
                        (4),    tmpMinVal = "-2147483648"
                        (8),    tmpMinVal = "-9223372036854775808"
                        endusing
                    end
                end
                (),
                begin
                    if (!OutputOff)
                    begin
                        ;;Not numeric, throw an error
                        NumericFieldRequired("<FIELD_MINVALUE>")
                        ErrStatus = true
                    end
                end
                endusing
            end
            ;;Replace the token
            if (!ErrStatus)
                ReplacedToken = ReplaceToken(buffer,"<FIELD_MINVALUE>",TmpMinVal)
        end

        ("<FIELD_NAME>","<field_name>","<Field_Name>","<Field_name>","<FieldName>","<fieldName>"),
        begin
            data FieldNameToken, string
            data tmpname, string
            FieldNameToken=buffer(TokenStart,TokenEnd)
            using FieldNameToken select
            ("<FIELD_NAME>"),
                tmpname=Fld.Name
            ("<field_name>"),
                tmpname=Fld.Name.ToLower()
            ("<Field_Name>"),
				tmpname=StringTools.MixedCase(Fld.Name)
            ("<Field_name>"),
				tmpname=StringTools.XfCase(Fld.Name)
            ("<FieldName>"),
				tmpname=StringTools.PascalCase(Fld.Name)
            ("<fieldName>"),
				tmpname=StringTools.CamelCase(Fld.Name)
            endusing
            if (Env.ClDoFieldPrefix)
            begin
                data pos, i4
                tmpName = Env.ClFieldPrefix + tmpName
                if (pos=instr(1,tmpName,"."))
                    tmpName = tmpName(1,pos) + Env.ClFieldPrefix + tmpName(pos+1,trim(tmpName))
            end
            ReplacedToken = ReplaceToken(buffer,FieldNameToken,tmpname)
        end

        ("<FIELD_NOECHO_CHAR>"),
        begin
            data nechar, a1, ""
            if (Fld.NoEcho)
            begin
                if (Fld.NoEchoCharacter) then
                    nechar = Fld.NoEchoCharacter
                else
                    nechar = "*"
            end
            ReplacedToken = ReplaceToken(buffer,"<FIELD_NOECHO_CHAR>",nechar)
        end
            
        ("<FIELD_OCDEFAULT>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_OCDEFAULT>",Fld.OcDefault)

        ("<FIELD_OCTYPE>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_OCTYPE>",Fld.OcType)

        ("<FIELD_ORIGINAL_NAME>","<field_original_name>","<Field_Original_Name>","<Field_original_name>","<FieldOriginalName>","<fieldOriginalName>"),
        begin
            data FieldNameToken, a21
            data tmpname, string
            FieldNameToken=buffer(TokenStart,TokenEnd)
            using FieldNameToken select
            ("<FIELD_ORIGINAL_NAME>"),
                tmpname=Fld.OriginalName
            ("<field_original_name>"),
                tmpname=Fld.OriginalName.ToLower()
            ("<Field_Original_Name>"),
				tmpname=StringTools.MixedCase(Fld.OriginalName)
            ("<Field_original_name>"),
				tmpname=StringTools.XfCase(Fld.OriginalName)
            ("<FieldOriginalName>"),
				tmpname=StringTools.PascalCase(Fld.OriginalName)
            ("<fieldOriginalName>"),
				tmpname=StringTools.CamelCase(Fld.OriginalName)
            endusing
            ReplacedToken = ReplaceToken(buffer,FieldNameToken,tmpname)
        end

        ("<FIELD_PATH>","<field_path>","<Field_Path>","<Field_path>","<FieldPath>","<fieldPath>"),
        begin
            data FieldPathToken, a12
            data tmppath, a68
            FieldPathToken=buffer(TokenStart,TokenEnd)
            tmppath=Str.Alias+"."+Fld.Name
            using FieldPathToken select
            ("<field_path>"),
                locase tmppath
            ("<Field_Path>"),
				tmppath = StringTools.MixedCase(tmppath)
            ("<Field_path>"),
				tmppath = StringTools.XfCase(tmppath)
            ("<FieldPath>"),
				tmppath = StringTools.PascalCase(tmppath)
            ("<fieldPath>"),
				tmppath = StringTools.CamelCase(tmppath)
            endusing
            ReplacedToken = ReplaceToken(buffer,FieldPathToken,tmppath)
        end

        ("<FIELD_PATH_CONV>","<field_path_conv>"),
        begin
            data FieldPathConvertToken, a17
            data tmppath, a120
            data tmpfunc, a30
            FieldPathConvertToken=buffer(TokenStart,TokenEnd)
            ;;Set the path
            tmppath=Str.Alias+"."+Fld.Name
            ;;Do we have conversion function?
            if (tmpfunc=Fld.UnmappingFunction)
                tmppath="%"+atrim(tmpfunc)+"("+atrim(tmppath)+")"
            ;;Lowercase if necessary
            if (FieldPathConvertToken=="<field_path_conv>")
                locase tmppath
            ReplacedToken = ReplaceToken(buffer,FieldPathConvertToken,tmppath)
        end

        ("<FIELD_PIXEL_COL>"),
        begin
            if (Fld.FieldColumn) then
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PIXEL_COL>",string((Fld.FieldColumn*Env.CharacterWidth)-(Env.CharacterWidth-1)))
            else
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PIXEL_COL>",string((15*Env.CharacterWidth)-(Env.CharacterWidth-1)))
        end

        ("<FIELD_PIXEL_ROW>"),
        begin
            if (Fld.FieldRow) then
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PIXEL_ROW>",string(((Fld.FieldRow+Fld.ArrayDimension[1]-1)*Env.CharacterHeight)-(Env.CharacterHeight-1)))
            else
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PIXEL_ROW>",string((Fld.LogicalFieldNumber*Env.CharacterHeight)-(Env.CharacterHeight-1)))
        end

        ("<FIELD_PIXEL_WIDTH>"),
        begin
            data FieldPixWidth, int
            if (Fld.SelectionList.Count) then
                FieldPixWidth = Fld.SelectionListMaxLength * Env.CharacterWidth
            else if (Fld.Enumerated) then
                FieldPixWidth = Fld.EnumeratedDisplayLength * Env.CharacterWidth
            else
                FieldPixWidth = Fld.Size * Env.CharacterWidth
            ReplacedToken = ReplaceToken(buffer,"<FIELD_PIXEL_WIDTH>",string(FieldPixWidth))
        end

        ("<FIELD_DRILL_PIXEL_COL>"),
        begin
            data FieldPixWidth, int
            data DrillPixCol, int
            if (Fld.SelectionList.Count) then
                FieldPixWidth = Fld.SelectionListMaxLength * Env.CharacterWidth
            else if (Fld.Enumerated) then
                FieldPixWidth = Fld.EnumeratedDisplayLength * Env.CharacterWidth
            else
                FieldPixWidth = Fld.Size * Env.CharacterWidth
            if (Fld.FieldColumn) then
                DrillPixCol = (Fld.FieldColumn*Env.CharacterWidth)+(FieldPixWidth)-Env.CharacterWidth
            else
                DrillPixCol = (15*Env.CharacterWidth)+(FieldPixWidth)-Env.CharacterWidth
            ReplacedToken = ReplaceToken(buffer,"<FIELD_DRILL_PIXEL_COL>",string(DrillPixCol))
        end

        ("<FIELD_INPUT_LENGTH>"),
        begin
            data FieldInputLength, int
            using Fld.DataType select
            (RpsFieldDataType.Alpha),
            begin
                FieldInputLength = Fld.Size
            end
            (RpsFieldDataType.Decimal),
            begin
                FieldInputLength = Fld.Size
                if (Fld.NegativeAllowed)
                    FieldInputLength+=1
                if (Fld.Precision)
                    FieldInputLength+=1
            end
            (RpsFieldDataType.Integer),
            begin
                using Fld.Size select
                (1),
                    FieldInputLength = 3
                (2),
                    FieldInputLength = 5
                (4),
                    FieldInputLength = 10
                (8),
                    FieldInputLength = 19
                endusing
                if (Fld.NegativeAllowed)
                    FieldInputLength+=1
            end
            (),
                FieldInputLength = Fld.Size
            endusing
            ReplacedToken = ReplaceToken(buffer,"<FIELD_INPUT_LENGTH>",string(FieldInputLength))
        end

        ("<FIELD_ODBCNAME>","<field_odbcname>","<Field_Odbcname>","<Field_odbcname>","<FieldOdbcName>","<fieldOdbcName>"),
        begin
            data FieldOdbcNameToken, a16
            data tmpname, string
            FieldOdbcNameToken=buffer(TokenStart,TokenEnd)
            using FieldOdbcNameToken select
            ("<FIELD_ODBCNAME>"),
                tmpname=Fld.OdbcName
            ("<field_odbcname>"),
				tmpname=StringTools.LowerCase(Fld.OdbcName)
            ("<Field_Odbcname>"),
				tmpname=StringTools.MixedCase(Fld.OdbcName)
            ("<Field_odbcname>"),
				tmpname=StringTools.XfCase(Fld.OdbcName)
            ("<FieldOdbcName>"),
				tmpname=StringTools.PascalCase(Fld.OdbcName)
            ("<fieldOdbcName>"),
				tmpname=StringTools.CamelCase(Fld.OdbcName)
            endusing
            ReplacedToken = ReplaceToken(buffer,FieldOdbcNameToken,tmpname)
        end

        ("<FIELD_POSITION>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_POSITION>",string(Fld.StartPosition))

        ("<FIELD_POSITION_ZERO>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_POSITION_ZERO>",string(Fld.StartPosition-1))

        ("<FIELD_PRECISION>"),
            if (Fld.Precision) then
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PRECISION>",string(Fld.Precision))
            else
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PRECISION>","")

        ("<FIELD_PRECISION2>"),
            if (Fld.Precision) then
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PRECISION2>","."+string(Fld.Precision))
            else
                ReplacedToken=ReplaceToken(buffer,"<FIELD_PRECISION2>","")

        ("<FIELD_PROMPT>"),
        begin
            ;;If the prompt contains " ^ < > or : then remove them
            data pos, int
            data tmpPrompt, a80
            tmpPrompt = Fld.Prompt
            while (%instr(1,tmpPrompt,'"'))
                tmpPrompt = tmpPrompt - '"'
            while (pos=%instr(1,tmpPrompt,"^"))
                tmpPrompt(pos:1)=" "
            while (%instr(1,tmpPrompt,"<"))
                tmpPrompt = tmpPrompt - "<"
            while (%instr(1,tmpPrompt,">"))
                tmpPrompt = tmpPrompt - ">"
            while (%instr(1,tmpPrompt,":"))
                tmpPrompt = tmpPrompt - ":"
            Fld.Prompt = tmpPrompt
            ReplacedToken=ReplaceToken(buffer,"<FIELD_PROMPT>",Fld.Prompt)
        end

        ("<FIELD_RANGE_MAX>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_RANGE_MAX>",string(Fld.NumericRangeMaximum))

        ("<FIELD_RANGE_MIN>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_RANGE_MIN>",string(Fld.NumericRangeMinimum))

        ("<FIELD_REGEX>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_REGEX>",StringTools.FieldRegex(Fld))

		("<FIELD_ROW>"),
		begin
			if (Fld.FieldRow) then
				ReplacedToken = ReplaceToken(buffer,"<FIELD_ROW>",string(Fld.FieldRow+Fld.ArrayDimension[1]-1))
			else
				ReplacedToken = ReplaceToken(buffer,"<FIELD_ROW>",string(Fld.LogicalFieldNumber))
		end
		
		("<FIELD_SELECTIONS>"),
        begin
            if (Fld.SelectionList.Count) then
            begin
                data idx, int
                data selections, a4096, ""
                for idx from 0 thru Fld.SelectionList.Count-1
                begin
                    selections = atrim(selections)+'"'+atrim(Fld.SelectionList[idx])+'"'
                    if (idx<Fld.SelectionList.Count-1)
                        selections = atrim(selections)+","
                end
                ReplacedToken = ReplaceToken(buffer,"<FIELD_SELECTIONS>",selections)
            end
            else
                ReplacedToken = ReplaceToken(buffer,"<FIELD_SELECTIONS>",'""')
        end

        ("<FIELD_SELECTIONS1>"),
        begin
            if (Fld.SelectionList.Count) then
            begin
                data idx, int
                data selections, a4096, '"'
                for idx from 0 thru Fld.SelectionList.Count-1
                begin
                    selections = atrim(selections)+atrim(Fld.SelectionList[idx])
                    if (idx<Fld.SelectionList.Count-1)
                        selections = atrim(selections)+"|"
                end
                selections = atrim(selections)+'"'
                ReplacedToken = ReplaceToken(buffer,"<FIELD_SELECTIONS1>",selections)
            end
            else
                ReplacedToken = ReplaceToken(buffer,"<FIELD_SELECTIONS1>",'""')
        end

        ("<FIELD_SELLENGTH>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_SELLENGTH>",string(Fld.SelectionListMaxLength))

		("<FIELD_SELWND>","<field_selwnd>","<Field_Selwnd>","<Field_selwnd>","<FieldSelWnd>","<fieldSelWnd>","<FIELD_SELWND_ORIGINAL>"),
		begin
			data tmptoken, String, buffer(TokenStart,TokenEnd)
			data tmpname, String

			using tmptoken select
			("<FIELD_SELWND_ORIGINAL>"),
				tmpname = %atrim(Fld.SelectionWindowName)
			("<FIELD_SELWND>"),
				tmpname = StringTools.UpperCase(Fld.SelectionWindowName)
			("<field_selwnd>"),
				tmpname = StringTools.LowerCase(Fld.SelectionWindowName)
			("<Field_Selwnd>"),
				tmpname = StringTools.MixedCase(Fld.SelectionWindowName)
			("<Field_selwnd>"),
				tmpname = StringTools.XfCase(Fld.SelectionWindowName)
			("<FieldSelWnd>"),
				tmpname = StringTools.PascalCase(Fld.SelectionWindowName)
			("<FieldSelWnd>"),
				tmpname = StringTools.CamelCase(Fld.SelectionWindowName)
			endusing
			ReplacedToken = ReplaceToken(buffer,tmptoken,tmpname)
		end
			
		("<FIELD_SIZE>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_SIZE>",string(Fld.Size))

		("<FIELD_SNTYPE>"),
			ReplacedToken = ReplaceToken(buffer,"<FIELD_SNTYPE>",Fld.SnType)
			
		("<FIELD_SNDEFAULT>"),
			ReplacedToken=ReplaceToken(buffer,"<FIELD_SNDEFAULT>",Fld.SnDefault)
			
		("<FIELD_SPEC>","<field_spec>","<Field_Spec>","<Field_spec>","<FieldSpec>","<fieldSpec>"),
        begin
            data tmpToken, String
            data tmpSpec, String, ""
            tmpToken = buffer(TokenStart,TokenEnd)

            if (Fld.IsGroup&&!String.IsNullOrWhiteSpace(Fld.GroupStructure)&&Env.DontExpandImplicitGroups) then
            begin
                ;;We've got an implicit structure which has not been expanded
                tmpSpec = Fld.TypeCode
            end
            else
            begin
                using Fld.DataType select
                (RpsFieldDataType.Boolean),
                    tmpSpec = "BOOLEAN"
                (RpsFieldDataType.Binary),      ;;Can't currently happen because of %CheckStructure
                    nop
                (RpsFieldDataType.StructField), ;;Can't currently happen because of %CheckStructure
                    tmpSpec = Fld.UserFieldType
                (RpsFieldDataType.Enum),        ;;Can't currently happen because of %CheckStructure
                    tmpSpec = Fld.UserFieldType
                (),
                begin
                    tmpSpec=Fld.TypeCode+string(Fld.Size)
                    if (Fld.Precision)
                        tmpSpec = atrim(tmpSpec)+"."+string(Fld.Precision)
                end
                endusing
            end
            using tmpToken select
            ("<FIELD_SPEC>"),
                nop
            ("<field_spec>"),
                tmpSpec = tmpSpec.ToLower()
            ("<Field_Spec>"),
				tmpSpec=StringTools.MixedCase(tmpSpec)
            ("<Field_spec>"),
				tmpSpec=StringTools.XfCase(tmpSpec)
            ("<FieldSpec>"),
				tmpSpec=StringTools.PascalCase(tmpSpec)
            ("<fieldSpec>"),
				tmpSpec=StringTools.CamelCase(tmpSpec)
            endusing
            ReplacedToken = ReplaceToken(buffer,tmpToken,tmpSpec)
        end

		("<FIELD_SQLNAME>","<field_sqlname>","<Field_Sqlname>","<Field_sqlname>","<FieldSqlName>","<fieldSqlName>","<FIELD_NETNAME>","<field_netname>","<Field_Netname>","<Field_netname>","<FieldNetName>","<fieldNetName>"),
        begin
            data FieldSqlNameToken, a15
            data tmpname, string
            FieldSqlNameToken=buffer(TokenStart,TokenEnd)
            using FieldSqlNameToken select
			("<FIELD_SQLNAME>","<FIELD_NETNAME>"),
                tmpname = Fld.SqlName
			("<field_sqlname>","<field_netname>"),
				tmpname=StringTools.LowerCase(Fld.SqlName)
			("<Field_Sqlname>","<Field_Netname>"),
				tmpname=StringTools.MixedCase(Fld.SqlName)
			("<Field_sqlname>","<Field_netname>"),
				tmpname=StringTools.XfCase(Fld.SqlName)
			("<FieldSqlName>","<FieldNetName>"),
				tmpname=StringTools.PascalCase(Fld.SqlName)
			("<fieldSqlName>","<fieldNetName>"),
				tmpname=StringTools.CamelCase(Fld.SqlName)
            endusing
            ReplacedToken = ReplaceToken(buffer,FieldSqlNameToken,tmpname)
        end

        ("<FIELD_SQLTYPE>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_SQLTYPE>",Fld.SqlType)

        ("<FIELD_TEMPLATE>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_TEMPLATE>",Fld.Template)

        ("<FIELD_TKSCRIPT>"),
        begin
            data replacementText, String
            if (Fld.PromptRow&&Fld.PromptColumn&&Fld.FieldRow&&Fld.FieldColumn) then
                replacementText=".field "+Fld.Name+", pos("+string(Fld.PromptRow)+","+string(Fld.PromptColumn)+"), fpos("+string(Fld.FieldRow)+","+string(Fld.FieldColumn)+")"
            else
                replacementText=".field "+Fld.Name+", pos("+string(Fld.LogicalFieldNumber)+",1)"
            ReplacedToken = ReplaceToken(buffer,"<FIELD_TKSCRIPT>",replacementText)
        end

        ("<FIELD_TYPE>","<field_type>","<Field_Type>","<Field_type>","<FieldType>","<fieldType>"),
        begin
            data FieldTypeToken, a12
            data tmpVal, string
            FieldTypeToken=buffer(TokenStart,TokenEnd)
            using FieldTypeToken select
            ("<FIELD_TYPE>"),
                tmpVal = Fld.TypeCode
            ("<field_type>"),
				tmpVal = StringTools.LowerCase(Fld.TypeCode)
            ("<Field_Type>"),
				tmpVal = StringTools.MixedCase(Fld.TypeCode)
            ("<Field_type>"),
				tmpVal = StringTools.XfCase(Fld.TypeCode)
            ("<FieldType>"),
				tmpVal = StringTools.PascalCase(Fld.TypeCode)
            ("<fieldType>"),
				tmpVal = StringTools.CamelCase(Fld.TypeCode)
            endusing
            ReplacedToken = ReplaceToken(buffer,FieldTypeToken,tmpVal)
        end

        ("<FIELD_TYPE_NAME>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_TYPE_NAME>",Fld.TypeName)

        ("<FIELD_UTEXT>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_UTEXT>",Fld.UserText)

        ("<FIELD_VBDEFAULT>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_VBDEFAULT>",Fld.VbDefault)

        ("<FIELD_VBTYPE>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_VBTYPE>",Fld.VbType)

        ("<FIELD#>"),
			ReplacedToken = ReplaceToken(buffer,"<FIELD#>",string(Fld.FieldNumber))
			
        ("<FIELD#_ZERO>"),
			ReplacedToken = ReplaceToken(buffer,"<FIELD#_ZERO>",string(Fld.FieldNumber-1))
			
        ("<FIELD#LOGICAL>"),
			ReplacedToken = ReplaceToken(buffer,"<FIELD#LOGICAL>",string(Fld.LogicalFieldNumber))
			
        ("<FIELD#LOGICAL_ZERO>"),
			ReplacedToken = ReplaceToken(buffer,"<FIELD#LOGICAL_ZERO>",string(Fld.LogicalFieldNumber-1))
			
        ("<MAPPED_FIELD>","<mapped_field>","<Mapped_Field>","<Mapped_field>","<MappedField>","<mappedField>"),
        begin
            data MappedFieldToken, a14
            data tmpfield, a36
            MappedFieldToken=buffer(TokenStart,TokenEnd)
            tmpfield=Fld.MappedField
            if (!tmpfield)
            begin
                using Fld.TypeCode select
                ("A","U"),
                    tmpfield='""'
                ("D","I"),
                    tmpfield="0"
                ("@"),
                    tmpField="new "+Fld.TypeCode+"()"
                endusing
            end
            using MappedFieldToken select
            ("<mapped_field>"),
                locase tmpfield
            ("<Mapped_Field>"),
				tmpfield = StringTools.MixedCase(tmpfield)
            ("<Mapped_field>"),
				tmpfield = StringTools.XfCase(tmpfield)
            ("<MappedField>"),
				tmpfield = StringTools.PascalCase(tmpfield)
            ("<mappedField>"),
				tmpfield = StringTools.CamelCase(tmpfield)
            endusing
            ReplacedToken = ReplaceToken(buffer,MappedFieldToken,atrim(tmpfield))
        end

        ("<MAPPED_PATH>","<mapped_path>"),
        begin
            data MappedPathToken, a13
            MappedPathToken=buffer(TokenStart,TokenEnd)
            if (Str.MappedStructure) then
            begin
                data tmppath, a70
                tmppath=Fld.MappedField
                upcase tmppath
                if (tmppath) then
                begin
                    tmppath=Str.MappedStructure+"."+tmppath
                    if (MappedPathToken=="<mapped_path>")
                        locase tmppath
                end
                else
                begin
                    using Fld.TypeCode select
                    ("A"),
                        tmppath='""'
                    ("D","I"),
                        tmppath="0"
                    ("@"),
                        tmppath="new "+Fld.TypeCode+"()"
                    endusing
                end
                ReplacedToken = ReplaceToken(buffer,MappedPathToken,tmppath)
            end
            else
            begin
                RpsComponentRequired(RpsComponent.StructureMapping,MappedPathToken)
                ErrStatus = true
            end
        end

        ("<MAPPED_PATH_CONV>","<mapped_path_conv>"),
        begin
            data MappedPathConvertToken, a18
            MappedPathConvertToken=buffer(TokenStart,TokenEnd)
            if (Str.MappedStructure) then
            begin
                data tmppath, a120
                data tmpfunc, a30
                tmppath=Fld.MappedField
                upcase tmppath
                if (tmppath) then
                begin
                    tmppath=Str.MappedStructure+"."+tmppath
                    if (MappedPathConvertToken=="<mapped_path_conv>")
                        locase tmppath
                end
                else
                begin
                    using Fld.TypeCode select
                    ("A"),
                        tmppath='""'
                    ("D","I"),
                        tmppath="0"
                    ("@"),
                        tmppath="new "+Fld.TypeCode+"()"
                    endusing
                end
                if (tmpfunc=Fld.MappingFunction)
                begin
                    if (MappedPathConvertToken=="<mapped_path_conv>")
                        locase tmpfunc
                    tmppath = "%"+atrim(tmpfunc)+"("+atrim(tmppath)+")"
                end
                ReplacedToken = ReplaceToken(buffer,MappedPathConvertToken,tmppath)
            end
            else
            begin
                RpsComponentRequired(RpsComponent.StructureMapping,MappedPathConvertToken)
                ErrStatus = true
            end
        end

		("<PROMPT_COL>"),
		begin
			if (Fld.PromptColumn) then
				ReplacedToken = ReplaceToken(buffer,"<PROMPT_COL>",string(Fld.PromptColumn))
			else
				ReplacedToken = ReplaceToken(buffer,"<PROMPT_COL>","1")
		end
		
		("<PROMPT_PIXEL_COL>"),
        begin
            if (Fld.PromptColumn) then
                ReplacedToken = ReplaceToken(buffer,"<PROMPT_PIXEL_COL>",string((Fld.PromptColumn*Env.CharacterWidth)-(Env.CharacterWidth-1)))
            else
                ReplacedToken = ReplaceToken(buffer,"<PROMPT_PIXEL_COL>",string((1*Env.CharacterWidth)-(Env.CharacterWidth-1)))
        end

        ("<PROMPT_PIXEL_ROW>"),
        begin
            if (Fld.PromptRow) then
                ReplacedToken = ReplaceToken(buffer,"<PROMPT_PIXEL_ROW>",string(((Fld.PromptRow+Fld.ArrayDimension[1]-1)*Env.CharacterHeight)-(Env.CharacterHeight-1)))
            else
                ReplacedToken = ReplaceToken(buffer,"<PROMPT_PIXEL_ROW>",string((Fld.LogicalFieldNumber*Env.CharacterHeight)-(Env.CharacterHeight-1)))
        end

        ("<PROMPT_PIXEL_WIDTH>"),
            ReplacedToken = ReplaceToken(buffer,"<PROMPT_PIXEL_WIDTH>",string(Fld.Prompt.Length*Env.CharacterWidth))

		("<PROMPT_ROW>"),
		begin
			if (Fld.PromptRow) then
				ReplacedToken = ReplaceToken(buffer,"<PROMPT_ROW>",string(Fld.PromptRow+Fld.ArrayDimension[1]-1))
			else
				ReplacedToken = ReplaceToken(buffer,"<PROMPT_ROW>",string(Fld.LogicalFieldNumber))
		end
		
		("<COUNTER_"),
			ReplacedToken = ProcessCounters(buffer(TokenStart,TokenEnd),buffer,OutputOff)
			
		(),
		begin
			;;If we didn't match anything so far then lets see if we have any custom field loop token processors
			if (Env.CustomFieldTokens.Count>0)
			begin
				;;We do have custom processors, look for a match
				data customToken, @CustomFieldToken
				foreach customToken in Env.CustomFieldTokens
				begin
					if (customToken.Token==buffer(TokenStart,TokenEnd))
					begin
						;;Found a match, expand the custom token
						ReplacedToken = customToken.Replace(Str,Fld,Fld.LogicalFieldNumber-1,Fld.LogicalFieldNumber,TokenStart,TokenEnd,OutputOff,buffer,ErrStatus)
						exitloop
					end
				end
			end
		end

        endusing

		if (ReplacedToken&&!buffer)
			buffer="~~~ REMOVE THIS RECORD ~~~"
		
		freturn ReplacedToken

    endfunction

endnamespace
