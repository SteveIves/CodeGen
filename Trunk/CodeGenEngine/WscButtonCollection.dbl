;;*****************************************************************************
;;
;; Title:       WscButtonCollection.dbl
;;
;; Type:        Class
;;
;; Description: Represents a collection of input window buttons
;;
;; Date:        9th April 2008
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System.Collections.Generic

.include "DBLDIR:synxml.def"

namespace CodeGen.Engine
	
	public sealed class WscButtonCollection extends List<WscButton>
		
		public method LoadDefaultButtons, void
			endparams
			record
				parser,     XML_PARSER_TYPE
				doc,        XML_DOC_TYPE
				root,       XML_ELEM_TYPE
				buttons,    XML_ELEMLIST_TYPE
				button,     XML_ELEM_TYPE
				idx,        int
				NewButton,  @WscButton
			endrecord
		proc
			try
			begin
				;;Parse DefaultButtons.xml
				parser = xml_parser_create()
				doc = xml_parser_parsefile(parser,"CODEGEN_EXE:DefaultButtons.xml")
				if ((!doc))
				begin
					data ParserError, a80
					xml_parser_error(parser,ParserError)
					Logging.DebugLog(" - Failed to parse CODEGEN_EXE:DefaultButtons.xml. " + atrim(ParserError))
				end
				root = xml_doc_getroot(doc)
				buttons = xml_elem_children(root)
				
				;;Remove any existing buttons from the collection
				this.Clear()
				
				;;And add the default buttons
				for idx from 1 thru xml_elemlist_count(buttons)
				begin
					data TmpAttr, a128
					button = xml_elemlist_item(buttons,idx)
					NewButton = new WscButton()
					if ((xml_elem_getattribute(button,"name",TmpAttr)==XML_SUCCESS) && TmpAttr)
						NewButton.Name = atrim(TmpAttr)
					if ((xml_elem_getattribute(button,"caption",TmpAttr)==XML_SUCCESS) && TmpAttr)
						NewButton.Caption = atrim(TmpAttr)
					if ((xml_elem_getattribute(button,"image",TmpAttr)==XML_SUCCESS) && TmpAttr)
						NewButton.ImageName = atrim(TmpAttr)
					if ((xml_elem_getattribute(button,"method",TmpAttr)==XML_SUCCESS) && TmpAttr)
						NewButton.MethodName = atrim(TmpAttr)
					if ((xml_elem_getattribute(button,"elb",TmpAttr)==XML_SUCCESS) && TmpAttr)
						NewButton.ElbName = atrim(TmpAttr)
					if ((xml_elem_getattribute(button,"quickselect",TmpAttr)==XML_SUCCESS) && TmpAttr)
						NewButton.QuickSelect = atrim(TmpAttr)

					this.Add(NewButton)
				end
			end
			catch (ex)
			begin
				;;We'll just ignore any errors, because this will allow users
				;;to simply delete or rename the default button file to suppress
				;;default button processing
				nop
			end
			finally
			begin
				if (parser)
					xml_parser_delete(parser)
				if (doc)
					xml_doc_delete(doc)
			end
			endtry
		endmethod
		
		;;; <summary>
		;;; Does a button index represent the bast button in the collection?
		;;; </summary>
		;;; <param name="Index">Index of button to check</param>
		;;; <returns>true=yes, false=no</returns>
		public method IsLastButton, boolean
			required in Index, int
			endparams
		proc
			mreturn (Index == (this.Count-1))
		endmethod
		
	endclass
	
endnamespace
