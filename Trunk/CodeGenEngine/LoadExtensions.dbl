;;*****************************************************************************
;;
;; Title:       LoadExtensions.dbl
;;
;; Type:        Functions
;;
;; Description: Routines to load custom extensions
;;
;; Date:        12th November 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI
import System.Collections
import Microsoft.Win32
import System
import System.IO
import System.Reflection

namespace CodeGen.Engine
	
	subroutine LoadExtensions
		endparams
		
		stack record
			ok					,Boolean
			customFileSpec		,a256
			tmpLen				,i4
			libraries			,@ArrayList
			loadCustomTokens	,Boolean
			usingExtDir			,Boolean
			extensionsFound     ,Boolean
		endrecord
		
	proc
		
		if (Env.DeveloperDebug)
		begin
			Logging.Log("DEVDBG: ----------------------------------------------------------")
			Logging.Log("DEVDBG: OTHER EXTENSIONS")
		end
		
		ok = true
		loadCustomTokens = false
		usingExtDir = false
		extensionsFound = false
		
		;;Do we have a CODEGEN_EXTDIR environment variable?
		xcall getlog("CODEGEN_EXTDIR",customFileSpec,tmpLen)
		if (tmpLen) then
			usingExtDir = true
		else
		begin
			;;No CODEGEN_EXTDIR so we'll look in CODEGEN_EXE
			xcall getlog("CODEGEN_EXE",customFileSpec,tmpLen)
		end
		
		;;Setup a file spec to locate custom token processor extensions
		if (customFileSpec(%trim(customFileSpec):1)!="\")
			customFileSpec = %atrim(customFileSpec) + "\"
		customFileSpec = %atrim(customFileSpec) + "custom*.dll"
		
		if (Env.DeveloperDebug)
			Logging.Log("DEVDBG: Searching for extensions in " + %atrim(customFileSpec))
		
		if (WinDir(customFileSpec,libraries,WinDirCase.NoChange))
		begin
			data file, String
			foreach file in libraries
			begin
				data libSpec, String, "CODEGEN_EXE:"+file
				if (usingExtDir)
					libSpec = "CODEGEN_EXTDIR:"+file
					
				if (Env.DeveloperDebug)
					Logging.Log("DEVDBG: Found "+libSpec)
				
				try
				begin
					data address, D_ADDR, 0
					
					xcall openelb(libSpec)
					
					extensionsFound = true
					
					if (Env.DeveloperDebug)
						Logging.Log("DEVDBG: Library opened")
					
					;;Get the address of the extensions load routine
					if (address = %xaddr("LoadCustomExtensions",,1)) then
					begin
						if (Env.DeveloperDebug)
							Logging.Log("DEVDBG: LoadCustomExtensions() found")
						try
						begin
							if (Env.DeveloperDebug)
								Logging.Log("DEVDBG: Calling LoadCustomExtensions()")
							xcall xsubr(address)
						end
						catch (e, @Exception)
						begin
							if (Env.DeveloperDebug) then
							begin
								Logging.Log("DEVDBG: LoadCustomExtensions() failed. Error was: "+ e.Message)
								if (e.InnerException!=^null)
									Logging.Log("        Inner exception: " + e.InnerException.Message)
							end
							else
							begin
								Logging.Errorlog("Failed to load extensions. LoadCustomExtensions() failed!")
								Logging.Log("       Exception:" + e.Message)
								if (e.InnerException!=^null)
									Logging.Log("       Inner exception" + e.InnerException.Message)
							end
							ok = false
						end
						endtry
					end
					else
					begin
						if (Env.DeveloperDebug)
							Logging.Log("DEVDBG: LoadCustomExtensions() NOT found!")
					end
				end
				catch (e, @Exception)
				begin
					Logging.Errorlog("Failed to open library!")
					ok = false
				end
				endtry
			end				
		end
		
		if (Env.DeveloperDebug)
		begin
			if (!extensionsFound)
				Logging.Log("DEVDBG: No extensions found")
			Logging.Log("DEVDBG: Finished loading extensions")
		end
		
		xreturn
		
	endsubroutine
	
	subroutine LoadSymphonyExt
		endparams
		
		stack record
			errorStatus				,Boolean
		endrecord
		
	proc
		
		if (Env.DeveloperDebug)
		begin
			Logging.Log("DEVDBG: ----------------------------------------------------------")
			Logging.Log("DEVDBG: SYMPHONY FRAMEWORK EXTENSIONS")
		end
		
		data ok, Boolean, true
		data symphonyLocation, String
		data extensionsAssembly, String
		data extensionsFound, boolean, false
		
		;;Report whether we're running 32-bit or 64-bit
		if (Env.DeveloperDebug)
		begin
			if (Environment.Is64BitProcess) then
				Logging.Log("DEVDBG: Process is 64-bit")
			else
				Logging.Log("DEVDBG: Process is 32-bit")
		end
		
		;;Look for extensions in the registry
		
		symphonyLocation = (String)Registry.GetValue("HKEY_LOCAL_MACHINE\SOFTWARE\Synergex\SymphonyFramework","ExtensionPath","")
		extensionsAssembly = (String)Registry.GetValue("HKEY_LOCAL_MACHINE\SOFTWARE\Synergex\SymphonyFramework","ExtensionLibrary","")
		
		if (!String.IsNullOrWhiteSpace(symphonyLocation)&&!String.IsNullOrWhiteSpace(extensionsAssembly))
		begin
			extensionsAssembly = Path.Combine(symphonyLocation,extensionsAssembly)
			if (File.Exists(extensionsAssembly)) then
			begin
				if (Env.DeveloperDebug)
					Logging.Log("DEVDBG: Extensions definition found in registry and assembly found")
				extensionsFound = true
			end
			else
			begin
				if (Env.DeveloperDebug)
					Logging.Log("DEVDBG: Extensions definition found in registry but assembly not found")
			end
		end
		
		;;If we didn't find extensions, and we're 64-bit, let's try looking in the 32-bit registry
		
		if (!extensionsFound&&Environment.Is64BitProcess)
		begin
			symphonyLocation = (String)Registry.GetValue("HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Synergex\SymphonyFramework","ExtensionPath","")
			extensionsAssembly = (String)Registry.GetValue("HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Synergex\SymphonyFramework","ExtensionLibrary","")
			
			if (!String.IsNullOrWhiteSpace(symphonyLocation)&&!String.IsNullOrWhiteSpace(extensionsAssembly))
			begin
				extensionsAssembly = Path.Combine(symphonyLocation,extensionsAssembly)
				if (File.Exists(extensionsAssembly)) then
				begin
					if (Env.DeveloperDebug)
						Logging.Log("DEVDBG: Extensions definition found in 32-bit registry and assembly found")
					extensionsFound = true
				end
				else
				begin
					if (Env.DeveloperDebug)
						Logging.Log("DEVDBG: Extensions definition found in 32-bit registry but assembly not found")
				end
			end
		end
		
		;;If we still didn't find extensions, let's look on disk
		if (!extensionsFound)
		begin
			data codeBaseUri, @UriBuilder, new UriBuilder(Assembly.GetExecutingAssembly().CodeBase)
			symphonyLocation = Path.GetDirectoryName(Uri.UnescapeDataString(codeBaseUri.Path))
			extensionsAssembly = "SymphonyCodeGenExtensions.dll"
			extensionsAssembly = Path.Combine(symphonyLocation,extensionsAssembly)
			
			if (File.Exists(extensionsAssembly)) then
			begin
				if (Env.DeveloperDebug)
					Logging.Log("DEVDBG: Extensions found on disk")
				extensionsFound = true
			end
			else
			begin
				if (Env.DeveloperDebug)
					Logging.Log("DEVDBG: Extensions not found on disk")
			end
		end
		
		if (extensionsFound)
		begin
			;;Report the extensions assembly we're going to use
			
			if (Env.DeveloperDebug)
				Logging.Log("DEVDBG: Using " + extensionsAssembly)
			
			;;Load the assembly
			
			try
			begin
				xcall openelb(extensionsAssembly)
				if (Env.DeveloperDebug)
					Logging.Log("DEVDBG: Assembly opened")
			end
			catch (e, @Exception)
			begin
				Logging.Errorlog("Failed to open assembly. Error was " + e.Message)
				ok = false
			end
			endtry
			
			;;Find the address for the entry point routine
			
			data entryPointAddress, D_ADDR, 0
			if (ok)
			begin
				if (entryPointAddress = %xaddr("LoadSymphonyExtensions",,1)) then
				begin
					if (Env.DeveloperDebug)
						Logging.Log("DEVDBG: Found LoadSymphonyExtensions()")
				end
				else
				begin
					Logging.Errorlog("LoadSymphonyExtensions() NOT found!")
					ok = false
				end
			end
			
			;;Load the extensions
			
			if (ok)
			begin
				try
				begin
					if (Env.DeveloperDebug) then
						Logging.Log("DEVDBG: Calling LoadSymphonyExtensions()")
					else
						Logging.DebugLog("Loading Symphony extensions",true,false)
					xcall xsubr(entryPointAddress)
				end
				catch (e, @Exception)
				begin
					if (Env.DeveloperDebug) then
					begin
						Logging.Log("DEVDBG: LoadSymphonyExtensions() failed. Error was: "+ e.Message)
						if (e.InnerException!=^null)
							Logging.Log("        Inner exception: " + e.InnerException.Message)
					end
					else
					begin
						Logging.Errorlog("Failed to load Symphony extensions. LoadSymphonyExtensions() failed!")
						Logging.Log("       Exception: " + e.Message)
						if (e.InnerException!=^null)
							Logging.Log("       Inner exception: " + e.InnerException.Message)
					end
					ok = false
				end
				endtry
			end
		end
		
		if (Env.DeveloperDebug)
			Logging.Log("DEVDBG: Finished loading extensions")
			
		xreturn
		
	endsubroutine
	
	function loadProformaExtensions, boolean
		endparams
		stack record
			ok				,boolean
			dirSpec			,a256
			tmpLen			,i4
			usingExtDir		,Boolean
			assemblySpec	,String
		endrecord
	proc

		ok = true

		;;-------------------------------------------------------------------------
		;;Do we have a custom assembly containing a BusinessCreft ProForma processor?
		
		usingExtDir = false

		if (Env.DeveloperDebug)
			Logging.DebugLog("DEVDBG: Attempting to load BusinessCraft Proforma extensions")
			
		;;Do we have a CODEGEN_EXTDIR environment variable?
		xcall getlog("CODEGEN_EXTDIR",dirSpec,tmpLen)
		if (tmpLen) then
			usingExtDir = true
		else
		begin
			;;No CODEGEN_EXTDIR so we'll look in CODEGEN_EXE
			xcall getlog("CODEGEN_EXE",dirSpec,tmpLen)
		end
			
		;;Setup a file spec to locate custom token processor extensions
		assemblySpec = Path.Combine(%atrim(dirSpec),"CodeGenProForma.dll")
			
		;;Search for and open custom token processor extensions
		if (!File.Exists(assemblySpec)) then
		begin
			Logging.Errorlog(String.Format("Proforma assembly {0} not found!",assemblySpec))
			ok = false
		end
		else
		begin
			try
			begin
				Logging.DebugLog("Loading Proforma assembly " + assemblySpec,true,false)
				xcall openelb(assemblySpec)
			end
			catch (e, @Exception)
			begin
				Logging.Errorlog("Failed to load Proforma assembly! Error was " + e.Message)
				ok = false
			end
			endtry
		end

		freturn ok

	endfunction
	
	subroutine ReportExtensions
		endparams
	proc
		
		if (Env.DeveloperDebug)
		begin
			Logging.Log("DEVDBG: ----------------------------------------------------------")
			Logging.Log("DEVDBG: SUMMARY OF LOADED EXTENSIONS")
		end
		
		if ((Env.CustomTokens.Count>0)
		&	|| (Env.CustomFieldTokens.Count>0)
		&	|| (Env.CustomSelectionTokens.Count>0)
		&	|| (Env.CustomKeyTokens.Count>0)
		&	|| (Env.CustomSegmentTokens.Count>0)
		&	|| (Env.CustomEnumTokens.Count>0)
		&	|| (Env.CustomEnumMemberTokens.Count>0)
		&	|| (Env.CustomrelationTokens.Count>0)
		&	|| (Env.CustomButtonTokens.Count>0)
		&	|| (Env.CustomFileTokens.Count>0)
		&	|| (Env.CustomTagTokens.Count>0)) then
		begin
			if (Env.CustomTokens.Count>0)
			begin
				Logging.DebugLog(" - Custom generic tokens have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customToken, @CustomToken
					foreach customToken in Env.CustomTokens
						Logging.DebugLog("   " + customToken.Token)
				end
			end
			
			if (Env.CustomFieldTokens.Count>0)
			begin
				Logging.DebugLog(" - Custom field loop tokens have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customToken, @CustomFieldToken
					foreach customToken in Env.CustomFieldTokens
						Logging.DebugLog("   " + customToken.Token)
				end
			end
			
			if (Env.CustomSelectionTokens.Count>0)
			begin
				Logging.DebugLog(" - Custom field selection loop tokens have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customToken, @CustomSelectionToken
					foreach customToken in Env.CustomSelectionTokens
						Logging.DebugLog("   " + customToken.Token)
				end
			end
			
			if (Env.CustomKeyTokens.Count>0)
			begin
				Logging.DebugLog(" - Custom key loop tokens have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customToken, @CustomKeyToken
					foreach customToken in Env.CustomKeyTokens
						Logging.DebugLog("   " + customToken.Token)
				end
			end
			
			if (Env.CustomSegmentTokens.Count>0)
			begin
				Logging.DebugLog(" - Custom key segment loop tokens have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customToken, @CustomSegmentToken
					foreach customToken in Env.CustomSegmentTokens
						Logging.DebugLog("   " + customToken.Token)
				end
			end
			
			if (Env.CustomEnumTokens.Count>0)
			begin
				Logging.DebugLog(" - Custom enum loop tokens have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customToken, @CustomEnumToken
					foreach customToken in Env.CustomEnumTokens
						Logging.DebugLog("   " + customToken.Token)
				end
			end
			
			if (Env.CustomEnumMemberTokens.Count>0)
			begin
				Logging.DebugLog(" - Custom enum member loop tokens have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customToken, @CustomEnumMemberToken
					foreach customToken in Env.CustomEnumMemberTokens
						Logging.DebugLog("   " + customToken.Token)
				end
			end
			
			if (Env.CustomRelationTokens.Count>0)
			begin
				Logging.DebugLog(" - Custom relation loop tokens have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customToken, @CustomRelationToken
					foreach customToken in Env.CustomRelationTokens
						Logging.DebugLog("   " + customToken.Token)
				end
			end
			
			if (Env.CustomButtonTokens.Count>0)
			begin
				Logging.DebugLog(" - Custom button loop tokens have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customToken, @CustomButtonToken
					foreach customToken in Env.CustomButtonTokens
						Logging.DebugLog("   " + customToken.Token)
				end
			end
			
			if (Env.CustomFileTokens.Count>0)
			begin
				Logging.DebugLog(" - Custom file loop tokens have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customToken, @CustomFileToken
					foreach customToken in Env.CustomFileTokens
						Logging.DebugLog("   " + customToken.Token)
				end
			end
			
			if (Env.CustomTagTokens.Count>0)
			begin
				Logging.DebugLog(" - Custom tag loop tokens have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customToken, @CustomTagToken
					foreach customToken in Env.CustomTagTokens
						Logging.DebugLog("   " + customToken.Token)
				end
			end
		end
		else
			Logging.DebugLog(" - No custom tokens have been loaded")
		
		if ((Env.CustomFieldExpressions.Count>0)
		&	|| (Env.CustomSelectionExpressions.Count>0)
		&	|| (Env.CustomKeyExpressions.Count>0)
		&	|| (Env.CustomSegmentExpressions.Count>0)
		&	|| (Env.CustomEnumExpressions.Count>0)
		&	|| (Env.CustomEnumMemberExpressions.Count>0)
		&	|| (Env.CustomFileExpressions.Count>0)
		&	|| (Env.CustomTagExpressions.Count>0)
		&	|| (Env.CustomButtonExpressions.Count>0)) then
		begin
			if (Env.CustomFieldExpressions.Count>0)
			begin
				Logging.DebugLog(" - Custom field loop expressions have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customExpression, @CustomFieldExpression
					foreach customExpression in Env.CustomFieldExpressions
						Logging.DebugLog("   <IF " + customExpression.Expression+">")
				end
			end
			
			if (Env.CustomSelectionExpressions.Count>0)
			begin
				Logging.DebugLog(" - Custom field selection loop expressions have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customExpression, @CustomSelectionExpression
					foreach customExpression in Env.CustomSelectionExpressions
						Logging.DebugLog("   <IF " + customExpression.Expression+">")
				end
			end
			
			if (Env.CustomKeyExpressions.Count>0)
			begin
				Logging.DebugLog(" - Custom key loop expressions have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customExpression, @CustomKeyExpression
					foreach customExpression in Env.CustomKeyExpressions
						Logging.DebugLog("   <IF " + customExpression.Expression+">")
				end
			end
			
			if (Env.CustomSegmentExpressions.Count>0)
			begin
				Logging.DebugLog(" - Custom key segment loop expressions have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customExpression, @CustomSegmentExpression
					foreach customExpression in Env.CustomSegmentExpressions
						Logging.DebugLog("   <IF " + customExpression.Expression+">")
				end
			end
			
			if (Env.CustomEnumExpressions.Count>0)
			begin
				Logging.DebugLog(" - Custom enum loop expressions have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customExpression, @CustomEnumExpression
					foreach customExpression in Env.CustomEnumExpressions
						Logging.DebugLog("   <IF " + customExpression.Expression+">")
				end
			end
			
			if (Env.CustomEnumMemberExpressions.Count>0)
			begin
				Logging.DebugLog(" - Custom enum member loop expressions have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customExpression, @CustomEnumMemberExpression
					foreach customExpression in Env.CustomEnumMemberExpressions
						Logging.DebugLog("   <IF " + customExpression.Expression+">")
				end
			end
			
			if (Env.CustomFileExpressions.Count>0)
			begin
				Logging.DebugLog(" - Custom file loop expressions have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customExpression, @CustomFileExpression
					foreach customExpression in Env.CustomFileExpressions
						Logging.DebugLog("   <IF " + customExpression.Expression+">")
				end
			end				
			
			if (Env.CustomTagExpressions.Count>0)
			begin
				Logging.DebugLog(" - Custom tag loop expressions have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customExpression, @CustomTagExpression
					foreach customExpression in Env.CustomTagExpressions
						Logging.DebugLog("   <IF " + customExpression.Expression+">")
				end
			end
			
			if (Env.CustomButtonExpressions.Count>0)
			begin
				Logging.DebugLog(" - Custom button loop expressions have been loaded")
				if (Env.DeveloperDebug)
				begin
					data customExpression, @CustomButtonExpression
					foreach customExpression in Env.CustomButtonExpressions
						Logging.DebugLog("   <IF " + customExpression.Expression+">")
				end
			end
			
		end
		else
			Logging.DebugLog(" - No custom expressions have been loaded")
		
		xreturn
		
	endsubroutine
	
endnamespace
