;;*****************************************************************************
;;
;; Title:       CheckUserToken.dbl
;;
;; Type:        Function
;;
;; Description: Checks if a required user-defined token has been provided.
;;
;; Date:        26th July 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI
.ifdef DBLNET
import System.Collections.ObjectModel
.endc

namespace CodeGen.Engine
    
    function CheckUserToken, boolean
        
		required in buffer			,a
		required in optionalToken	,boolean
        endparams
        
        stack record
            pos1            ,int
			pos2            ,int
			pos3			,int
			tokenName       ,String
			defaultValue	,String
            tokenFound      ,Boolean
        endrecord
        
    proc
        
        tokenFound = false
        
		if (optionalToken) then
		begin
			pos1 = instr(1,buffer,"<OPTIONAL_USERTOKEN>") + 20
			pos2 = instr(pos1,buffer,"</OPTIONAL_USERTOKEN>") -1
			pos3 = instr(1,buffer(pos1,pos2),"=") + pos1 -1
			
			if (!pos2||!pos3||(pos2<pos1)) then
				ErrorLog("Invalid <OPTIONAL_USERTOKEN> token syntax")
			else
			begin
				data token, @UserToken
				
				tokenName = "<" + atrim(buffer(pos1,pos3-1)) + ">"
				tokenName = tokenName.ToUpper()

				defaultValue = buffer(pos3+1,pos2)

				DebugLog(" - Checking for optional user token " + tokenName,false,false)
				
				;;Check if we have ANY user tokens
				if (Env.UserTokens!=^null)
				begin
					;;We have user tokens, check if we have the one we need
					.ifdef DBLNET
					foreach token in Env.UserTokens
					.else
					foreach token in Env.UserTokens.GetEnumerator()
					.endc
					begin
						if (token.Name==tokenName)
						begin
							tokenFound = true
							exitloop
						end
					end
				end
				
				;;Did we find the token we were looking for?
				if (!tokenFound)
				begin
					;;No, if we don't already have a user tokens collection then create one
					if (Env.UserTokens==^null)
					begin
						.ifdef DBLNET
						Env.UserTokens = new ObservableCollection<UserToken>()
						.else
						Env.UserTokens = new UserTokenCollection()
						.endc
					end
					
					;;And add the new user token using the default value.
					Env.UserTokens.Add(new UserToken(tokenName,defaultValue))

					DebugLog(" - Optional user token " + tokenName + " not found, using default value " + defaultValue,false,false)
					tokenFound = true
				end
			end
		end
		else
		begin
			pos1 = instr(1,buffer,"<REQUIRES_USERTOKEN>") + 20
			pos2 = instr(pos1,buffer,"</REQUIRES_USERTOKEN>") -1
			
			if (!pos2||(pos2<pos1)) then
				ErrorLog("Invalid <REQUIRES_USERTOKEN> token syntax")
			else
			begin
				data token, @UserToken
				
				tokenName = "<" + atrim(buffer(pos1,pos2)) + ">"
				tokenName = tokenName.ToUpper()
				DebugLog(" - Checking for user token " + tokenName,false,false)
				
				;;Check if we have ANY user tokens
				if (Env.UserTokens!=^null)
				begin
					;;We have user tokens, check if we have the one we need
					.ifdef DBLNET
					foreach token in Env.UserTokens
					.else
					foreach token in Env.UserTokens.GetEnumerator()
					.endc
					begin
						if (token.Name==tokenName)
						begin
							tokenFound = true
							exitloop
						end
					end
				end
				
				if (tokenFound) then
					DebugLog(" - User defined token " + tokenName + " found, value is " + token.Value,false,false)
				else
					ErrorLog("Template " + Env.CurrentTemplate + " requires user-defined token " + tokenName)
			end
		end
        
        freturn tokenFound
        
    endfunction
    
endnamespace

