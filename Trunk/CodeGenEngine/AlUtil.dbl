;;*****************************************************************************
;;
;; Title:       AlUtil.dbl
;;
;; Type:        Class
;;
;; Description: ArrayList Utility Methods
;;
;; Date:        6th November 2009
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI
import System.Collections
import System.Collections.Generic

namespace CodeGen.Engine

    public class AlUtil

        ;;----------------------------------------------------------------------

        public static method Add, void
            required inout al, @ArrayList
            required in text, a
            endparams
        proc
            if (al==^null)
                al = new ArrayList()
            al.Add((@a)atrim(text))
        endmethod

		;;----------------------------------------------------------------------
		
		public static method AddIfMissing, void
			required inout al, @ArrayList
			required in text, a
			endparams
			stack record
				item, @a
				found, boolean
			endrecord
		proc
			if (al==^null)
				al = new ArrayList()
			found = false
			foreach item in al
			begin
				if ((a)item==text)
				begin
					found = true
					exitloop
				end
			end
			if (!found)
				al.Add((@a)atrim(text))
		endmethod
		
		;;----------------------------------------------------------------------
		
		public static method AddIfMissing, void
			required inout al, @List<String>
			required in text, String
			endparams
			stack record
				item, String
				found, boolean
			endrecord
		proc
			if (al==^null)
				al = new List<String>()
			found = false
			foreach item in al
			begin
				if (item.eqs.text)
				begin
					found = true
					exitloop
				end
			end
			if (!found)
				al.Add(text)
		endmethod
		
;;----------------------------------------------------------------------

        public static method AddIfMissing, void
            required inout al, @ArrayList
            required in text, @a
            endparams
            stack record
                item, @a
                found, boolean
            endrecord
        proc
            if (al==^null)
                al = new ArrayList()
            found = false
            foreach item in al
            begin
                if (((a)item)==((a)text))
                begin
                    found = true
                    exitloop
                end
            end
            if (!found)
                al.Add(text)
        endmethod

		;;----------------------------------------------------------------------
		
		public static method AddIfMissing, void
			required inout al, @ArrayList
			required in text, String
			endparams
			stack record
				item, String
				found, boolean
			endrecord
		proc
			if (al==^null)
				al = new ArrayList()
			found = false
			foreach item in al
			begin
				if (item==text)
				begin
					found = true
					exitloop
				end
			end
			if (!found)
				al.Add(text)
		endmethod
		
		;;----------------------------------------------------------------------

        public static method AppendToLastItem, void
            required inout al, @ArrayList
            required in text, a
            endparams
            record
                tmpa, a31744
            endrecord
        proc
            if (al==^null)
                al = new ArrayList()
            if (!al.Count)
                al.Add((@a)"")
            tmpa = (a)al[al.Count-1]
            tmpa = atrim(tmpa) + text
            al[al.Count-1]=(@a)tmpa
        endmethod

        ;;----------------------------------------------------------------------

        public static method AppendToLastItem, void
            required inout al, @ArrayList
            required in text, @a
            endparams
        proc
            if (al==^null)
                al = new ArrayList()
            if (!al.Count)
                al.Add((@a)"")
            al[al.Count-1]=(@a)(atrim(atrim((a)al[al.Count-1])+(a)text))
        endmethod

        ;;----------------------------------------------------------------------

        public static method AppendItems, void
            required inout alTarget, @ArrayList
            required in alSource, @ArrayList
            endparams
            record
                item, @*
            endrecord
        proc
            if (alTarget==^null)
                alTarget = new ArrayList()
            foreach item in alSource
                alTarget.Add(item)
        endmethod

        ;;----------------------------------------------------------------------

        public static method Clone, void
            required in  inCollection   ,@ArrayList
            required out outCollection  ,@ArrayList
            endparams
            record
                item, @*
            endrecord
        proc
            outCollection = new ArrayList()
            foreach item in inCollection
                outCollection.Add(item)
        endmethod

        ;;----------------------------------------------------------------------

        public static method RemoveLastItem, void
            required inout al, @ArrayList
            endparams
        proc
            if (al.Count)
                al.RemoveAt(al.Count-1)
        endmethod

    endclass

endnamespace

