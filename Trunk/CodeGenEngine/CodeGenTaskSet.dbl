
import System
import System.Collections.ObjectModel
import System.ComponentModel
import System.IO
import System.Runtime.Serialization
import System.Xml
import System.Xml.Serialization

import CodeGen.Engine

namespace CodeGen.Engine

	{DataContract}
	public class CodeGenTaskSet implements INotifyPropertyChanged

.region "Constructors"

		public method CodeGenTaskSet
			endparams
		proc
			Tasks = new ObservableCollection<CodeGenTask>()
			Messages = new ObservableCollection<String>()
		endmethod
		
.endregion

.region "TaskSet configuration properties"

		private mDescription,			String,								"New Task Set"

		private mRepositoryMainFile,	String
		private mRepositoryTextFile,	String

		private mTemplateFolder,		String
		private mOutputFolder,			String

		private mDataMappingsFile,		String

		private mLoggingLevel,			LoggingLevel,						LoggingLevel.Normal				;; -v -d, etc.
		private mEchoCommands,			Boolean,							false							;; -e
		private mListGeneratedFiles,	Boolean,							false							;;-lf

		private mTasks,					@ObservableCollection<CodeGenTask>

		{DefaultValue("New Task Set")}
		{DataMember}
		public property Description, String
			method get
			proc
				mreturn mDescription
			endmethod
			method set
			proc
				mDescription = value
				NotifyPropertyChanged("Description")
			endmethod
		endproperty

		{DefaultValue("")}
		{DataMember}
		public property RepositoryMainFile, String
			method get
			proc
				mreturn mRepositoryMainFile
			endmethod
			method set
			proc
				mRepositoryMainFile = value
				NotifyPropertyChanged("RepositoryMainFile")
			endmethod
		endproperty
		
		{DefaultValue("")}
		{DataMember}
		public property RepositoryTextFile, String
			method get
			proc
				mreturn mRepositoryTextFile
			endmethod
			method set
			proc
				mRepositoryTextFile = value
				NotifyPropertyChanged("RepositoryTextFile")
			endmethod
		endproperty

		{DefaultValue("")}
		{DataMember}
		public property TemplateFolder, String
			method get
			proc
				mreturn mTemplateFolder
			endmethod
			method set
			proc
				mTemplateFolder = value.Trim()
				if (!mTemplateFolder.EndsWith(":")&&!mTemplateFolder.EndsWith("\"))
					mTemplateFolder = mTemplateFolder + "\"
				NotifyPropertyChanged("TemplateFolder")
			endmethod
		endproperty

		{DefaultValue("")}
		{DataMember}
		public property OutputFolder, String
			method get
			proc
				mreturn mOutputFolder
			endmethod
			method set
			proc
				mOutputFolder = value.Trim()
				if (!mOutputFolder.EndsWith(":")&&!mOutputFolder.EndsWith("\"))
					mOutputFolder = mOutputFolder + "\"
				NotifyPropertyChanged("OutputFolder")
			endmethod
		endproperty
		
		{DefaultValue("")}
		{DataMember}
		public property DataMappingsFile, String
			method get
			proc
				mreturn mDataMappingsFile
			endmethod
			method set
			proc
				mDataMappingsFile = value
				NotifyPropertyChanged("DataMappingsFile")
			endmethod
		endproperty
		
		{DefaultValue(0)}
		{DataMember}
		public property LoggingLevel, LoggingLevel
			method get
			proc
				mreturn mLoggingLevel
			endmethod
			method set
			proc
				mLoggingLevel = value
				NotifyPropertyChanged("LoggingLevel")
			endmethod
		endproperty
		
		;;; <summary>
		;;;  Echo the command line to the output log
		;;; </summary>
		{DefaultValue(false)}
		{DataMember}
		public property EchoCommands, Boolean
			method get
			proc
				mreturn mEchoCommands
			endmethod
			method set
			proc
				mEchoCommands = value
				NotifyPropertyChanged("EchoCommands")
			endmethod
		endproperty
		
		{DefaultValue(false)}
		{DataMember}
		public property ListGeneratedFiles, Boolean
			method get
			proc
				mreturn mListGeneratedFiles
			endmethod
			method set
			proc
				mListGeneratedFiles = value
				NotifyPropertyChanged("ListGeneratedFiles")
			endmethod
		endproperty
		
		{DataMember}
		public property Tasks, @ObservableCollection<CodeGenTask>
			method get
			proc
				mreturn mTasks
			endmethod
			method set
			proc
				mTasks = value
			endmethod
		endproperty

.endregion

.region "Taskset status properties"
		
		{NonSerialized}
		{DataMember}
		private mMessages, @ObservableCollection<String>
		
		{XmlIgnore}
		{DataMember}
		public property Messages, @ObservableCollection<String>
			method get
			proc
				mreturn mMessages
			endmethod
			method set
			proc
				mMessages = value
				Env.TaskSetMessages = value
			endmethod
		endproperty
		
		{NonSerialized}
		{DataMember}
		private mComplete, Boolean, false
		
		{XmlIgnore}
		{DataMember}
		public property Complete, Boolean
			method get
			proc
				mreturn mComplete
			endmethod
			internal method set
			proc
				mComplete = value
				NotifyPropertyChanged("Complete")
			endmethod
		endproperty
		
.endregion

.region "Events"
		
		public delegate StartingTaskSetEventHandler, void
			taskset, @CodeGenTaskSet
		enddelegate
		
		public delegate TaskSetCompleteEventHandler, void
			taskset, @CodeGenTaskSet
		enddelegate
		
		public event StartingTaskSet, @StartingTaskSetEventHandler
		public event TaskSetComplete, @TaskSetCompleteEventHandler
		
		internal method RaiseStartingTaskSet, void
		proc
			if (StartingTaskSet!=^null)
				raiseevent(StartingTaskSet,this)
		endmethod
		
		internal method RaiseTaskSetComplete, void
		proc
			if (TaskSetComplete!=^null)
				raiseevent(TaskSetComplete,this)
		endmethod
		
.endregion
		
.region "Serialization"

		public method SaveToFile, boolean
			required in fileSpec, String
			endparams
		proc
			data ok, boolean, true
			try
			begin
				disposable data stm, @StreamWriter, File.CreateText(fileSpec)
				if(stm!=^null)
				begin
					data xs, @XmlSerializer, new XmlSerializer(this.GetType())
					xs.Serialize(stm,this)
					stm.Close()
				end
			end
			catch (e, @Exception)
			begin
				ok = false
			end
			endtry
			mreturn ok
		endmethod
		
		public static method LoadFromFile, boolean
			required in fileSpec, String
			required out taskSet, @CodeGenTaskSet
			endparams
		proc
			data ok, boolean, true
			disposable data stm, @StreamReader
			try
			begin
				stm = File.OpenText(fileSpec)
				if (stm!=^null)
				begin
					data xs, @XmlSerializer, new XmlSerializer(^typeof(CodeGenTaskSet))
					data xr, @XmlReader, new XmlTextReader(stm)
					taskSet = (CodeGenTaskSet)xs.Deserialize(xr)
					stm.Close()
				end
			end
			catch (ex, @Exception)
			begin
				ok = false
			end
			endtry
			mreturn ok
		endmethod

.endregion

.region "INotifyPropertyChanged"
		
		public event PropertyChanged, @PropertyChangedEventHandler
		
		private method NotifyPropertyChanged, void
			required in propertyName, String
			endparams
		proc
			if (PropertyChanged!=^null)
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName))
		endmethod
		
.endregion
		
	endclass

endnamespace

