;;*****************************************************************************
;;
;; Title:       ExpandTagToken.dbl
;;
;; Type:        Function
;;
;; Description: Expands tag loop tokens
;;
;; Date:        26th July 2013
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine
	
	function ExpandTagToken         ,boolean
		required in    Str          ,@RpsStructure  ;;Current structure
		required in    Tag          ,@RpsTag        ;;Current tag
		required in    TagNbr       ,int            ;;Current tag number (0-based index into Tags collection)
		required in    TokenStart   ,int            ;;Start position of token in buffer
		required in    TokenEnd     ,int            ;;End position of token in buffer
		required in    OutputOff	,boolean        ;;Is output suppressed because of an expression
		required inout buffer       ,a              ;;Buffer containing the token to be expanded
		required inout ErrStatus    ,boolean        ;;Error status (set to true to abort processing)
		endparams
		
.include "CODEGEN_SRC:codegen.def"
		
		stack record
			ReplacedToken   ,boolean
			Fld, @RpsField
		endrecord
		
	proc
		
		ReplacedToken = false

		;;Get a handle on the field associated with the tag
		clear Fld
		if (!String.IsNullOrWhiteSpace(Tag.Field))
		begin
			foreach Fld in Str.Fields.GetEnumerator()
				if (Fld.Name==Tag.Field)
					exitloop
		end
		
		using buffer(TokenStart,TokenEnd) select
		
		("<,>"),
		begin
			data tmpTxt, a1," "
			if (TagNbr<Str.Tags.Count-1)
				tmpTxt=","
			ReplacedToken = ReplaceToken(buffer,"<,>",tmpTxt)
		end
		
		("<+>"),
		begin
			data tmpTxt, a1," "
			if (TagNbr<Str.Tags.Count-1)
				tmpTxt="+"
			ReplacedToken = ReplaceToken(buffer,"<+>",tmpTxt)
		end
		
		("<:>"),
		begin
			data tmpTxt, a1," "
			if (TagNbr<Str.Tags.Count-1)
				tmpTxt=":"
			ReplacedToken = ReplaceToken(buffer,"<:>",tmpTxt)
		end
		
		("<&&>"),
		begin
			data tmpTxt, a2,"  "
			if (TagNbr<Str.Tags.Count-1)
				tmpTxt="&&"
			ReplacedToken = ReplaceToken(buffer,"<&&>",tmpTxt)
		end
		
		("<.AND.>"),
		begin
			data tmpTxt, a5,"     "
			if (TagNbr<Str.Tags.Count-1)
				tmpTxt=".AND."
			ReplacedToken = ReplaceToken(buffer,"<.AND.>",tmpTxt)
		end
		
		("<AND>"),
		begin
			data tmpTxt, a3,"   "
			if (TagNbr<Str.Tags.Count-1)
				tmpTxt="AND"
			ReplacedToken = ReplaceToken(buffer,"<AND>",tmpTxt)
		end
		
		("<||>"),
		begin
			data tmpTxt, a2,"  "
			if (TagNbr<Str.Tags.Count-1)
				tmpTxt="||"
			ReplacedToken = ReplaceToken(buffer,"<||>",tmpTxt)
		end
		
		("<.OR.>"),
		begin
			data tmpTxt, a4,"    "
			if (TagNbr<Str.Tags.Count-1)
				tmpTxt=".OR."
			ReplacedToken = ReplaceToken(buffer,"<.OR.>",tmpTxt)
		end
		
		("<OR>"),
		begin
			data tmpTxt, a2,"  "
			if (TagNbr<Str.Tags.Count-1)
				tmpTxt="OR"
			ReplacedToken = ReplaceToken(buffer,"<OR>",tmpTxt)
		end

		;PROCESS OTHER TOKENS HERE

		("<TAGLOOP_TAG_NAME>"),
			ReplacedToken = ReplaceToken(buffer,"<TAGLOOP_TAG_NAME>",Tag.Name)
		
		("<TAGLOOP_SEQUENCE>"),
			ReplacedToken = ReplaceToken(buffer,"<TAGLOOP_SEQUENCE>",%string(Tag.SequenceNumber))
		
		("<TAGLOOP_CONNECTOR_DBL>","<tagloop_connector_dbl>"),
		begin
			data token, String, buffer(TokenStart,TokenEnd)
			data operator, String, ""
			using Tag.ComparisonConnector select
			(RpsTagComparison.None),
				nop
			(RpsTagComparison.CompareOr),
				operator = ".OR."
			(RpsTagComparison.CompareAnd),
				operator = ".AND."
			endusing
			if (token=="<tagloop_connector_dbl>")
				operator = operator.ToLower()
			ReplacedToken = ReplaceToken(buffer,token,operator)
		end
		
		("<TAGLOOP_CONNECTOR_C>"),
		begin
			data operator, String, ""
			using Tag.ComparisonConnector select
			(RpsTagComparison.None),
				nop
			(RpsTagComparison.CompareOr),
				operator = "||"
			(RpsTagComparison.CompareAnd),
				operator = "&&"
			endusing
			ReplacedToken = ReplaceToken(buffer,"<TAGLOOP_CONNECTOR_C>",operator)
		end

		("<TAGLOOP_FIELD_NAME>","<tagloop_field_name>","<Tagloop_Field_Name>","<Tagloop_field_name>","<TagloopFieldName>","<tagloopFieldName>"),
		begin
			data token, string, buffer(TokenStart,TokenEnd)
			data tagFieldName, string
			using token select
			("<TAGLOOP_FIELD_NAME>"),
				tagFieldName=Tag.Field
			("<tagloop_field_name>"),
				tagFieldName=Tag.Field.ToLower()
			("<Tagloop_Field_Name>"),
				tagFieldName=StringTools.MixedCase(Tag.Field)
			("<Tagloop_field_name>"),
				tagFieldName=StringTools.XfCase(Tag.Field)
			("<TagloopFieldName>"),
				tagFieldName=StringTools.PascalCase(Tag.Field)
			("<tagloopFieldName>"),
				tagFieldName=StringTools.CamelCase(Tag.Field)
			endusing
			if (Env.ClDoFieldPrefix)
			begin
				data pos, i4
				tagFieldName = Env.ClFieldPrefix + tagFieldName
				if (pos=instr(1,tagFieldName,"."))
					tagFieldName = tagFieldName(1,pos) + Env.ClFieldPrefix + tagFieldName(pos+1,trim(tagFieldName))
			end
			ReplacedToken = ReplaceToken(buffer,token,tagFieldName)
		end
		
		("<TAGLOOP_FIELD_ALTNAME>","<tagloop_field_altname>","<Tagloop_Field_Altname>","<Tagloop_field_altname>","<TagloopFieldAltname>","<tagloopFieldAltname>"),
		begin
			data token, String, buffer(TokenStart,TokenEnd)
			data name, string
			using token select
			("<TAGLOOP_FIELD_ALTNAME>"),
				name = Fld.AlternateName
			("<tagloop_field_altname>"),
				name = Fld.AlternateName.ToLower()
			("<Tagloop_Field_Altname>"),
				name = StringTools.MixedCase(Fld.AlternateName)
			("<Tagloop_field_altname>"),
				name = StringTools.XfCase(Fld.AlternateName)
			("<TagloopFieldAltname>"),
				name = StringTools.PascalCase(Fld.AlternateName)
			("<tagloopFieldAltname>"),
				name = StringTools.CamelCase(Fld.AlternateName)
			endusing
			ReplacedToken=ReplaceToken(buffer,token,name)
		end
		
		("<TAGLOOP_FIELD_BASENAME>","<tagloop_field_basename>","<Tagloop_Field_Basename>","<Tagloop_field_basename>","<TagloopFieldBasename>","<tagloopFieldBasename>"),
		begin
			data token, String, buffer(TokenStart,TokenEnd)
			data name, string
			using token select
			("<TAGLOOP_FIELD_BASENAME>"),
				name = Fld.BaseName
			("<tagloop_field_basename>"),
				name = Fld.BaseName.ToLower()
			("<Tagloop_Field_Basename>"),
				name = StringTools.MixedCase(Fld.BaseName)
			("<Tagloop_field_basename>"),
				name = StringTools.XfCase(Fld.BaseName)
			("<TagloopFieldBasename>"),
				name = StringTools.PascalCase(Fld.BaseName)
			("<tagloopFieldBasename>"),
				name = StringTools.CamelCase(Fld.BaseName)
			endusing
			ReplacedToken=ReplaceToken(buffer,token,name)
		end
		
		("<TAGLOOP_FIELD_ORIGINALNAME>","<tagloop_field_originalname>","<Tagloop_Field_Originalname>","<Tagloop_field_originalname>","<TagloopFieldOriginalname>","<tagloopFieldOriginalname>"),
		begin
			data token, String, buffer(TokenStart,TokenEnd)
			data name, string
			using token select
			("<TAGLOOP_FIELD_ORIGINALNAME>"),
				name = Fld.OriginalName
			("<tagloop_field_originalname>"),
				name = Fld.OriginalName.ToLower()
			("<Tagloop_Field_Originalname>"),
				name = StringTools.MixedCase(Fld.OriginalName)
			("<Tagloop_field_originalname>"),
				name = StringTools.XfCase(Fld.OriginalName)
			("<TagloopFieldOriginalname>"),
				name = StringTools.PascalCase(Fld.OriginalName)
			("<tagloopFieldOriginalname>"),
				name = StringTools.CamelCase(Fld.OriginalName)
			endusing
			ReplacedToken=ReplaceToken(buffer,token,name)
		end
		
		("<TAGLOOP_FIELD_ODBCNAME>","<tagloop_field_odbcname>","<Tagloop_Field_Odbcname>","<Tagloop_field_odbcname>","<TagloopFieldOdbcname>","<tagloopFieldOdbcname>"),
		begin
			data token, String, buffer(TokenStart,TokenEnd)
			data name, string
			using token select
			("<TAGLOOP_FIELD_ODBCNAME>"),
				name = Fld.OdbcName
			("<tagloop_field_odbcname>"),
				name = Fld.OdbcName.ToLower()
			("<Tagloop_Field_Odbcname>"),
				name = StringTools.MixedCase(Fld.OdbcName)
			("<Tagloop_field_odbcname>"),
				name = StringTools.XfCase(Fld.OdbcName)
			("<TagloopFieldOdbcname>"),
				name = StringTools.PascalCase(Fld.OdbcName)
			("<tagloopFieldOdbcname>"),
				name = StringTools.CamelCase(Fld.OdbcName)
			endusing
			ReplacedToken=ReplaceToken(buffer,token,name)
		end
		
		("<TAGLOOP_FIELD_SQLNAME>","<tagloop_field_sqlname>","<Tagloop_Field_Sqlname>","<Tagloop_field_sqlname>","<TagloopFieldSqlname>","<tagloopFieldSqlname>"),
		begin
			data token, String, buffer(TokenStart,TokenEnd)
			data name, string
			using token select
			("<TAGLOOP_FIELD_SQLNAME>"),
				name = Fld.SqlName
			("<tagloop_field_sqlname>"),
				name = Fld.SqlName.ToLower()
			("<Tagloop_Field_Sqlname>"),
				name = StringTools.MixedCase(Fld.SqlName)
			("<Tagloop_field_sqlname>"),
				name = StringTools.XfCase(Fld.SqlName)
			("<TagloopFieldSqlname>"),
				name = StringTools.PascalCase(Fld.SqlName)
			("<tagloopFieldSqlname>"),
				name = StringTools.CamelCase(Fld.SqlName)
			endusing
			ReplacedToken=ReplaceToken(buffer,token,name)
		end
		
		("<TAGLOOP_OPERATOR_DBL>","<tagloop_operator_dbl>"),
		begin
			data token, String, buffer(TokenStart,TokenEnd)
			data operator, string, ""
			using Tag.ComparisonOperator select
			(RpsTagOperator.OpEQ),
				operator = ".EQ."
			(RpsTagOperator.OpGE),
				operator = ".GE."
			(RpsTagOperator.OpGT),
				operator = ".GT."
			(RpsTagOperator.OpLE),
				operator = ".LE."
			(RpsTagOperator.OpLT),
				operator = ".LT."
			(RpsTagOperator.OpNE),
				operator = ".NE."
			endusing
			if (token=="<tagloop_operator_dbl>")
				operator = operator.ToLower()
			ReplacedToken = ReplaceToken(buffer,token,operator)
		end
		
		("<TAGLOOP_OPERATOR_C>"),
		begin
			data operator, string, ""
			using Tag.ComparisonOperator select
			(RpsTagOperator.OpLT),
				operator = "<"
			(RpsTagOperator.OpGE),
				operator = ">="
			(RpsTagOperator.OpLE),
				operator = "<="
			(RpsTagOperator.OpNE),
				operator = "!="
			(RpsTagOperator.OpEQ),
				operator = "=="
			(RpsTagOperator.OpGT),
				operator = ">"
			endusing
			ReplacedToken = ReplaceToken(buffer,"<TAGLOOP_OPERATOR_C>",operator)
		end
		
		("<TAGLOOP_TAG_VALUE>"),
		begin
			data value, String
			using Fld.DataType select
			(RpsFieldDataType.Alpha, RpsFieldDataType.User),
				value = '"' + Tag.ComparisonValue + '"'
			(),
				value = Tag.ComparisonValue
			endusing
			ReplacedToken = ReplaceToken(buffer,"<TAGLOOP_TAG_VALUE>",value)
		end
		
		("<COUNTER_"),
			ReplacedToken = ProcessCounters(buffer(TokenStart,TokenEnd),buffer,OutputOff)
		
		(),
		begin
			;;If we didn't match anything so far then lets see if we have any custom tag loop token processors
			if (Env.CustomTagTokens.Count>0)
			begin
				;;We do have custom processors, look for a match
				data customToken, @CustomTagToken
				foreach customToken in Env.CustomTagTokens
				begin
					if (customToken.Token==buffer(TokenStart,TokenEnd))
					begin
						;;Found a match, expand the custom token
						ReplacedToken = customToken.Replace(Str,Tag,TagNbr,TokenStart,TokenEnd,OutputOff,buffer,ErrStatus)
						exitloop
					end
				end
			end
		end
			
		endusing
		
		if (ReplacedToken&&!buffer)
			buffer="~~~ REMOVE THIS RECORD ~~~"
		
		freturn ReplacedToken
		
	endfunction
	
endnamespace
