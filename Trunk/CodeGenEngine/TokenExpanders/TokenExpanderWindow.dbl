;; *****************************************************************************
;; 
;;  Title:       TokenExpanderWindow.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands window token nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        windowTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerWindowLoopTokens, void
            endparams
        proc
			
			windowTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()
			
			windowTokenExpanders.Add("WINDOW_HEIGHT", expandWindowHeight)
            windowTokenExpanders.Add("WINDOW_HEIGHTPX", expandWindowHeightPx)
            windowTokenExpanders.Add("WINDOW_NAME", expandWindowName)
            windowTokenExpanders.Add("WINDOW_WIDTH", expandWindowWidth)
			windowTokenExpanders.Add("WINDOW_WIDTHPX", expandWindowWidthPx)

        endmethod

        private static method expandWindowHeight, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            if (file.Context.WindowHeight > 0) then
                mreturn Convert.ToString(file.Context.WindowHeight)
            else
                mreturn Convert.ToString(DefaultValues.DefaultWindowHeight)
        endmethod

        private static method expandWindowHeightPx, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            data charHeight, int
            if (file.Context.CurrentTask.CharacterHeight > 0) then
                charHeight = file.Context.CurrentTask.CharacterHeight
            else
                charHeight = DefaultValues.DefaultCharacterHeight
            data windowHeight, int
            if (file.Context.WindowHeight > 0) then
                windowHeight = file.Context.WindowHeight
            else
                windowHeight = DefaultValues.DefaultWindowHeight
            mreturn Convert.ToString(windowHeight * charHeight)
        endmethod

        private static method expandWindowName, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            if (!String.IsNullOrWhiteSpace(file.Context.WindowName)) then
                mreturn file.Context.WindowName
            else
                mreturn file.Context.CurrentStructure.Name
        endmethod

        private static method expandWindowWidth, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            if (file.Context.WindowWidth > 0) then
				mreturn Convert.ToString(file.Context.WindowWidth)
            else
				mreturn Convert.ToString(DefaultValues.DefaultWindowWidth)
        endmethod

        private static method expandWindowWidthPx, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            data charWidth, int
            if (file.Context.CurrentTask.CharacterWidth > 0) then
                charWidth = file.Context.CurrentTask.CharacterWidth
            else
                charWidth = DefaultValues.DefaultCharacterWidth
            data windowWidth, int
            if (file.Context.WindowWidth > 0) then
                windowWidth = file.Context.WindowWidth
            else
                windowWidth = DefaultValues.DefaultWindowWidth
            mreturn Convert.ToString(windowWidth * charWidth)
        endmethod
	
	endclass

endnamespace

