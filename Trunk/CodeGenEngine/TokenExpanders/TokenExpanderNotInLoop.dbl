;; *****************************************************************************
;; 
;;  Title:       TokenExpanderNotInLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands "not in loop" token nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks

.array 0

namespace CodeGen.Engine

    ;;;  <summary>
    ;;;  
    ;;;  </summary>
    public partial class TokenExpander

        notInLoopTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerNotInLoopTokens, void
            endparams
		proc

            notInLoopTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()
			
			notInLoopTokenExpanders.Add("STRUCTURE#1", changeCurrentStructure)
            notInLoopTokenExpanders.Add("STRUCTURE#2", changeCurrentStructure)
            notInLoopTokenExpanders.Add("STRUCTURE#3", changeCurrentStructure)
            notInLoopTokenExpanders.Add("STRUCTURE#4", changeCurrentStructure)
			notInLoopTokenExpanders.Add("STRUCTURE#5", changeCurrentStructure)

        endmethod

        private static method changeCurrentStructure, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            if (!file.Context.MultiStructureMode)
                throw new ApplicationException(String.Format("Token {0} can only be used when processing multiple structures concurrently!", tkn.Value))
			
			data newStructureNumber, int, Convert.ToInt32(tkn.Value.Replace("STRUCTURE#", ""))
            if (newStructureNumber > file.Context.Structures.Count)
                throw new ApplicationException(String.Format("Token {0} can't be used because you are only processing {1} structures!", tkn.Value, file.Context.Structures.Count))
			
			;; Make the requested structure the current structure
            file.Context.CurrentStructure = file.Context.Structures[newStructureNumber - 1]
            file.Context.CurrentTask.DebugLog(String.Format("   - {0,-30} -> {1}", "Change structure", file.Context.CurrentStructure.Name), true, false)
			
			mreturn ""

		endmethod

	endclass

endnamespace