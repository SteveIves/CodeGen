;;*****************************************************************************
;;
;; Title:       ExpandRelationToken.dbl
;;
;; Type:        Function
;;
;; Description: Expands relation loop tokens
;;
;; Date:        5th November 2009
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

    function ExpandRelationToken        ,boolean
        required in    Str              ,@RpsStructure  ;;Current structure
        required in    Relation         ,@RpsRelation   ;;Current relation
        required in    RelNbr           ,int            ;;Current relation number
        required in    TokenStart       ,int            ;;Start position of token in buffer
		required in    TokenEnd         ,int            ;;End position of token in buffer
		required in    OutputOff		,boolean		;;Is output currently suppressed?
		required inout buffer           ,a              ;;Buffer containing token to be replaced
        endparams

        stack record
            ReplacedToken   ,boolean
        endrecord

    proc

        ReplacedToken = false

        using buffer(TokenStart,TokenEnd) select

        ("<,>"),
        begin
            data tmpTxt, a1," "
            if (RelNbr<Str.Relations.Count-1)
                tmpTxt=","
            ReplacedToken = ReplaceToken(buffer,"<,>",tmpTxt)
        end

        ("<+>"),
        begin
            data tmpTxt, a1," "
            if (RelNbr<Str.Relations.Count-1)
                tmpTxt="+"
            ReplacedToken = ReplaceToken(buffer,"<+>",tmpTxt)
        end

        ("<:>"),
        begin
            data tmpTxt, a1," "
            if (RelNbr<Str.Relations.Count-1)
                tmpTxt=":"
            ReplacedToken = ReplaceToken(buffer,"<:>",tmpTxt)
        end

        ("<&&>"),
        begin
            data tmpTxt, a2,"  "
            if (RelNbr<Str.Relations.Count-1)
                tmpTxt="&&"
            ReplacedToken = ReplaceToken(buffer,"<&&>",tmpTxt)
        end

        ("<.AND.>"),
        begin
            data tmpTxt, a5,"     "
            if (RelNbr<Str.Relations.Count-1)
                tmpTxt=".AND."
            ReplacedToken = ReplaceToken(buffer,"<.AND.>",tmpTxt)
        end

        ("<AND>"),
        begin
            data tmpTxt, a3,"   "
            if (RelNbr<Str.Relations.Count-1)
                tmpTxt="AND"
            ReplacedToken = ReplaceToken(buffer,"<AND>",tmpTxt)
        end

        ("<||>"),
        begin
            data tmpTxt, a2,"  "
            if (RelNbr<Str.Relations.Count-1)
                tmpTxt="||"
            ReplacedToken = ReplaceToken(buffer,"<||>",tmpTxt)
        end

        ("<.OR.>"),
        begin
            data tmpTxt, a4,"    "
            if (RelNbr<Str.Relations.Count-1)
                tmpTxt=".OR."
            ReplacedToken = ReplaceToken(buffer,"<.OR.>",tmpTxt)
        end

        ("<OR>"),
        begin
            data tmpTxt, a2,"  "
            if (RelNbr<Str.Relations.Count-1)
                tmpTxt="OR"
            ReplacedToken = ReplaceToken(buffer,"<OR>",tmpTxt)
        end

        ("<RELATION_NUMBER>"),
            ReplacedToken = ReplaceToken(buffer,"<RELATION_NUMBER>",string(RelNbr+1))

        ("<RELATION_NAME>"),
            ReplacedToken = ReplaceToken(buffer,"<RELATION_NAME>",Relation.Name)

        ("<RELATION_FROMKEY>"),
            ReplacedToken = ReplaceToken(buffer,"<RELATION_FROMKEY>",Relation.FromKey)

        ("<RELATION_TOSTRUCTURE>"),
            ReplacedToken = ReplaceToken(buffer,"<RELATION_TOSTRUCTURE>",Relation.ToStructure)

        ("<RELATION_TOKEY>"),
            ReplacedToken = ReplaceToken(buffer,"<RELATION_TOKEY>",Relation.ToKey)

		("<COUNTER_"),
			ReplacedToken = ProcessCounters(buffer(TokenStart,TokenEnd),buffer,OutputOff)
		
		(),
		begin
			;;If we didn't match anything so far then lets see if we have any custom relation loop token processors
			if (Env.CustomRelationTokens.Count>0)
			begin
				;;We do have custom processors, look for a match
				data customToken, @CustomRelationToken
				foreach customToken in Env.CustomRelationTokens
				begin
					if (customToken.Token==buffer(TokenStart,TokenEnd))
					begin
						;;Found a match, expand the custom token
						ReplacedToken = customToken.Replace(Str,Relation,RelNbr,TokenStart,TokenEnd,buffer)
						exitloop
					end
				end
			end
		end
		
		endusing

		if (ReplacedToken&&!buffer)
			buffer="~~~ REMOVE THIS RECORD ~~~"
		
		freturn ReplacedToken

    endfunction

endnamespace
