;;*****************************************************************************
;;
;; Title:       FileTools.dbl
;;
;; Type:        Class
;;
;; Description: Useful tools for dealing with files
;;
;; Date:        16th August 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System.Collections.Generic
import System.IO

namespace CodeGen.Engine
	
	public class FileTools
		
		public static method ExpandLogicalName, boolean
			required inout fileSpec, String
			endparams
		proc
			data ok, boolean, true
			data filePath, String, fileSpec.Trim()
			
			if (filePath.Contains(":") && !filePath.Contains("\"))
			begin
				;;Looks like we have a logical name, but is it JUST a logical name, or is there also a file name?
				data envvar, String, Environment.GetEnvironmentVariable(filePath.Substring(0,filePath.IndexOf(":")))
				if (ok=(!String.IsNullOrWhiteSpace(envvar)))
				begin
					data pathPart, String, envvar.Trim()
					if (!pathPart.EndsWith("\"))
						pathPart += "\"
					if (filePath.EndsWith(":")) then
					begin
						;;Looks like it's JUST a logical name, replace it with the path
						fileSpec = pathPart
					end
					else
					begin
						;;Looks like it's a logical AND file name
						data fileParts, [#]String, filePath.Split(":")
						fileSpec = pathPart + fileParts[2]
					end
				end
			end
			mreturn ok
		endmethod
		
		public static method FileExists, boolean
			required in fileSpec, String
			endparams
			stack record
				exists, boolean
			endrecord
		proc
			try
			begin
				data ch, int, 0
				open(ch,i:s,fileSpec)
				close ch
				exists = true
			end
			catch (ex)
			begin
				exists = false
			end
			endtry
			mreturn exists
		endmethod		
		
		public static method FolderContainsFilesOfType, boolean
			required in location, String
			required in pattern, String
			endparams
		proc
			data folder, String, location.Trim()
			data filesExist, boolean, true
			;;We may be dealing with a logical name
			if (folder.EndsWith(":"))
			begin
				folder = folder.Replace(":","")
				data trans, String, Environment.GetEnvironmentVariable(folder)
				if (!String.IsNullOrWhiteSpace(trans)) then
					folder = trans.Trim()
				else
					filesExist = false
			end
			;;Now we should have a path
			if (filesExist)
			begin
				data results = Directory.GetFiles(folder,pattern)
				filesExist = (results.Length > 0)
			end
			mreturn filesExist
		endmethod
		
		public static method FolderExists, boolean
			required in folderSpec, String
			endparams
		proc
			data folder, String, folderSpec.Trim()
			data exists, boolean, true
			;;We may be dealing with a logical name
			if (folder.EndsWith(":"))
			begin
				folder = folder.Replace(":","")
				data trans, String, Environment.GetEnvironmentVariable(folder)
				if (!String.IsNullOrWhiteSpace(trans)) then
					folder = trans.Trim()
				else
					exists = false
			end
			;;Now we should have a path
			if (exists)
				exists = Directory.Exists(folder)
			mreturn exists
		endmethod		
		
		public static method GetFileNamesInFolder, @List<String>
			required in folder, String
			required in pattern, String
			endparams
		proc
			data matchingFiles, @List<String>, GetFilePathsInFolder(folder,pattern)
			data matchingFile, String
			if (matchingFiles.Count)
			begin
				data ix, int
				for ix from 0 thru matchingFiles.Count-1
					matchingFiles[ix] = Path.GetFileName(matchingFiles[ix])
			end
			mreturn matchingFiles
		endmethod
		
		public static method GetFilePathsInFolder, @List<String>
			required in folder, String
			required in pattern, String
			endparams
		proc
			data pathname, String, folder.Trim()
			data matchingFiles, @List<String>, new List<String>()
			data filesExist, boolean, true
			;;We may be dealing with a logical name
			if (pathname.EndsWith(":"))
			begin
				pathname = pathname.Replace(":","")
				data trans, String, Environment.GetEnvironmentVariable(pathname)
				if (!String.IsNullOrWhiteSpace(trans)) then
					pathname = trans.Trim()
				else
					filesExist = false
			end
			;;Now we should have a path
			if (filesExist)
			begin
				data matchingFile, String
				foreach matchingFile in Directory.GetFiles(pathname,pattern)
				matchingFiles.Add(matchingFile)
			end
			mreturn matchingFiles
		endmethod
		
		public static method CanCreateFileInFolder, boolean
			required in location, String
			endparams
		proc
			data canCreateFile, boolean
			try
			begin
				data filespec, String, String.Format("{0}{1}.tmp",location,Guid.NewGuid().ToString())
				data ch, int, 0
				open(ch,o:s,filespec)
				purge ch
				canCreateFile = true
			end
			catch (ex)
			begin
				canCreateFile = false
			end
			endtry
			mreturn canCreateFile
		endmethod
		
	endclass
	
endnamespace
