;;*****************************************************************************
;;
;; Title:       SmcMethodCollection.dbl
;;
;; Type:        Class
;;
;; Description: Represents a collection of methods in an interface
;;
;; Date:        5th February 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System.Collections
import CodeGen.MethodCatalogAPI

namespace CodeGen.MethodCatalogAPI
	
	public class SmcMethodCollection

        private mCollection, @ArrayList

        ;; Constructor
        public method SmcMethodCollection
            endparams
        proc
            mCollection = new ArrayList()
        endmethod

        ;; Destructor
        method ~SmcMethodCollection
        proc
            clear mCollection
        endmethod

        ;;; <summary>
        ;;; Expose the internal ArrayList so consumers can use FOREACH
        ;;; </summary>
        ;;; <returns>Internal ArrayList used to store structures.</returns>
        public method GetEnumerator, @ArrayList
            endparams
        proc
            mreturn mCollection
        endmethod

        ;;---------------------------------------------------------------------
        ;;The follwoing members make the collection look just like an ArrayList

        ;;Gets or sets the number of elements that the collection can contain.
        public property Capacity, int
            method get
            proc
                mreturn mCollection.Capacity
            endmethod
            method set
            proc
                mCollection.Capacity = value
            endmethod
        endproperty

        ;;Gets the number of elements actually contained in the collection.
        public property Count, int
            method get
            proc
                mreturn mCollection.Count
            endmethod
        endproperty

        ;;Gets or sets the element at the specified index.
        public property Indexer, @SmcMethod
            required in Index, int
            method get
            proc
                mreturn (SmcMethod)mCollection[Index]
            endmethod
            method set
            proc
                mCollection[Index] = value
            endmethod
        endproperty

        ;;Adds an element to the end of the collection.
        public method Add, int
            required in SmcMethod, @SmcMethod
            endparams
        proc
            mreturn mCollection.Add(SmcMethod)
        endmethod

        ;;Removes the element at the specified index of the collection.
        public method RemoveAt, void
            required in Index, int
        proc
            mCollection.RemoveAt(Index)
        endmethod

        ;;Searches for the specified element and returns the one-based index
        ;;of the first occurrence within the entire collection.
        public method IndexOf, int
            required in SmcMethod, @SmcMethod
        proc
            mreturn mCollection.IndexOf(SmcMethod)
        endmethod

        ;;Searches for the specified element and returns the one-based index
        ;;of the first occurrence within the range of elements in the collection
        ;;that extends from the specified index to the last element.
        public method IndexOf, int
            required in SmcMethod, @SmcMethod
            required in StartIndex, int
        proc
            mreturn mCollection.IndexOf(SmcMethod,StartIndex)
        endmethod

        ;;Searches for the specified element and returns the one-based index
        ;;of the first occurrence within the range of elements in the collection
        ;;that starts at the specified index and contains the specified number of
        ;;elements.
        public method IndexOf, int
            required in SmcMethod, @SmcMethod
            required in StartIndex, int
            required in Count, int
        proc
            mreturn mCollection.IndexOf(SmcMethod,StartIndex,Count)
        endmethod

        ;;Removes all elements from the collection.
        public method Clear, void
        proc
            mCollection.Clear()
        endmethod

        ;;Inserts an element into the collection at the specified index.
        public method Insert, void
            required in AtIndex, int
            required in SmcMethod, @SmcMethod
            endparams
        proc
            mCollection.Insert(AtIndex,SmcMethod)
        endmethod

        ;;Searches for the specified object and returns the one-based index of
        ;;the last occurrence within the entire collection.
        public method LastIndexOf, int
            required in SmcMethod, @SmcMethod
        proc
            mreturn mCollection.LastIndexOf(SmcMethod)
        endmethod

        ;;Searches for the specified object and returns the one-based index of
        ;;the last occurrence within the range of elements in the collection that
        ;;extends from the first element to the specified index.
        public method LastIndexOf, int
            required in SmcMethod, @SmcMethod
            required in StartIndex, int
        proc
            mreturn mCollection.LastIndexOf(SmcMethod,StartIndex)
        endmethod

        ;;Searches for the specified object and returns the one-based index of
        ;;the last occurrence within the range of elements in the collection that
        ;;contains the specified number of elements and ends at the specified index.
        public method LastIndexOf, int
            required in SmcMethod, @SmcMethod
            required in StartIndex, int
            required in Count, int
        proc
            mreturn mCollection.LastIndexOf(SmcMethod,StartIndex,Count)
        endmethod

    endclass
	
	
endnamespace
