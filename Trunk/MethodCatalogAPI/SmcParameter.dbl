;;*****************************************************************************
;;
;; Title:       SmcParameter.dbl
;;
;; Type:        Class
;;
;; Description: Represents a parameter of a method
;;
;; Date:        5th February 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.MethodCatalogAPI

namespace CodeGen.MethodCatalogAPI

	public class SmcParameter
		
		private mName,				String
		private mComment,			String
		private mType,				ParameterType
		private mSize,				int
		private mPrecision,			int
		private mEnumName,			String
		private mStructureName,		String
		private mCoerceType,		CoerceType
		private mDateFormat,		DateFormat	
		private mCollectionType,	ParameterCollectionType
		private mDataTable,			Boolean
		private mDirection,			ParameterDirection
		private mPassBy,			ParameterPassBy
		private mRequired,			Boolean
		
		public method SmcParameter
			required in name, String
			endparams
		proc
			;;Store the name
			mName			= name
			;;Set defaults
			mComment		= ""
			mSize			= 0
			mPrecision		= 0
			mEnumName		= ""
			mStructureName	= ""
			mCoerceType		= CoerceType.None
			mDateFormat		= DateFormat.None
			mCollectionType = ParameterCollectionType.None
			mDirection		= ParameterDirection.In
			mPassBy			= ParameterPassBy.Descriptor
			mRequired		= true
		endmethod
		
		public property Name, String
			method get
			proc
				mreturn mName
			endmethod
			method set
			proc
				mName = value
			endmethod
		endproperty
		
		public property Comment, String
			method get
			proc
				mreturn mComment
			endmethod
			method set
			proc
				mComment = value
			endmethod
		endproperty

		public property Type, ParameterType
			method get
			proc
				mreturn mType
			endmethod
			method set
			proc
				mType = value
			endmethod
		endproperty

		public property Size, int
			method get
			proc
				mreturn mSize
			endmethod
			method set
			proc
				mSize = value
			endmethod
		endproperty

		public property Precision, int
			method get
			proc
				mreturn mPrecision
			endmethod
			method set
			proc
				mPrecision = value
			endmethod
		endproperty

		public property EnumName, String
			method get
			proc
				mreturn mEnumName
			endmethod
			method set
			proc
				mEnumName = value
			endmethod
		endproperty

		public property StructureName, String
			method get
			proc
				mreturn mStructureName
			endmethod
			method set
			proc
				mStructureName = value
			endmethod
		endproperty

		public property CoerceType, CoerceType
			method get
			proc
				mreturn mCoerceType
			endmethod
			method set
			proc
				mCoerceType = value
			endmethod
		endproperty
		
		public property DateFormat, DateFormat
			method get
			proc
				mreturn mDateFormat
			endmethod
			method set
			proc
				mDateFormat = value
			endmethod
		endproperty
		
		public property CollectionType, ParameterCollectionType
			method get
			proc
				mreturn mCollectionType
			endmethod
			method set
			proc
				mCollectionType = value
			endmethod
		endproperty

		public property DataTable, Boolean
			method get
			proc
				mreturn mDataTable
			endmethod
			method set
			proc
				mDataTable = value
			endmethod
		endproperty

		public property Direction, ParameterDirection
			method get
			proc
				mreturn mDirection
			endmethod
			method set
			proc
				mDirection = value
			endmethod
		endproperty
		
		public property PassBy, ParameterPassBy
		method get
		proc
			mreturn mPassBy
		endmethod
		method set
		proc
			mPassBy = value
		endmethod
		endproperty
		
		public property Required, Boolean
			method get
			proc
				mreturn mRequired
			endmethod
			method set
			proc
				mRequired = value
			endmethod
		endproperty

	endclass
	
endnamespace
