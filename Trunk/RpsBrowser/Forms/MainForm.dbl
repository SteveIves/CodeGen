;;*****************************************************************************
;;
;; Title:       MainForm.dbl
;;
;; Type:        Class (Windows Form)
;;
;; Description: Main UI for the RpsBrowser utility.
;;
;; Date:        21st August 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.ComponentModel
import System.Drawing
import System.Windows.Forms
import CodeGen.RepositoryAPI
import RpsBrowser.Profiles

.Array 0
namespace RpsBrowser.Forms
    
    public partial class MainForm extends Form
        
        private mRps			,@Repository
        private mProfileManager	,@ProfileManager
        
        public method MainForm
            endparams
        proc
            this.InitializeComponent()

            ;;Configure the UI based on user preferences
            
            if (Properties.Settings.Default.StartMaximized) then
                WindowState = WindowState.Maximized
            else if (Properties.Settings.Default.StartCentered)
                StartPosition = StartPosition.CenterScreen
                
            toolStrip1.Visible = Properties.Settings.Default.ToolbarVisible
            mnuViewToolbar.Checked = toolStrip1.Visible
            
            statusBar.Visible = Properties.Settings.Default.StatusBarVisible
            mnuViewStatusBar.Checked = statusBar.Visible
            
            grid.AutoGenerateColumns = false
            
        endmethod
        
        private method MainForm_Load, void
            byval sender, @System.Object
            byval e, @System.EventArgs
            endparams
        proc
            
            ;;Initialize the profile manager and load existing profiles
            try
            begin
                mProfileManager = new ProfileManager()
            end
            catch (ex, @ApplicationException)
            begin
                MessageBox.Show(ex.Message)
                this.Close()
            end
            endtry
            
            ;;Make sure we have at least one profile
            repeat
            begin
                if (mProfileManager.Profiles.Count>0)
                    exitloop
                    
                if (MessageBox.Show("No profiles are defined. Would you like to configure a profile now?","Configure Profiles",MessageBoxButtons.YesNo,MessageBoxIcon.Question,MessageBoxDefaultButton.Button1)==DialogResult.Yes) then
                begin
                    mProfileManager.ShowProfileManager()
                end	
                else
                begin
                    this.close()
                    mreturn
                end
            end
            
            ;;If we don't have a current profile then default to the first profile
            if (Properties.Settings.Default.CurrentProfile.Length==0) then
            begin
                MessageBox.Show(String.Format("Setting default profile to {0}.",mProfileManager.Profiles[0].Name),"Configuration Check")
                Properties.Settings.Default.CurrentProfile = mProfileManager.Profiles[0].Name
                Properties.Settings.Default.Save()
            end
            else
            begin
                ;;If we do, make sure it still exists
                if (!mProfileManager.ProfileExists(Properties.Settings.Default.CurrentProfile))
                begin
                    ;;It doesn't, default to the first profile
                    MessageBox.Show(String.Format("Your default profile {0} no longer exists. Setting default profile to {1}.",Properties.Settings.Default.CurrentProfile,mProfileManager.Profiles[0].Name),"Configuration Check")
                    Properties.Settings.Default.CurrentProfile = mProfileManager.Profiles[0].Name
                    Properties.Settings.Default.Save()
                end
            end
            
            ;;Load the profiles into the profile selector combo
            loadProfilesCombo()
            
        endmethod
        
        private method loadProfilesCombo, Void
            endparams
            record
                profile, @Profile
                newItemIndex, int
            endrecord
        proc
            cboProfile.Items.Clear()
            foreach profile in mProfileManager.Profiles
            begin
                newItemIndex = cboProfile.Items.Add(profile.Name)
                if (profile.Name.Equals(Properties.Settings.Default.CurrentProfile))
                    cboProfile.SelectedIndex = newItemIndex
            end
            ;Shouldn't need to do this because setting SelectedIndex above should take care of it
            ;;Set the logicals for the current profile
            ;;switchProfile(Properties.Settings.Default.CurrentProfile,False)
        endmethod
        
        private method mnuFileExit_Click, void
            byval sender, @System.Object
            byval e, @System.EventArgs
            endparams
        proc
            this.Close()
        endmethod
        
        private method MainForm_FormClosed, void
            byval sender, @System.Object
            byval e, @System.Windows.Forms.FormClosedEventArgs
            endparams
        proc
            if (mRps!=^null)
                mRps.Dispose()
            clear mRps
            clear mProfileManager
        endmethod
        
        private method mnuViewStructures_Click, void
            byval sender, @System.Object
            byval e, @System.EventArgs
            endparams
        proc
            mainTabControl.SelectedIndex = 0
        endmethod
        
        private method mnuFileOpen_Click, void
            byval sender, @System.Object
            byval e, @System.EventArgs
            endparams
        proc
            openStructure()
        endmethod
        
        private method grid_CellMouseDoubleClick, void
            byval sender, @System.Object
            byval e, @System.Windows.Forms.DataGridViewCellMouseEventArgs
            endparams
        proc
            openStructure()
        endmethod
        
        private method openStructure, void
            endparams
            record
                str, @RpsStructure
                tp, @TabPage
            endrecord
        proc
            
            ;;Get the details of the selected structure
            str = (RpsStructure)grid.SelectedRows[0].DataBoundItem
            
            ;;Check we dont already have this structure open
            if (mainTabControl.TabPages.Count>1)
            begin
                data ix, int
                for ix from 1 thru mainTabControl.TabPages.Count -1
                begin
                    if (mainTabControl.TabPages[ix].Tag == str)
                    begin
                        ;;Yep, it's open, bring it to the front
                        mainTabControl.SelectedTab = mainTabControl.TabPages[ix]
                        mreturn
                    end
                end
            end
            
            ;;Nope - not already open - open it
            
            tp = new TabPage(str.Name)
            tp.Tag = str
            tp.Controls.Add(new StructureViewControl(str))
            
            mainTabControl.TabPages.Add(tp)
            mainTabControl.SelectedTab = tp
            
            ;;And add it to the View menu
            begin
                data mi, @ToolStripMenuItem, new ToolStripMenuItem()
                mi.Name = string.Format("mnuFile{0}",str.Name)
                mi.Text = str.Name
                mi.Tag = (String)str.Name
                addhandler(mi.Click,mnuSomeFileClick)
                mnuView.DropDownItems.Add(mi)
            end
        endmethod
        
        private method mnuSomeFileClick, void
            byval sender, @System.Object
            byval e, @System.EventArgs
            endparams
            record
                mi, @ToolStripMenuItem
                ix, int
            endrecord
        proc
            mi = (ToolStripMenuItem)sender
            
            ;;Go looking for the tab page that matches the selected menu item
            for ix from 1 thru mainTabControl.TabPages.Count -1
            begin
                if (((RpsStructure)mainTabControl.TabPages[ix].Tag).Name == mi.Tag.ToString() )
                begin
                    ;;Yep, it's open, bring it to the front
                    mainTabControl.SelectedTab = mainTabControl.TabPages[ix]
                    exitloop
                end
            end
        endmethod
        
        private method mainTabControl_SelectedIndexChanged, void
            byval sender, @System.Object
            byval e, @System.EventArgs
            endparams
        proc
            if (mainTabControl.SelectedIndex==0) then
            begin
                ;;Load info into the status bar
                statusBarFileLabel.Text = ""
                statusBarDescriptionLabel.Text = ""
                statusBarSpecLabel.Text = ""				
            end
            else
            begin
                ;;Load info into the status bar
                data str, @RpsStructure
                str = (RpsStructure)mainTabControl.SelectedTab.Tag
                statusBarFileLabel.Text = String.Format("STRUCTURE: {0}",str.Name)
                statusBarDescriptionLabel.Text = String.Format("DESCRIPTION: {0}",str.Description)
                ;statusBarSpecLabel.Text = String.Format("FILE SPEC: {0}",file.FileSpec)
            end
            
            ;;Configure the open and close menu items and toolbar buttons
            mnuFileOpen.Enabled = ((mainTabControl.SelectedIndex == 0)&&(grid.SelectedRows.Count == 1))
            mnuFileListOpen.Enabled = mnuFileOpen.Enabled
            toolStripButtonOpen.Enabled = mnuFileOpen.Enabled
            
            mnuFileClose.Enabled = (mainTabControl.SelectedIndex != 0)
            mnuFileListClose.Enabled = mnuFileClose.Enabled
            toolStripButtonClose.Enabled = mnuFileClose.Enabled
            
        endmethod
        
        private method mnuFileClose_Click, void
            byval sender			,@System.Object
            byval e					,@System.EventArgs
            endparams
            record
                closedStructureName	,@String
                ix					,int
            endrecord
        proc
            data closedTabName, String
            closedTabName = ((RpsStructure)mainTabControl.SelectedTab.Tag).Name
            
            data closedTabIndex, int, mainTabControl.SelectedIndex
 
            ;;Remove the closed structure from the View menu
            for ix from 5 thru mnuView.DropDownItems.Count - 1
            begin
                if (mnuView.DropDownItems[ix].Tag.ToString() == closedTabName )
                begin
                    ;;Yep, that's the one, remove it
                    mnuView.DropDownItems.Remove(mnuView.DropDownItems[ix])
                    exitloop
                end
            end

            ;;Remove the closed structure from the tab control
            mainTabControl.TabPages.Remove(mainTabControl.SelectedTab)

            ;;Set the newly selected tab
            if (mainTabControl.TabCount>closedTabIndex) then
                mainTabControl.SelectedIndex = closedTabIndex
            else
                mainTabControl.SelectedIndex = mainTabControl.TabCount - 1
        endmethod
        
        private method mnuHelpAbout_Click, void
            byval sender, @System.Object
            byval e, @System.EventArgs
            endparams
            record
                dlg, @AboutBox
            endrecord
        proc
            dlg = new AboutBox()
            dlg.ShowDialog()
        endmethod
        
        private method mnuToolsOptions_Click, void
            byval sender, @System.Object
            byval e, @System.EventArgs
            endparams
            record
                dlg, @OptionsForm
            endrecord
        proc
            dlg = new OptionsForm()
            dlg.ShowDialog()
        endmethod
        
        private method mnuViewToolbar_Click, void
            byval sender, @System.Object
            byval e, @System.EventArgs
            endparams
        proc
            mnuViewToolbar.Checked = !mnuViewToolbar.Checked
            toolStrip1.Visible = mnuViewToolbar.Checked
        endmethod
        
        private method mnuViewStatusBar_Click, void
            byval sender, @System.Object
            byval e, @System.EventArgs
            endparams
        proc
            mnuViewStatusBar.Checked = !mnuViewStatusBar.Checked
            statusBar.Visible = mnuViewStatusBar.Checked
        endmethod
        
        private method mnuEditProfiles_Click, void
            byval sender, @System.Object
            byval e, @System.EventArgs
            endparams
        proc
            ;;Display the profile manager
            if (cboProfile.SelectedItem!=^null) then
                mProfileManager.ShowProfileManager(cboProfile.SelectedItem.ToString())
            else
                mProfileManager.ShowProfileManager()
            ;;And re-load the profiles drop-down list in the toolbar
            loadProfilesCombo()

            ;;If we came back from the profile manager with no profiles then close anything that we were working with before
            if (mProfileManager.Profiles.Count==0)
            begin
                if (mRps!=^null)
                begin
                    mRps.Dispose()
                    clear mRps
                end
                grid.DataSource = ^null
            end

        endmethod
        
        private method cboProfile_SelectedIndexChanged, void
            byval sender, @System.Object
            byval e, @System.EventArgs
            endparams
        proc
            switchProfile(cboProfile.SelectedItem.ToString(),True)
        endmethod
        
        private method switchProfile, Void
            required in aProfileName	,@String
            required in aSaveAsDefault	,Boolean
            endparams
        proc
            ;;Display the wait cursor
            this.Cursor = Cursors.WaitCursor

            ;;Close any open structures
            if (mainTabControl.TabPages.Count>1)
            begin
                data ix, int
                for ix from mainTabControl.TabPages.Count -1 thru 1 by -1
                    mainTabControl.TabPages.RemoveAt(ix)
                for ix from mnuView.DropDownItems.Count - 1 thru 5 by -1
                    mnuView.DropDownItems.RemoveAt(ix)
            end
            
            ;;Close the repository
            if (mRps!=^null)
            begin
                mRps.Dispose()
                clear mRps
                grid.DataSource = ^null
            end
            
            ;;Activate the newly selected profile
            if (mProfileManager.ActivateProfile(aProfileName)) then
            begin
                if (aSaveAsDefault)
                begin
                    Properties.Settings.Default.CurrentProfile = aProfileName
                    Properties.Settings.Default.Save()
                end
                
                ;;Open the repository and load the structure definitions
                mRps = new Repository()
                grid.DataSource = mRps.Structures.GetEnumerator()
            end
            else   
            begin
                MessageBox.Show(string.Format("Failed to switch profile. Please check the settings for profile {0}.",aProfileName))
                mProfileManager.ShowProfileManager(aProfileName)
            end
            
            ;;Display the wait cursor
            this.Cursor = Cursors.Default

        endmethod
        
    endclass
    
endnamespace

