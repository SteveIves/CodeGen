;;*****************************************************************************
;;
;; Title:       EnumMemberTokenTests.dbl
;;
;; Type:        Unit test class
;;
;; Description: Unit tests for CodeGenEngine.ExpandEnumMemberToken()
;;
;; Date:        17th December 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.VisualStudio.TestTools.UnitTesting
import System

namespace CodeGen.UnitTests
	
	{TestClass}
	public class EnumMemberTokenTests
		
		private mMsg			,String
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_Name01, void
			endparams
		proc
			Assert.IsTrue(doTest(1,3,"<ENUM_MEMBER_NAME>","CASH_ON_DELIVERY"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_Name02, void
			endparams
		proc
			Assert.IsTrue(doTest(1,3,"<enum_member_name>","cash_on_delivery"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_Name03, void
			endparams
		proc
			Assert.IsTrue(doTest(1,3,"<Enum_Member_Name>","Cash_On_Delivery"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_Name04, void
			endparams
		proc
			Assert.IsTrue(doTest(1,3,"<Enum_member_name>","Cash_on_delivery"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_Name05, void
			endparams
		proc
			Assert.IsTrue(doTest(1,3,"<EnumMemberName>","CashOnDelivery"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_Name06, void
			endparams
		proc
			Assert.IsTrue(doTest(1,3,"<enumMemberName>","cashOnDelivery"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_ExplicitValue01, void
			endparams
		proc
			Assert.IsTrue(doTest(1,1,"<ENUM_MEMBER_EXPLICIT_VALUE>","1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_ExplicitValue02, void
			endparams
		proc
			Assert.IsTrue(doTest(1,2,"<ENUM_MEMBER_EXPLICIT_VALUE>",""),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_ExplicitValue03, void
			endparams
		proc
			Assert.IsTrue(doTest(1,3,"<ENUM_MEMBER_EXPLICIT_VALUE>","5"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_ExplicitValue04, void
			endparams
		proc
			Assert.IsTrue(doTest(1,4,"<ENUM_MEMBER_EXPLICIT_VALUE>",""),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_ImplicitValue01, void
			endparams
		proc
			Assert.IsTrue(doTest(1,1,"<ENUM_MEMBER_IMPLICIT_VALUE>","1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_ImplicitValue02, void
			endparams
		proc
			Assert.IsTrue(doTest(1,2,"<ENUM_MEMBER_IMPLICIT_VALUE>","2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_ImplicitValue03, void
			endparams
		proc
			Assert.IsTrue(doTest(1,3,"<ENUM_MEMBER_IMPLICIT_VALUE>","5"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Enum Member Loop Token Tests")}
		public method EnumMemberToken_ImplicitValue04, void
			endparams
		proc
			Assert.IsTrue(doTest(1,4,"<ENUM_MEMBER_IMPLICIT_VALUE>","6"),mMsg)
		endmethod
		
.region "Support methods"
		
		private method doTest, Boolean
			required in enumNbr		,int
			required in memberNbr	,int
			required in inBuffer	,String
			required in expBuffer	,String
			endparams
		proc
			data ok				,Boolean
			data mainBuffer		,a32768	,inBuffer
			data expectedResult	,a32768	,expBuffer
			data tokenStart		,int	,instr(1,mainBuffer,"<") 
			data tokenEnd		,int	,instr(tokenStart,mainBuffer,">")
			
			mMsg = "PROCESSING: " + atrim(mainBuffer) + " for enum " + string(enumNbr-1) + " member " + string(memberNbr-1) + " EXPECTED: " + atrim(expectedResult)
			
			if (ok=CodeGen.Engine.ExpandEnumMemberToken(TestEnv.Enumerations,enumNbr-1,memberNbr-1,tokenStart,tokenEnd,false,mainBuffer))
			begin
				if (instr(1,mainBuffer,"~~~ REMOVE THIS RECORD ~~~"))
					mainBuffer = mainBuffer - "~~~ REMOVE THIS RECORD ~~~"
			end
			
			;;If token replacement failed it's probably because of an invalid token, or the
			;;use of a token that isn't supported for this type of field. In this case the
			;;token will still be in the buffer. If that's what we expected then we're OK.
			ok = (mainBuffer.eqs.expectedResult)
			
			mMsg = mMsg + " ACTUAL: " + atrim(mainBuffer)
			
			mreturn ok
			
		endmethod
		
.endregion
		
	endclass
	
endnamespace

