;;*****************************************************************************
;;
;; Title:       KeyExpressionTests.dbl
;;
;; Type:        Unit test class
;;
;; Description: Unit tests for CodeGenEngine.ProcessKeyExpression()
;;
;; Date:        29th November 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.VisualStudio.TestTools.UnitTesting
import System
import System.Collections

namespace CodeGen.UnitTests
	
	{TestClass}
	public class KeyExpressionTests
		
		private mMsg		,String
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_Ascending, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF ASCENDING>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_Changes, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF CHANGES>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_Descending, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF DESCENDING>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_Duplicates, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF DUPLICATES>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_DuplicatesAtFront, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF DUPLICATESATFRONT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_DuplicatesAtEnd, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF DUPLICATESATEND>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_More, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF MORE>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_MultipleSegments, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF MULTIPLE_SEGMENTS>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_NoChanges, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF NOCHANGES>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_NoDuplicates, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF NODUPLICATES>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_NoMore, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF NOMORE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_NullKey, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF NULLKEY>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_NullValue, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF NULLVALUE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_SingleSegment, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF SINGLE_SEGMENT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_Counter01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF COUNTER_1>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_Counter02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF COUNTER_2>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_NotCounter01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF NOT_COUNTER_1>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Loop Expression Tests")}
		public method KeyExpression_NotCounter02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZero,0,"<IF NOT_COUNTER_2>",true),mMsg)
		endmethod
		
.region "Support methods"
		
		private method doTest, Boolean
			required in theKey		,@CodeGen.RepositoryAPI.RpsKey
			required in keyNbr		,int
			required in expression	,String
			required in expectTrue	,Boolean
			endparams
		proc
			data ok				,Boolean
			data mainBuffer		,a128		,expression + "SUCCESS</IF>"
			data tokenStart		,int		,instr(1,mainBuffer,"<") 
			data tokenEnd		,int		,instr(tokenStart,mainBuffer,">")
			data errStatus		,boolean	,false
			data cMode			,@ArrayList	,new ArrayList()
			data cApplies		,@ArrayList	,new ArrayList()
			data outputOff		,Boolean	,false
			data pkOnly			,Boolean	,false
			
			mMsg = "PROCESSING: " + expression + " for key " + theKey.Name + "."
			
			if (!(ok=CodeGen.Engine.ProcessKeyExpression(TestEnv.Structure,theKey,keyNbr,tokenStart,tokenEnd,pkOnly,cMode,cApplies,outputOff,mainBuffer,errStatus))) then
				mMsg = mMsg + " Failed to process expression!"
			else
			begin
				;;If we get here then the token was processed, but we need to look at the result
				if (expectTrue) then
					if (!(ok = (mainBuffer.eqs."SUCCESS")))
						mMsg = mMsg + " EXPECTED: true ACTUAL: false"
				else
					if (!(ok = (mainBuffer.nes."SUCCESS")))
						mMsg = mMsg + " EXPECTED: false ACTUAL: true"
			end
			
			mreturn ok
			
		endmethod
		
.endregion
		
	endclass
	
endnamespace