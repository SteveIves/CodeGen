import System
import Microsoft.VisualStudio.TestTools.UnitTesting
import CodeGen.Engine

.array 0

namespace UnitTests
	
	{TestClass}
	public class TreeExpanderTests

		private simulator, @Simulate
		private mappingSimulator, @Simulate
		private tab,  String, %char(9)
		private crlf, String, %char(13)+%char(10)
		private template, String
		private expected, String

		public method TreeExpanderTests
			endparams
		proc
			simulator = new Simulate("UNIT_TEST_1")
			mappingSimulator = new Simulate("MAPPED_FROM")
		endmethod

		private method runTest, void
		proc
			data actual, String
			data errorText, String
			if (simulator.ExpandCode(template,actual,errorText)) then
			begin
				Assert.IsTrue(expected==actual,StringTools.GetResultMessage(expected,actual))
			end
			else
				Assert.Fail(string.Format("Parse of template code failed. Parser error was {0}",errorText))
		endmethod
		
		private method runMappingTest, void
		proc
			data actual, String
			data errorText, String
			if (mappingSimulator.ExpandCode(template,actual,errorText)) then
			begin
				Assert.IsTrue(expected==actual,StringTools.GetResultMessage(expected,actual))
			end
			else
				Assert.Fail(string.Format("Parse of template code failed. Parser error was {0}",errorText))
		endmethod
		
.region "Mapping Tests"
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Mapping")}
		public method TreeExpanderMappingTest001, void
		proc
			template = '.include "<MAPPED_STRUCTURE>" repository, stack record="old_<mapped_structure>"'
			expected = '.include "MAPPED_TO" repository, stack record="old_mapped_to"'
			runMappingTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Mapping")}
		public method TreeExpanderMappingTest002, void
		proc
			template = 'open(filechn=%syn_freechn,i:i,"<MAPPED_FILE>") [ERR=fnf]'
			expected = 'open(filechn=%syn_freechn,i:i,"DAT:mapped_to.ism") [ERR=fnf]'
			runMappingTest()
		endmethod
		
.endregion
		
.region "Field Loop Tokens"

		{TestMethod}
		{TestCategory("TreeExpander Tests - Field Loop Tokens")}
		public method TreeExpanderFieldName001, void
		proc
			template = "<FIELD_LOOP><FIELD_NAME><,></FIELD_LOOP>"
			expected = "FIELD1,FIELD2,FIELD3,FIELD4,FIELD5,FIELD6,FIELD_SEVEN[1],FIELD_SEVEN[2],FIELD_SEVEN[3],FIELD_SEVEN[4]"
			runTest()
		endmethod
	
		{TestMethod}
		{TestCategory("TreeExpander Tests - Field Loop Tokens")}
		public method TreeExpanderFieldName002, void
		proc
			;;This is a test for extra whitespace generated by loops.
			;	<FIELD_LOOP>
			;	<FIELD_NAME>
			;	<FIELD_LOOP>
			template = tab+"<FIELD_LOOP>"+crlf+tab+"<FIELD_NAME>"+crlf+tab+"</FIELD_LOOP>"+crlf

			;	FIELD1
			;	FIELD2
			;	FIELD3
			;	FIELD4
			;	FIELD5
			;	FIELD6
			;	FIELD_SEVEN[1]
			;	FIELD_SEVEN[2]
			;	FIELD_SEVEN[3]
			;	FIELD_SEVEN[4]
			expected = tab + "FIELD1"+crlf+tab+"FIELD2"+crlf+tab+"FIELD3"+crlf+tab+"FIELD4"+crlf+tab+"FIELD5"+crlf+tab+"FIELD6"+crlf+tab+"FIELD_SEVEN[1]"+crlf+tab+"FIELD_SEVEN[2]"+crlf+tab+"FIELD_SEVEN[3]"+crlf+tab+"FIELD_SEVEN[4]"+crlf

			runTest()

		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Field Loop Tokens")}
		public method TreeExpanderFieldSqlName001, void
		proc
			template = "<FIELD_LOOP><FIELD_SQLNAME><,></FIELD_LOOP>"
			expected = "FIELD1,FIELD2,FIELD3,FIELD4,FIELD5,FIELD6,FIELD_SEVEN1,FIELD_SEVEN2,FIELD_SEVEN3,FIELD_SEVEN4"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Field Loop Tokens")}
		public method TreeExpanderFieldSqlName002, void
		proc
			template = "<FIELD_LOOP><field_sqlname><,></FIELD_LOOP>"
			expected = "field1,field2,field3,field4,field5,field6,field_seven1,field_seven2,field_seven3,field_seven4"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Field Loop Tokens")}
		public method TreeExpanderFieldSqlName003, void
		proc
			template = "<FIELD_LOOP><Field_sqlname><,></FIELD_LOOP>"
			expected = "Field1,Field2,Field3,Field4,Field5,Field6,Field_seven1,Field_seven2,Field_seven3,Field_seven4"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Field Loop Tokens")}
		public method TreeExpanderFieldSqlName004, void
		proc
			template = "<FIELD_LOOP><Field_Sqlname><,></FIELD_LOOP>"
			expected = "Field1,Field2,Field3,Field4,Field5,Field6,Field_Seven1,Field_Seven2,Field_Seven3,Field_Seven4"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Field Loop Tokens")}
		public method TreeExpanderFieldSqlName005, void
		proc
			template = "<FIELD_LOOP><FieldSqlName><,></FIELD_LOOP>"
			expected = "Field1,Field2,Field3,Field4,Field5,Field6,FieldSeven1,FieldSeven2,FieldSeven3,FieldSeven4"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Field Loop Tokens")}
		public method TreeExpanderFieldSqlName006, void
		proc
			template = "<FIELD_LOOP><fieldSqlName><,></FIELD_LOOP>"
			expected = "field1,field2,field3,field4,field5,field6,fieldSeven1,fieldSeven2,fieldSeven3,fieldSeven4"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Field Loop Tokens")}
		public method TreeExpanderFieldSpec001, void
		proc
			template = "<FIELD_LOOP><FIELD_SPEC><,></FIELD_LOOP>"
			expected = "A1,D1,D2.1,I1,D8,D6,A10,A10,A10,A10"
			runTest()
		endmethod

.endregion

.region "IF Tests"
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - IF")}
		public method TreeExpanderIf001, void
		proc
			;<FIELD_LOOP>
			;<IF PROMPT>
			;<FIELD_PROMPT>
			;</IF>
			;</FIELD_LOOP>
			template = "<FIELD_LOOP>"+crlf+"<IF PROMPT>"+crlf+"<FIELD_PROMPT>"+crlf+"</IF>"+crlf+"</FIELD_LOOP>"
			
			;Field 1 prompt
			;Field 2 prompt
			expected = "Field 1 prompt"+crlf+"Field 2 prompt"+crlf
			
			runTest()
			
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - IF")}
		public method TreeExpanderIf002, void
		proc
			;<FIELD_LOOP>
			;<IF PROMPT>
			;<FIELD_PROMPT>
			;</IF PROMPT>
			;</FIELD_LOOP>
			template = "<FIELD_LOOP>"+crlf+"<IF PROMPT>"+crlf+"<FIELD_PROMPT>"+crlf+"</IF PROMPT>"+crlf+"</FIELD_LOOP>"
			
			;Field 1 prompt
			;Field 2 prompt
			expected = "Field 1 prompt"+crlf+"Field 2 prompt"+crlf
			
			runTest()
			
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - IF")}
		public method TreeExpanderIf003, void
		proc
			;<FIELD_LOOP>
			;<IF PROMPT>YES</IF>
			;</FIELD_LOOP>
			template = "<FIELD_LOOP>"+crlf+"<IF PROMPT>YES</IF>"+crlf+"</FIELD_LOOP>"
			
			;YES
			;YES
			expected = "YES"+crlf+"YES"+crlf
			
			runTest()
			
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - IF")}
		public method TreeExpanderIf004, void
		proc
			;<FIELD_LOOP>
			;<IF PROMPT>YES</IF PROMPT>
			;</FIELD_LOOP>
			template = "<FIELD_LOOP>"+crlf+"<IF PROMPT>YES</IF PROMPT>"+crlf+"</FIELD_LOOP>"
			
			;YES
			;YES
			expected = "YES"+crlf+"YES"+crlf
			
			runTest()
			
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - IF")}
		public method TreeExpanderIf005, void
		proc
			template = "<FIELD_LOOP><IF PROMPT>YES|</IF></FIELD_LOOP>"
			expected = "YES|YES|"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - IF")}
		public method TreeExpanderIf006, void
		proc
			template = "<FIELD_LOOP><IF PROMPT>YES|</IF PROMPT></FIELD_LOOP>"
			expected = "YES|YES|"
			runTest()
		endmethod

		{TestMethod}
		{TestCategory("TreeExpander Tests - IF")}
		public method TreeExpanderIf007, void
		proc
			;<FIELD_LOOP>
			;"<FIELD_NAME><IF PROMPT>PROMPT</IF>,"
			;</FIELD_LOOP>
			template = '<FIELD_LOOP>'+crlf+'"<FIELD_NAME><IF PROMPT>PROMPT</IF>,"'+crlf+"</FIELD_LOOP>"
			
			;YES
			;YES
			expected = '"FIELD1PROMPT,"'+crlf+'"FIELD2PROMPT,"'+crlf+'"FIELD3,"'+crlf+'"FIELD4,"'+crlf+'"FIELD5,"'+crlf+'"FIELD6,"'+crlf+'"FIELD_SEVEN[1],"'+crlf+'"FIELD_SEVEN[2],"'+crlf+'"FIELD_SEVEN[3],"'+crlf+'"FIELD_SEVEN[4],"'+crlf
			
			runTest()
			
		endmethod
		
.endregion

.region "IF ELSE Tests"

		{TestMethod}
		{TestCategory("TreeExpander Tests - IF ELSE")}
		public method TreeExpanderIfElse001, void
		proc
			template = "<FIELD_LOOP><IF PROMPT>YES<ELSE>NO</IF PROMPT><,></FIELD_LOOP>"
			expected = "YES,YES,NO,NO,NO,NO,NO,NO,NO,NO"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - IF ELSE")}
		public method TreeExpanderIfElse002, void
		proc
			;	BEGIN-----
			;	<FIELD_LOOP>
			;	<IF PROMPT>
			;	Prompt
			;	<ELSE>
			;	No Prompt
			;	</IF PROMPT>
			;	</FIELD_LOOP>
			;	--MIDDLE--
			;	<FIELD_LOOP>
			;	<IF PROMPT>
			;	Prompt
			;	</IF PROMPT>
			;	</FIELD_LOOP>
			;	-------END
			template = "BEGIN-----"+crlf+"<FIELD_LOOP>"+crlf+"<IF PROMPT>"+crlf+"Prompt"+crlf+"<ELSE>"+crlf+"No Prompt"+crlf+"</IF PROMPT>"+crlf+"</FIELD_LOOP>"+crlf+"--MIDDLE--"+crlf+"<FIELD_LOOP>"+crlf+"<IF PROMPT>"+crlf+"Prompt"+crlf+"</IF PROMPT>"+crlf+"</FIELD_LOOP>"+crlf+"-------END"

			;	BEGIN-----
			;	Prompt
			;	Prompt
			;	No Prompt
			;	No Prompt
			;	No Prompt
			;	No Prompt
			;	No Prompt
			;	No Prompt
			;	No Prompt
			;	No Prompt
			;	--MIDDLE--
			;	Prompt
			;	Prompt
			;	------END

			expected = "BEGIN-----"+crlf+"Prompt"+crlf+"Prompt"+crlf+"No Prompt"+crlf+"No Prompt"+crlf+"No Prompt"+crlf+"No Prompt"+crlf+"No Prompt"+crlf+"No Prompt"+crlf+"No Prompt"+crlf+"No Prompt"+crlf+"--MIDDLE--"+crlf+"Prompt"+crlf+"Prompt"+crlf+"-------END"

			runTest()

		endmethod
		
.endregion

.region "Bad Token Tests"

		{TestMethod}
		{TestCategory("TreeExpander Tests - Bad Tokens")}
		public method TreeExpanderBadToken001, void
		proc
			template = "<FIELD_LOOP><IF PROMPT>YES<ELSE>NO</IF PROMPT><BAD_TOKEN></FIELD_LOOP>"
			expected = "YES<BAD_TOKEN>YES<BAD_TOKEN>NO<BAD_TOKEN>NO<BAD_TOKEN>NO<BAD_TOKEN>NO<BAD_TOKEN>NO<BAD_TOKEN>NO<BAD_TOKEN>NO<BAD_TOKEN>NO<BAD_TOKEN>"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Bad Tokens")}
		public method TreeExpanderBadToken002, void
		proc
			template = "<FIELD_LOOP><BAD_TOKEN><IF PROMPT>YES<ELSE>NO</IF PROMPT></FIELD_LOOP>"
			expected = "<BAD_TOKEN>YES<BAD_TOKEN>YES<BAD_TOKEN>NO<BAD_TOKEN>NO<BAD_TOKEN>NO<BAD_TOKEN>NO<BAD_TOKEN>NO<BAD_TOKEN>NO<BAD_TOKEN>NO<BAD_TOKEN>NO"
			runTest()
		endmethod

		{TestMethod}
		{TestCategory("TreeExpander Tests - Bad Tokens")}
		public method TreeExpanderBadToken003, void
		proc
			template = "<FIELD_LOOP><BAD_TOKEN></FIELD_LOOP>"
			expected = "<BAD_TOKEN><BAD_TOKEN><BAD_TOKEN><BAD_TOKEN><BAD_TOKEN><BAD_TOKEN><BAD_TOKEN><BAD_TOKEN><BAD_TOKEN><BAD_TOKEN>"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Bad Tokens")}
		public method TreeExpanderBadToken004, void
		proc
			template = "<BAD_TOKEN>"
			expected = "<BAD_TOKEN>"
			runTest()
		endmethod
		
		
		
.endregion

.region "Key Loops"

		{TestMethod}
		{TestCategory("TreeExpander Tests - Key Loop Expressions")}
		public method TreeExpanderKeyLoopExpression001, void
		proc
			template = "<KEY_LOOP><KEY_NAME><IF MORE>,</IF></KEY_LOOP>"
			expected = "KEY0,KEY1"
			runTest()
		endmethod

		{TestMethod}
		{TestCategory("TreeExpander Tests - Key Loop Expressions")}
		public method TreeExpanderKeyLoopExpression002, void
		proc
			;;Same as TreeExpanderKeyLoopExpression001 but with </IF MORE>
			template = "<KEY_LOOP><KEY_NAME><IF MORE>,</IF MORE></KEY_LOOP>"
			expected = "KEY0,KEY1"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Key Loop Expressions")}
		{ExpectedException(^typeof(ApplicationException))}
		public method TreeExpanderKeyLoopExpression003, void
		proc
			template = "<KEY_LOOP><KEY_NAME><IF INVALID_EXPRESSION>,</IF></KEY_LOOP>"
			expected = ""
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Key Loop Expressions")}
		{ExpectedException(^typeof(ApplicationException))}
		public method TreeExpanderKeyLoopExpression004, void
		proc
			;Same as TreeExpanderKeyLoopExpression003 but with </IF INVALID_EXPRESSION>
			template = "<KEY_LOOP><KEY_NAME><IF INVALID_EXPRESSION>,</IF INVALID_EXPRESSION></KEY_LOOP>"
			expected = ""
			runTest()
		endmethod
		
.endregion

.region "Generic Tokens"

		{TestMethod}
		{TestCategory("TreeExpander Tests - Generic Tokens")}
		public method TreeExpanderGeneric001, void
		proc
			data errmsg, string,string.Empty
			data message, String
			data success, boolean
			template = "<NAMESPACE>"
			expected = ""
			try
			begin
				runTest()
				success = false
				message = "Should have failed, no namespace was provided!"
			end
			catch (e, @Exception)
			begin
				success = (e.Message == "Teplate  line 1 <NAMESPACE> requires a namespace is provided.")
				if (!success)
					message = string.Format("Wrong line number was reported in exception {0}. Expected line number 1.",e.Message)
			end
			endtry
			Assert.IsTrue(success,message)
		endmethod
		
.endregion

.region "Counters"

		{TestMethod}
		{TestCategory("TreeExpander Tests - Counters")}
		public method TreeExpanderCounter001, void
		proc
			template = "<COUNTER_1_INCREMENT><COUNTER_1_INCREMENT><COUNTER_1_INCREMENT><COUNTER_1_DECREMENT><COUNTER_1_VALUE>"
			expected = "2"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Counters")}
		public method TreeExpanderCounter002, void
		proc
			template = "<COUNTER_1_INCREMENT><COUNTER_1_INCREMENT><COUNTER_1_DECREMENT><COUNTER_1_DECREMENT><IF COUNTER_1><COUNTER_1_VALUE></IF>"
			expected = ""
			runTest()
		endmethod

		{TestMethod}
		{TestCategory("TreeExpander Tests - Counters")}
		public method TreeExpanderCounter003, void
		proc
			;<FIELD_LOOP>
			;<COUNTER_1_INCREMENT>
			;<COUNTER_1_VALUE>
			;</FIELD_LOOP>
			template = "<FIELD_LOOP>"+crlf+"<COUNTER_1_INCREMENT>"+crlf+"<COUNTER_1_VALUE>"+crlf+"</FIELD_LOOP>"+crlf
			
			;1
			;2
			;3
			;4
			;5
			;6
			;7
			;8
			;9
			;10
			expected = "1"+crlf+"2"+crlf+"3"+crlf+"4"+crlf+"5"+crlf+"6"+crlf+"7"+crlf+"8"+crlf+"9"+crlf+"10"+crlf
			
			runTest()
			
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Counters")}
		public method TreeExpanderCounter004, void
		proc
			; <FIELD_LOOP>
			; <COUNTER_1_INCREMENT>
			; <COUNTER_1_VALUE>
			; </FIELD_LOOP>
			template = " <FIELD_LOOP>"+crlf+" <COUNTER_1_INCREMENT>"+crlf+" <COUNTER_1_VALUE>"+crlf+" </FIELD_LOOP>"+crlf
			
			;1
			;2
			;3
			;4
			;5
			;6
			;7
			;8
			;9
			;10
			expected = " 1"+crlf+" 2"+crlf+" 3"+crlf+" 4"+crlf+" 5"+crlf+" 6"+crlf+" 7"+crlf+" 8"+crlf+" 9"+crlf+" 10"+crlf
			
			runTest()
			
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Counters")}
		public method TreeExpanderCounter005, void
		proc
			;	<FIELD_LOOP>
			;	<COUNTER_1_INCREMENT>
			;	<COUNTER_1_VALUE>
			;	</FIELD_LOOP>
			template = tab+"<FIELD_LOOP>"+crlf+tab+"<COUNTER_1_INCREMENT>"+crlf+tab+"<COUNTER_1_VALUE>"+crlf+tab+"</FIELD_LOOP>"+crlf

			;	1
			;	2
			;	3
			;	4
			;	5
			;	6
			;	7
			;	8
			;	9
			;	10
			expected = tab+"1"+crlf+tab+"2"+crlf+tab+"3"+crlf+tab+"4"+crlf+tab+"5"+crlf+tab+"6"+crlf+tab+"7"+crlf+tab+"8"+crlf+tab+"9"+crlf+tab+"10"+crlf

			runTest()

		endmethod

		{TestMethod}
		{TestCategory("TreeExpander Tests - Counters")}
		public method TreeExpanderCounter006, void
		proc
			; <COUNTER_1_INCREMENT>
			; sometext
			template = " <COUNTER_1_INCREMENT>"+crlf+" sometext"
			
			; sometext
			expected = " sometext"
			
			runTest()
			
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Counters")}
		public method TreeExpanderCounter007, void
		proc
			;	<COUNTER_1_INCREMENT>
			;	sometext
			template = tab+"<COUNTER_1_INCREMENT>"+crlf+tab+"sometext"
			
			; sometext
			expected = tab+"sometext"
			
			runTest()
			
		endmethod

.endregion
	
.region "Loop Utility Token Tests"

		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility001, void
		proc
			template = "<FIELD_LOOP><,></FIELD_LOOP>"
			expected = ",,,,,,,,,"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility002, void
		proc
			template = "<FIELD_LOOP><+></FIELD_LOOP>"
			expected = "+++++++++"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility003, void
		proc
			template = "<FIELD_LOOP><:></FIELD_LOOP>"
			expected = ":::::::::"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility004, void
		proc
			template = "<FIELD_LOOP><&&></FIELD_LOOP>"
			expected = "&&&&&&&&&&&&&&&&&&"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility005, void
		proc
			template = "<FIELD_LOOP><.AND.></FIELD_LOOP>"
			expected = ".AND..AND..AND..AND..AND..AND..AND..AND..AND."
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility006, void
		proc
			template = "<FIELD_LOOP><AND></FIELD_LOOP>"
			expected = "ANDANDANDANDANDANDANDANDAND"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility007, void
		proc
			template = "<FIELD_LOOP><||></FIELD_LOOP>"
			expected = "||||||||||||||||||"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility008, void
		proc
			template = "<FIELD_LOOP><.OR.></FIELD_LOOP>"
			expected = ".OR..OR..OR..OR..OR..OR..OR..OR..OR."
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility009, void
		proc
			template = "<FIELD_LOOP><OR></FIELD_LOOP>"
			expected = "OROROROROROROROROR"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility010, void
		proc
			template = "<FIELD_LOOP><,>B</FIELD_LOOP>"
			expected = ",B,B,B,B,B,B,B,B,B"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility011, void
		proc
			template = "<FIELD_LOOP><+> </FIELD_LOOP>"
			expected = "+ + + + + + + + + "
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility012, void
		proc
			template = "[<FIELD_LOOP>A<:></FIELD_LOOP>]"
			expected = "[A:A:A:A:A:A:A:A:A:]"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility013, void
		proc
			template = "~<FIELD_LOOP><&&>_</FIELD_LOOP>~"
			expected = "~&&_&&_&&_&&_&&_&&_&&_&&_&&_~"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility014, void
		proc
			template = "<FIELD_LOOP><.AND.>=</FIELD_LOOP>"
			expected = ".AND.=.AND.=.AND.=.AND.=.AND.=.AND.=.AND.=.AND.=.AND.="
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility015, void
		proc
			template = "<FIELD_LOOP>+<AND></FIELD_LOOP>"
			expected = "+AND+AND+AND+AND+AND+AND+AND+AND+AND"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility016, void
		proc
			template = "<FIELD_LOOP>_<||></FIELD_LOOP>"
			expected = "_||_||_||_||_||_||_||_||_||"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility017, void
		proc
			template = "<FIELD_LOOP><<.OR.>></FIELD_LOOP>"
			expected = "<.OR.><.OR.><.OR.><.OR.><.OR.><.OR.><.OR.><.OR.><.OR.>"
			runTest()
		endmethod
		
		{TestMethod}
		{TestCategory("TreeExpander Tests - Loop Utility Tokens")}
		public method TreeExpanderLoopUtility018, void
		proc
			template = "<FIELD_LOOP><OR>:</FIELD_LOOP>"
			expected = "OR:OR:OR:OR:OR:OR:OR:OR:OR:"
			runTest()
		endmethod
		
.endregion
			
	endclass
	
endnamespace
