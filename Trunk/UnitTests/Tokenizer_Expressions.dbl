
import System
import Microsoft.VisualStudio.TestTools.UnitTesting
import CodeGen.Engine
import System.Collections.Generic

.array 0

namespace UnitTests
	
	public partial class TokenizerTests

		private method tokenizeExpression, boolean
			required in expression, String
			required in validity, TokenValidity
			endparams
		proc
			data tokens, @List<Token>, new Tokenizer().Tokenize(string.Format("<IF {0}>",expression))
			data testPassed, boolean, (tokens.Count == 2)
			&	&& (tokens[0].TypeOfToken == TokenType.Control)
			&	&& (tokens[1].TypeOfToken == TokenType.Expression)
			&	&& (tokens[1].Value == expression)
			if (testPassed)
			begin
				data validityList, @List<TokenValidity>, (@List<TokenValidity>)tokens[0].Bucket
				testPassed = validityList.Contains(TokenValidity.Anywhere)
			end
			mreturn testPassed
		endmethod
		
.region "Generic Expressions" 
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method GenericExpressionCounter1, void
		proc
			Assert.IsTrue(tokenizeExpression("COUNTER_1",TokenValidity.Anywhere))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method GenericExpressionCounter2, void
		proc
			Assert.IsTrue(tokenizeExpression("COUNTER_2",TokenValidity.Anywhere))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method GenericExpressionNotCounter1, void
		proc
			Assert.IsTrue(tokenizeExpression("NOT_COUNTER_1",TokenValidity.Anywhere))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method GenericExpressionNotCounter2, void
		proc
			Assert.IsTrue(tokenizeExpression("NOT_COUNTER_2",TokenValidity.Anywhere))
		endmethod
		
.endregion
		
.region "Structure Expressions" 
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method StructureExpressionLongDesc, void
		proc
			Assert.IsTrue(tokenizeExpression("STRUCTURE_LDESC",TokenValidity.Anywhere))
		endmethod
		
.endregion
		
.region "All Loops Expressions"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method AllLoopsExpressionMore, void
		proc
			Assert.IsTrue(tokenizeExpression("MORE",TokenValidity.AnyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method AllLoopsExpressionNoMore, void
		proc
			Assert.IsTrue(tokenizeExpression("NOMORE",TokenValidity.AnyLoop))
		endmethod
		
.endregion
		
.region "Field Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionALLOW_LIST, void
		proc
			Assert.IsTrue(tokenizeExpression("ALLOW_LIST",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionALPHA, void
		proc
			Assert.IsTrue(tokenizeExpression("ALPHA",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionALTERNATE_NAME, void
		proc
			Assert.IsTrue(tokenizeExpression("ALTERNATE_NAME",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionARRAY, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionARRAY1, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY1",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionARRAY2, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY2",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionARRAY3, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY3",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionARRAY4, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY4",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionARRIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRIVE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionBINARY, void
		proc
			Assert.IsTrue(tokenizeExpression("BINARY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionBOLD, void
		proc
			Assert.IsTrue(tokenizeExpression("BOLD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("BOOLEAN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionBREAK, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionBREAK_ALWAYS, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK_ALWAYS",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionBREAK_CHANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK_CHANGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionBREAK_RETURN, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK_RETURN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionBZERO, void
		proc
			Assert.IsTrue(tokenizeExpression("BZERO",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionCHANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("CHANGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionCHECKBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("CHECKBOX",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionCOERCEBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("COERCEBOOLEAN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionCOMBOBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("COMBOBOX",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_JULIAN, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_JULIAN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_NOT_JULIAN, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_JULIAN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_NOT_NULLABLE, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_NULLABLE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_NOT_PERIOD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_PERIOD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_NOT_YMD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_YMD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_NOT_YYYYMMDD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_YYYYMMDD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_NULLABLE, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NULLABLE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_PERIOD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_PERIOD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_YMD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YMD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_YYJJJ, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYJJJ",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_YYMMDD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYMMDD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_YYPP, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYPP",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_YYYYJJJ, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYYYJJJ",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_YYYYMMDD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYYYMMDD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATE_YYYYPP, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYYYPP",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATEORTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("DATEORTIME",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDATETODAY, void
		proc
			Assert.IsTrue(tokenizeExpression("DATETODAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDECIMAL, void
		proc
			Assert.IsTrue(tokenizeExpression("DECIMAL",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDEFAULT, void
		proc
			Assert.IsTrue(tokenizeExpression("DEFAULT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("DESCRIPTION",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDISABLED, void
		proc
			Assert.IsTrue(tokenizeExpression("DISABLED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDISPLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("DISPLAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDISPLAY_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("DISPLAY_LENGTH",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionDRILL, void
		proc
			Assert.IsTrue(tokenizeExpression("DRILL",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionECHO, void
		proc
			Assert.IsTrue(tokenizeExpression("ECHO",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionEDITFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("EDITFORMAT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionENABLED, void
		proc
			Assert.IsTrue(tokenizeExpression("ENABLED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionENUM, void
		proc
			Assert.IsTrue(tokenizeExpression("ENUM",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionENUMERATED, void
		proc
			Assert.IsTrue(tokenizeExpression("ENUMERATED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionFIELD_POSITION, void
		proc
			Assert.IsTrue(tokenizeExpression("FIELD_POSITION",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("FORMAT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionGROUP_EXPAND, void
		proc
			Assert.IsTrue(tokenizeExpression("GROUP_EXPAND",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionGROUP_NO_EXPAND, void
		proc
			Assert.IsTrue(tokenizeExpression("GROUP_NO_EXPAND",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionHEADING, void
		proc
			Assert.IsTrue(tokenizeExpression("HEADING",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionHELPID, void
		proc
			Assert.IsTrue(tokenizeExpression("HELPID",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionHYPERLINK, void
		proc
			Assert.IsTrue(tokenizeExpression("HYPERLINK",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionI1, void
		proc
			Assert.IsTrue(tokenizeExpression("I1",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionI124, void
		proc
			Assert.IsTrue(tokenizeExpression("I124",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionI2, void
		proc
			Assert.IsTrue(tokenizeExpression("I2",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionI4, void
		proc
			Assert.IsTrue(tokenizeExpression("I4",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionI8, void
		proc
			Assert.IsTrue(tokenizeExpression("I8",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionINFOLINE, void
		proc
			Assert.IsTrue(tokenizeExpression("INFOLINE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionINPUT_CENTER, void
		proc
			Assert.IsTrue(tokenizeExpression("INPUT_CENTER",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionINPUT_LEFT, void
		proc
			Assert.IsTrue(tokenizeExpression("INPUT_LEFT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionINPUT_RIGHT, void
		proc
			Assert.IsTrue(tokenizeExpression("INPUT_RIGHT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionINTEGER, void
		proc
			Assert.IsTrue(tokenizeExpression("INTEGER",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionLANGUAGE, void
		proc
			Assert.IsTrue(tokenizeExpression("LANGUAGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionLAST, void
		proc
			Assert.IsTrue(tokenizeExpression("LAST",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionLEAVE, void
		proc
			Assert.IsTrue(tokenizeExpression("LEAVE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionLONGDESC, void
		proc
			Assert.IsTrue(tokenizeExpression("LONGDESC",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionMAPPED, void
		proc
			Assert.IsTrue(tokenizeExpression("MAPPED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionMAPPEDSTR, void
		proc
			Assert.IsTrue(tokenizeExpression("MAPPEDSTR",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNEGATIVE_ALLOWED, void
		proc
			Assert.IsTrue(tokenizeExpression("NEGATIVE_ALLOWED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNEGATIVE_ORZERO, void
		proc
			Assert.IsTrue(tokenizeExpression("NEGATIVE_ORZERO",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNEGATIVE_REQUIRED, void
		proc
			Assert.IsTrue(tokenizeExpression("NEGATIVE_REQUIRED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOALLOW_LIST, void
		proc
			Assert.IsTrue(tokenizeExpression("NOALLOW_LIST",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOALTERNATE_NAME, void
		proc
			Assert.IsTrue(tokenizeExpression("NOALTERNATE_NAME",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOARRIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOARRIVE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOBREAK, void
		proc
			Assert.IsTrue(tokenizeExpression("NOBREAK",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOCHANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCHANGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOCHECKBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCHECKBOX",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOCOERCEBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCOERCEBOOLEAN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNODEFAULT, void
		proc
			Assert.IsTrue(tokenizeExpression("NODEFAULT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNODESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("NODESCRIPTION",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNODISPLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NODISPLAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNODISPLAY_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("NODISPLAY_LENGTH",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNODRILL, void
		proc
			Assert.IsTrue(tokenizeExpression("NODRILL",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOECHO, void
		proc
			Assert.IsTrue(tokenizeExpression("NOECHO",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOEDITFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOEDITFORMAT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOFORMAT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOHELPID, void
		proc
			Assert.IsTrue(tokenizeExpression("NOHELPID",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOHYPERLINK, void
		proc
			Assert.IsTrue(tokenizeExpression("NOHYPERLINK",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOINFOLINE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOINFOLINE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOLANGUAGE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOLANGUAGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOLEAVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOLEAVE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOLONGDESC, void
		proc
			Assert.IsTrue(tokenizeExpression("NOLONGDESC",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNONEGATIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NONEGATIVE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOPAINTCHAR, void
		proc
			Assert.IsTrue(tokenizeExpression("NOPAINTCHAR",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOPRECISION, void
		proc
			Assert.IsTrue(tokenizeExpression("NOPRECISION",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOPROMPT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOPROMPT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNORANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("NORANGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOREPORT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOREPORT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOSELECTIONS, void
		proc
			Assert.IsTrue(tokenizeExpression("NOSELECTIONS",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOSELWND, void
		proc
			Assert.IsTrue(tokenizeExpression("NOSELWND",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTALPHA, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTALPHA",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTARRAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTARRAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTBINARY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTBINARY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTBOOLEAN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTBZERO, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTBZERO",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTDATE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDATE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTDATEORTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDATEORTIME",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTDATETODAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDATETODAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTDECIMAL, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDECIMAL",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTENUM, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTENUM",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTENUMERATED, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTENUMERATED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTIMEOUT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTIMEOUT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTINTEGER, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTINTEGER",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTNUMERIC, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTNUMERIC",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTOOLKIT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTOOLKIT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTOVERLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTOVERLAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTPKSEGMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTPKSEGMENT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTRADIOBUTTONS, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTRADIOBUTTONS",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTSTRUCTFIELD, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTSTRUCTFIELD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTTIME",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTUPPERCASE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUPPERCASE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTUSER, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUSER",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOTUSERTIMESTAMP, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUSERTIMESTAMP",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOUSERTEXT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOUSERTEXT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOVIEW_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("NOVIEW_LENGTH",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNOWEB, void
		proc
			Assert.IsTrue(tokenizeExpression("NOWEB",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionNUMERIC, void
		proc
			Assert.IsTrue(tokenizeExpression("NUMERIC",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionOCNATIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("OCNATIVE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionOCOBJECT, void
		proc
			Assert.IsTrue(tokenizeExpression("OCOBJECT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionOPTIONAL, void
		proc
			Assert.IsTrue(tokenizeExpression("OPTIONAL",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionOVERLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("OVERLAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionPAINTCHAR, void
		proc
			Assert.IsTrue(tokenizeExpression("PAINTCHAR",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionPKSEGMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("PKSEGMENT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionPRECISION, void
		proc
			Assert.IsTrue(tokenizeExpression("PRECISION",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionPROMPT, void
		proc
			Assert.IsTrue(tokenizeExpression("PROMPT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionPROMPT_POSITION, void
		proc
			Assert.IsTrue(tokenizeExpression("PROMPT_POSITION",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionRADIOBUTTONS, void
		proc
			Assert.IsTrue(tokenizeExpression("RADIOBUTTONS",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionRANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("RANGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionREADONLY, void
		proc
			Assert.IsTrue(tokenizeExpression("READONLY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionREADWRITE, void
		proc
			Assert.IsTrue(tokenizeExpression("READWRITE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionREPORT, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionREPORT_CENTER, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT_CENTER",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionREPORT_LEFT, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT_LEFT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionREPORT_RIGHT, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT_RIGHT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionREQUIRED, void
		proc
			Assert.IsTrue(tokenizeExpression("REQUIRED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionREVERSE, void
		proc
			Assert.IsTrue(tokenizeExpression("REVERSE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionSELECTIONS, void
		proc
			Assert.IsTrue(tokenizeExpression("SELECTIONS",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionSELWND, void
		proc
			Assert.IsTrue(tokenizeExpression("SELWND",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionSTRUCTFIELD, void
		proc
			Assert.IsTrue(tokenizeExpression("STRUCTFIELD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionTEXTBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("TEXTBOX",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("TIME",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionTIME_HHMM, void
		proc
			Assert.IsTrue(tokenizeExpression("TIME_HHMM",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionTIME_HHMMSS, void
		proc
			Assert.IsTrue(tokenizeExpression("TIME_HHMMSS",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionTIMENOW, void
		proc
			Assert.IsTrue(tokenizeExpression("TIMENOW",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionTIMEOUT, void
		proc
			Assert.IsTrue(tokenizeExpression("TIMEOUT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionTOOLKIT, void
		proc
			Assert.IsTrue(tokenizeExpression("TOOLKIT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionUNDERLINE, void
		proc
			Assert.IsTrue(tokenizeExpression("UNDERLINE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionUPPERCASE, void
		proc
			Assert.IsTrue(tokenizeExpression("UPPERCASE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionUSER, void
		proc
			Assert.IsTrue(tokenizeExpression("USER",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionUSERTEXT, void
		proc
			Assert.IsTrue(tokenizeExpression("USERTEXT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionUSERTIMESTAMP, void
		proc
			Assert.IsTrue(tokenizeExpression("USERTIMESTAMP",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionVIEW_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("VIEW_LENGTH",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FieldLoopExpressionWEB, void
		proc
			Assert.IsTrue(tokenizeExpression("WEB",TokenValidity.FieldLoop))
		endmethod
		
.endregion
		
.region "Field Selection Loop Expressions"
		
		;;There aren't any right now!
		
.endregion
		
.region "Key Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionASCENDING, void
		proc
			Assert.IsTrue(tokenizeExpression("ASCENDING",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionAUTO_SEQUENCE, void
		proc
			Assert.IsTrue(tokenizeExpression("AUTO_SEQUENCE",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionAUTO_TIMESTAMP, void
		proc
			Assert.IsTrue(tokenizeExpression("AUTO_TIMESTAMP",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionCHANGES, void
		proc
			Assert.IsTrue(tokenizeExpression("CHANGES",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionDESCENDING, void
		proc
			Assert.IsTrue(tokenizeExpression("DESCENDING",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionDUPLICATES, void
		proc
			Assert.IsTrue(tokenizeExpression("DUPLICATES",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionDUPLICATESATEND, void
		proc
			Assert.IsTrue(tokenizeExpression("DUPLICATESATEND",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionDUPLICATESATFRONT, void
		proc
			Assert.IsTrue(tokenizeExpression("DUPLICATESATFRONT",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionMULTIPLE_SEGMENTS, void
		proc
			Assert.IsTrue(tokenizeExpression("MULTIPLE_SEGMENTS",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionNOCHANGES, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCHANGES",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionNODUPLICATES, void
		proc
			Assert.IsTrue(tokenizeExpression("NODUPLICATES",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionNULLKEY, void
		proc
			Assert.IsTrue(tokenizeExpression("NULLKEY",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionNULLVALUE, void
		proc
			Assert.IsTrue(tokenizeExpression("NULLVALUE",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeyLoopExpressionSINGLE_SEGMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("SINGLE_SEGMENT",TokenValidity.KeyLoop))
		endmethod
		
.endregion
		
.region "Key Segment Loop Expressions (Key segment specific)"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionINCREMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("INCREMENT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOINCREMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOINCREMENT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSEG_ALPHA, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_ALPHA",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSEG_ASCENDING, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_ASCENDING",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSEG_AUTO_SEQUENCE, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_AUTO_SEQUENCE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSEG_AUTO_TIMESTAMP, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_AUTO_TIMESTAMP",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSEG_DECIMAL, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_DECIMAL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSEG_DESCENDING, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_DESCENDING",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSEG_NOCASE, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_NOCASE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSEG_SIGNED, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_SIGNED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSEG_TYPE_EXTERNAL, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_TYPE_EXTERNAL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSEG_TYPE_FIELD, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_TYPE_FIELD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSEG_TYPE_LITERAL, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_TYPE_LITERAL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSEG_TYPE_RECNUM, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_TYPE_RECNUM",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSEG_UNSIGNED, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_UNSIGNED",TokenValidity.KeySegmentLoop))
		endmethod
		
.endregion
		
.region "Key segment loop expressions (shared with field loop)"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionALLOW_LIST, void
		proc
			Assert.IsTrue(tokenizeExpression("ALLOW_LIST",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionALPHA, void
		proc
			Assert.IsTrue(tokenizeExpression("ALPHA",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionALTERNATE_NAME, void
		proc
			Assert.IsTrue(tokenizeExpression("ALTERNATE_NAME",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionARRAY, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionARRAY1, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY1",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionARRAY2, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY2",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionARRAY3, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY3",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionARRAY4, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY4",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionARRIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRIVE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionBINARY, void
		proc
			Assert.IsTrue(tokenizeExpression("BINARY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionBOLD, void
		proc
			Assert.IsTrue(tokenizeExpression("BOLD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("BOOLEAN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionBREAK, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionBREAK_ALWAYS, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK_ALWAYS",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionBREAK_CHANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK_CHANGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionBREAK_RETURN, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK_RETURN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionBZERO, void
		proc
			Assert.IsTrue(tokenizeExpression("BZERO",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionCHANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("CHANGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionCHECKBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("CHECKBOX",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionCOERCEBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("COERCEBOOLEAN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionCOMBOBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("COMBOBOX",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_JULIAN, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_JULIAN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_NOT_JULIAN, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_JULIAN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_NOT_NULLABLE, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_NULLABLE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_NOT_PERIOD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_PERIOD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_NOT_YMD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_YMD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_NOT_YYYYMMDD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_YYYYMMDD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_NULLABLE, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NULLABLE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_PERIOD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_PERIOD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_YMD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YMD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_YYJJJ, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYJJJ",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_YYMMDD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYMMDD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_YYPP, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYPP",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_YYYYJJJ, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYYYJJJ",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_YYYYMMDD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYYYMMDD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATE_YYYYPP, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYYYPP",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATEORTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("DATEORTIME",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDATETODAY, void
		proc
			Assert.IsTrue(tokenizeExpression("DATETODAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDECIMAL, void
		proc
			Assert.IsTrue(tokenizeExpression("DECIMAL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDEFAULT, void
		proc
			Assert.IsTrue(tokenizeExpression("DEFAULT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("DESCRIPTION",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDISABLED, void
		proc
			Assert.IsTrue(tokenizeExpression("DISABLED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDISPLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("DISPLAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDISPLAY_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("DISPLAY_LENGTH",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionDRILL, void
		proc
			Assert.IsTrue(tokenizeExpression("DRILL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionECHO, void
		proc
			Assert.IsTrue(tokenizeExpression("ECHO",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionEDITFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("EDITFORMAT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionENABLED, void
		proc
			Assert.IsTrue(tokenizeExpression("ENABLED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionENUM, void
		proc
			Assert.IsTrue(tokenizeExpression("ENUM",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionENUMERATED, void
		proc
			Assert.IsTrue(tokenizeExpression("ENUMERATED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionFIELD_POSITION, void
		proc
			Assert.IsTrue(tokenizeExpression("FIELD_POSITION",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("FORMAT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionGROUP_EXPAND, void
		proc
			Assert.IsTrue(tokenizeExpression("GROUP_EXPAND",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionGROUP_NO_EXPAND, void
		proc
			Assert.IsTrue(tokenizeExpression("GROUP_NO_EXPAND",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionHEADING, void
		proc
			Assert.IsTrue(tokenizeExpression("HEADING",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionHELPID, void
		proc
			Assert.IsTrue(tokenizeExpression("HELPID",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionHYPERLINK, void
		proc
			Assert.IsTrue(tokenizeExpression("HYPERLINK",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionI1, void
		proc
			Assert.IsTrue(tokenizeExpression("I1",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionI124, void
		proc
			Assert.IsTrue(tokenizeExpression("I124",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionI2, void
		proc
			Assert.IsTrue(tokenizeExpression("I2",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionI4, void
		proc
			Assert.IsTrue(tokenizeExpression("I4",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionI8, void
		proc
			Assert.IsTrue(tokenizeExpression("I8",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionINFOLINE, void
		proc
			Assert.IsTrue(tokenizeExpression("INFOLINE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionINPUT_CENTER, void
		proc
			Assert.IsTrue(tokenizeExpression("INPUT_CENTER",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionINPUT_LEFT, void
		proc
			Assert.IsTrue(tokenizeExpression("INPUT_LEFT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionINPUT_RIGHT, void
		proc
			Assert.IsTrue(tokenizeExpression("INPUT_RIGHT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionINTEGER, void
		proc
			Assert.IsTrue(tokenizeExpression("INTEGER",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionLANGUAGE, void
		proc
			Assert.IsTrue(tokenizeExpression("LANGUAGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionLAST, void
		proc
			Assert.IsTrue(tokenizeExpression("LAST",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionLEAVE, void
		proc
			Assert.IsTrue(tokenizeExpression("LEAVE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionLONGDESC, void
		proc
			Assert.IsTrue(tokenizeExpression("LONGDESC",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionMAPPED, void
		proc
			Assert.IsTrue(tokenizeExpression("MAPPED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionMAPPEDSTR, void
		proc
			Assert.IsTrue(tokenizeExpression("MAPPEDSTR",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNEGATIVE_ALLOWED, void
		proc
			Assert.IsTrue(tokenizeExpression("NEGATIVE_ALLOWED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNEGATIVE_ORZERO, void
		proc
			Assert.IsTrue(tokenizeExpression("NEGATIVE_ORZERO",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNEGATIVE_REQUIRED, void
		proc
			Assert.IsTrue(tokenizeExpression("NEGATIVE_REQUIRED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOALLOW_LIST, void
		proc
			Assert.IsTrue(tokenizeExpression("NOALLOW_LIST",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOALTERNATE_NAME, void
		proc
			Assert.IsTrue(tokenizeExpression("NOALTERNATE_NAME",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOARRIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOARRIVE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOBREAK, void
		proc
			Assert.IsTrue(tokenizeExpression("NOBREAK",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOCHANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCHANGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOCHECKBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCHECKBOX",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOCOERCEBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCOERCEBOOLEAN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNODEFAULT, void
		proc
			Assert.IsTrue(tokenizeExpression("NODEFAULT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNODESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("NODESCRIPTION",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNODISPLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NODISPLAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNODISPLAY_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("NODISPLAY_LENGTH",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNODRILL, void
		proc
			Assert.IsTrue(tokenizeExpression("NODRILL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOECHO, void
		proc
			Assert.IsTrue(tokenizeExpression("NOECHO",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOEDITFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOEDITFORMAT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOFORMAT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOHELPID, void
		proc
			Assert.IsTrue(tokenizeExpression("NOHELPID",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOHYPERLINK, void
		proc
			Assert.IsTrue(tokenizeExpression("NOHYPERLINK",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOINFOLINE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOINFOLINE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOLANGUAGE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOLANGUAGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOLEAVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOLEAVE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOLONGDESC, void
		proc
			Assert.IsTrue(tokenizeExpression("NOLONGDESC",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNONEGATIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NONEGATIVE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOPAINTCHAR, void
		proc
			Assert.IsTrue(tokenizeExpression("NOPAINTCHAR",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOPRECISION, void
		proc
			Assert.IsTrue(tokenizeExpression("NOPRECISION",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOPROMPT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOPROMPT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNORANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("NORANGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOREPORT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOREPORT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOSELECTIONS, void
		proc
			Assert.IsTrue(tokenizeExpression("NOSELECTIONS",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOSELWND, void
		proc
			Assert.IsTrue(tokenizeExpression("NOSELWND",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTALPHA, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTALPHA",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTARRAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTARRAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTBINARY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTBINARY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTBOOLEAN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTBZERO, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTBZERO",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTDATE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDATE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTDATEORTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDATEORTIME",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTDATETODAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDATETODAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTDECIMAL, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDECIMAL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTENUM, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTENUM",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTENUMERATED, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTENUMERATED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTIMEOUT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTIMEOUT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTINTEGER, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTINTEGER",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTNUMERIC, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTNUMERIC",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTOOLKIT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTOOLKIT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTOVERLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTOVERLAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTPKSEGMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTPKSEGMENT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTRADIOBUTTONS, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTRADIOBUTTONS",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTSTRUCTFIELD, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTSTRUCTFIELD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTTIME",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTUPPERCASE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUPPERCASE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTUSER, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUSER",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOTUSERTIMESTAMP, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUSERTIMESTAMP",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOUSERTEXT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOUSERTEXT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOVIEW_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("NOVIEW_LENGTH",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNOWEB, void
		proc
			Assert.IsTrue(tokenizeExpression("NOWEB",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionNUMERIC, void
		proc
			Assert.IsTrue(tokenizeExpression("NUMERIC",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionOCNATIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("OCNATIVE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionOCOBJECT, void
		proc
			Assert.IsTrue(tokenizeExpression("OCOBJECT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionOPTIONAL, void
		proc
			Assert.IsTrue(tokenizeExpression("OPTIONAL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionOVERLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("OVERLAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionPAINTCHAR, void
		proc
			Assert.IsTrue(tokenizeExpression("PAINTCHAR",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionPKSEGMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("PKSEGMENT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionPRECISION, void
		proc
			Assert.IsTrue(tokenizeExpression("PRECISION",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionPROMPT, void
		proc
			Assert.IsTrue(tokenizeExpression("PROMPT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionPROMPT_POSITION, void
		proc
			Assert.IsTrue(tokenizeExpression("PROMPT_POSITION",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionRADIOBUTTONS, void
		proc
			Assert.IsTrue(tokenizeExpression("RADIOBUTTONS",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionRANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("RANGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionREADONLY, void
		proc
			Assert.IsTrue(tokenizeExpression("READONLY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionREADWRITE, void
		proc
			Assert.IsTrue(tokenizeExpression("READWRITE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionREPORT, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionREPORT_CENTER, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT_CENTER",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionREPORT_LEFT, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT_LEFT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionREPORT_RIGHT, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT_RIGHT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionREQUIRED, void
		proc
			Assert.IsTrue(tokenizeExpression("REQUIRED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionREVERSE, void
		proc
			Assert.IsTrue(tokenizeExpression("REVERSE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSELECTIONS, void
		proc
			Assert.IsTrue(tokenizeExpression("SELECTIONS",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSELWND, void
		proc
			Assert.IsTrue(tokenizeExpression("SELWND",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionSTRUCTFIELD, void
		proc
			Assert.IsTrue(tokenizeExpression("STRUCTFIELD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionTEXTBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("TEXTBOX",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("TIME",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionTIME_HHMM, void
		proc
			Assert.IsTrue(tokenizeExpression("TIME_HHMM",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionTIME_HHMMSS, void
		proc
			Assert.IsTrue(tokenizeExpression("TIME_HHMMSS",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionTIMENOW, void
		proc
			Assert.IsTrue(tokenizeExpression("TIMENOW",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionTIMEOUT, void
		proc
			Assert.IsTrue(tokenizeExpression("TIMEOUT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionTOOLKIT, void
		proc
			Assert.IsTrue(tokenizeExpression("TOOLKIT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionUNDERLINE, void
		proc
			Assert.IsTrue(tokenizeExpression("UNDERLINE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionUPPERCASE, void
		proc
			Assert.IsTrue(tokenizeExpression("UPPERCASE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionUSER, void
		proc
			Assert.IsTrue(tokenizeExpression("USER",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionUSERTEXT, void
		proc
			Assert.IsTrue(tokenizeExpression("USERTEXT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionUSERTIMESTAMP, void
		proc
			Assert.IsTrue(tokenizeExpression("USERTIMESTAMP",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionVIEW_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("VIEW_LENGTH",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method KeySegmentLoopExpressionWEB, void
		proc
			Assert.IsTrue(tokenizeExpression("WEB",TokenValidity.KeySegmentLoop))
		endmethod
		
.endregion
		
.region "Enum Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method EnumLoopExpressionDESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("DESCRIPTION",TokenValidity.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method EnumLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method EnumLoopExpressionLONG_DESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("LONG_DESCRIPTION",TokenValidity.EnumLoop))
		endmethod
		
.endregion
		
.region "Enum Member Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method EnumMemberLoopExpressionEXPLICIT_VALUE, void
		proc
			Assert.IsTrue(tokenizeExpression("EXPLICIT_VALUE",TokenValidity.EnumMemberLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method EnumMemberLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.EnumMemberLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method EnumMemberLoopExpressionNOEXPLICIT_VALUE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOEXPLICIT_VALUE",TokenValidity.EnumMemberLoop))
		endmethod
		
.endregion
		
.region "Tag Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopComparisonEQ, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_EQ",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopComparisonGE, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_GE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopComparisonGT, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_GT",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopComparisonLE, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_LE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopComparisonLT, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_LT",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopComparisonNE, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopComparisonNotEQ, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NOT_EQ",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopComparisonNotGE, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NOT_GE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopComparisonNotGT, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NOT_GT",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopComparisonNotLE, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NOT_LE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopComparisonNotLT, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NOT_LT",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopComparisonNotNE, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NOT_NE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopConnectorAND, void
		proc
			Assert.IsTrue(tokenizeExpression("CONNECTOR_AND",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopConnectorOR, void
		proc
			Assert.IsTrue(tokenizeExpression("CONNECTOR_OR",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopConnectorNone, void
		proc
			Assert.IsTrue(tokenizeExpression("CONNECTOR_NONE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopConnectorNotAND, void
		proc
			Assert.IsTrue(tokenizeExpression("CONNECTOR_NOT_AND",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopConnectorNotOR, void
		proc
			Assert.IsTrue(tokenizeExpression("CONNECTOR_NOT_OR",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopConnectorNotNone, void
		proc
			Assert.IsTrue(tokenizeExpression("CONNECTOR_NOT_NONE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopFirst, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopLast, void
		proc
			Assert.IsTrue(tokenizeExpression("LAST",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopMultipleTags, void
		proc
			Assert.IsTrue(tokenizeExpression("MULTIPLE_TAGS",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method TagLoopSingleTag, void
		proc
			Assert.IsTrue(tokenizeExpression("SINGLE_TAG",TokenValidity.TagLoop))
		endmethod
		
.endregion
		
.region "File Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionASCII, void
		proc
			Assert.IsTrue(tokenizeExpression("ASCII",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionCHANGE_TRACKING, void
		proc
			Assert.IsTrue(tokenizeExpression("CHANGE_TRACKING",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionDESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("DESCRIPTION",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionISAM, void
		proc
			Assert.IsTrue(tokenizeExpression("ISAM",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNOCHANGE_TRACKING, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCHANGE_TRACKING",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNODESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("NODESCRIPTION",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNORECORDCOMPRESSION, void
		proc
			Assert.IsTrue(tokenizeExpression("NORECORDCOMPRESSION",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNOSTORED_GRFA, void
		proc
			Assert.IsTrue(tokenizeExpression("NOSTORED_GRFA",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNOTASCII, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTASCII",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNOTISAM, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTISAM",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNOTRECORDTYPEFIXED, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTRECORDTYPEFIXED",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNOTRECORDTYPEMULTIPLE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTRECORDTYPEMULTIPLE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNOTRECORDTYPEVARIABLE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTRECORDTYPEVARIABLE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNOTRELATIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTRELATIVE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNOTSTATICRFA, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTSTATICRFA",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNOTTERABYTE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTTERABYTE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNOTUSERDEFINED, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUSERDEFINED",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionNOUSERTEXT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOUSERTEXT",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionPAGESIZE1024, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE1024",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionPAGESIZE16384, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE16384",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionPAGESIZE2048, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE2048",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionPAGESIZE32768, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE32768",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionPAGESIZE4096, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE4096",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionPAGESIZE512, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE512",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionPAGESIZE8192, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE8192",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionRECORDCOMPRESSION, void
		proc
			Assert.IsTrue(tokenizeExpression("RECORDCOMPRESSION",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionRECORDTYPEFIXED, void
		proc
			Assert.IsTrue(tokenizeExpression("RECORDTYPEFIXED",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionRECORDTYPEMULTIPLE, void
		proc
			Assert.IsTrue(tokenizeExpression("RECORDTYPEMULTIPLE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionRECORDTYPEVARIABLE, void
		proc
			Assert.IsTrue(tokenizeExpression("RECORDTYPEVARIABLE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionRELATIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("RELATIVE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionSTATICRFA, void
		proc
			Assert.IsTrue(tokenizeExpression("STATICRFA",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionSTORED_GRFA, void
		proc
			Assert.IsTrue(tokenizeExpression("STORED_GRFA",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionTERABYTE, void
		proc
			Assert.IsTrue(tokenizeExpression("TERABYTE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionUSERDEFINED, void
		proc
			Assert.IsTrue(tokenizeExpression("USERDEFINED",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method FileLoopExpressionUSERTEXT, void
		proc
			Assert.IsTrue(tokenizeExpression("USERTEXT",TokenValidity.FileLoop))
		endmethod
		
.endregion
		
.region "Button Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method ButtonLoopExpressionCANCELBUTTON, void
		proc
			Assert.IsTrue(tokenizeExpression("CANCELBUTTON",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method ButtonLoopExpressionCAPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("CAPTION",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method ButtonLoopExpressionELB, void
		proc
			Assert.IsTrue(tokenizeExpression("ELB",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method ButtonLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method ButtonLoopExpressionGENERICBUTTON, void
		proc
			Assert.IsTrue(tokenizeExpression("GENERICBUTTON",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method ButtonLoopExpressionIMAGE, void
		proc
			Assert.IsTrue(tokenizeExpression("IMAGE",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method ButtonLoopExpressionMETHOD, void
		proc
			Assert.IsTrue(tokenizeExpression("METHOD",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method ButtonLoopExpressionOKBUTTON, void
		proc
			Assert.IsTrue(tokenizeExpression("OKBUTTON",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenizer - Expressions")}
		public method ButtonLoopExpressionQUICKSELECT, void
		proc
			Assert.IsTrue(tokenizeExpression("QUICKSELECT",TokenValidity.ButtonLoop))
		endmethod
		
.endregion

	endclass

endnamespace
