
import System
import System.IO
import Microsoft.VisualStudio.TestTools.UnitTesting
import CodeGen.Engine

import System.Diagnostics
.array 0

namespace UnitTests
	
	{TestClass}
	public partial class TreeExpanderTests

		private simulator, @Simulate
		private mappingSimulator, @Simulate
		private tab,  String, %char(9)
		private crlf, String, %char(13)+%char(10)
		private template, String
		private expected, String

		public method TreeExpanderTests
			endparams
		proc
			simulator = new Simulate("UNIT_TEST_1")
			mappingSimulator = new Simulate("MAPPED_FROM")
		endmethod

		private method runTest, void
			default in logFailures, boolean, false
		proc
			data actual, String
			data errorText, String
			if (simulator.ExpandCode(template,actual,errorText)) then
			begin
				if (logFailures && (expected != actual))
				begin
					data tempFileSpec = Path.Combine(Environment.GetEnvironmentVariable("TEMP"),"badcode.txt")
					data sw = File.CreateText(tempFileSpec)
					sw.WriteLine("Template code:")
					sw.WriteLine("-------------------------------------------------------------------------")
					sw.Write(template)
					sw.WriteLine("")
					sw.WriteLine("-------------------------------------------------------------------------")
					sw.WriteLine("Expected:")
					sw.WriteLine("-------------------------------------------------------------------------")
					sw.Write(expected)
					sw.WriteLine("")
					sw.WriteLine("-------------------------------------------------------------------------")
					sw.WriteLine("Actual:")
					sw.WriteLine("-------------------------------------------------------------------------")
					sw.Write(actual)
					sw.WriteLine("")
					sw.WriteLine("-------------------------------------------------------------------------")
					sw.Close()
					Process.Start(tempFileSpec)
				end
				Assert.IsTrue(expected==actual,StringTools.GetResultMessage(expected,actual))
			end
			else
			begin
				Assert.Fail(string.Format("Parse of template code failed. Parser error was {0}",errorText))
			end
		endmethod
	
		private method runTestExpectFail, void
			required in expectedError, string
		proc
			data actual, String
			data errorText, String
			if (!simulator.ExpandCode(template,actual,errorText)) then
				Assert.AreEqual(errorText,expectedError)
			else
				Assert.Fail(string.Format("Parse of template code failed. Parser error was {0}",errorText))
		endmethod

	endclass
	
endnamespace
