;;*****************************************************************************
;;
;; Title:       TestEnv.dbl
;;
;; Type:        Unit testing class
;;
;; Description: Initializes an environment for CodeGen unit testing and exposes
;;				useful "stuff".
;;
;; Date:        30th November 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.VisualStudio.TestTools.UnitTesting
import System
import System.IO

namespace CodeGen.UnitTests

	{TestClass}
	public static class TestEnv
		
		private static repositoryInstance, @CodeGen.RepositoryAPI.Repository

		{AssemblyInitialize}
		public static method AssemblyInitialize, void
			required in context, @TestContext
			endparams
		proc
			;;Get the value of the CODEGEN_DEVROOT environment variable
			data devRoot, String, Environment.GetEnvironmentVariable("CODEGEN_DEVROOT")
			
			;;Make sure we have it
			if (String.IsNullOrEmpty(devRoot))
				throw new Exception("Environment variable CODEGEN_DEVROOT was not found!")

			;;Make sure the location exists
			if (!Directory.Exists(devRoot))
				throw new Exception("The folder identified by CODEGEN_DEVROOT does not exist!")

			;;Make sure that the repository files exist
			data mainFile, String, String.Format("{0}UnitTests\TestRepository\rpsmain.ism",devRoot)
			data textFile, String, String.Format("{0}UnitTests\TestRepository\rpstext.ism",devRoot)
			if ((!File.Exists(mainFile))||(!File.Exists(textFile)))
				throw new Exception("The unit testing repository was not found!")
				
			;;Set the repository environment variables
			data sts, int
			setlog("RPSMFIL",mainFile,sts)
			setlog("RPSTFIL",textFile,sts)
			
			;;Configure the CodeGen environment
			CodeGen.Engine.Env.SuppressLogging = true
			CodeGen.Engine.Env.GroupPrefix = true
			CodeGen.Engine.Env.GroupMemberPrefix = true

			;;Create an instance of the Repository
			repositoryInstance = new CodeGen.RepositoryAPI.Repository()
			
			;;Load the UNIT_TEST repository structure
			mStructure = new CodeGen.RepositoryAPI.RpsStructure("UNIT_TEST")

			;;Run the structure through CheckStructure() because it sets up
			;;some stuff that is needed in order to successfully process some tokens
			if (!CodeGen.Engine.CheckStructure(mStructure))
				throw new Exception("CodeGen.Engine.CheckStructure failed to validate structure UNIT_TEST")
			
			;;Get handles on the files we'll be using during the tests
			mFirstFile		  = mStructure.Files[0]
			
			;;Get handles on the keys and segments we'll be using during the tests
			mKeyZero		  = mStructure.Keys[0]
			mKeyZeroSegOne	  = mKeyZero.Segments[0]
			mKeyZeroSegOneFld = mStructure.Fields[mKeyZeroSegOne.Field]
			
			;;Get handles on the fields we'll use during the tests
			mField001	= mStructure.Fields[0]	;A1
			mField002	= mStructure.Fields[1]	;D1 enumerated with selections
			mField003	= mStructure.Fields[2]	;D2.1 with max min range
			mField004	= mStructure.Fields[3]	;D8 date
			mField005	= mStructure.Fields[4]	;D5.2 with a display format
			mField006	= mStructure.Fields[5]	;A1 with a selection window
			mField007	= mStructure.Fields[6]	;A10 based on a tamplate TEMPLATE_ONE
			mField008	= mStructure.Fields[7]	;I1
			mField009	= mStructure.Fields[8]	;I2
			mField010	= mStructure.Fields[9]	;I4
			mField011	= mStructure.Fields[10]	;I8
			mField012	= mStructure.Fields[12]	;[2]A1			last element
			mField013	= mStructure.Fields[16]	;[2,2]A1		last element
			mField014	= mStructure.Fields[24]	;[2,2,2]A1		last element
			mField015	= mStructure.Fields[40]	;[2,2,2,2]A1	last element
			mField016	= mStructure.Fields[42]	;A1				Second field of a group
			mField017	= mStructure.Fields[46]	;A1				Fourth field of an arrayed group

			;;Get handles on the enumerations we'll use during the tests
			mEnumerations = repositoryInstance.Enumerations
			
			;;Configure CodeGen for repository processing
			CodeGen.Engine.Env.CurrentStructure = mStructure
			CodeGen.Engine.Env.RpsInUse = true

			;;Load up the custom tokens that we'll use during our tests
			CodeGen.Engine.Env.CustomTokens.Add(new CustomToken1())
			CodeGen.Engine.Env.CustomFieldTokens.Add(new CustomFieldToken1())
			CodeGen.Engine.Env.CustomSelectionTokens.Add(new CustomSelectionToken1())
			CodeGen.Engine.Env.CustomKeyTokens.Add(new CustomKeyToken1())
			CodeGen.Engine.Env.CustomSegmentTokens.Add(new CustomSegmentToken1())
			CodeGen.Engine.Env.CustomRelationTokens.Add(new CustomRelationToken1())
			CodeGen.Engine.Env.CustomEnumTokens.Add(new CustomEnumToken1())
			CodeGen.Engine.Env.CustomEnumMemberTokens.Add(new CustomEnumMemberToken1())
			CodeGen.Engine.Env.CustomFileTokens.Add(new CustomFileToken1())
			CodeGen.Engine.Env.CustomButtonTokens.Add(new CustomButtonToken1())
			CodeGen.Engine.Env.SuppressLogging = true

		endmethod

		{AssemblyCleanup}
		public static method AssemblyCleanup, void
			endparams
		proc
			repositoryInstance.Dispose()
			clear repositoryInstance
		endmethod

		private static mStructure		,@CodeGen.RepositoryAPI.RpsStructure
		private static mFirstFile		,@CodeGen.RepositoryAPI.RpsFile
		private static mKeyZero			,@CodeGen.RepositoryAPI.RpsKey
		private static mKeyZeroSegOne	,@CodeGen.RepositoryAPI.RpsKeySegment
		private static mKeyZeroSegOneFld,@CodeGen.RepositoryAPI.RpsField
		
		private static mField001		,@CodeGen.RepositoryAPI.RpsField
		private static mField002		,@CodeGen.RepositoryAPI.RpsField
		private static mField003		,@CodeGen.RepositoryAPI.RpsField
		private static mField004		,@CodeGen.RepositoryAPI.RpsField
		private static mField005		,@CodeGen.RepositoryAPI.RpsField
		private static mField006		,@CodeGen.RepositoryAPI.RpsField
		private static mField007		,@CodeGen.RepositoryAPI.RpsField
		private static mField008		,@CodeGen.RepositoryAPI.RpsField
		private static mField009		,@CodeGen.RepositoryAPI.RpsField
		private static mField010		,@CodeGen.RepositoryAPI.RpsField
		private static mField011		,@CodeGen.RepositoryAPI.RpsField
		private static mField012		,@CodeGen.RepositoryAPI.RpsField
		private static mField013		,@CodeGen.RepositoryAPI.RpsField
		private static mField014		,@CodeGen.RepositoryAPI.RpsField
		private static mField015		,@CodeGen.RepositoryAPI.RpsField
		private static mField016		,@CodeGen.RepositoryAPI.RpsField
		private static mField017		,@CodeGen.RepositoryAPI.RpsField
		
		private static mEnumerations	,@CodeGen.RepositoryAPI.RpsEnumCollection
		
		;;; <summary>
		;;; Expose the UNIT_TEST repository structure to test classes
		;;; </summary>
		public static property Structure, @CodeGen.RepositoryAPI.RpsStructure
			method get
			proc
				mreturn mStructure
			endmethod
		endproperty

		;;; <summary>
		;;; Expose the first file assigned to the UNIT_TEST repository structure
		;;; </summary>
		public static property FirstFile, @CodeGen.RepositoryAPI.RpsFile
			method get
			proc
				mreturn mFirstFile
			endmethod
		endproperty
		
		;;; <summary>
		;;; Expose the first key of the UNIT_TEST repository structure
		;;; </summary>
		public static property KeyZero, @CodeGen.RepositoryAPI.RpsKey
			method get
			proc
				mreturn mKeyZero
			endmethod
		endproperty
		
		;;; <summary>
		;;; Expose the first segment of the first key of the UNIT_TEST repository structure
		;;; </summary>
		public static property KeyZeroSegOne, @CodeGen.RepositoryAPI.RpsKeySegment
			method get
			proc
				mreturn mKeyZeroSegOne
			endmethod
		endproperty
		
		;;; <summary>
		;;; Expose the first key segment's associated field
		;;; </summary>
		public static property KeyZeroSegOneFld, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mKeyZeroSegOneFld
			endmethod
		endproperty
		
		;;; <summary>
		;;; A1
		;;; </summary>
		public static property Field001, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField001
			endmethod
		endproperty
		
		;;; <summary>
		;;; D1 enumerated with selections
		;;; </summary>
		public static property Field002, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField002
			endmethod
		endproperty
		
		;;; <summary>
		;;; D2.1 with max min range
		;;; </summary>
		public static property Field003, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField003
			endmethod
		endproperty

		;;; <summary>
		;;; D8 date
		;;; </summary>
		public static property Field004, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField004
			endmethod
		endproperty
		
		;;; <summary>
		;;; D5.2 with a display format
		;;; </summary>
		public static property Field005, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField005
			endmethod
		endproperty
		
		;;; <summary>
		;;; A1 with a selection window
		;;; </summary>
		public static property Field006, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField006
			endmethod
		endproperty
		
		;;; <summary>
		;;; A10 based on a tamplate TEMPLATE_ONE
		;;; </summary>
		public static property Field007, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField007
			endmethod
		endproperty

		;;; <summary>
		;;; I1
		;;; </summary>
		public static property Field008, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField008
			endmethod
		endproperty
		
		;;; <summary>
		;;; I2
		;;; </summary>
		public static property Field009, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField009
			endmethod
		endproperty
		
		;;; <summary>
		;;; I4
		;;; </summary>
		public static property Field010, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField010
			endmethod
		endproperty
		
		;;; <summary>
		;;; I8
		;;; </summary>
		public static property Field011, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField011
			endmethod
		endproperty

		;;; <summary>
		;;; [2]A1
		;;; </summary>
		public static property Field012, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField012
			endmethod
		endproperty
		
		;;; <summary>
		;;; [2,2]A1
		;;; </summary>
		public static property Field013, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField013
			endmethod
		endproperty
		
		;;; <summary>
		;;; [2,2,2]A1
		;;; </summary>
		public static property Field014, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField014
			endmethod
		endproperty
		
		;;; <summary>
		;;; [2,2,2,2]A1
		;;; </summary>
		public static property Field015, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField015
			endmethod
		endproperty

		;;; <summary>
		;;; A1, second field of an explicit group, with a group field prefix
		;;; </summary>
		public static property Field016, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField016
			endmethod
		endproperty
		
		;;; <summary>
		;;; A1, fourth field of an arrayed explicit group
		;;; </summary>
		public static property Field017, @CodeGen.RepositoryAPI.RpsField
			method get
			proc
				mreturn mField017
			endmethod
		endproperty

		;;; <summary>
		;;; Collection of enumerations in the repository
		;;; </summary>
		public static property Enumerations, @CodeGen.RepositoryAPI.RpsEnumCollection
			method get
			proc
				mreturn mEnumerations
			endmethod
			method set
			proc
				mEnumerations = value
			endmethod
		endproperty
		
	endclass

endnamespace

