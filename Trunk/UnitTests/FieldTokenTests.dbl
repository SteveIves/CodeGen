;;*****************************************************************************
;;
;; Title:       FieldTokenTests.dbl
;;
;; Type:        Unit test class
;;
;; Description: Unit tests for CodeGenEngine.ExpandFieldToken()
;;
;; Date:        27th November 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.VisualStudio.TestTools.UnitTesting
import System

namespace CodeGen.UnitTests

	{TestClass}
	public class FieldTokenTests

		private mMsg			,String

		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Altname_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_ALTNAME>","THIS_IS_FIELD_1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Altname_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<field_altname>","this_is_field_1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Altname_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_altname>","This_is_field_1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Altname_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_Altname>","This_Is_Field_1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Altname_05, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FieldAltname>","ThisIsField1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Altname_06, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<fieldAltname>","thisIsField1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_ArriveM_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_ARRIVEM>","FIELD001_ARRIVE"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_ArriveM_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<field_arrivem>","field001_arrive"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_ArriveM_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_Arrivem>","Field001_Arrive"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_ArriveM_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_arrivem>","Field001_arrive"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_ArriveM_05, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FieldArrivem>","Field001Arrive"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_ArriveM_06, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<fieldArrivem>","field001Arrive"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_BaseName_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_BASENAME>","FIELD001"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_BaseName_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<field_basename>","field001"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_BaseName_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_Basename>","Field001"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_BaseName_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_basename>","Field001"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_BaseName_05, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FieldBaseName>","Field001"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_BaseName_06, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<fieldBaseName>","field001"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_BreakMode_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_BREAK_MODE>","None"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_BreakMode_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field002,"<FIELD_BREAK_MODE>","Change"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_BreakMode_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field003,"<FIELD_BREAK_MODE>","Always"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_BreakMode_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field004,"<FIELD_BREAK_MODE>","Return"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_ChangeM_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_CHANGEM>","FIELD001_CHANGE"),mMsg)
		endmethod

		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_ChangeM_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<field_changem>","field001_change"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_ChangeM_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_Changem>","Field001_Change"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_ChangeM_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_changem>","Field001_change"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_ChangeM_05, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FieldChangem>","Field001Change"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_ChangeM_06, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<fieldChangem>","field001Change"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Col, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_COL>","20"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsDefault_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_CSDEFAULT>",'""'),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsDefault_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field002,"<FIELD_CSDEFAULT>","0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsDefault_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field004,"<FIELD_CSDEFAULT>","new DateTime()"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsType_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_CSTYPE>","string"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsType_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field002,"<FIELD_CSTYPE>","int"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsType_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field003,"<FIELD_CSTYPE>","decimal"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsType_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field004,"<FIELD_CSTYPE>","DateTime"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsType_05, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field008,"<FIELD_CSTYPE>","int"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsType_06, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field009,"<FIELD_CSTYPE>","int"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsType_07, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field010,"<FIELD_CSTYPE>","int"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsType_08, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field011,"<FIELD_CSTYPE>","long"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsConvert_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field003,"<FIELD_CSCONVERT>","decimal.TryParse"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsConvert_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field008,"<FIELD_CSCONVERT>","int.TryParse"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsConvert_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field009,"<FIELD_CSCONVERT>","int.TryParse"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsConvert_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field010,"<FIELD_CSCONVERT>","int.TryParse"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_CsConvert_05, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field011,"<FIELD_CSCONVERT>","long.TryParse"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Default, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_DEFAULT>","D"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Description, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_DESC>","Field one is an A1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Dim1Index_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_DIMENSION1_INDEX>","0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Dim1Index_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field015,"<FIELD_DIMENSION1_INDEX>","2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Dim2Index_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_DIMENSION2_INDEX>","0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Dim2Index_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field012,"<FIELD_DIMENSION2_INDEX>","0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Dim2Index_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field015,"<FIELD_DIMENSION2_INDEX>","2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Dim3Index_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_DIMENSION3_INDEX>","0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Dim3Index_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field012,"<FIELD_DIMENSION3_INDEX>","0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Dim3Index_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field015,"<FIELD_DIMENSION3_INDEX>","2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Dim4Index_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_DIMENSION4_INDEX>","0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Dim4Index_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field012,"<FIELD_DIMENSION4_INDEX>","0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Dim4Index_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field015,"<FIELD_DIMENSION4_INDEX>","2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_DrillM_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_DRILLM>","FIELD001_DRILL"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_DrillM_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<field_drillm>","field001_drill"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_DrillM_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_Drillm>","Field001_Drill"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_DrillM_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_drillm>","Field001_drill"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_DrillM_05, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FieldDrillm>","Field001Drill"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_DrillM_06, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<fieldDrillm>","field001Drill"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Element_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_ELEMENT>",""),mMsg)
		endmethod
		
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Element_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field012,"<FIELD_ELEMENT>","2"),mMsg)
		endmethod
		
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Element_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field013,"<FIELD_ELEMENT>","2,2"),mMsg)
		endmethod
		
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Element_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field014,"<FIELD_ELEMENT>","2,2,2"),mMsg)
		endmethod
		
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Element_05, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field015,"<FIELD_ELEMENT>","2,2,2,2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Element0_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_ELEMENT0>","0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Element0_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field012,"<FIELD_ELEMENT0>","2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Element0_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field013,"<FIELD_ELEMENT0>","2,2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Element0_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field014,"<FIELD_ELEMENT0>","2,2,2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Element0_05, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field015,"<FIELD_ELEMENT0>","2,2,2,2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_EnumLength, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field002,"<FIELD_ENUMLENGTH>","7"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_EnumWidth, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field002,"<FIELD_ENUMWIDTH>",string(TestEnv.Field002.EnumeratedDisplayLength * CodeGen.Engine.Env.CharacterWidth)),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_FormatName, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field005,"<FIELD_FORMATNAME>","DOLLARS"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Heading, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_HEADING>","Field one report heading"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_HelpId, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_HELPID>","FIELD001_HELP_ID"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_HyperM_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_HYPERM>","FIELD001_HYPER"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_HyperM_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<field_hyperm>","field001_hyper"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_HyperM_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_Hyperm>","Field001_Hyper"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_HyperM_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_hyperm>","Field001_hyper"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_HyperM_05, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FieldHyperm>","Field001Hyper"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_HyperM_06, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<fieldHyperm>","field001Hyper"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_InfoLine, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_INFOLINE>","This is field one"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_LongDesc, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_LDESC>","Field one long description.@MAPF=CONV;@UNMAPF=UNCONV;@MAP=OTHER_FIELD;"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_LeaveM, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_LEAVEM>","FIELD001_LEAVE"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_LeaveM_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_LEAVEM>","FIELD001_LEAVE"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_LeaveM_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<field_leavem>","field001_leave"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_LeaveM_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_Leavem>","Field001_Leave"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_LeaveM_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<Field_leavem>","Field001_leave"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_LeaveM_05, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FieldLeavem>","Field001Leave"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_LeaveM_06, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<fieldLeavem>","field001Leave"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_MaxValue01, void
			endparams
		proc
			;;This token is not supported for alpha fields, so the token should not get replaced.
			;;In CodeGen this would cause an error to be reported.
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_MAXVALUE>","<FIELD_MAXVALUE>"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_MaxValue02, void
			endparams
		proc
			;;This field is a D1 with an enumerated selection list, therefor the
			;;min value is based on the enumerated value of the last selection
			Assert.IsTrue(doTest(TestEnv.Field002,"<FIELD_MAXVALUE>","3"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_MaxValue03, void
			endparams
		proc
			;;This field is a D2.1 with a numeric range of 2 to 8, so the min value
			;;should be based on the numeric range.
			Assert.IsTrue(doTest(TestEnv.Field003,"<FIELD_MAXVALUE>","8.0000000000"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_MaxValue04, void
			endparams
		proc
			;;This field is a D5.2 with negatives allowed
			Assert.IsTrue(doTest(TestEnv.Field005,"<FIELD_MAXVALUE>","999.99"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_MaxValue05, void
			endparams
		proc
			;;This field is an I4 with negatives allowed
			Assert.IsTrue(doTest(TestEnv.Field010,"<FIELD_MAXVALUE>","2147483647"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_MinValue01, void
			endparams
		proc
			;;This token is not supported for alpha fields, so the token should not get replaced.
			;;In CodeGen this would cause an error to be reported.
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_MINVALUE>","<FIELD_MINVALUE>"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_MinValue02, void
			endparams
		proc
			;;This field is a D1 with an enumerated selection list, therefor the
			;;min value is based on the enumerated value of the first selection
			Assert.IsTrue(doTest(TestEnv.Field002,"<FIELD_MINVALUE>","1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_MinValue03, void
			endparams
		proc
			;;This field is a D2.1 with a numeric range of 2 to 8, so the min value
			;;should be based on the numeric range.
			Assert.IsTrue(doTest(TestEnv.Field003,"<FIELD_MINVALUE>","2.0000000000"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_MinValue04, void
			endparams
		proc
			;;This field is a D5.2 with negatives allowed
			Assert.IsTrue(doTest(TestEnv.Field005,"<FIELD_MINVALUE>","-999.99"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_MinValue05, void
			endparams
		proc
			;;This field is an I4 with negatives allowed
			Assert.IsTrue(doTest(TestEnv.Field010,"<FIELD_MINVALUE>","-2147483648"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Name_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_NAME>","FIELD001"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Name_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field012,"<FIELD_NAME>","FIELD012[2]"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Name_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field013,"<FIELD_NAME>","FIELD013[2,2]"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Name_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field014,"<FIELD_NAME>","FIELD014[2,2,2]"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Name_05, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field015,"<FIELD_NAME>","FIELD015[2,2,2,2]"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Name_06, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field016,"<FIELD_NAME>","FIELD016.F16_GF2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Name_07, void
			endparams
		proc
			;;Test "Don't prefix group fields with group name"
			CodeGen.Engine.Env.GroupPrefix = false

			data tmpStr, @CodeGen.RepositoryAPI.RpsStructure
			tmpStr = new CodeGen.RepositoryAPI.RpsStructure("UNIT_TEST")
			if (!CodeGen.Engine.CheckStructure(tmpStr))
				throw new Exception("CodeGen.Engine.CheckStructure failed to validate structure UNIT_TEST")

			Assert.IsTrue(doTest(tmpStr.Fields[42],"<FIELD_NAME>","F16_GF2"),mMsg)

			CodeGen.Engine.Env.GroupPrefix = true
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Name_08, void
			endparams
		proc
			;;Test "Don't use repository group field prefix"
			CodeGen.Engine.Env.GroupPrefix = true
			CodeGen.Engine.Env.GroupMemberPrefix = false
			
			data tmpStr, @CodeGen.RepositoryAPI.RpsStructure
			tmpStr = new CodeGen.RepositoryAPI.RpsStructure("UNIT_TEST")
			if (!CodeGen.Engine.CheckStructure(tmpStr))
				throw new Exception("CodeGen.Engine.CheckStructure failed to validate structure UNIT_TEST")

			Assert.IsTrue(doTest(tmpStr.Fields[42],"<FIELD_NAME>","FIELD016.GF2"),mMsg)

			CodeGen.Engine.Env.GroupMemberPrefix = true
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Name_09, void
			endparams
		proc
			;;Test "no group field or member prefix"
			CodeGen.Engine.Env.GroupPrefix = false
			CodeGen.Engine.Env.GroupMemberPrefix = false

			data tmpStr, @CodeGen.RepositoryAPI.RpsStructure
			tmpStr = new CodeGen.RepositoryAPI.RpsStructure("UNIT_TEST")
			if (!CodeGen.Engine.CheckStructure(tmpStr))
				throw new Exception("CodeGen.Engine.CheckStructure failed to validate structure UNIT_TEST")
				
			Assert.IsTrue(doTest(tmpStr.Fields[42],"<FIELD_NAME>","GF2"),mMsg)

			CodeGen.Engine.Env.GroupPrefix = true
			CodeGen.Engine.Env.GroupMemberPrefix = true
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Name_10, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field017,"<FIELD_NAME>","FIELD017[2].GF2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Name_11, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field017,"<field_name>","field017[2].gf2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Name_12, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field017,"<Field_name>","Field017[2].Gf2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_NoEchoChar, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_NOECHO_CHAR>","~"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_OcDefault_01, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_OCDEFAULT>",'@""'),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_OcDefault_02, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field002,"<FIELD_OCDEFAULT>","0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_OcDefault_03, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field003,"<FIELD_OCDEFAULT>","0.0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_OcDefault_04, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field004,"<FIELD_OCDEFAULT>","[NSDate new]"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_OcType, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_OCTYPE>","NSString"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_OriginalName, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_ORIGINAL_NAME>","FIELD001"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Path, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_PATH>","UNIT_TEST.FIELD001"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_PathConv, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_PATH_CONV>","%UNCONV(UNIT_TEST.FIELD001)"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_PixelCol, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_PIXEL_COL>",string((TestEnv.Field001.FieldColumn*CodeGen.Engine.Env.CharacterWidth)-(CodeGen.Engine.Env.CharacterWidth-1))),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_PixelRow, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_PIXEL_ROW>",string(((TestEnv.Field001.FieldRow+TestEnv.Field001.ArrayDimension[1]-1)*CodeGen.Engine.Env.CharacterHeight)-(CodeGen.Engine.Env.CharacterHeight-1))),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_PixelWidth, void
			endparams
		proc
			;TODO: Also need to test this with a field with a selection list
			;TODO: Also need to test this with a field with an enumerated numeric field
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_PIXEL_WIDTH>","12"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_PixelWidthSelections, void
			endparams
		proc
			data expectedWidth, int, TestEnv.Field002.SelectionListMaxLength * CodeGen.Engine.Env.CharacterWidth
			Assert.IsTrue(doTest(TestEnv.Field002,"<FIELD_PIXEL_WIDTH>",expectedWidth.ToString()),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_DrillPixelCol, void
			endparams
		proc
			;TODO: Also need to test this with a field with a selection list
			;TODO: Also need to test this with a field with an enumerated numeric field
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_DRILL_PIXEL_COL>","240"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_InputLength, void
			endparams
		proc
			;TODO: Lots of different tests needed here
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_INPUT_LENGTH>","1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_OdbcName, void
			endparams
		proc
			;TODO: Need to test this with array fields
			;TODO: Need to test this with group fields
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_ODBCNAME>","FIELD001"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Position, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_POSITION>","1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Position0, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_POSITION_ZERO>","0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Precision, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field003,"<FIELD_PRECISION>","1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Precision2, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field003,"<FIELD_PRECISION2>",".1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Prompt, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_PROMPT>","Field one"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_RangeMax, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field003,"<FIELD_RANGE_MAX>","8.0000000000"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_RangeMin, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field003,"<FIELD_RANGE_MIN>","2.0000000000"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Regex, void
			endparams
		proc
			;;TODO: Need LOTS more tests for this one with various field types
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_REGEX>","^.{1,1}$"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Row, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_ROW>","5"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Selections, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field002,"<FIELD_SELECTIONS>",'"Option1","Option2","Option3"'),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Selections1, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field002,"<FIELD_SELECTIONS1>",'"Option1|Option2|Option3"'),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_SelLength, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field002,"<FIELD_SELLENGTH>","7"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_SelWnd, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field006,"<FIELD_SELWND>","OPTIONS"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Size, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_SIZE>","1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Spec, void
			endparams
		proc
			;TODO: Need tests for various other field types
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_SPEC>","A1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_SqlName, void
			endparams
		proc
			;TODO: Need to test with array and group fields
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_SQLNAME>","FIELD001"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_SqlType, void
			endparams
		proc
			;TODO: Need to test with fields of other data types
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_SQLTYPE>","VARCHAR(1)"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Template, void
			endparams
		proc
			;TODO: Need to test with a field based on a template
			Assert.IsTrue(doTest(TestEnv.Field007,"<FIELD_TEMPLATE>","TEMPLATE01"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_TkScript, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_TKSCRIPT>",".field FIELD001, pos(5,10), fpos(5,20)"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Type, void
			endparams
		proc
			;TODO: Need to test with other field types
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_TYPE>","A"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_TypeName, void
			endparams
		proc
			;TODO: Need to test with other field types
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_TYPE_NAME>","ALPHA"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_UserText, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_UTEXT>","Field one user text"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_VbDefault, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_VBDEFAULT>",'""'),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_VbType, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD_VBTYPE>","String"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Number, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD#>","1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_Number0, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD#_ZERO>","0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_NumberLogical, void
			endparams
		proc
			;TODO: Test with array fields and fields after arrays / groups
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD#LOGICAL>","1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_NumberLogicalZero, void
			endparams
		proc
			;TODO: Test with array fields and fields after arrays / groups
			Assert.IsTrue(doTest(TestEnv.Field001,"<FIELD#LOGICAL_ZERO>","0"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_MappedField, void
			endparams
		proc
			;TODO: Also test with a field without a mapping
			Assert.IsTrue(doTest(TestEnv.Field001,"<MAPPED_FIELD>","OTHER_FIELD"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_MappedPath, void
			endparams
		proc
			;TODO: Also test with a field without a mapping
			Assert.IsTrue(doTest(TestEnv.Field001,"<MAPPED_PATH>","OTHER_STRUCTURE.OTHER_FIELD"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_MappedPathConv, void
			endparams
		proc
			;TODO: Also test with a field without a mapping
			Assert.IsTrue(doTest(TestEnv.Field001,"<MAPPED_PATH_CONV>","%CONV(OTHER_STRUCTURE.OTHER_FIELD)"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_PromptCol, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<PROMPT_COL>","10"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_PromptPixelCol, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<PROMPT_PIXEL_COL>","109"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_PromptPixelRow, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<PROMPT_PIXEL_ROW>","101"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_PromptPixelWidth, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<PROMPT_PIXEL_WIDTH>","108"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Token Tests")}
		public method FieldToken_PromptRow, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.Field001,"<PROMPT_ROW>","5"),mMsg)
		endmethod
		
.region "Support methods"

		private method doTest, Boolean
			required in fld			,@CodeGen.RepositoryAPI.RpsField
			required in inBuffer	,String
			required in expBuffer	,String
			endparams
		proc
			data ok				,Boolean
			data mainBuffer		,a32768	,inBuffer
			data expectedResult	,a32768	,expBuffer
			data tokenStart		,int	,instr(1,mainBuffer,"<") 
			data tokenEnd		,int	,instr(tokenStart,mainBuffer,">")
			data errStatus		,boolean,false
			
			mMsg = "PROCESSING: " + atrim(mainBuffer) + " for field " + fld.Name + " EXPECTED: " + atrim(expectedResult)

			if (ok=CodeGen.Engine.ExpandFieldToken(TestEnv.Structure,fld,tokenStart,tokenEnd,false,mainBuffer,errStatus))
			begin
				if (instr(1,mainBuffer,"~~~ REMOVE THIS RECORD ~~~"))
					mainBuffer = mainBuffer - "~~~ REMOVE THIS RECORD ~~~"
			end

			;;If token replacement failed it's probably because of an invalid token, or the
			;;use of a token that isn't supported for this type of field. In this case the
			;;token will still be in the buffer. If that's what we expected then we're OK.
			ok = (mainBuffer.eqs.expectedResult)

			mMsg = mMsg + " ACTUAL: " + atrim(mainBuffer)

			mreturn ok

		endmethod

.endregion

	endclass

endnamespace

