import System
import Microsoft.VisualStudio.TestTools.UnitTesting
import CodeGen.Engine
import System.Collections.Generic

.array 0

namespace UnitTests
	
	{TestClass}
	public class TokenizerTests
		
		private tab,  String, %char(9)
		private crlf, String, %char(13)+%char(10)

		private method tokenizeExpansionToken, boolean
			required in tknName, String
			required in tknType, TokenType
			endparams
		proc
			data tokens, @List<Token>, new Tokenizer().Tokenize(string.Format("<{0}>",tknName))
			mreturn (tokens[0].TypeOfToken == tknType)
		endmethod
		
		private method tokenizeExpression, boolean
			required in expression, String
			required in validity, TokenValidity
			endparams
		proc
			data tokens, @List<Token>, new Tokenizer().Tokenize(string.Format("<IF {0}>",expression))
			data testPassed, boolean, (tokens.Count == 2)
			&	&& (tokens[0].TypeOfToken == TokenType.Control)
			&	&& (tokens[1].TypeOfToken == TokenType.Expression)
			&	&& (tokens[1].Value == expression)
			if (testPassed)
			begin
				data validityList, @List<TokenValidity>, (@List<TokenValidity>)tokens[0].Bucket
				testPassed = validityList.Contains(TokenValidity.Anywhere)
			end
			mreturn testPassed
		endmethod
		
		.region "Generic Tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericAuthor, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("AUTHOR",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericCodeGenVersion, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("CODEGEN_VERSION",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericCompany, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COMPANY",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericDate, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("DATE",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericDate1, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("DATE1",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericDay, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("DAY",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericFieldPrefix, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PREFIX",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericGuid1, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("GUID1",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericGuid2, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("GUID2",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericGuid3, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("GUID3",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericMonth, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MONTH",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericMonthName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MONTHNAME",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericMonthShortName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MONTHSHORTNAME",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericNamespace, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("NAMESPACE",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericTemplate, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TEMPLATE",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericTime, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TIME",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericWeekday, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("WEEKDAY",TokenType.Generic))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Tokens")}
		public method GenericYear, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("YEAR",TokenType.Generic))
		endmethod
		
		.endregion
		
		.region "Structure Tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureDataFieldsList, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("DATA_FIELDS_LIST",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureDisplayField, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("DISPLAY_FIELD",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFileAddressing, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_ADDRESSING",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFileChangeTracking, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_CHANGE_TRACKING",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFileCompression, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_COMPRESSION",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFileDensity, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_DENSITY",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFileDesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_DESC",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFileName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_NAME",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFileNameNoExt, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_NAME_NOEXT",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFilePageSize, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_PAGESIZE",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFileRecType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_RECTYPE",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFileStaticRfa, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_STATIC_RFA",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFileStoredGrfa, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_STORED_GRFA",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFileType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_TYPE",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFileUtext, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FILE_UTEXT",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureMappedFile, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MAPPED_FILE",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureMappedStructure, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MAPPED_STRUCTURE",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructurePrimaryKeyField, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("PRIMARY_KEY_FIELD",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureChildren, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_CHILDREN",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureDesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_DESC",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureFields, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_FIELDS",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureKeys, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_KEYS",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureLdesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_LDESC",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_NAME",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureNoAlias, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_NOALIAS",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureSize, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_SIZE",TokenType.StructureInfo))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Tokens")}
		public method StructureUtext, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("STRUCTURE_UTEXT",TokenType.StructureInfo))
		endmethod
		
		.endregion
		
		.region "Field loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldAltName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ALTNAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldArriveMethod, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ARRIVEM",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldBaseName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_BASENAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldBreakMode, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_BREAK_MODE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method Field, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_CHANGEM",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldColumn, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_COL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldCsDefault, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_CSDEFAULT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldCsType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_CSTYPE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldCsConvert, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_CSCONVERT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldDefault, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DEFAULT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldDesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DESC",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldDimension1Index, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DIMENSION1_INDEX",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldDimension2Index, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DIMENSION2_INDEX",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldDimension3Index, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DIMENSION3_INDEX",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldDimension4Index, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DIMENSION4_INDEX",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldDrillMethod, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DRILLM",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldElement, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ELEMENT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldElement0, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ELEMENT0",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldEnumLength, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ENUMLENGTH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldEnumWidth, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ENUMWIDTH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldFormatName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_FORMATNAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldHeading, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_HEADING",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldHelpId, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_HELPID",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldHyperlinkMethod, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_HYPERM",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldInfoLine, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_INFOLINE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldLongDesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_LDESC",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldLEaveMethod, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_LEAVEM",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldMaxValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_MAXVALUE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldMinValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_MINVALUE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_NAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldNetName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_NETNAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldNoEchoChar, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_NOECHO_CHAR",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldOcDefault, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_OCDEFAULT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldOcType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_OCTYPE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldOriginalName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ORIGINAL_NAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldPath, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PATH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldPathConv, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PATH_CONV",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldPixelCol, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PIXEL_COL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldPixelRow, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PIXEL_ROW",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldPixelWidth, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PIXEL_WIDTH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldDrillPixelCol, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_DRILL_PIXEL_COL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldInputLength, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_INPUT_LENGTH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldOdbcName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ODBCNAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldPosition, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_POSITION",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldPositionZero, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_POSITION_ZERO",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldPrecision, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PRECISION",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldPrecision2, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PRECISION2",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldPrompt, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_PROMPT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldRangeMax, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_RANGE_MAX",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldRangeMin, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_RANGE_MIN",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldRegEx, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_REGEX",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldRow, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_ROW",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldSelections, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SELECTIONS",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldSelections1, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SELECTIONS1",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldSelLength, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SELLENGTH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldSelWnd, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SELWND",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldSelWndOriginal, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SELWND_ORIGINAL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldSize, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SIZE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldSnType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SNTYPE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldSnDefault, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SNDEFAULT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldSpec, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SPEC",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldSqlName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SQLNAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldSqlType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_SQLTYPE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldTemplate, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_TEMPLATE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldTkScript, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_TKSCRIPT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_TYPE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldTypeName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_TYPE_NAME",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldUserText, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_UTEXT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldVbDefault, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_VBDEFAULT",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldVbType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD_VBTYPE",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldNumber, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD#",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldNumberZero, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD#_ZERO",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldNumberLogical, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD#LOGICAL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method FieldNumberLogicalZero, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FIELD#LOGICAL_ZERO",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method MappedField, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MAPPED_FIELD",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method MappedPath, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MAPPED_PATH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method MappedPathConv, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("MAPPED_PATH_CONV",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method PromptCol, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("PROMPT_COL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method PromptPixelCol, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("PROMPT_PIXEL_COL",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method PromptPizelRow, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("PROMPT_PIXEL_ROW",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method PromptPixelWidth, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("PROMPT_PIXEL_WIDTH",TokenType.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Tokens")}
		public method PromptRow, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("PROMPT_ROW",TokenType.FieldLoop))
		endmethod
		
		.endregion
		
		.region "Field selection loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Field Selection Loop Tokens")}
		public method FieldSelectionCount, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SELECTION_COUNT",TokenType.FieldSelectionLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Selection Loop Tokens")}
		public method FieldSelectionNumber, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SELECTION_NUMBER",TokenType.FieldSelectionLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Selection Loop Tokens")}
		public method FieldSelectionText, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SELECTION_TEXT",TokenType.FieldSelectionLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Selection Loop Tokens")}
		public method FieldSelectionValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SELECTION_VALUE",TokenType.FieldSelectionLoop))
		endmethod
		
		.endregion
		
		.region "Key loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Tokens")}
		public method KeyLoopKeyChanges, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_CHANGES",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Tokens")}
		public method KeyLoopKeyDensity, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_DENSITY",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Tokens")}
		public method KeyLoopKeyDescription, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_DESCRIPTION",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Tokens")}
		public method KeyLoopKeyDuplicates, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_DUPLICATES",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Tokens")}
		public method KeyLoopKeyDuplicatesAt, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_DUPLICATES_AT",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Tokens")}
		public method KeyLoopKeyLength, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_LENGTH",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Tokens")}
		public method KeyLoopKeyName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_NAME",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Tokens")}
		public method KeyLoopKeyNullType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_NULLTYPE",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Tokens")}
		public method KeyLoopKeyNullValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_NULLVALUE",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Tokens")}
		public method KeyLoopKeyNumber, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_NUMBER",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Tokens")}
		public method KeyLoopKeyOrder, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_ORDER",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Tokens")}
		public method KeyLoopKeySegments, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_SEGMENTS",TokenType.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Tokens")}
		public method KeyLoopKeyUnique, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("KEY_UNIQUE",TokenType.KeyLoop))
		endmethod
		
		.endregion
		
		.region "Key segment loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentCsType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_CSTYPE",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentDesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_DESC",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentKind, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_KIND",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentLength, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_LENGTH",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentLitVal, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_LITVAL",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentMappedName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_MAPPEDNAME",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_NAME",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentNumber, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_NUMBER",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentOrder, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_ORDER",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentPosition, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_POSITION",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentSequence, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_SEQUENCE",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentSnType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_SNTYPE",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentSpec, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_SPEC",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentStructure, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_STRUCTURE",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_TYPE",TokenType.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Tokens")}
		public method KeySegmentLoopSegmentVbType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("SEGMENT_VBTYPE",TokenType.KeySegmentLoop))
		endmethod
		
		.endregion
		
		.region "Enum loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Loop Tokens")}
		public method EnumLoopCount, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_COUNT",TokenType.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Loop Tokens")}
		public method EnumLoopDescription, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_DESCRIPTION",TokenType.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Loop Tokens")}
		public method EnumLoopLongDescription, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_LONG_DESCRIPTION",TokenType.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Loop Tokens")}
		public method EnumLoopMenberCount, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_MEMBER_COUNT",TokenType.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Loop Tokens")}
		public method EnumLoopName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_NAME",TokenType.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Loop Tokens")}
		public method EnumLoopNumber, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_NUMBER",TokenType.EnumLoop))
		endmethod
		
		.endregion
		
		.region "Enum member loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Member Loop Tokens")}
		public method EnumMemberLoopExplicitValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_MEMBER_EXPLICIT_VALUE",TokenType.EnumMemberLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Member Loop Tokens")}
		public method EnumMemberLoopImplicitValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_MEMBER_IMPLICIT_VALUE",TokenType.EnumMemberLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Member Loop Tokens")}
		public method EnumMemberLoopName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("ENUM_MEMBER_NAME",TokenType.EnumMemberLoop))
		endmethod
		
		.endregion
		
		.region "Relation loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Relation Loop Tokens")}
		public method RelationLoopFromKey, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("RELATION_FROMKEY",TokenType.RelationLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Relation Loop Tokens")}
		public method RelationLoopName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("RELATION_NAME",TokenType.RelationLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Relation Loop Tokens")}
		public method RelationLoopNumber, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("RELATION_NUMBER",TokenType.RelationLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Relation Loop Tokens")}
		public method RelationLoopToKey, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("RELATION_TOKEY",TokenType.RelationLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Relation Loop Tokens")}
		public method RelationLoopToStructure, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("RELATION_TOSTRUCTURE",TokenType.RelationLoop))
		endmethod
		
		.endregion
		
		.region "Tag loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Tokens")}
		public method TagLoopConnectorC, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_CONNECTOR_C",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Tokens")}
		public method TagLoopConnectorDbl, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_CONNECTOR_DBL",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Tokens")}
		public method TagLoopFieldAltName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_FIELD_ALTNAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Tokens")}
		public method TagLoopFieldBaseName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_FIELD_BASENAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Tokens")}
		public method TagLoopFieldName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_FIELD_NAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Tokens")}
		public method TagLoopFieldOdbcName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_FIELD_ODBCNAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Tokens")}
		public method TagLoopFieldOriginalName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_FIELD_ORIGINALNAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Tokens")}
		public method TagLoopFieldSqlName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_FIELD_SQLNAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Tokens")}
		public method TagLoopOperatorC, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_OPERATOR_C",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Tokens")}
		public method TagLoopOperatorDbl, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_OPERATOR_DBL",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Tokens")}
		public method TagLoopSequence, void
		proc
		Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_SEQUENCE",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Tokens")}
		public method TagLoopTagName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_TAG_NAME",TokenType.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Tokens")}
		public method TagLoopTagValue, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("TAGLOOP_TAG_VALUE",TokenType.TagLoop))
		endmethod
		
		.endregion
		
		.region "File loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Tokens")}
		public method FileLoopAddressing, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_ADDRESSING",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Tokens")}
		public method FileLoopChangeTracking, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_CHANGE_TRACKING",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Tokens")}
		public method FileLoopCompression, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_COMPRESSION",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Tokens")}
		public method FileLoopDensity, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_DENSITY",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Tokens")}
		public method FileLoopDesc, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_DESC",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Tokens")}
		public method FileLoopName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_NAME",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Tokens")}
		public method FileLoopNameNoExt, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_NAME_NOEXT",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Tokens")}
		public method FileLoopPageSize, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_PAGESIZE",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Tokens")}
		public method FileLoopRecType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_RECTYPE",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Tokens")}
		public method FileLoopStaticRfa, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_STATIC_RFA",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Tokens")}
		public method FileLoopStoredGrfa, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_STORED_GRFA",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Tokens")}
		public method FileLoopType, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_TYPE",TokenType.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Tokens")}
		public method FileLoopUserText, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("FLOOP_UTEXT",TokenType.FileLoop))
		endmethod
		
		.endregion
		
		.region "Button loop tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Tokens")}
		public method ButtonLoopCaption, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_CAPTION",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Tokens")}
		public method ButtonLoopColPx, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_COLPX",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Tokens")}
		public method ButtonLoopElb, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_ELB",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Tokens")}
		public method ButtonLoopImage, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_IMAGE",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Tokens")}
		public method ButtonLoopMethod, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_METHOD",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Tokens")}
		public method ButtonLoopName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_NAME",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Tokens")}
		public method ButtonLoopNumber, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_NUMBER",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Tokens")}
		public method ButtonLoopQuickSelect, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_QUICKSELECT",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Tokens")}
		public method ButtonLoopRowPx, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_ROWPX",TokenType.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Tokens")}
		public method ButtonLoopWidthPx, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("BUTTON_WIDTHPX",TokenType.ButtonLoop))
		endmethod
		
		.endregion
		
		.region "Counter tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Counter Tokens")}
		public method Counter1Decrement, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_1_DECREMENT",TokenType.CounterInstruction))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Counter Tokens")}
		public method Counter1Increment, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_1_INCREMENT",TokenType.CounterInstruction))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Counter Tokens")}
		public method Counter1Reset, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_1_RESET",TokenType.CounterInstruction))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Counter Tokens")}
		public method Counter1Value, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_1_VALUE",TokenType.Counter))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Counter Tokens")}
		public method Counter2Decrement, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_2_DECREMENT",TokenType.CounterInstruction))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Counter Tokens")}
		public method Counter2Increment, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_2_INCREMENT",TokenType.CounterInstruction))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Counter Tokens")}
		public method Counter2Reset, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_2_RESET",TokenType.CounterInstruction))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Counter Tokens")}
		public method Counter2Value, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("COUNTER_2_VALUE",TokenType.Counter))
		endmethod
		
		.endregion
		
		.region "Window tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Window Tokens")}
		public method WindowHeight, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("WINDOW_HEIGHT",TokenType.Window))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Window Tokens")}
		public method WindowHeightPx, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("WINDOW_HEIGHTPX",TokenType.Window))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Window Tokens")}
		public method WindowName, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("WINDOW_NAME",TokenType.Window))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Window Tokens")}
		public method WindowWidth, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("WINDOW_WIDTH",TokenType.Window))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Window Tokens")}
		public method WindowWidthPx, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("WINDOW_WIDTHPX",TokenType.Window))
		endmethod
		
		.endregion
		
		.region "User-defined tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - User Defined Tokens")}
		public method UserToken1, void
		proc
			data taskset, @CodeGenTaskSet, new CodeGenTaskSet()
			taskset.Tasks.Add(new CodeGenTask())
			data context, @CodeGenContext, new CodeGenContext(taskset)
			context.UserTokens.Add(new UserToken("USER_DEFINED_TOKEN_1","Hello Tokenizer"))
			
			data tokens, @List<Token>, new Tokenizer(context).Tokenize("<USER_DEFINED_TOKEN_1>")
			Assert.IsTrue(tokens[0].TypeOfToken == TokenType.User)
		endmethod
		
		.endregion
		
		.region "Loop Utility Tokens"
		
		{TestMethod}
		{TestCategory("Tokenization - Loop Utility Tokens")}
		public method LoopUtilityComma, void
		proc
			Assert.IsTrue(tokenizeExpansionToken(",",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Loop Utility Tokens")}
		public method LoopUtilityPlus, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("+",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Loop Utility Tokens")}
		public method LoopUtilityColon, void
		proc
			Assert.IsTrue(tokenizeExpansionToken(":",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Loop Utility Tokens")}
		public method LoopUtilityCsAnd, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("&&",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Loop Utility Tokens")}
		public method LoopUtilityCsOr, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("||",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Loop Utility Tokens")}
		public method LoopUtilitySynergyAnd, void
		proc
			Assert.IsTrue(tokenizeExpansionToken(".AND.",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Loop Utility Tokens")}
		public method LoopUtilitySynergyOr, void
		proc
			Assert.IsTrue(tokenizeExpansionToken(".OR.",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Loop Utility Tokens")}
		public method LoopUtilityEnglishAnd, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("AND",TokenType.LoopUtility))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Loop Utility Tokens")}
		public method LoopUtilityEnglishOr, void
		proc
			Assert.IsTrue(tokenizeExpansionToken("OR",TokenType.LoopUtility))
		endmethod
		
		.endregion
		
		.region "Generic Expressions" 
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Expressions")}
		public method GenericExpressionCounter1, void
		proc
			Assert.IsTrue(tokenizeExpression("COUNTER_1",TokenValidity.Anywhere))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Expressions")}
		public method GenericExpressionCounter2, void
		proc
			Assert.IsTrue(tokenizeExpression("COUNTER_2",TokenValidity.Anywhere))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Expressions")}
		public method GenericExpressionNotCounter1, void
		proc
			Assert.IsTrue(tokenizeExpression("NOT_COUNTER_1",TokenValidity.Anywhere))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Generic Expressions")}
		public method GenericExpressionNotCounter2, void
		proc
			Assert.IsTrue(tokenizeExpression("NOT_COUNTER_2",TokenValidity.Anywhere))
		endmethod
		
		.endregion
		
		.region "Structure Expressions" 
		
		{TestMethod}
		{TestCategory("Tokenization - Structure Expressions")}
		public method StructureExpressionLongDesc, void
		proc
			Assert.IsTrue(tokenizeExpression("STRUCTURE_LDESC",TokenValidity.Anywhere))
		endmethod
		
		.endregion
		
		.region "All Loops Expressions"
		
		{TestMethod}
		{TestCategory("Tokenization - All Loops Expressions")}
		public method AllLoopsExpressionMore, void
		proc
			Assert.IsTrue(tokenizeExpression("MORE",TokenValidity.AnyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - All Loops Expressions")}
		public method AllLoopsExpressionNoMore, void
		proc
			Assert.IsTrue(tokenizeExpression("NOMORE",TokenValidity.AnyLoop))
		endmethod
		
		.endregion
		
		.region "Field Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionALLOW_LIST, void
		proc
			Assert.IsTrue(tokenizeExpression("ALLOW_LIST",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionALPHA, void
		proc
			Assert.IsTrue(tokenizeExpression("ALPHA",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionALTERNATE_NAME, void
		proc
			Assert.IsTrue(tokenizeExpression("ALTERNATE_NAME",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionARRAY, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionARRAY1, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY1",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionARRAY2, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY2",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionARRAY3, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY3",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionARRAY4, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY4",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionARRIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRIVE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionBINARY, void
		proc
			Assert.IsTrue(tokenizeExpression("BINARY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionBOLD, void
		proc
			Assert.IsTrue(tokenizeExpression("BOLD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("BOOLEAN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionBREAK, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionBREAK_ALWAYS, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK_ALWAYS",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionBREAK_CHANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK_CHANGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionBREAK_RETURN, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK_RETURN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionBZERO, void
		proc
			Assert.IsTrue(tokenizeExpression("BZERO",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionCHANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("CHANGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionCHECKBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("CHECKBOX",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionCOERCEBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("COERCEBOOLEAN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionCOMBOBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("COMBOBOX",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_JULIAN, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_JULIAN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_NOT_JULIAN, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_JULIAN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_NOT_NULLABLE, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_NULLABLE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_NOT_PERIOD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_PERIOD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_NOT_YMD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_YMD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_NOT_YYYYMMDD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_YYYYMMDD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_NULLABLE, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NULLABLE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_PERIOD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_PERIOD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_YMD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YMD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_YYJJJ, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYJJJ",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_YYMMDD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYMMDD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_YYPP, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYPP",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_YYYYJJJ, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYYYJJJ",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_YYYYMMDD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYYYMMDD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATE_YYYYPP, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYYYPP",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATEORTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("DATEORTIME",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDATETODAY, void
		proc
			Assert.IsTrue(tokenizeExpression("DATETODAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDECIMAL, void
		proc
			Assert.IsTrue(tokenizeExpression("DECIMAL",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDEFAULT, void
		proc
			Assert.IsTrue(tokenizeExpression("DEFAULT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("DESCRIPTION",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDISABLED, void
		proc
			Assert.IsTrue(tokenizeExpression("DISABLED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDISPLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("DISPLAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDISPLAY_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("DISPLAY_LENGTH",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionDRILL, void
		proc
			Assert.IsTrue(tokenizeExpression("DRILL",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionECHO, void
		proc
			Assert.IsTrue(tokenizeExpression("ECHO",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionEDITFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("EDITFORMAT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionENABLED, void
		proc
			Assert.IsTrue(tokenizeExpression("ENABLED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionENUM, void
		proc
			Assert.IsTrue(tokenizeExpression("ENUM",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionENUMERATED, void
		proc
			Assert.IsTrue(tokenizeExpression("ENUMERATED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionFIELD_POSITION, void
		proc
			Assert.IsTrue(tokenizeExpression("FIELD_POSITION",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("FORMAT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionGROUP_EXPAND, void
		proc
			Assert.IsTrue(tokenizeExpression("GROUP_EXPAND",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionGROUP_NO_EXPAND, void
		proc
			Assert.IsTrue(tokenizeExpression("GROUP_NO_EXPAND",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionHEADING, void
		proc
			Assert.IsTrue(tokenizeExpression("HEADING",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionHELPID, void
		proc
			Assert.IsTrue(tokenizeExpression("HELPID",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionHYPERLINK, void
		proc
			Assert.IsTrue(tokenizeExpression("HYPERLINK",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionI1, void
		proc
			Assert.IsTrue(tokenizeExpression("I1",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionI124, void
		proc
			Assert.IsTrue(tokenizeExpression("I124",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionI2, void
		proc
			Assert.IsTrue(tokenizeExpression("I2",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionI4, void
		proc
			Assert.IsTrue(tokenizeExpression("I4",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionI8, void
		proc
			Assert.IsTrue(tokenizeExpression("I8",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionINFOLINE, void
		proc
			Assert.IsTrue(tokenizeExpression("INFOLINE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionINPUT_CENTER, void
		proc
			Assert.IsTrue(tokenizeExpression("INPUT_CENTER",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionINPUT_LEFT, void
		proc
			Assert.IsTrue(tokenizeExpression("INPUT_LEFT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionINPUT_RIGHT, void
		proc
			Assert.IsTrue(tokenizeExpression("INPUT_RIGHT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionINTEGER, void
		proc
			Assert.IsTrue(tokenizeExpression("INTEGER",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionLANGUAGE, void
		proc
			Assert.IsTrue(tokenizeExpression("LANGUAGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionLAST, void
		proc
			Assert.IsTrue(tokenizeExpression("LAST",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionLEAVE, void
		proc
			Assert.IsTrue(tokenizeExpression("LEAVE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionLONGDESC, void
		proc
			Assert.IsTrue(tokenizeExpression("LONGDESC",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionMAPPED, void
		proc
			Assert.IsTrue(tokenizeExpression("MAPPED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionMAPPEDSTR, void
		proc
			Assert.IsTrue(tokenizeExpression("MAPPEDSTR",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNEGATIVE_ALLOWED, void
		proc
			Assert.IsTrue(tokenizeExpression("NEGATIVE_ALLOWED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNEGATIVE_ORZERO, void
		proc
			Assert.IsTrue(tokenizeExpression("NEGATIVE_ORZERO",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNEGATIVE_REQUIRED, void
		proc
			Assert.IsTrue(tokenizeExpression("NEGATIVE_REQUIRED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOALLOW_LIST, void
		proc
			Assert.IsTrue(tokenizeExpression("NOALLOW_LIST",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOALTERNATE_NAME, void
		proc
			Assert.IsTrue(tokenizeExpression("NOALTERNATE_NAME",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOARRIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOARRIVE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOBREAK, void
		proc
			Assert.IsTrue(tokenizeExpression("NOBREAK",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOCHANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCHANGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOCHECKBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCHECKBOX",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOCOERCEBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCOERCEBOOLEAN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNODEFAULT, void
		proc
			Assert.IsTrue(tokenizeExpression("NODEFAULT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNODESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("NODESCRIPTION",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNODISPLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NODISPLAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNODISPLAY_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("NODISPLAY_LENGTH",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNODRILL, void
		proc
			Assert.IsTrue(tokenizeExpression("NODRILL",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOECHO, void
		proc
			Assert.IsTrue(tokenizeExpression("NOECHO",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOEDITFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOEDITFORMAT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOFORMAT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOHELPID, void
		proc
			Assert.IsTrue(tokenizeExpression("NOHELPID",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOHYPERLINK, void
		proc
			Assert.IsTrue(tokenizeExpression("NOHYPERLINK",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOINFOLINE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOINFOLINE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOLANGUAGE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOLANGUAGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOLEAVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOLEAVE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOLONGDESC, void
		proc
			Assert.IsTrue(tokenizeExpression("NOLONGDESC",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNONEGATIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NONEGATIVE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOPAINTCHAR, void
		proc
			Assert.IsTrue(tokenizeExpression("NOPAINTCHAR",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOPRECISION, void
		proc
			Assert.IsTrue(tokenizeExpression("NOPRECISION",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOPROMPT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOPROMPT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNORANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("NORANGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOREPORT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOREPORT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOSELECTIONS, void
		proc
			Assert.IsTrue(tokenizeExpression("NOSELECTIONS",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOSELWND, void
		proc
			Assert.IsTrue(tokenizeExpression("NOSELWND",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTALPHA, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTALPHA",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTARRAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTARRAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTBINARY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTBINARY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTBOOLEAN",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTBZERO, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTBZERO",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTDATE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDATE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTDATEORTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDATEORTIME",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTDATETODAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDATETODAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTDECIMAL, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDECIMAL",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTENUM, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTENUM",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTENUMERATED, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTENUMERATED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTIMEOUT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTIMEOUT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTINTEGER, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTINTEGER",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTNUMERIC, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTNUMERIC",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTOOLKIT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTOOLKIT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTOVERLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTOVERLAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTPKSEGMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTPKSEGMENT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTRADIOBUTTONS, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTRADIOBUTTONS",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTSTRUCTFIELD, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTSTRUCTFIELD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTTIME",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTUPPERCASE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUPPERCASE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTUSER, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUSER",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOTUSERTIMESTAMP, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUSERTIMESTAMP",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOUSERTEXT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOUSERTEXT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOVIEW_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("NOVIEW_LENGTH",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNOWEB, void
		proc
			Assert.IsTrue(tokenizeExpression("NOWEB",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionNUMERIC, void
		proc
			Assert.IsTrue(tokenizeExpression("NUMERIC",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionOCNATIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("OCNATIVE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionOCOBJECT, void
		proc
			Assert.IsTrue(tokenizeExpression("OCOBJECT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionOPTIONAL, void
		proc
			Assert.IsTrue(tokenizeExpression("OPTIONAL",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionOVERLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("OVERLAY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionPAINTCHAR, void
		proc
			Assert.IsTrue(tokenizeExpression("PAINTCHAR",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionPKSEGMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("PKSEGMENT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionPRECISION, void
		proc
			Assert.IsTrue(tokenizeExpression("PRECISION",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionPROMPT, void
		proc
			Assert.IsTrue(tokenizeExpression("PROMPT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionPROMPT_POSITION, void
		proc
			Assert.IsTrue(tokenizeExpression("PROMPT_POSITION",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionRADIOBUTTONS, void
		proc
			Assert.IsTrue(tokenizeExpression("RADIOBUTTONS",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionRANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("RANGE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionREADONLY, void
		proc
			Assert.IsTrue(tokenizeExpression("READONLY",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionREADWRITE, void
		proc
			Assert.IsTrue(tokenizeExpression("READWRITE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionREPORT, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionREPORT_CENTER, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT_CENTER",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionREPORT_LEFT, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT_LEFT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionREPORT_RIGHT, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT_RIGHT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionREQUIRED, void
		proc
			Assert.IsTrue(tokenizeExpression("REQUIRED",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionREVERSE, void
		proc
			Assert.IsTrue(tokenizeExpression("REVERSE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionSELECTIONS, void
		proc
			Assert.IsTrue(tokenizeExpression("SELECTIONS",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionSELWND, void
		proc
			Assert.IsTrue(tokenizeExpression("SELWND",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionSTRUCTFIELD, void
		proc
			Assert.IsTrue(tokenizeExpression("STRUCTFIELD",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionTEXTBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("TEXTBOX",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("TIME",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionTIME_HHMM, void
		proc
			Assert.IsTrue(tokenizeExpression("TIME_HHMM",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionTIME_HHMMSS, void
		proc
			Assert.IsTrue(tokenizeExpression("TIME_HHMMSS",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionTIMENOW, void
		proc
			Assert.IsTrue(tokenizeExpression("TIMENOW",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionTIMEOUT, void
		proc
			Assert.IsTrue(tokenizeExpression("TIMEOUT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionTOOLKIT, void
		proc
			Assert.IsTrue(tokenizeExpression("TOOLKIT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionUNDERLINE, void
		proc
			Assert.IsTrue(tokenizeExpression("UNDERLINE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionUPPERCASE, void
		proc
			Assert.IsTrue(tokenizeExpression("UPPERCASE",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionUSER, void
		proc
			Assert.IsTrue(tokenizeExpression("USER",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionUSERTEXT, void
		proc
			Assert.IsTrue(tokenizeExpression("USERTEXT",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionUSERTIMESTAMP, void
		proc
			Assert.IsTrue(tokenizeExpression("USERTIMESTAMP",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionVIEW_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("VIEW_LENGTH",TokenValidity.FieldLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Field Loop Expressions")}
		public method FieldLoopExpressionWEB, void
		proc
			Assert.IsTrue(tokenizeExpression("WEB",TokenValidity.FieldLoop))
		endmethod
		
		.endregion
		
		.region "Field Selection Loop Expressions"
		
		;;There aren't any right now!
		
		.endregion
		
		.region "Key Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionASCENDING, void
		proc
			Assert.IsTrue(tokenizeExpression("ASCENDING",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionAUTO_SEQUENCE, void
		proc
			Assert.IsTrue(tokenizeExpression("AUTO_SEQUENCE",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionAUTO_TIMESTAMP, void
		proc
			Assert.IsTrue(tokenizeExpression("AUTO_TIMESTAMP",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionCHANGES, void
		proc
			Assert.IsTrue(tokenizeExpression("CHANGES",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionDESCENDING, void
		proc
			Assert.IsTrue(tokenizeExpression("DESCENDING",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionDUPLICATES, void
		proc
			Assert.IsTrue(tokenizeExpression("DUPLICATES",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionDUPLICATESATEND, void
		proc
			Assert.IsTrue(tokenizeExpression("DUPLICATESATEND",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionDUPLICATESATFRONT, void
		proc
			Assert.IsTrue(tokenizeExpression("DUPLICATESATFRONT",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionMULTIPLE_SEGMENTS, void
		proc
			Assert.IsTrue(tokenizeExpression("MULTIPLE_SEGMENTS",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionNOCHANGES, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCHANGES",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionNODUPLICATES, void
		proc
			Assert.IsTrue(tokenizeExpression("NODUPLICATES",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionNULLKEY, void
		proc
			Assert.IsTrue(tokenizeExpression("NULLKEY",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionNULLVALUE, void
		proc
			Assert.IsTrue(tokenizeExpression("NULLVALUE",TokenValidity.KeyLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Loop Expressions")}
		public method KeyLoopExpressionSINGLE_SEGMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("SINGLE_SEGMENT",TokenValidity.KeyLoop))
		endmethod
		
		.endregion
		
		.region "Key Segment Loop Expressions (Key segment specific)"
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionINCREMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("INCREMENT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOINCREMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOINCREMENT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSEG_ALPHA, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_ALPHA",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSEG_ASCENDING, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_ASCENDING",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSEG_AUTO_SEQUENCE, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_AUTO_SEQUENCE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSEG_AUTO_TIMESTAMP, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_AUTO_TIMESTAMP",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSEG_DECIMAL, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_DECIMAL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSEG_DESCENDING, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_DESCENDING",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSEG_NOCASE, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_NOCASE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSEG_SIGNED, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_SIGNED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSEG_TYPE_EXTERNAL, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_TYPE_EXTERNAL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSEG_TYPE_FIELD, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_TYPE_FIELD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSEG_TYPE_LITERAL, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_TYPE_LITERAL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSEG_TYPE_RECNUM, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_TYPE_RECNUM",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSEG_UNSIGNED, void
		proc
			Assert.IsTrue(tokenizeExpression("SEG_UNSIGNED",TokenValidity.KeySegmentLoop))
		endmethod
		
		.endregion
		
		.region "Key segment loop expressions (shared with field loop)"
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionALLOW_LIST, void
		proc
			Assert.IsTrue(tokenizeExpression("ALLOW_LIST",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionALPHA, void
		proc
			Assert.IsTrue(tokenizeExpression("ALPHA",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionALTERNATE_NAME, void
		proc
			Assert.IsTrue(tokenizeExpression("ALTERNATE_NAME",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionARRAY, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionARRAY1, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY1",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionARRAY2, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY2",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionARRAY3, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY3",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionARRAY4, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRAY4",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionARRIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("ARRIVE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionBINARY, void
		proc
			Assert.IsTrue(tokenizeExpression("BINARY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionBOLD, void
		proc
			Assert.IsTrue(tokenizeExpression("BOLD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("BOOLEAN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionBREAK, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionBREAK_ALWAYS, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK_ALWAYS",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionBREAK_CHANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK_CHANGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionBREAK_RETURN, void
		proc
			Assert.IsTrue(tokenizeExpression("BREAK_RETURN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionBZERO, void
		proc
			Assert.IsTrue(tokenizeExpression("BZERO",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionCHANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("CHANGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionCHECKBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("CHECKBOX",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionCOERCEBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("COERCEBOOLEAN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionCOMBOBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("COMBOBOX",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_JULIAN, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_JULIAN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_NOT_JULIAN, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_JULIAN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_NOT_NULLABLE, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_NULLABLE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_NOT_PERIOD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_PERIOD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_NOT_YMD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_YMD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_NOT_YYYYMMDD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NOT_YYYYMMDD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_NULLABLE, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_NULLABLE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_PERIOD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_PERIOD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_YMD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YMD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_YYJJJ, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYJJJ",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_YYMMDD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYMMDD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_YYPP, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYPP",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_YYYYJJJ, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYYYJJJ",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_YYYYMMDD, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYYYMMDD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATE_YYYYPP, void
		proc
			Assert.IsTrue(tokenizeExpression("DATE_YYYYPP",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATEORTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("DATEORTIME",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDATETODAY, void
		proc
			Assert.IsTrue(tokenizeExpression("DATETODAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDECIMAL, void
		proc
			Assert.IsTrue(tokenizeExpression("DECIMAL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDEFAULT, void
		proc
			Assert.IsTrue(tokenizeExpression("DEFAULT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("DESCRIPTION",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDISABLED, void
		proc
			Assert.IsTrue(tokenizeExpression("DISABLED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDISPLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("DISPLAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDISPLAY_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("DISPLAY_LENGTH",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionDRILL, void
		proc
			Assert.IsTrue(tokenizeExpression("DRILL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionECHO, void
		proc
			Assert.IsTrue(tokenizeExpression("ECHO",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionEDITFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("EDITFORMAT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionENABLED, void
		proc
			Assert.IsTrue(tokenizeExpression("ENABLED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionENUM, void
		proc
			Assert.IsTrue(tokenizeExpression("ENUM",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionENUMERATED, void
		proc
			Assert.IsTrue(tokenizeExpression("ENUMERATED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionFIELD_POSITION, void
		proc
			Assert.IsTrue(tokenizeExpression("FIELD_POSITION",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("FORMAT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionGROUP_EXPAND, void
		proc
			Assert.IsTrue(tokenizeExpression("GROUP_EXPAND",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionGROUP_NO_EXPAND, void
		proc
			Assert.IsTrue(tokenizeExpression("GROUP_NO_EXPAND",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionHEADING, void
		proc
			Assert.IsTrue(tokenizeExpression("HEADING",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionHELPID, void
		proc
			Assert.IsTrue(tokenizeExpression("HELPID",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionHYPERLINK, void
		proc
			Assert.IsTrue(tokenizeExpression("HYPERLINK",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionI1, void
		proc
			Assert.IsTrue(tokenizeExpression("I1",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionI124, void
		proc
			Assert.IsTrue(tokenizeExpression("I124",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionI2, void
		proc
			Assert.IsTrue(tokenizeExpression("I2",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionI4, void
		proc
			Assert.IsTrue(tokenizeExpression("I4",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionI8, void
		proc
			Assert.IsTrue(tokenizeExpression("I8",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionINFOLINE, void
		proc
			Assert.IsTrue(tokenizeExpression("INFOLINE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionINPUT_CENTER, void
		proc
			Assert.IsTrue(tokenizeExpression("INPUT_CENTER",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionINPUT_LEFT, void
		proc
			Assert.IsTrue(tokenizeExpression("INPUT_LEFT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionINPUT_RIGHT, void
		proc
			Assert.IsTrue(tokenizeExpression("INPUT_RIGHT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionINTEGER, void
		proc
			Assert.IsTrue(tokenizeExpression("INTEGER",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionLANGUAGE, void
		proc
			Assert.IsTrue(tokenizeExpression("LANGUAGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionLAST, void
		proc
			Assert.IsTrue(tokenizeExpression("LAST",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionLEAVE, void
		proc
			Assert.IsTrue(tokenizeExpression("LEAVE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionLONGDESC, void
		proc
			Assert.IsTrue(tokenizeExpression("LONGDESC",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionMAPPED, void
		proc
			Assert.IsTrue(tokenizeExpression("MAPPED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionMAPPEDSTR, void
		proc
			Assert.IsTrue(tokenizeExpression("MAPPEDSTR",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNEGATIVE_ALLOWED, void
		proc
			Assert.IsTrue(tokenizeExpression("NEGATIVE_ALLOWED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNEGATIVE_ORZERO, void
		proc
			Assert.IsTrue(tokenizeExpression("NEGATIVE_ORZERO",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNEGATIVE_REQUIRED, void
		proc
			Assert.IsTrue(tokenizeExpression("NEGATIVE_REQUIRED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOALLOW_LIST, void
		proc
			Assert.IsTrue(tokenizeExpression("NOALLOW_LIST",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOALTERNATE_NAME, void
		proc
			Assert.IsTrue(tokenizeExpression("NOALTERNATE_NAME",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOARRIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOARRIVE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOBREAK, void
		proc
			Assert.IsTrue(tokenizeExpression("NOBREAK",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOCHANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCHANGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOCHECKBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCHECKBOX",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOCOERCEBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCOERCEBOOLEAN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNODEFAULT, void
		proc
			Assert.IsTrue(tokenizeExpression("NODEFAULT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNODESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("NODESCRIPTION",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNODISPLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NODISPLAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNODISPLAY_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("NODISPLAY_LENGTH",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNODRILL, void
		proc
			Assert.IsTrue(tokenizeExpression("NODRILL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOECHO, void
		proc
			Assert.IsTrue(tokenizeExpression("NOECHO",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOEDITFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOEDITFORMAT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOFORMAT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOFORMAT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOHELPID, void
		proc
			Assert.IsTrue(tokenizeExpression("NOHELPID",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOHYPERLINK, void
		proc
			Assert.IsTrue(tokenizeExpression("NOHYPERLINK",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOINFOLINE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOINFOLINE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOLANGUAGE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOLANGUAGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOLEAVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOLEAVE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOLONGDESC, void
		proc
			Assert.IsTrue(tokenizeExpression("NOLONGDESC",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNONEGATIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NONEGATIVE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOPAINTCHAR, void
		proc
			Assert.IsTrue(tokenizeExpression("NOPAINTCHAR",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOPRECISION, void
		proc
			Assert.IsTrue(tokenizeExpression("NOPRECISION",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOPROMPT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOPROMPT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNORANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("NORANGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOREPORT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOREPORT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOSELECTIONS, void
		proc
			Assert.IsTrue(tokenizeExpression("NOSELECTIONS",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOSELWND, void
		proc
			Assert.IsTrue(tokenizeExpression("NOSELWND",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTALPHA, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTALPHA",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTARRAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTARRAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTBINARY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTBINARY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTBOOLEAN, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTBOOLEAN",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTBZERO, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTBZERO",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTDATE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDATE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTDATEORTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDATEORTIME",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTDATETODAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDATETODAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTDECIMAL, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTDECIMAL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTENUM, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTENUM",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTENUMERATED, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTENUMERATED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTIMEOUT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTIMEOUT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTINTEGER, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTINTEGER",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTNUMERIC, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTNUMERIC",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTOOLKIT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTOOLKIT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTOVERLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTOVERLAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTPKSEGMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTPKSEGMENT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTRADIOBUTTONS, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTRADIOBUTTONS",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTSTRUCTFIELD, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTSTRUCTFIELD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTTIME",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTUPPERCASE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUPPERCASE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTUSER, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUSER",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOTUSERTIMESTAMP, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUSERTIMESTAMP",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOUSERTEXT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOUSERTEXT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOVIEW_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("NOVIEW_LENGTH",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNOWEB, void
		proc
			Assert.IsTrue(tokenizeExpression("NOWEB",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionNUMERIC, void
		proc
			Assert.IsTrue(tokenizeExpression("NUMERIC",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionOCNATIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("OCNATIVE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionOCOBJECT, void
		proc
			Assert.IsTrue(tokenizeExpression("OCOBJECT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionOPTIONAL, void
		proc
			Assert.IsTrue(tokenizeExpression("OPTIONAL",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionOVERLAY, void
		proc
			Assert.IsTrue(tokenizeExpression("OVERLAY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionPAINTCHAR, void
		proc
			Assert.IsTrue(tokenizeExpression("PAINTCHAR",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionPKSEGMENT, void
		proc
			Assert.IsTrue(tokenizeExpression("PKSEGMENT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionPRECISION, void
		proc
			Assert.IsTrue(tokenizeExpression("PRECISION",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionPROMPT, void
		proc
			Assert.IsTrue(tokenizeExpression("PROMPT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionPROMPT_POSITION, void
		proc
			Assert.IsTrue(tokenizeExpression("PROMPT_POSITION",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionRADIOBUTTONS, void
		proc
			Assert.IsTrue(tokenizeExpression("RADIOBUTTONS",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionRANGE, void
		proc
			Assert.IsTrue(tokenizeExpression("RANGE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionREADONLY, void
		proc
			Assert.IsTrue(tokenizeExpression("READONLY",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionREADWRITE, void
		proc
			Assert.IsTrue(tokenizeExpression("READWRITE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionREPORT, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionREPORT_CENTER, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT_CENTER",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionREPORT_LEFT, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT_LEFT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionREPORT_RIGHT, void
		proc
			Assert.IsTrue(tokenizeExpression("REPORT_RIGHT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionREQUIRED, void
		proc
			Assert.IsTrue(tokenizeExpression("REQUIRED",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionREVERSE, void
		proc
			Assert.IsTrue(tokenizeExpression("REVERSE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSELECTIONS, void
		proc
			Assert.IsTrue(tokenizeExpression("SELECTIONS",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSELWND, void
		proc
			Assert.IsTrue(tokenizeExpression("SELWND",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionSTRUCTFIELD, void
		proc
			Assert.IsTrue(tokenizeExpression("STRUCTFIELD",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionTEXTBOX, void
		proc
			Assert.IsTrue(tokenizeExpression("TEXTBOX",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionTIME, void
		proc
			Assert.IsTrue(tokenizeExpression("TIME",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionTIME_HHMM, void
		proc
			Assert.IsTrue(tokenizeExpression("TIME_HHMM",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionTIME_HHMMSS, void
		proc
			Assert.IsTrue(tokenizeExpression("TIME_HHMMSS",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionTIMENOW, void
		proc
			Assert.IsTrue(tokenizeExpression("TIMENOW",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionTIMEOUT, void
		proc
			Assert.IsTrue(tokenizeExpression("TIMEOUT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionTOOLKIT, void
		proc
			Assert.IsTrue(tokenizeExpression("TOOLKIT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionUNDERLINE, void
		proc
			Assert.IsTrue(tokenizeExpression("UNDERLINE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionUPPERCASE, void
		proc
			Assert.IsTrue(tokenizeExpression("UPPERCASE",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionUSER, void
		proc
			Assert.IsTrue(tokenizeExpression("USER",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionUSERTEXT, void
		proc
			Assert.IsTrue(tokenizeExpression("USERTEXT",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionUSERTIMESTAMP, void
		proc
			Assert.IsTrue(tokenizeExpression("USERTIMESTAMP",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionVIEW_LENGTH, void
		proc
			Assert.IsTrue(tokenizeExpression("VIEW_LENGTH",TokenValidity.KeySegmentLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Key Segment Loop Expressions")}
		public method KeySegmentLoopExpressionWEB, void
		proc
			Assert.IsTrue(tokenizeExpression("WEB",TokenValidity.KeySegmentLoop))
		endmethod
		
		.endregion
		
		.region "Enum Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Loop Expressions")}
		public method EnumLoopExpressionDESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("DESCRIPTION",TokenValidity.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Loop Expressions")}
		public method EnumLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.EnumLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Loop Expressions")}
		public method EnumLoopExpressionLONG_DESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("LONG_DESCRIPTION",TokenValidity.EnumLoop))
		endmethod
		
		.endregion
		
		.region "Enum Member Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Member Loop Expressions")}
		public method EnumMemberLoopExpressionEXPLICIT_VALUE, void
		proc
			Assert.IsTrue(tokenizeExpression("EXPLICIT_VALUE",TokenValidity.EnumMemberLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Member Loop Expressions")}
		public method EnumMemberLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.EnumMemberLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Enum Member Loop Expressions")}
		public method EnumMemberLoopExpressionNOEXPLICIT_VALUE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOEXPLICIT_VALUE",TokenValidity.EnumMemberLoop))
		endmethod
		
		.endregion
		
		.region "Tag Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopComparisonEQ, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_EQ",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopComparisonGE, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_GE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopComparisonGT, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_GT",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopComparisonLE, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_LE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopComparisonLT, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_LT",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopComparisonNE, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopComparisonNotEQ, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NOT_EQ",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopComparisonNotGE, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NOT_GE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopComparisonNotGT, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NOT_GT",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopComparisonNotLE, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NOT_LE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopComparisonNotLT, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NOT_LT",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopComparisonNotNE, void
		proc
			Assert.IsTrue(tokenizeExpression("COMPARISON_NOT_NE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopConnectorAND, void
		proc
			Assert.IsTrue(tokenizeExpression("CONNECTOR_AND",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopConnectorOR, void
		proc
			Assert.IsTrue(tokenizeExpression("CONNECTOR_OR",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopConnectorNone, void
		proc
			Assert.IsTrue(tokenizeExpression("CONNECTOR_NONE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopConnectorNotAND, void
		proc
			Assert.IsTrue(tokenizeExpression("CONNECTOR_NOT_AND",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopConnectorNotOR, void
		proc
			Assert.IsTrue(tokenizeExpression("CONNECTOR_NOT_OR",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopConnectorNotNone, void
		proc
			Assert.IsTrue(tokenizeExpression("CONNECTOR_NOT_NONE",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopFirst, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopLast, void
		proc
			Assert.IsTrue(tokenizeExpression("LAST",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopMultipleTags, void
		proc
			Assert.IsTrue(tokenizeExpression("MULTIPLE_TAGS",TokenValidity.TagLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Tag Loop Expressions")}
		public method TagLoopSingleTag, void
		proc
			Assert.IsTrue(tokenizeExpression("SINGLE_TAG",TokenValidity.TagLoop))
		endmethod
		
		.endregion
		
		.region "File Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionASCII, void
		proc
			Assert.IsTrue(tokenizeExpression("ASCII",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionCHANGE_TRACKING, void
		proc
			Assert.IsTrue(tokenizeExpression("CHANGE_TRACKING",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionDESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("DESCRIPTION",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionISAM, void
		proc
			Assert.IsTrue(tokenizeExpression("ISAM",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNOCHANGE_TRACKING, void
		proc
			Assert.IsTrue(tokenizeExpression("NOCHANGE_TRACKING",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNODESCRIPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("NODESCRIPTION",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNORECORDCOMPRESSION, void
		proc
			Assert.IsTrue(tokenizeExpression("NORECORDCOMPRESSION",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNOSTORED_GRFA, void
		proc
			Assert.IsTrue(tokenizeExpression("NOSTORED_GRFA",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNOTASCII, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTASCII",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNOTISAM, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTISAM",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNOTRECORDTYPEFIXED, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTRECORDTYPEFIXED",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNOTRECORDTYPEMULTIPLE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTRECORDTYPEMULTIPLE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNOTRECORDTYPEVARIABLE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTRECORDTYPEVARIABLE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNOTRELATIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTRELATIVE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNOTSTATICRFA, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTSTATICRFA",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNOTTERABYTE, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTTERABYTE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNOTUSERDEFINED, void
		proc
			Assert.IsTrue(tokenizeExpression("NOTUSERDEFINED",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionNOUSERTEXT, void
		proc
			Assert.IsTrue(tokenizeExpression("NOUSERTEXT",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionPAGESIZE1024, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE1024",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionPAGESIZE16384, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE16384",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionPAGESIZE2048, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE2048",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionPAGESIZE32768, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE32768",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionPAGESIZE4096, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE4096",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionPAGESIZE512, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE512",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionPAGESIZE8192, void
		proc
			Assert.IsTrue(tokenizeExpression("PAGESIZE8192",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionRECORDCOMPRESSION, void
		proc
			Assert.IsTrue(tokenizeExpression("RECORDCOMPRESSION",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionRECORDTYPEFIXED, void
		proc
			Assert.IsTrue(tokenizeExpression("RECORDTYPEFIXED",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionRECORDTYPEMULTIPLE, void
		proc
			Assert.IsTrue(tokenizeExpression("RECORDTYPEMULTIPLE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionRECORDTYPEVARIABLE, void
		proc
			Assert.IsTrue(tokenizeExpression("RECORDTYPEVARIABLE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionRELATIVE, void
		proc
			Assert.IsTrue(tokenizeExpression("RELATIVE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionSTATICRFA, void
		proc
			Assert.IsTrue(tokenizeExpression("STATICRFA",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionSTORED_GRFA, void
		proc
			Assert.IsTrue(tokenizeExpression("STORED_GRFA",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionTERABYTE, void
		proc
			Assert.IsTrue(tokenizeExpression("TERABYTE",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionUSERDEFINED, void
		proc
			Assert.IsTrue(tokenizeExpression("USERDEFINED",TokenValidity.FileLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - File Loop Expressions")}
		public method FileLoopExpressionUSERTEXT, void
		proc
			Assert.IsTrue(tokenizeExpression("USERTEXT",TokenValidity.FileLoop))
		endmethod
		
		.endregion
		
		.region "Button Loop Expressions"
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Expressions")}
		public method ButtonLoopExpressionCANCELBUTTON, void
		proc
			Assert.IsTrue(tokenizeExpression("CANCELBUTTON",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Expressions")}
		public method ButtonLoopExpressionCAPTION, void
		proc
			Assert.IsTrue(tokenizeExpression("CAPTION",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Expressions")}
		public method ButtonLoopExpressionELB, void
		proc
			Assert.IsTrue(tokenizeExpression("ELB",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Expressions")}
		public method ButtonLoopExpressionFIRST, void
		proc
			Assert.IsTrue(tokenizeExpression("FIRST",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Expressions")}
		public method ButtonLoopExpressionGENERICBUTTON, void
		proc
			Assert.IsTrue(tokenizeExpression("GENERICBUTTON",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Expressions")}
		public method ButtonLoopExpressionIMAGE, void
		proc
			Assert.IsTrue(tokenizeExpression("IMAGE",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Expressions")}
		public method ButtonLoopExpressionMETHOD, void
		proc
			Assert.IsTrue(tokenizeExpression("METHOD",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Expressions")}
		public method ButtonLoopExpressionOKBUTTON, void
		proc
			Assert.IsTrue(tokenizeExpression("OKBUTTON",TokenValidity.ButtonLoop))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Button Loop Expressions")}
		public method ButtonLoopExpressionQUICKSELECT, void
		proc
			Assert.IsTrue(tokenizeExpression("QUICKSELECT",TokenValidity.ButtonLoop))
		endmethod
		
		.endregion
		
		{TestMethod}
		{TestCategory("Tokenization - Error Reporting Tests")}
		public method TokenizerErrorReporting001, void
		proc
			data taskset, @CodeGenTaskSet, new CodeGenTaskSet()
			data task, @CodeGenTask, new CodeGenTask()
			taskset.Tasks.Add(task)
			data context, @CodeGenContext, new CodeGenContext(taskset)
			context.CurrentTask = task
			data tokens, @List<Token>, new Tokenizer(context).Tokenize("<FIELD_LOOP><IF CRAP>Crap!!!</IF>")
			Assert.IsTrue(((context.CurrentTask.Errors == 1) && (context.CurrentTask.LastErrorMessage == "Invalid expression <IF CRAP> at offset 12!")))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization - Error Reporting Tests")}
		public method TokenizerErrorReporting002, void
		proc
			data taskset, @CodeGenTaskSet, new CodeGenTaskSet()
			data task, @CodeGenTask, new CodeGenTask()
			taskset.Tasks.Add(task)
			data context, @CodeGenContext, new CodeGenContext(taskset)
			context.CurrentTask = task
			data tokens, @List<Token>, new Tokenizer(context).Tokenize("<FIELD_LOOP><IF CRAP>Crap!!!</IF CRAP></FIELD_LOOP>")

			if ((context.CurrentTask.Errors == 1) && (context.CurrentTask.LastErrorMessage == "Invalid expression <IF CRAP> at offset 12!")) then
				Assert.IsTrue(true)
			else
				Assert.Fail(string.Format("Expected 1 error, got {0}. Last error was {1}.",context.CurrentTask.Errors,context.CurrentTask.LastErrorMessage))
		endmethod

		{TestMethod}
		{TestCategory("Tokenization - Bug Repros")}
		public method TokenizerBugRepro001, void
		proc
			;;Causes an ArgumentOutOfRangeException in tokenizePreProcessorToken
			;;Shouldn't even be in that method, there is no Pre-Processor token here!
			data tokens, @List<Token>, new Tokenizer().Tokenize("<FIELD_LOOP>This <ABC:def> is not a pre-processor token!</FIELD_LOOP>")			
			data success, boolean, true
			if (tokens.Count!=3) then
				success = false
			else if (tokens[0].TypeOfToken != TokenType.Loop) then
				success = false
			else if (tokens[0].value != "FIELD_LOOP") then
				success = false
			else if (tokens[1].TypeOfToken != TokenType.text) then
				success = false
			else if (tokens[1].value != "This <ABC:def> is not a pre-processor token!") then
				success = false
			else if (tokens[2].TypeOfToken != TokenType.Loop) then
				success = false
			else if (tokens[2].value != "FIELD_LOOP")
				success = false
			Assert.IsTrue(success)
		endmethod

	endclass
	
endnamespace
