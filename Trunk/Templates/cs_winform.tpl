<CODEGEN_FILENAME>frm<WindowName>.cs</CODEGEN_FILENAME>
<PROCESS_TEMPLATE>cs_winform_codebehind.tpl</PROCESS_TEMPLATE>
<PROCESS_TEMPLATE>cs_winform_resources.tpl</PROCESS_TEMPLATE>
;//****************************************************************************
;//
;// Title:       cs_winform.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: This template generates a C# windows form to represent a
;//              Synergy Repository structure.
;//
;// Date:        31st October 2007
;//
;// Author:      Steve Ives, Synergex Professional Services Group
;//              http://www.synergex.com
;//
;//****************************************************************************
;//
;// Copyright (c) 2012, Synergex International, Inc.
;// All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
//*****************************************************************************
//
// Title:       frm<WindowName>.cs
//
// Author:      <AUTHOR>
//
// Company:     <COMPANY>
//
//*****************************************************************************
//
// WARNING:     This code was generated by CodeGen. Any changes that you make
//              to this file will be lost if the code is regenerated.
//
//*****************************************************************************
//
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;

public partial class frm<WindowName> : Form
{
    //If you want to do field level validation on loss of field focus then set this to true
    private const bool fieldLevelValidation = false;

    //Constructor
    public frm<WindowName>()
    {
        InitializeComponent();
    }

    //Form load method
    private void frm<WindowName>_Load(object sender, EventArgs e)
    {
        //TODO: Add form initialization code
    }

    private void btnOK_Click(object sender, System.EventArgs e)
    {
        //The user clicked the OK button. First validate required fields.
        if (validateFields())
        {
            //TODO: Add code to save the data.

            //Close the form
            this.Close();
        }
    }

    private void btnCancel_Click(object sender, System.EventArgs e)
    {
        //The user clicked the Cancel button, just close the form
        this.Close();
    }

#region Field validation procedures

    private bool validateFields()
    {
        <FIELD_LOOP>
        <IF TEXTBOX>
        if (!validate_txt<Field_sqlname>()) { return false; }
        </IF>
        </FIELD_LOOP>
        return true;
    }

    <FIELD_LOOP>
    <IF TEXTBOX>
    private bool validate_txt<Field_sqlname>()
    {
        <IF REQUIRED>
        //<FIELD_PROMPT> (txt<Field_sqlname>) is a required field and must contain a value
        if (txt<Field_sqlname>.Text.Length == 0)
        {
            MessageBox.Show(this, "<FIELD_PROMPT> is a required field.", "Validation failed");
            txt<Field_sqlname>.Focus();
            return false;
        }
        </IF>
        <IF NUMERIC>
        //If <FIELD_PROMPT> (txt<Field_sqlname>) contains a value then it must be numeric
        if (txt<Field_sqlname>.Text.Length != 0)
        {
            try { float.Parse(txt<Field_sqlname>.Text); }
            catch {
                MessageBox.Show(this, "Employee must be numeric.", "Validation failed");
                txt<Field_sqlname>.Clear();
                txt<Field_sqlname>.Focus();
                return false;
            }
        }
        </IF>
        return true;
    }

    private void txt<Field_sqlname>_Leave(System.Object sender, System.EventArgs e)
    {
        if (fieldLevelValidation && !btnCancel.Focused)
        {
            validate_txt<Field_sqlname>();
        }
    }

    </IF>
    </FIELD_LOOP>
#endregion

#region Field drill procedures
    <FIELD_LOOP>
    <IF TEXTBOX>
    <IF DRILL>

    private void btn<Field_sqlname>_Click(System.Object sender, System.EventArgs e)
    {
        MessageBox.Show(this,"Drill for field <Field_sqlname>","Still to do!");
    }
    </IF>
    </IF>
    </FIELD_LOOP>

#endregion

    private static System.Object[] getComboItems(params string[] values)
    {
        System.Object[] RetData = new System.Object[values.Length];
        for (int i = 0; i < values.Length; i++)
        {
            RetData[i] = values[i];
        }
        return RetData;
    }
}

