<CODEGEN_FILENAME>frm<WindowName>.xaml.cs</CODEGEN_FILENAME>
;//****************************************************************************
;//
;// Title:       cs_xaml_ig_codebehind.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to generate the code-behind file for a a C#
;//              WPF From representing a Synergy repository structure.
;//
;// Date:        12th November 2009
;//
;// Author:      Steve Ives, Synergex Professional Services Group
;//              http://www.synergex.com
;//
;//****************************************************************************
;//
;// Copyright (c) 2012, Synergex International, Inc.
;// All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
//*****************************************************************************
//
// Title:       frm<WindowName>.xaml.cs
//
// Author:      <AUTHOR>
//
// Company:     <COMPANY>
//
//*****************************************************************************
//
// WARNING:     This code was generated by CodeGen. Any changes that you make
//              to this file will be lost if the code is regenerated.
//
//*****************************************************************************
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace <NAMESPACE>
{
    /// <summary>
    /// Interaction logic for frm<WindowName>.xaml
    /// </summary>

    public partial class frm<WindowName> : Window
    {
        public frm<WindowName>()
        {
            InitializeComponent();
        }

        private void frm<WindowName>_Loaded(object sender, RoutedEventArgs e)
        {
            //The form was just loaded

            //TODO: Add initialization code here

        }

        private void btnOK_Click(object sender, RoutedEventArgs e)
        {
            //The user clicked the OK button

            //Perform field validations
            if (validateFields())
            {
                //TODO: Add any additional OK button code

                this.Close();
            }
        }

        private void btnCancel_Click(object sender, RoutedEventArgs e)
        {
            //The user clicked the Cancel button

            //TODO: Add Cancel button code here

            this.Close();

        }

        private bool validateFields()
        {
            <FIELD_LOOP>
            <IF TEXTBOX>
            if (!validate_txt<Field_sqlname>()) { return false; }
            </IF>
            </FIELD_LOOP>
            return true;
        }

        <FIELD_LOOP>
        <IF TEXTBOX>
        private bool validate_txt<Field_sqlname>()
        {
            //Field validation code for txt<Field_sqlname>

            <IF REQUIRED>
            //<FIELD_PROMPT> (txt<Field_sqlname>) is a required field and must contain a value
            if (txt<Field_sqlname>.Text.Length == 0)
            {
                MessageBox.Show(this, "<FIELD_PROMPT> is a required field.", "Validation failed");
                txt<Field_sqlname>.Focus();
                return false;
            }

            </IF>
            <IF NUMERIC>
            //If <FIELD_PROMPT> (txt<Field_sqlname>) contains a value then it must be numeric
            if (txt<Field_sqlname>.Text.Length != 0)
            {
                try
                {
                    float.Parse(txt<Field_sqlname>.Text);
                }
                catch
                {
                    MessageBox.Show(this, "Employee must be numeric.", "Validation failed");
                    txt<Field_sqlname>.Text = "";
                    txt<Field_sqlname>.Focus();
                    return false;
                }
            }

            </IF>
            return true;
        }
        </IF>

        </FIELD_LOOP>
    }
}


