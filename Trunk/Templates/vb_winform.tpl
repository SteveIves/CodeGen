<CODEGEN_FILENAME>Frm<WindowName>.vb</CODEGEN_FILENAME>
<PROCESS_TEMPLATE>vb_winform_codebehind.tpl</PROCESS_TEMPLATE>
<PROCESS_TEMPLATE>vb_winform_resources.tpl</PROCESS_TEMPLATE>
;//****************************************************************************
;//
;// Title:       vb_winform.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to generate a VB.NET Windows From to represent a
;//              Synergy repository structure.
;//
;// Date:        30th October 2007
;//
;// Author:      Steve Ives, Synergex Professional Services Group
;//              http://www.synergex.com
;//
;//****************************************************************************
;//
;// Copyright (c) 2012, Synergex International, Inc.
;// All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
'******************************************************************************
'
' Title:        Frm<WindowName>.vb
'
' Author:       <AUTHOR>
'
' Company:      <COMPANY>
'
'******************************************************************************
'
' WARNING:      This code was generated by CodeGen. Any changes that you make
'               to this file will be lost if the code is regenerated.
'
'******************************************************************************
'
Public Partial Class Frm<WindowName>

    'If you want to do field level validation on loss of field focus then set this to True
    Private Const FieldLevelValidation as Boolean = False

    Private Sub Frm<WindowName>_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
        'TODO: Add form initialization code
    End Sub

    Private Sub BtnOK_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BtnOK.Click
        'The user clicked the OK button, validate required fields
        If ValidateFields() Then
            'TODO: Add code to save the data
            Me.Close()
        End If
    End Sub

    Private Sub BtnCancel_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles BtnCancel.Click
        'The user clicked the Cancel button, just close the form
        Me.Close()
    End Sub

#Region "Field validation procedures"

    Private Function ValidateFields() as Boolean
        <FIELD_LOOP>
        <IF TEXTBOX>
        If Not Validate_txt<Field_sqlname>() Then Return False
        </IF>
        </FIELD_LOOP>
        Return True
    End Function

    <FIELD_LOOP>
    <IF TEXTBOX>
    Private Function Validate_Txt<Field_sqlname>() As Boolean
        <IF REQUIRED>
        '<FIELD_PROMPT> (Txt<Field_sqlname>) is a required field and must contain a value
        If (Txt<Field_sqlname>.Text.Length = 0) Then
            MessageBox.Show(me, "<FIELD_PROMPT> is a required field.", "Validation failed")
            Txt<Field_sqlname>.Focus()
            Return False
        End If
        </IF>
        <IF NUMERIC>
        'If <FIELD_PROMPT> (Txt<Field_sqlname>) contains a value then it must be numeric
        If ((Txt<Field_sqlname>.Text.Length <> 0) And (Not IsNumeric(Txt<Field_sqlname>.Text)))
            MessageBox.Show(me, "Employee must be numeric.", "Validation failed")
            Txt<Field_sqlname>.Clear()
            Txt<Field_sqlname>.Focus()
            Return False
        End If
        </IF>
        Return True
    End Function

    Private Sub Txt<Field_sqlname>_Leave(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Txt<Field_sqlname>.Leave
        If FieldLevelValidation And Not BtnCancel.Focused Then
            Validate_Txt<Field_sqlname>()
        End If
    End Sub

    </IF>
    </FIELD_LOOP>

#End Region

#Region "Field drill procedures"
    <FIELD_LOOP>
    <IF TEXTBOX>
    <IF DRILL>

    Private Sub Btn<Field_sqlname>_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Btn<Field_sqlname>.Click
        MsgBox("Drill for field <Field_sqlname>")
    End Sub
    </IF>
    </IF>
    </FIELD_LOOP>

#End Region

    Private Shared Function getComboItems(ByVal Params As String) As String()
        Dim RetData As String() = Split(Params, "|")
        Return RetData
    End Function

End Class

