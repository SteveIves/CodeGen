<CODEGEN_FILENAME><structure_name>.cs</CODEGEN_FILENAME>
<REQUIRES_USERTOKEN>MVVM_DATA_NAMESPACE</REQUIRES_USERTOKEN>
<PROCESS_TEMPLATE>cs_mvvm_model_manual.tpl</PROCESS_TEMPLATE>
;//****************************************************************************
;//
;// Title:       cs_mvvm_model.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to generate part of a partial class which is an MVVM
;//              model representing a Synergy repository structure.
;//
;// Date:        10th December 2009
;//
;// Author:      Steve Ives, Synergex Professional Services Group
;//              http://www.synergex.com
;//
;//****************************************************************************
;//
;// Copyright (c) 2012, Synergex International, Inc.
;// All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
//*****************************************************************************
//
// File:        <structure_name>.cs
//
// Description: MVVM model class for structure <structure_name>
//
// Type:        Class
//
// Author:      <AUTHOR>
//
//*****************************************************************************
//
// WARNING:     This code was generated by CodeGen. Any changes that you make
//              to this file will be lost if the code is regenerated.
//
//*****************************************************************************
//
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;
using SynPSG.Conversion;

namespace <MVVM_DATA_NAMESPACE>
{
    public partial class <structure_name> : INotifyPropertyChanged
    {
        //store off the actual synergy record
        private string mRecordArea ;
        private bool mSynergyChanged = false;

        <FIELD_LOOP>
        //<FIELD_DESC>
        private <FIELD_CSTYPE> m<Field_odbcname> = <FIELD_CSDEFAULT>;
        private string mPmt<Field_odbcname> = "<FIELD_PROMPT>";
        private bool mEnable<Field_odbcname> = true;

        </FIELD_LOOP>

        public <structure_name>(string recordArea)
        {
            //store the passed record area
            mRecordArea = recordArea ;
            extractSynergyFields();
        }

        //expose private fields with bindable properties

        <FIELD_LOOP>
        //<FIELD_DESC>
        public <FIELD_CSTYPE> <Field_odbcname>
        {
            get { return m<Field_odbcname>; }
            set
            {
                if (m<Field_odbcname> != value)
                {
                    m<Field_odbcname> = value;
                    onPropertyChanged("<Field_basename><IF ARRAY>_<FIELD_ELEMENT></IF>");
                }
            }
        }
        public string Pmt<Field_odbcname>
        {
            get { return mPmt<Field_odbcname>; }
            set { mPmt<Field_odbcname> = value; }
        }
        public bool Enable<Field_odbcname>
        {
            get { return mEnable<Field_odbcname>; }
            set { mEnable<Field_odbcname> = value; onPropertyChanged("Enable<Field_odbcname>");}
        }
        <IF NOCOERCEBOOLEAN>
        public int Max<Field_odbcname>
            { get { return <FIELD_SIZE> ; } }
        </IF>

        </FIELD_LOOP>

        public string SynergyRecordArea
        {
            get
            {
                if (mSynergyChanged)
                {
                    mSynergyChanged = false;
                    mRecordArea =
                    string.Format("<FIELD_LOOP>{<FIELD#LOGICAL_ZERO>}</FIELD_LOOP>",
                    <FIELD_LOOP>
                    <IF ALPHA>
                    string.Format("{0,-<FIELD_SIZE>}", m<Field_odbcname>)<,>
                    </IF>
                    <IF DECIMAL>
                    <IF NOCOERCEBOOLEAN>
                    <IF PRECISION>
                    m<Field_odbcname>.ToString("{0:D<FIELD_SIZE>}")<,>
                    </IF>
                    <IF NOPRECISION>
                    string.Format("D<FIELD_SIZE>", m<Field_odbcname>)<,>
                    </IF>
                    </IF>
                    <IF COERCEBOOLEAN>
                    ToSynergy.BooleanValue(m<Field_odbcname>),
                    </IF>
                    </IF>
                    <IF INTEGER>
                    string.Format("D<FIELD_SIZE>", m<Field_odbcname>)<,>
                    </IF>
                    <IF DATE>
                    m<Field_odbcname>.ToString("yyyyMMdd")<,>
                    </IF>
                    </FIELD_LOOP>
                    );
                }
                return mRecordArea;
            }
            set
            {
                //store the passed record area
                mRecordArea = value;
                extractSynergyFields();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void onPropertyChanged(string name)
        {
            //make sure we update the synergy side before we fire the
            //C# property changed.  This ensures we keep things in sync.
            onSynergyRecordChanged(name);

            if (PropertyChanged != null)
            {
                PropertyChangedEventArgs ea = new PropertyChangedEventArgs(name);
                PropertyChanged(this, ea);
            }
        }

        public delegate void SynRecEventHandler(string recordArea, string fieldName);
        public event SynRecEventHandler SynergyRecordChanged;

        protected void onSynergyRecordChanged(string name)
        {
            mSynergyChanged = true;
            if (SynergyRecordChanged != null)
            {
                SynergyRecordChanged(SynergyRecordArea, name);
            }
        }

        private void extractSynergyFields()
        {
            //move passed record into member fields
            <FIELD_LOOP>
            <IF ALPHA>
            <Field_odbcname> = mRecordArea.Substring(<FIELD_POSITION_ZERO>,<FIELD_SIZE>).Trim();
            </IF>
            <IF DECIMAL>
            <IF NOCOERCEBOOLEAN>
            <IF PRECISION>
            if(mRecordArea.Substring(<FIELD_POSITION_ZERO>,<FIELD_SIZE>).Trim().Length!=0)
                <Field_odbcname> = decimal.Parse(mRecordArea.Substring(<FIELD_POSITION_ZERO>,<FIELD_SIZE>));
            </IF>
            <IF NOPRECISION>
            if(mRecordArea.Substring(<FIELD_POSITION_ZERO>,<FIELD_SIZE>).Trim().Length!=0)
                <Field_odbcname> = int.Parse(mRecordArea.Substring(<FIELD_POSITION_ZERO>,<FIELD_SIZE>));
            </IF>
            </IF>
            <IF COERCEBOOLEAN>
            if(mRecordArea.Substring(<FIELD_POSITION_ZERO>,<FIELD_SIZE>).Trim().Length!=0)
                if (int.Parse(mRecordArea.Substring(<FIELD_POSITION_ZERO>,<FIELD_SIZE>)) != 0)
                    <Field_odbcname> = true; else m<Field_odbcname> = false;
            else m<Field_odbcname> = false;
            </IF>
            </IF>
            <IF INTEGER>
            if(mRecordArea.Substring(<FIELD_POSITION_ZERO>,<FIELD_SIZE>).Trim().Length!=0)
                <Field_odbcname> = int.Parse(mRecordArea.Substring(<FIELD_POSITION_ZERO>,<FIELD_SIZE>));
            </IF>
            <IF DATE>
            try
            {
                string tmpYear = string.Concat(mRecordArea.Substring(<FIELD_POSITION_ZERO>,4));
                string tmpMonth = string.Concat(mRecordArea.Substring(<FIELD_POSITION_ZERO>+4, 2));
                string tmpDay = string.Concat(mRecordArea.Substring(<FIELD_POSITION_ZERO>+6, 2));
                if(tmpYear.Trim().Length!=0 && tmpMonth.Trim().Length!=0 && tmpDay.Trim().Length!=0)
                    <Field_odbcname> = DateTime.Parse(string.Concat(tmpYear, "-", tmpMonth, "-", tmpDay));
            }
            catch
            {
                <Field_odbcname> = new DateTime(1900, 1, 1);
            }
            </IF>
            </FIELD_LOOP>
        }
    }
}

