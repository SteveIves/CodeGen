<CODEGEN_FILENAME><Structure_name>_Style.CodeGen.xaml</CODEGEN_FILENAME>
<REQUIRES_USERTOKEN>ASSEMBLYNAME</REQUIRES_USERTOKEN>
<OPTIONAL_USERTOKEN>ANCESTORCONTROL=UserControl</OPTIONAL_USERTOKEN>
;//****************************************************************************
;//
;// Title:       Symphony_style.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to define field level styles integrated with Symphony
;//              Data Objects
;//
;// Author:      Richard C. Morris, Synergex Professional Services Group
;//
;// Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;//****************************************************************************
<!--
 WARNING: This code was generated by CodeGen. Any changes that you
          make to this code will be overwritten if the code is regenerated!

 Template author:	Richard C. Morris, Synergex Professional Services Group

 Template Name:	Symphony Framework : <TEMPLATE>.tpl

-->
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:symphonyConverters="clr-namespace:Symphony.Conductor.Converters;assembly=SymphonyConductor"
    xmlns:symphonyTriggers="clr-namespace:Symphony.Conductor.Triggers;assembly=SymphonyConductor"
    xmlns:symphonyUI="clr-namespace:Symphony.Crescendo.Presentation;assembly=SymphonyCrescendo"
    xmlns:symphonyControls="clr-namespace:Symphony.Conductor.Controls;assembly=SymphonyConductor"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity">

    <ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="pack://application:,,,/SymphonyConductor;component/Resources/Styles.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/SymphonyConductor;component/Resources/Converters.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/<ASSEMBLYNAME>;component/Resources/<Structure_name>_Content.CodeGen.xaml"/>
     </ResourceDictionary.MergedDictionaries>

<FIELD_LOOP>
<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
<IF TOOLKIT>
;//First define the prompt information
	<Style x:Key="<Structure_name>_<Field_sqlname>_prompt" TargetType="{x:Type Label}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Label
						Content="<FIELD_PROMPT>"
						IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}">
					</Label>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

;//
;// ALPHA FIELDS --------------------------------------------------------------
;//
<IF ALPHA>
<IF NOSELWND>
<IF TEXTBOX>
<IF DRILL>
;// Alpha as a SearchTextBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SearchTextBox
						HorizontalAlignment="Left"
                        Name="ctl<Structure_name>_<Field_sqlname>"
                        Text="{Binding Path=<Field_sqlname>, Converter={StaticResource alphaConverter}<SYMPHONY_CONVERTER_PARAMETER>, UpdateSourceTrigger=<SYMPHONY_UPDATE_TRIGGER>,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
						<IF NOBREAK>SearchMode="Delayed"</IF>
						<IF BREAK_ALWAYS>SearchMode="Instant"</IF>
                        Command="{Binding RelativeSource={RelativeSource AncestorType={x:Type <ANCESTORCONTROL>}}, Path=<SYMPHONY_SEARCHBOX_COMMAND>}"
                        CommandParameter="<FIELD_DRILLM>DrillState"
                        MaxLength="<FIELD_SIZE>"
						<SYMPHONY_ALPHA_SIZE>
						<IF UPPERCASE>
						CharacterCasing="Upper"
						</IF UPPERCASE>
                        IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
						<IF READONLY>
						IsReadOnly="true"
						</IF READONLY>
						<IF READWRITE>
						IsReadOnly="{Binding Path=<Field_sqlname>IsReadOnly}"
						</IF READWRITE>
						VerticalAlignment="Center"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
                        <symphonyUI:SearchTextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background" >
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SearchTextBox.Style>
                    </symphonyUI:SearchTextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Alpha as SearchTextBox
;// Alpha with drill as a TextBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_noDrill_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        Name="ctl<Structure_name>_<Field_sqlname>_noDrill"
                        Text="{Binding Path=<Field_sqlname>, Converter={StaticResource alphaConverter}<SYMPHONY_CONVERTER_PARAMETER>, UpdateSourceTrigger=<SYMPHONY_UPDATE_TRIGGER>,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="<FIELD_SIZE>"
						<SYMPHONY_ALPHA_SIZE>
						<IF UPPERCASE>
						CharacterCasing="Upper"
						</IF UPPERCASE>
                        IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
						<IF READONLY>
						IsReadOnly="true"
						</IF READONLY>
						<IF READWRITE>
						IsReadOnly="{Binding Path=<Field_sqlname>IsReadOnly}"
						</IF READWRITE>
						VerticalAlignment="Center"
						HorizontalAlignment="Left"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
						            <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>_noDrill}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background" >
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Alpha with drill as TextBox
</IF DRILL>
<IF NODRILL>
;// Alpha as a TextBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        Name="ctl<Structure_name>_<Field_sqlname>"
                        Text="{Binding Path=<Field_sqlname>, Converter={StaticResource alphaConverter}<SYMPHONY_CONVERTER_PARAMETER>, UpdateSourceTrigger=<SYMPHONY_UPDATE_TRIGGER>,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        MaxLength="<FIELD_SIZE>"
						<SYMPHONY_ALPHA_SIZE>
						<IF UPPERCASE>
						CharacterCasing="Upper"
						</IF UPPERCASE>
                        IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
						<IF READONLY>
						IsReadOnly="true"
						</IF READONLY>
						<IF READWRITE>
						IsReadOnly="{Binding Path=<Field_sqlname>IsReadOnly}"
						</IF READWRITE>
						VerticalAlignment="Center"
						HorizontalAlignment="Left"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
						            <TextBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                    </TextBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Alpha as TextBox
</IF NODRILL>
</IF TEXTBOX>
</IF NOSELWND>
<IF COMBOBOX>
;// Alpha as ComboBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="auto"></RowDefinition>
						</Grid.RowDefinitions>
						<ComboBox Grid.Row="0"
							Visibility="{Binding Path=<Field_sqlname>IsReadOnly, Converter={StaticResource reverseBooleanToVisibilityConverter}}"
							HorizontalAlignment="Left"
							Name="ctl<Structure_name>_<Field_sqlname>"
							ItemsSource="{Binding <SYMPHONY_ITEMSSOURCE_PATH>}"
							DisplayMemberPath="Description"
							SelectedValue="{Binding Path=<Field_sqlname>, Converter={StaticResource alphaConverter}<SYMPHONY_CONVERTER_PARAMETER>,
							ValidatesOnDataErrors=True}"
							Validation.ErrorTemplate="{StaticResource validationTemplate}"
							SelectedValuePath="ItemStringValue"
							IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
							Width="<SYMPHONY_SELWND_LENGTH>"
							Margin="0,1,0,1"
							ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
							<ComboBox.Style>
								<Style>
									<Style.Triggers>
										<DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
											<Setter Property="FocusManager.FocusedElement"
													Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
										</DataTrigger>
										<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
											<Setter Property="ComboBox.Background">
												<Setter.Value>
													<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
														<LinearGradientBrush.GradientStops>
															<GradientStop Offset="0.2" Color="WhiteSmoke" />
															<GradientStop Offset="3" Color="Red" />
														</LinearGradientBrush.GradientStops>
													</LinearGradientBrush>
												</Setter.Value>
											</Setter>
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</ComboBox.Style>
						</ComboBox>
						<TextBox Grid.Row="0"
                                 Width="<SYMPHONY_SELWND_LENGTH>"
						         Margin="0,1,0,1"
                                 Text="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>, Path=Text}"
                                 Visibility="{Binding Path=<Field_sqlname>IsReadOnly, Converter={StaticResource BooleanToVisibilityConverter}}"
                                 IsReadOnly="True">
                        </TextBox>
					</Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Alpha as ComboBox
</IF COMBOBOX>
<IF SELWND>
;// Alpha as ComboBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="auto"></RowDefinition>
						</Grid.RowDefinitions>
						<ComboBox Grid.Row="0"
							Visibility="{Binding Path=<Field_sqlname>IsReadOnly, Converter={StaticResource reverseBooleanToVisibilityConverter}}"
							HorizontalAlignment="Left"
							Name="ctl<Structure_name>_<Field_sqlname>"
							ItemsSource="{Binding Source={StaticResource <FIELD_SELWND>items}}"
							DisplayMemberPath="Description"
							SelectedValue="{Binding Path=<Field_sqlname>, Converter={StaticResource alphaConverter}<SYMPHONY_CONVERTER_PARAMETER>,
							ValidatesOnDataErrors=True}"
							Validation.ErrorTemplate="{StaticResource validationTemplate}"
							SelectedValuePath="ItemStringValue"
							IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
							Width="<SYMPHONY_SELWND_LENGTH>"
							Margin="0,1,0,1"
							ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
							<ComboBox.Style>
								<Style>
									<Style.Triggers>
										<DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
											<Setter Property="FocusManager.FocusedElement"
													Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
										</DataTrigger>
										<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
											<Setter Property="ComboBox.Background">
												<Setter.Value>
													<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
														<LinearGradientBrush.GradientStops>
															<GradientStop Offset="0.2" Color="WhiteSmoke" />
															<GradientStop Offset="3" Color="Red" />
														</LinearGradientBrush.GradientStops>
													</LinearGradientBrush>
												</Setter.Value>
											</Setter>
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</ComboBox.Style>
						</ComboBox>
						<TextBox Grid.Row="0"
								 Width="<SYMPHONY_SELWND_LENGTH>"
								 Margin="0,1,0,1"
								 Text="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>, Path=Text}"
								 Visibility="{Binding Path=<Field_sqlname>IsReadOnly, Converter={StaticResource BooleanToVisibilityConverter}}"
								 IsReadOnly="True">
						</TextBox>
					</Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Alpha as ComboBox
</IF SELWND>
<IF RADIOBUTTONS>
;// Alpha as RadioButtons
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
					<StackPanel IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}">
						<StackPanel.Style>
							<Style>
								<Style.Triggers>
									<DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
										<Setter Property="FocusManager.FocusedElement"
												Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</StackPanel.Style>
						<SELECTION_LOOP>
						<RadioButton
									GroupName="grp<Field_sqlname>"
									Content="<SELECTION_TEXT>"
									IsChecked="{Binding Path=<Field_sqlname>, Converter={StaticResource enumAlphaConverter}, ConverterParameter=<SELECTION_VALUE>}">
						</RadioButton>
						</SELECTION_LOOP>
					</StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Alpha as RadioButtons
</IF RADIOBUTTONS>
<IF CHECKBOX>
;// Alpha as a CheckBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <CheckBox
						HorizontalAlignment="Left"
						Name="ctl<Structure_name>_<Field_sqlname>"
						Content="<FIELD_PROMPT>"
                        IsChecked="{Binding Path=<Field_sqlname>, Converter={StaticResource alphaYNConverter}}"
                        IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
                        VerticalAlignment="Center"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                        <CheckBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of ALpha CheckBox
</IF CHECKBOX>
</IF ALPHA>
;//
;// DECIMAL FIELDS (NOT INCLUDING DATE AND TIME) ------------------------------
;//
<IF DECIMAL>
<IF NOPRECISION>
<IF NOSELWND>
<IF TEXTBOX>
;// Decimal as TextBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SynergyDecimalBox
						HorizontalAlignment="Left"
                        Name="ctl<Structure_name>_<Field_sqlname>"
                        Text="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalConverter} <SYMPHONY_CONVERTER_PARAMETER> <SYMPHONY_DECIMAL_FORMAT>
						,UpdateSourceTrigger=<SYMPHONY_UPDATE_TRIGGER>
                        ,ValidatesOnDataErrors=True}"
                        Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
						<IF READONLY>
						IsReadOnly="true"
						</IF READONLY>
						<IF READWRITE>
						IsReadOnly="{Binding Path=<Field_sqlname>IsReadOnly}"
						</IF READWRITE>
                        SynergyDecimalField="False" <IF NEGATIVE_ALLOWED>SynergyAllowNegative="True"</IF>
                        MaxLength="<SYMPHONY_FIELD_SIZE>"
						Width="<SYMPHONY_FIELD_PIXEL_WIDTH>"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
                        <symphonyUI:SynergyDecimalBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SynergyDecimalBox.Style>
                    </symphonyUI:SynergyDecimalBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Decimal as TextBox
</IF TEXTBOX>
</IF NOSELWND>
<IF COMBOBOX>
;// Decimal as ComboBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="auto"></RowDefinition>
						</Grid.RowDefinitions>
						<ComboBox Grid.Row="0"
							Visibility="{Binding Path=<Field_sqlname>IsReadOnly, Converter={StaticResource reverseBooleanToVisibilityConverter}}"
							HorizontalAlignment="Left"
							Name="ctl<Structure_name>_<Field_sqlname>"
							ItemsSource="{Binding Source={StaticResource <FIELD_ORIGINAL_NAME>items}}"
							DisplayMemberPath="Description"
							SelectedValue="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalConverter}<SYMPHONY_CONVERTER_PARAMETER>,
							ValidatesOnDataErrors=True}"
							Validation.ErrorTemplate="{StaticResource validationTemplate}"
							SelectedValuePath="IndexValue"
							IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
							Width="<SYMPHONY_SELWND_LENGTH>"
							Margin="0,1,0,1"
							ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
							<ComboBox.Style>
								<Style>
									<Style.Triggers>
										<DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
											<Setter Property="FocusManager.FocusedElement"
													Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
										</DataTrigger>
										<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
											<Setter Property="ComboBox.Background">
												<Setter.Value>
													<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
														<LinearGradientBrush.GradientStops>
															<GradientStop Offset="0.2" Color="WhiteSmoke" />
															<GradientStop Offset="3" Color="Red" />
														</LinearGradientBrush.GradientStops>
													</LinearGradientBrush>
												</Setter.Value>
											</Setter>
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</ComboBox.Style>
						</ComboBox>
						<TextBox Grid.Row="0"
								 Width="<SYMPHONY_SELWND_LENGTH>"
								 Margin="0,1,0,1"
								 Text="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>, Path=Text}"
								 Visibility="{Binding Path=<Field_sqlname>IsReadOnly, Converter={StaticResource BooleanToVisibilityConverter}}"
								 IsReadOnly="True">
						</TextBox>
					</Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Decimal as ComboBox
</IF COMBOBOX>
<IF SELWND>
;// decimal as ComboBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="auto"></RowDefinition>
						</Grid.RowDefinitions>
						<ComboBox Grid.Row="0"
							Visibility="{Binding Path=<Field_sqlname>IsReadOnly, Converter={StaticResource reverseBooleanToVisibilityConverter}}"
							HorizontalAlignment="Left"
							Name="ctl<Structure_name>_<Field_sqlname>"
							ItemsSource="{Binding Source={StaticResource <FIELD_SELWND>items}}"
							DisplayMemberPath="Description"
							SelectedValue="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalConverter},
							ValidatesOnDataErrors=True}"
							Validation.ErrorTemplate="{StaticResource validationTemplate}"
							SelectedValuePath="ItemValue"
							IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
							Width="<SYMPHONY_SELWND_LENGTH>"
							Margin="0,1,0,1"
							ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
							<ComboBox.Style>
								<Style>
									<Style.Triggers>
										<DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
											<Setter Property="FocusManager.FocusedElement"
													Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
										</DataTrigger>
										<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
											<Setter Property="ComboBox.Background">
												<Setter.Value>
													<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
														<LinearGradientBrush.GradientStops>
															<GradientStop Offset="0.2" Color="WhiteSmoke" />
															<GradientStop Offset="3" Color="Red" />
														</LinearGradientBrush.GradientStops>
													</LinearGradientBrush>
												</Setter.Value>
											</Setter>
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</ComboBox.Style>
						</ComboBox>
						<TextBox Grid.Row="0"
								 Width="<SYMPHONY_SELWND_LENGTH>"
								 Margin="0,1,0,1"
								 Text="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>, Path=Text}"
								 Visibility="{Binding Path=<Field_sqlname>IsReadOnly, Converter={StaticResource BooleanToVisibilityConverter}}"
								 IsReadOnly="True">
						</TextBox>
					</Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of decimal as ComboBox
</IF SELWND>
<IF RADIOBUTTONS>
;// Decimal as RadioButtons
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
					<StackPanel IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}">
						<StackPanel.Style>
							<Style>
								<Style.Triggers>
									<DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
										<Setter Property="FocusManager.FocusedElement"
												Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</StackPanel.Style>
						<SELECTION_LOOP>
						<RadioButton
									GroupName="grp<Field_sqlname>"
									Content="<SELECTION_TEXT>"
									IsChecked="{Binding Path=<Field_sqlname>, Converter={StaticResource enumDecimalConverter}, ConverterParameter=<SELECTION_VALUE>}">
						</RadioButton>
						</SELECTION_LOOP>
					</StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Decimal as RadioButtons
</IF RADIOBUTTONS>
<IF CHECKBOX>
;// Decimal as CheckBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <CheckBox
						HorizontalAlignment="Left"
                        Name="ctl<Structure_name>_<Field_sqlname>"
						Content="<FIELD_PROMPT>"
                        IsChecked="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalTFConverter}}"
                        IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
                        VerticalAlignment="Center"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                        <CheckBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Decimal as CheckBox
</IF CHECKBOX>
</IF NOPRECISION>
</IF DECIMAL>
;//
;// IMPLIED DECIMAL FIELDS ----------------------------------------------------
;//
<IF DECIMAL>
<IF PRECISION>
<IF TEXTBOX>
;// Implied Decimal as TextBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SynergyDecimalBox
						HorizontalAlignment="Left"
                        Name="ctl<Structure_name>_<Field_sqlname>"
                        Text="{Binding Path=<Field_sqlname>, Converter={StaticResource impliedDecimalConverter} <SYMPHONY_CONVERTER_PARAMETER> <SYMPHONY_DECIMAL_FORMAT>
								, UpdateSourceTrigger=<SYMPHONY_UPDATE_TRIGGER>
                                , ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
						<IF READONLY>
						IsReadOnly="true"
						</IF READONLY>
						<IF READWRITE>
						IsReadOnly="{Binding Path=<Field_sqlname>IsReadOnly}"
						</IF READWRITE>
                        SynergyDecimalField="True" <IF NEGATIVE_ALLOWED>SynergyAllowNegative="True"</IF>
                        NumberOfDecimals="<SYMPHONY_DECIMAL_PLACES>"
						MaxLength="<SYMPHONY_FIELD_SIZE>"
						Width="<SYMPHONY_FIELD_PIXEL_WIDTH>"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
                        <symphonyUI:SynergyDecimalBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SynergyDecimalBox.Style>
                    </symphonyUI:SynergyDecimalBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Implied Decimal as TextBox
</IF TEXTBOX>
<IF COMBOBOX>
;// Implied Decimal as ComboBox
    <!-- Template needs a style for a Implied Decimal as ComboBox -->
;// End of Implied Decimal as ComboBox
</IF COMBOBOX>
<IF RADIOBUTTONS>
;// Implied Decimal as RadioButtons
    <!-- Template needs a style for a Implied Decimal as RadioButtons -->
;// End of Implied Decimal as RadioButtons
</IF RADIOBUTTONS>
<IF CHECKBOX>
;// Implied Decimal as CheckBox
    <!-- Template needs a style for a Implied Decimal as CheckBox -->
;// End of Implied Decimal as CheckBox
</IF CHECKBOX>
</IF PRECISION>
</IF DECIMAL>
;//
;// REVERSE DATE FIELDS (YYMMDD and YYYYMMDD) ---------------------------------
;//
;//     Note: If the template code is the same for YYMMDD and YYYYMMDD then you
;//     can use <IF DATE_YMD> to match both together.
;//
;//
<IF DATE_YYMMDD>
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <DatePicker
						HorizontalAlignment="Left"
						Name="ctl<Structure_name>_<Field_sqlname>"
                        SelectedDate="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalDateConverter}, UpdateSourceTrigger=<SYMPHONY_UPDATE_TRIGGER>,
								ConverterParameter=FORMAT:YYMMDD<IF NOTDATETODAY>|NODEFAULTODAY</IF>,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                                IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
                                VerticalAlignment="Center"
								ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                        <DatePicker.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="DatePicker.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </DatePicker.Style>
                    </DatePicker>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;//Now for the read only field!
	<Style x:Key="<Structure_name>_<Field_sqlname>_RO_style" TargetType="{x:Type symphonyControls:FieldControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Focusable" Value="False"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        VerticalAlignment="Center"
                        HorizontalAlignment="Left"
                        IsReadOnly="True"
                        Text="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalDateConverter},
						ConverterParameter=FORMAT:YYMMDD<IF NOTDATETODAY>|NODEFAULTODAY</IF>
						, StringFormat=\{0:d\}}"
                        Width="<FIELD_PIXEL_WIDTH>">
                    </TextBox>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</IF DATE_YYMMDD>
<IF DATE_YYYYMMDD>
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <DatePicker
						HorizontalAlignment="Left"
                        Name="ctl<Structure_name>_<Field_sqlname>"
                        SelectedDate="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalDateConverter}, UpdateSourceTrigger=<SYMPHONY_UPDATE_TRIGGER>,
								ConverterParameter=FORMAT:YYYYMMDD<IF NOTDATETODAY>|NODEFAULTODAY</IF>,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                                IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
                                VerticalAlignment="Center"
								ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                        <DatePicker.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="DatePicker.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </DatePicker.Style>
                    </DatePicker>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;//Now for the read only field!
	<Style x:Key="<Structure_name>_<Field_sqlname>_RO_style" TargetType="{x:Type symphonyControls:FieldControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Focusable" Value="False"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        VerticalAlignment="Center"
                        HorizontalAlignment="Left"
                        IsReadOnly="True"
                        Text="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalDateConverter},
						ConverterParameter=FORMAT:YYYYMMDD<IF NOTDATETODAY>|NODEFAULTODAY</IF>
						, StringFormat=\{0:d\}}"
                        Width="<FIELD_PIXEL_WIDTH>">
                    </TextBox>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</IF DATE_YYYYMMDD>
;//
;// JULIAN DATE FIELDS (YYJJJ and YYYYJJJ) ------------------------------------
;//
;//     Note: If the template code is the same for YYJJJ and YYYYJJJ then you
;//     can use <IF DATE_JULIAN> to match both together.
;//
<IF DATE_YYJJJ>
	<Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
	  <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
	  <Setter Property="Focusable" Value="False"></Setter>
	  <Setter Property="Template">
		  <Setter.Value>
			  <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
				  <DatePicker
					  HorizontalAlignment="Left"
					  Name="ctl<Structure_name>_<Field_sqlname>"
					  SelectedDate="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalDateConverter}, UpdateSourceTrigger=<SYMPHONY_UPDATE_TRIGGER>,
							  ConverterParameter=FORMAT:JULIAN<IF NOTDATETODAY>|NODEFAULTODAY</IF>,
							  ValidatesOnDataErrors=True}"
							  Validation.ErrorTemplate="{StaticResource validationTemplate}"
							  IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
                              VerticalAlignment="Center"
							  ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
					  <DatePicker.Style>
						  <Style>
							  <Style.Triggers>
								  <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
									  <Setter Property="FocusManager.FocusedElement"
											  Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
								  </DataTrigger>
								  <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
									  <Setter Property="DatePicker.Background">
										  <Setter.Value>
											  <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
												  <LinearGradientBrush.GradientStops>
													  <GradientStop Offset="0.2" Color="WhiteSmoke" />
													  <GradientStop Offset="3" Color="Red" />
												  </LinearGradientBrush.GradientStops>
											  </LinearGradientBrush>
										  </Setter.Value>
									  </Setter>
								  </DataTrigger>
							  </Style.Triggers>
						  </Style>
					  </DatePicker.Style>
				  </DatePicker>
			  </ControlTemplate>
		  </Setter.Value>
	  </Setter>
	</Style>
;//Now for the read only field!
	<Style x:Key="<Structure_name>_<Field_sqlname>_RO_style" TargetType="{x:Type symphonyControls:FieldControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Focusable" Value="False"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        VerticalAlignment="Center"
                        HorizontalAlignment="Left"
                        IsReadOnly="True"
                        Text="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalDateConverter},
						ConverterParameter=FORMAT:JULIAN<IF NOTDATETODAY>|NODEFAULTODAY</IF>
						, StringFormat=\{0:d\}}"
                        Width="<FIELD_PIXEL_WIDTH>">
                    </TextBox>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</IF DATE_YYJJJ>
<IF DATE_YYYYJJJ>
	<Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
	  <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
	  <Setter Property="Focusable" Value="False"></Setter>
	  <Setter Property="Template">
		  <Setter.Value>
			  <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
				  <DatePicker
					  HorizontalAlignment="Left"
					  Name="ctl<Structure_name>_<Field_sqlname>"
					  SelectedDate="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalDateConverter}, UpdateSourceTrigger=<SYMPHONY_UPDATE_TRIGGER>,
							  ConverterParameter=FORMAT:JULIAN<IF NOTDATETODAY>|NODEFAULTODAY</IF>,
							  ValidatesOnDataErrors=True}"
							  Validation.ErrorTemplate="{StaticResource validationTemplate}"
							  IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
                              VerticalAlignment="Center"
							  ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
					  <DatePicker.Style>
						  <Style>
							  <Style.Triggers>
								  <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
									  <Setter Property="FocusManager.FocusedElement"
											  Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
								  </DataTrigger>
								  <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
									  <Setter Property="DatePicker.Background">
										  <Setter.Value>
											  <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
												  <LinearGradientBrush.GradientStops>
													  <GradientStop Offset="0.2" Color="WhiteSmoke" />
													  <GradientStop Offset="3" Color="Red" />
												  </LinearGradientBrush.GradientStops>
											  </LinearGradientBrush>
										  </Setter.Value>
									  </Setter>
								  </DataTrigger>
							  </Style.Triggers>
						  </Style>
					  </DatePicker.Style>
				  </DatePicker>
			  </ControlTemplate>
		  </Setter.Value>
	  </Setter>
	</Style>
;//Now for the read only field!
	<Style x:Key="<Structure_name>_<Field_sqlname>_RO_style" TargetType="{x:Type symphonyControls:FieldControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Focusable" Value="False"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <TextBox
                        VerticalAlignment="Center"
                        HorizontalAlignment="Left"
                        IsReadOnly="True"
                        Text="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalDateConverter},
						ConverterParameter=FORMAT:JULIAN<IF NOTDATETODAY>|NODEFAULTODAY</IF>
						, StringFormat=\{0:d\}}"
                        Width="<FIELD_PIXEL_WIDTH>">
                    </TextBox>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</IF DATE_YYYYJJJ>
;//
;// PERIOD DATE FIELDS (YYPP and YYYYPP) --------------------------------------
;//
;//     Note: If the template code is the same for YYPP and YYYYPP then you
;//     can use <IF DATE_PERIOD> to match both together.
;//
<IF DATE_YYPP>
    <!-- Template needs a style for a YYPP dates -->
</IF DATE_YYPP>
<IF DATE_YYYYPP>
    <!-- Template needs a style for a YYYYPP dates -->
</IF DATE_YYYYPP>
;//
;// TIME FIELDS ---------------------------------------------------------------
;//
;//     Note: If the template code is the same for HHMM and HHMMSS then you
;//     can use <IF TIME> to match both together.
;//
<IF TIME_HHMM>
    <!-- Template needs a style for a HHMM times -->
</IF TIME_HHMM>
<IF TIME_HHMMSS>
    <!-- Template needs a style for a HHMMSS times -->
</IF TIME_HHMMSS>
;//
;// INTEGER FIELDS ------------------------------------------------------------
;//
<IF INTEGER>
<IF TEXTBOX>
<IF NOSELWND>
;// Integer as TextBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <symphonyUI:SynergyIntBox
						HorizontalAlignment="Left"
                        Name="ctl<Structure_name>_<Field_sqlname>"
                        Text="{Binding Path=<Field_sqlname>, Converter={StaticResource intConverter}<SYMPHONY_CONVERTER_PARAMETER>, UpdateSourceTrigger=<SYMPHONY_UPDATE_TRIGGER>,
                                ValidatesOnDataErrors=True}"
                                Validation.ErrorTemplate="{StaticResource validationTemplate}"
                        IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
                        MaxLength="<FIELD_SIZE>"
						Width="<FIELD_PIXEL_WIDTH>"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						            <i:Interaction.Behaviors>
						              <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						            </i:Interaction.Behaviors>
                        <symphonyUI:SynergyIntBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
                                    </DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </symphonyUI:SynergyIntBox.Style>
                    </symphonyUI:SynergyIntBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Integer as TextBox
</IF NOSELWND>
</IF TEXTBOX>
<IF COMBOBOX>
;// Integer as ComboBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
				<ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="auto"></RowDefinition>
						</Grid.RowDefinitions>
						<ComboBox Grid.Row="0"
							Visibility="{Binding Path=<Field_sqlname>IsReadOnly, Converter={StaticResource reverseBooleanToVisibilityConverter}}"
							HorizontalAlignment="Left"
							Name="ctl<Structure_name>_<Field_sqlname>"
							ItemsSource="{Binding Source={StaticResource <FIELD_ORIGINAL_NAME>items}}"
							DisplayMemberPath="Description"
							SelectedValue="{Binding Path=<Field_sqlname>, Converter={StaticResource intConverter},
							ValidatesOnDataErrors=True}"
							Validation.ErrorTemplate="{StaticResource validationTemplate}"
							SelectedValuePath="IndexValue"
							IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
							Width="<SYMPHONY_SELWND_LENGTH>"
							Margin="0,1,0,1"
							ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
							<ComboBox.Style>
								<Style>
									<Style.Triggers>
										<DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
											<Setter Property="FocusManager.FocusedElement"
													Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
										</DataTrigger>
										<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
											<Setter Property="ComboBox.Background">
												<Setter.Value>
													<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
														<LinearGradientBrush.GradientStops>
															<GradientStop Offset="0.2" Color="WhiteSmoke" />
															<GradientStop Offset="3" Color="Red" />
														</LinearGradientBrush.GradientStops>
													</LinearGradientBrush>
												</Setter.Value>
											</Setter>
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</ComboBox.Style>
						</ComboBox>
						<TextBox Grid.Row="0"
								 Width="<SYMPHONY_SELWND_LENGTH>"
								 Margin="0,1,0,1"
								 Text="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>, Path=Text}"
								 Visibility="{Binding Path=<Field_sqlname>IsReadOnly, Converter={StaticResource BooleanToVisibilityConverter}}"
								 IsReadOnly="True">
						</TextBox>
					</Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Integer as ComboBox
</IF COMBOBOX>
<IF SELWND>
;// integer as ComboBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="auto"></RowDefinition>
						</Grid.RowDefinitions>
						<ComboBox Grid.Row="0"
							Visibility="{Binding Path=<Field_sqlname>IsReadOnly, Converter={StaticResource reverseBooleanToVisibilityConverter}}"
							HorizontalAlignment="Left"
							Name="ctl<Structure_name>_<Field_sqlname>"
							ItemsSource="{Binding Source={StaticResource <FIELD_SELWND>items}}"
							DisplayMemberPath="Description"
							SelectedValue="{Binding Path=<Field_sqlname>, Converter={StaticResource intConverter},
							ValidatesOnDataErrors=True}"
							Validation.ErrorTemplate="{StaticResource validationTemplate}"
							SelectedValuePath="ItemValue"
							IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
							Width="<SYMPHONY_SELWND_LENGTH>"
							Margin="0,1,0,1"
							ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
							<ComboBox.Style>
								<Style>
									<Style.Triggers>
										<DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
											<Setter Property="FocusManager.FocusedElement"
													Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
										</DataTrigger>
										<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
											<Setter Property="ComboBox.Background">
												<Setter.Value>
													<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
														<LinearGradientBrush.GradientStops>
															<GradientStop Offset="0.2" Color="WhiteSmoke" />
															<GradientStop Offset="3" Color="Red" />
														</LinearGradientBrush.GradientStops>
													</LinearGradientBrush>
												</Setter.Value>
											</Setter>
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</ComboBox.Style>
						</ComboBox>
						<TextBox Grid.Row="0"
								 Width="<SYMPHONY_SELWND_LENGTH>"
								 Margin="0,1,0,1"
								 Text="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>, Path=Text}"
								 Visibility="{Binding Path=<Field_sqlname>IsReadOnly, Converter={StaticResource BooleanToVisibilityConverter}}"
								 IsReadOnly="True">
						</TextBox>
					</Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of integer as ComboBox
</IF SELWND>
<IF RADIOBUTTONS>
;// Integer as RadioButtons
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
					<StackPanel IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}">
						<StackPanel.Style>
							<Style>
								<Style.Triggers>
									<DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
										<Setter Property="FocusManager.FocusedElement"
												Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</StackPanel.Style>
						<SELECTION_LOOP>
						<RadioButton
									GroupName="grp<Field_sqlname>"
									Content="<SELECTION_TEXT>"
									IsChecked="{Binding Path=<Field_sqlname>, Converter={StaticResource enumIntegerConverter}, ConverterParameter=<SELECTION_VALUE>}">
						</RadioButton>
						</SELECTION_LOOP>
					</StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Integer as RadioButtons
</IF RADIOBUTTONS>
<IF CHECKBOX>
;// Integer as CheckBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <CheckBox
						HorizontalAlignment="Left"
                        Name="ctl<Structure_name>_<Field_sqlname>"
						Content="<FIELD_PROMPT>"
                        IsChecked="{Binding Path=<Field_sqlname>, Converter={StaticResource intTFConverter}}"
                        IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
                        VerticalAlignment="Center"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                        <CheckBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Integer as CheckBox
</IF CHECKBOX>
</IF INTEGER>
;//
;// INTEGER FIELDS ------------------------------------------------------------
;//
<IF BOOLEAN>
<IF CHECKBOX>
;// Boolean as CheckBox
    <Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Focusable" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
                    <CheckBox
						HorizontalAlignment="Left"
                        Name="ctl<Structure_name>_<Field_sqlname>"
						Content="<FIELD_PROMPT>"
                        IsChecked="{Binding Path=<Field_sqlname>}"
                        IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
                        VerticalAlignment="Center"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
                        <CheckBox.Style>
                            <Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
                                        <Setter Property="FocusManager.FocusedElement"
                                                Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </CheckBox.Style>
                    </CheckBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
;// End of Boolean as CheckBox
</IF CHECKBOX>
</IF BOOLEAN>
</IF TOOLKIT>
</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
<IF USER>
<IF TOOLKIT>
	<Style x:Key="<Structure_name>_<Field_sqlname>_style" TargetType="{x:Type symphonyControls:FieldControl}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Focusable" Value="False"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type symphonyControls:FieldControl}">
					<TextBox
						Name="ctl<Structure_name>_<Field_sqlname>"
						Text="{Binding Path=<Field_sqlname>, Converter={StaticResource alphaConverter}<SYMPHONY_CONVERTER_PARAMETER>, UpdateSourceTrigger=<SYMPHONY_UPDATE_TRIGGER>,
								ValidatesOnDataErrors=True}"
								Validation.ErrorTemplate="{StaticResource validationTemplate}"
						MaxLength="<FIELD_SIZE>"
						<SYMPHONY_ALPHA_SIZE>
						<IF UPPERCASE>
						CharacterCasing="Upper"
						</IF UPPERCASE>
						IsEnabled="{Binding Path=<Field_sqlname>IsEnabled}"
						<IF READONLY>
						IsReadOnly="true"
						</IF READONLY>
						<IF READWRITE>
						IsReadOnly="{Binding Path=<Field_sqlname>IsReadOnly}"
						</IF READWRITE>
						VerticalAlignment="Center"
						HorizontalAlignment="Left"
						ToolTip="{Binding RelativeSource={RelativeSource Self},Path=(Validation.Errors), Converter={StaticResource errorConveter}}">
						<i:Interaction.Behaviors>
						  <symphonyControls:SelectAllTextBoxBehavior></symphonyControls:SelectAllTextBoxBehavior>
						</i:Interaction.Behaviors>
						<TextBox.Style>
							<Style>
								<Style.Triggers>
									<DataTrigger Binding="{Binding Path=<Field_sqlname>IsFocused}" Value="true">
										<Setter Property="FocusManager.FocusedElement"
												Value="{Binding ElementName=ctl<Structure_name>_<Field_sqlname>}"></Setter>
									</DataTrigger>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=(Validation.HasError)}" Value="True">
										<Setter Property="TextBox.Background">
											<Setter.Value>
												<LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
													<LinearGradientBrush.GradientStops>
														<GradientStop Offset="0.2" Color="WhiteSmoke" />
														<GradientStop Offset="3" Color="Red" />
													</LinearGradientBrush.GradientStops>
												</LinearGradientBrush>
											</Setter.Value>
										</Setter>
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</TextBox.Style>
					</TextBox>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</IF TOOLKIT>
</IF USER>
	
</FIELD_LOOP>
</ResourceDictionary>

