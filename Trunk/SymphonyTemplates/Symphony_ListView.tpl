<CODEGEN_FILENAME><Structure_name>_ListView.CodeGen.xaml</CODEGEN_FILENAME>
<REQUIRES_USERTOKEN>ASSEMBLYNAME</REQUIRES_USERTOKEN>
<PROCESS_TEMPLATE>Symphony_ListView_code</PROCESS_TEMPLATE>
;//****************************************************************************
;//
;// Title:       Symphony_ListView.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to provide lookup list view xaml layout
;//
;// Author:      Richard C. Morris, Synergex Professional Services Group
;//
;// Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;//****************************************************************************
<!--
 WARNING: This code was generated by CodeGen. Any changes that you
          make to this code will be overwritten if the code is regenerated!

 Template author:	Richard C. Morris, Synergex Professional Services Group

 Template Name:	Symphony Framework : <TEMPLATE>.tpl

-->
<UserControl x:Class="<NAMESPACE>.<Structure_name>_ListView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             xmlns:symTrigger="clr-namespace:Symphony.Conductor.Triggers;assembly=SymphonyConductor"
             xmlns:symConvert="clr-namespace:Symphony.Conductor.Converters;assembly=SymphonyConductor"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
			<ResourceDictionary Source="pack://application:,,,/SymphonyConductor;component/Resources/Styles.xaml"/>
			<ResourceDictionary Source="pack://application:,,,/SymphonyConductor;component/Resources/Converters.xaml"/>
            <ResourceDictionary Source="pack://application:,,,/<ASSEMBLYNAME>;component/Resources/<Structure_name>_Content.CodeGen.xaml"/>
			<ResourceDictionary Source="pack://application:,,,/<ASSEMBLYNAME>;component/Resources/<Structure_name>_style.CodeGen.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">

        <Grid.RowDefinitions>
            <RowDefinition Height="{Binding Path=OptionRowHeight, Mode=TwoWay}" MinHeight="32"></RowDefinition>
            <RowDefinition Height="auto"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="auto"></RowDefinition>
        </Grid.RowDefinitions>

        <Border Grid.Row="0">
            <Grid>
                <Grid.Background>
                    <LinearGradientBrush StartPoint="1,0" EndPoint="0,1" >
                        <GradientStop Offset="0" Color="CadetBlue" />
                        <GradientStop Offset="0.5" Color="White" />
                    </LinearGradientBrush>
                </Grid.Background>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"></RowDefinition>
                    <RowDefinition Height="*"></RowDefinition>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <Image Grid.Column="0" HorizontalAlignment="left" VerticalAlignment="Center" Width="16" Height="16"
                           Source="pack://application:,,,/SymphonyCrescendo;component/Images/16x16/Tip.png"
                           ToolTip="Drag the splitter bar below to reveal the column picker."></Image>
                    <TextBlock Grid.Column="1" Text="<Structure_name> search results" FontWeight="Bold" HorizontalAlignment="Center"></TextBlock>
                </Grid>
				<ScrollViewer Grid.Row="1" Margin="5" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
					<StackPanel Orientation="Vertical" HorizontalAlignment="Left">
						<FIELD_LOOP>
						<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
						<IF LANGUAGE>
						<IF TOOLKIT>
						<IF REPORT>
						<CheckBox Margin="5" IsChecked="{Binding Path=ResultsVisibility.<Field_sqlname>Visibility}" x:Name="chk<Field_sqlname>Visibility" Content="<FIELD_PROMPT>" />
						</IF REPORT>
						</IF TOOLKIT>
						</IF LANGUAGE>
						</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
						</FIELD_LOOP>
					</StackPanel>

				</ScrollViewer>

            </Grid>
        </Border>

        <GridSplitter Grid.Row="1" Height="5" ResizeDirection="Rows" Width="auto"
                      HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
        </GridSplitter>

        <Border Grid.Row="2">

			<DataGrid ItemsSource="{Binding Path=ResultsTable}" CanUserAddRows="False" CanUserDeleteRows="False"
                      SelectedItem="{Binding Path=CurrentResultItem}"
				      CanUserReorderColumns="True" CanUserResizeColumns="True" CanUserResizeRows="False" CanUserSortColumns="True"
				      AutoGenerateColumns="False" IsReadOnly="True" SelectionMode="Single">
				<i:Interaction.Triggers>
					<i:EventTrigger EventName="Sorting">
						<symTrigger:DataGridCustomerSorting ItemsSource="{Binding Path=ResultsTable}"></symTrigger:DataGridCustomerSorting>
					</i:EventTrigger>

					<i:EventTrigger EventName="MouseDoubleClick">
						<symTrigger:UIElementGenericCommander Command="{Binding Path=SelectItem}"></symTrigger:UIElementGenericCommander>
					</i:EventTrigger>
				</i:Interaction.Triggers>
				<DataGrid.Columns>
					<FIELD_LOOP>
					<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
					<IF LANGUAGE>
					<IF TOOLKIT>
					<IF REPORT>
					<IF ALPHA>
					<IF TEXTBOX>
					<IF NOSELWND>
                    <DataGridTextColumn Header="<FIELD_HEADING>"
                                        Binding="{Binding Path=<Field_sqlname>, Converter={StaticResource alphaConverter}}"
                                        Width="auto"
					Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
                    </DataGridTextColumn>
					</IF NOSELWND>
					</IF TEXTBOX>
					<IF COMBOBOX>
                    <DataGridComboBoxColumn Header="<FIELD_HEADING>"
											Width="auto"
                                            DisplayMemberPath="Description"
                                            SelectedValuePath="ItemStringValue"
                                            ItemsSource="{Binding Source={StaticResource <FIELD_SQLNAME>items}}"
                                            SelectedValueBinding="{Binding Path=<Field_sqlname>, Converter={StaticResource alphaConverter}}"
					    Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
                    </DataGridComboBoxColumn>
					</IF COMBOBOX>
					<IF SELWND>
					<DataGridComboBoxColumn Header="<FIELD_HEADING>"
											Width="auto"
											DisplayMemberPath="Description"
											SelectedValuePath="ItemStringValue"
											ItemsSource="{Binding Source={StaticResource <FIELD_SELWND>items}}"
											SelectedValueBinding="{Binding Path=<Field_sqlname>, Converter={StaticResource alphaConverter}}"
											Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
					</DataGridComboBoxColumn>
					</IF SELWND>
					<IF RADIOBUTTONS>
					 <!-- Template needs a style for decimal alpha fields -->
					</IF RADIOBUTTONS>
					<IF CHECKBOX>
                    <DataGridCheckBoxColumn Header="<FIELD_HEADING>"
                                            Binding="{Binding Path=<Field_sqlname>, Converter={StaticResource alphaYNConverter}}"
                                            Width="auto"
					    Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
                    </DataGridCheckBoxColumn>
					</IF CHECKBOX>
					</IF ALPHA>
;//
;// DECIMAL FIELDS (NOT INCLUDING DATE AND TIME) ------------------------------
;//
					<IF DECIMAL>
					<IF NOPRECISION>
					<IF TEXTBOX>
					<DataGridTextColumn Header="<FIELD_HEADING>"
										Binding="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalConverter} <SYMPHONY_DECIMAL_FORMAT>}"
										Width="auto"
										Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
					</DataGridTextColumn>
					</IF TEXTBOX>
					<IF COMBOBOX>
					<DataGridComboBoxColumn Header="<FIELD_HEADING>"
											Width="auto"
											DisplayMemberPath="Description"
											SelectedValuePath="IndexValue"
											ItemsSource="{Binding Source={StaticResource <FIELD_SQLNAME>items}}"
											SelectedValueBinding="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalConverter}}"
											Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
					</DataGridComboBoxColumn>
					</IF COMBOBOX>
					<IF SELWND>
					<DataGridComboBoxColumn Header="<FIELD_HEADING>"
											Width="auto"
											DisplayMemberPath="Description"
											SelectedValuePath="IndexValue"
											ItemsSource="{Binding Source={StaticResource <FIELD_SELWND>items}}"
											SelectedValueBinding="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalConverter}}"
											Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
					</DataGridComboBoxColumn>
					</IF SELWND>
					<IF RADIOBUTTONS>
					  <!-- Template needs a style for decimal radio fields -->
					</IF RADIOBUTTONS>
					<IF CHECKBOX>
                    <DataGridCheckBoxColumn Header="<FIELD_HEADING>"
                                            Binding="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalTFConverter}}"
                                            Width="auto"
					    Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
                    </DataGridCheckBoxColumn>
					</IF CHECKBOX>
					</IF NOPRECISION>
					</IF DECIMAL>
;//
;// IMPLIED DECIMAL FIELDS ----------------------------------------------------
;//
					<IF DECIMAL>
					<IF PRECISION>
					<IF TEXTBOX>
					<DataGridTextColumn Header="<FIELD_HEADING>"
										Binding="{Binding Path=<Field_sqlname>, Converter={StaticResource impliedDecimalConverter} <SYMPHONY_DECIMAL_FORMAT>}"
										Width="auto"
										Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
					</DataGridTextColumn>
					</IF TEXTBOX>
					</IF PRECISION>
					</IF DECIMAL>
;//
;// REVERSE DATE FIELDS (YYMMDD and YYYYMMDD) ---------------------------------
;//
;//     Note: If the template code is the same for YYMMDD and YYYYMMDD then you
;//     can use <IF DATE_YMD> to match both together.
;//
;//<IF NODATETODAY>|NODEFAULTODAY</IF NODATETODAY>
					<IF DATE_YYMMDD>
                    <DataGridTextColumn Header="<FIELD_HEADING>"
                                        Binding="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalDateConverter},
                                        ConverterParameter=FORMAT:YYMMDD,
                                        StringFormat={}{0:dd-MMM-yyyy}}"
                                        Width="auto"
					Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
                    </DataGridTextColumn>
					</IF DATE_YYMMDD>
;//<IF NODATETODAY>|NODEFAULTODAY</IF NODATETODAY>
					<IF DATE_YYYYMMDD>
                    <DataGridTextColumn Header="<FIELD_HEADING>"
                                        Binding="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalDateConverter},
                                        ConverterParameter=FORMAT:YYYYMMDD,
                                        StringFormat={}{0:dd-MMM-yyyy}}"
                                        Width="auto"
					Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
                    </DataGridTextColumn>
					</IF DATE_YYYYMMDD>
;//
;// JULIAN DATE FIELDS (YYJJJ and YYYYJJJ) ------------------------------------
;//
;//     Note: If the template code is the same for YYJJJ and YYYYJJJ then you
;//     can use <IF DATE_JULIAN> to match both together.
;//
;//<IF NODATETODAY>|NODEFAULTODAY</IF>
					<IF DATE_YYJJJ>
                    <DataGridTextColumn Header="<FIELD_HEADING>"
                                        Binding="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalDateConverter},
                                        ConverterParameter=FORMAT:JULIAN,
                                        StringFormat={}{0:dd-MMM-yyyy}}"
                                        Width="auto"
					Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
                    </DataGridTextColumn>
					</IF DATE_YYJJJ>
;//<IF NODATETODAY>|NODEFAULTODAY</IF>
					<IF DATE_YYYYJJJ>
                    <DataGridTextColumn Header="<FIELD_HEADING>"
                                        Binding="{Binding Path=<Field_sqlname>, Converter={StaticResource decimalDateConverter},
                                        ConverterParameter=FORMAT:JULIAN,
                                        StringFormat={}{0:dd-MMM-yyyy}}"
                                        Width="auto"
					Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
                    </DataGridTextColumn>
					</IF DATE_YYYYJJJ>
;//
;// PERIOD DATE FIELDS (YYPP and YYYYPP) --------------------------------------
;//
;//     Note: If the template code is the same for YYPP and YYYYPP then you
;//     can use <IF DATE_PERIOD> to match both together.
;//
					<IF DATE_YYPP>
						<!-- Template needs a style for a YYPP dates -->
					</IF DATE_YYPP>
					<IF DATE_YYYYPP>
						<!-- Template needs a style for a YYYYPP dates -->
					</IF DATE_YYYYPP>
;//
;// TIME FIELDS ---------------------------------------------------------------
;//
;//     Note: If the template code is the same for HHMM and HHMMSS then you
;//     can use <IF TIME> to match both together.
;//
					<IF TIME_HHMM>
						<!-- Template needs a style for a HHMM times -->
					</IF TIME_HHMM>
					<IF TIME_HHMMSS>
						<!-- Template needs a style for a HHMMSS times -->
					</IF TIME_HHMMSS>
;//
;// INTEGER FIELDS ------------------------------------------------------------
;//
					<IF INTEGER>
					<IF TEXTBOX>
					<DataGridTextColumn Header="<FIELD_HEADING>"
										Binding="{Binding Path=<Field_sqlname>, Converter={StaticResource intConverter}}"
										Width="auto"
										Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
					</DataGridTextColumn>
					</IF TEXTBOX>
					<IF COMBOBOX>
					<DataGridComboBoxColumn Header="<FIELD_HEADING>"
											Width="auto"
											DisplayMemberPath="Description"
											SelectedValuePath="IndexValue"
											ItemsSource="{Binding Source={StaticResource <FIELD_SQLNAME>items}}"
											SelectedValueBinding="{Binding Path=<Field_sqlname>, Converter={StaticResource intConverter}}"
											Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
					</DataGridComboBoxColumn>
					</IF COMBOBOX>
					<IF SELWND>
					<DataGridComboBoxColumn Header="<FIELD_HEADING>"
											Width="auto"
											DisplayMemberPath="Description"
											SelectedValuePath="IndexValue"
											ItemsSource="{Binding Source={StaticResource <FIELD_SELWND>items}}"
											SelectedValueBinding="{Binding Path=<Field_sqlname>, Converter={StaticResource intConverter}}"
											Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
					</DataGridComboBoxColumn>
					</IF SELWND>
					<IF RADIOBUTTONS>
					  <!-- Template needs a style for integer radio fields -->
					</IF RADIOBUTTONS>
					<IF CHECKBOX>
                    <DataGridCheckBoxColumn Header="<FIELD_HEADING>"
                                            Binding="{Binding Path=<Field_sqlname>, Converter={StaticResource intTFConverter}}"
                                            Width="auto"
					    Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
                    </DataGridCheckBoxColumn>
					</IF CHECKBOX>
					</IF INTEGER>
;//
;// INTEGER FIELDS ------------------------------------------------------------
;//
					<IF BOOLEAN>
					<IF CHECKBOX>
					<DataGridCheckBoxColumn Header="<FIELD_HEADING>"
								Binding="{Binding Path=<Field_sqlname>}"
								Width="auto"
								Visibility="{Binding Source={x:Reference chk<Field_sqlname>Visibility}, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}" >
					</DataGridCheckBoxColumn>
							    </IF CHECKBOX>
					</IF BOOLEAN>
					</IF REPORT>
					</IF TOOLKIT>
					</IF LANGUAGE>
					</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
					</FIELD_LOOP>
				</DataGrid.Columns>
			</DataGrid>
        </Border>

        <StackPanel Grid.Row="3">
            <Border Height="1" HorizontalAlignment="Stretch" Background="Silver"></Border>
            <StatusBar>
                <StatusBarItem>
                    <Image HorizontalAlignment="left" VerticalAlignment="Center" Width="16" Height="16"
                   Source="pack://application:,,,/SymphonyCrescendo;component/Images/16x16/Tip.png"
                   ToolTip="Hover the mouse of the status bar elements to understand their function.">
                    </Image>
                </StatusBarItem>
                <Separator></Separator>
                <StatusBarItem>
                    <ProgressBar IsIndeterminate="{Binding Path=ProgressBarActive}" Height="14" Width="100" ToolTip="Double click to cancel the operation." >
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseDoubleClick">
                                <symTrigger:UIElementGenericCommander Command="{Binding Path=CancelSearch}"></symTrigger:UIElementGenericCommander>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </ProgressBar>
                </StatusBarItem>
                <Separator></Separator>
                <StatusBarItem>
                    <StackPanel Grid.Column="3" Orientation="Horizontal"
                                    ToolTip="Displays the number of currently loaded items in the list.">
                        <TextBlock Text="Loaded: " Margin="0"></TextBlock>
                        <TextBlock Text="{Binding Path=CurrentLoadedText}" Margin="0"></TextBlock>
                    </StackPanel>
                </StatusBarItem>
            </StatusBar>

        </StackPanel>
    </Grid>
</UserControl>
