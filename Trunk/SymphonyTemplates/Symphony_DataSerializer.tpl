<CODEGEN_FILENAME><Structure_name>_DataSerializer.CodeGen.dbc</CODEGEN_FILENAME>
<OPTIONAL_USERTOKEN>RPSDATAFILES= </OPTIONAL_USERTOKEN>
;//****************************************************************************
;//
;// Title:       Symphony_DataSerializer.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template that creates the data object serialzer
;//
;// Author:      Richard C. Morris, Synergex Professional Services Group
;//
;// Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;//****************************************************************************
;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author:	Richard C. Morris, Synergex Professional Services Group
;;
;; Template Name:	Symphony Framework : <TEMPLATE>.tpl
;;
;;***************************************************************************
import System
import System.Collections.Generic
import System.Text
import System.Runtime.Serialization
import System.ServiceModel

import Symphony.Conductor.Model
import Symphony.Bridge

namespace <NAMESPACE>

	public class <Structure_name>_DataSerializer extends DataObjectSerializer

		;;method to compress the data into a JSON string
		protected override method compressData	,void
			endparams

		.include '<structure_name>' repository <RPSDATAFILES>, record = '<structure_name>', prefix = "<FIELD_PREFIX>", end
		.include '<structure_name>' repository <RPSDATAFILES>, record = '<structure_name>Base', prefix = "<FIELD_PREFIX>", end

		proc
			init <structure_name>Base
			<structure_name> = mSynergyRecord

			data tmpValue	,String	,'{"<STRUCTURE_NAME>":{'
			data addComma	,Boolean	,false

			<SYMPHONY_LOOPSTART>;//start a new loop counter
			<FIELD_LOOP>
			<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
			<IF LANGUAGE>
			<SYMPHONY_LOOPINCREMENT>;//increment the loop counter
			if (<structure_name>.<field_name> != <structure_name>Base.<field_name>)
			begin
				if (addComma)
					tmpValue += ','
				<IF ALPHA>
				tmpValue += '"#<SYMPHONY_LOOPVALUE>":"' + %atrim(<structure_name>.<field_name>) + '"'
				</IF>;//ALPHA
				<IF NUMERIC>
				tmpValue += '"#<SYMPHONY_LOOPVALUE>":' + %string(<structure_name>.<field_name>)
				</IF>;//NUMERIC
				addComma = true
			end
			</IF>;//LANGUAGE
			</IF>;//CUSTOM_NOT_SYMPHONY_ARRAY_FIELD
			</FIELD_LOOP>

			tmpValue += "}}"

			mJSONRecord = tmpValue

		endmethod

		;;method to decompress the data from a JSON string to a "record area"
		protected override method deCompressData	,void
			endparams

		.include '<structure_name>' repository <RPSDATAFILES>, record = '<structure_name>', prefix = "<FIELD_PREFIX>", end

		proc
			;;start with a null data area
			init <structure_name>

			;;first we validate this is the right JSON string
			if (!mJSONRecord.Contains('{"<STRUCTURE_NAME>":{'))
			begin
				throw new Exception("Invalid JASON string for the PART Data Object.")
			end

			data startPos		,i4	,1
			data fieldCounter	,i4
			data fieldString	,string
			data valueEndPos    ,i4
			data goField		,i4


			try
			begin
			<SYMPHONY_LOOPSTART>;//start a new loop counter
			<FIELD_LOOP>
			<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
			<IF LANGUAGE>
			<SYMPHONY_LOOPINCREMENT>;//increment the loop
				fieldString = '"#<SYMPHONY_LOOPVALUE>":'
				if (goField = %instr(startPos, mJSONRecord, fieldString))
				begin
					;;the field is in the list, so move the data!
					<IF ALPHA>
					goField = %instr(goField + 4, mJSONRecord, ':')
					goField += 2
					valueEndPos = %instr(goField, mJSONRecord, '","#')
					if (!valueEndPos)
						valueEndPos = %instr(goField, mJSONRecord, '"}}')
					<structure_name>.<field_name> = mJSONRecord(goField,valueEndPos -1)
					</IF>;//ALPHA
					<IF NUMERIC>

					goField = %instr(goField + 4, mJSONRecord, ':')
					goField += 1
					valueEndPos = %instr(goField, mJSONRecord, ',"#')
					if (!valueEndPos)
						valueEndPos = %instr(goField, mJSONRecord, '}}')
					<structure_name>.<field_name> = mJSONRecord(goField,valueEndPos -1)
					</IF>;//NUMERIC
				end
			</IF>;//LANGUAGE
			</IF>;//CUSTOM_NOT_SYMPHONY_ARRAY_FIELD
			</FIELD_LOOP>
			end
			catch (e, @Exception)
				throw
			endtry

			mSynergyRecord = <structure_name>

		endmethod

	endclass
	
.if ^variant .eq. 1
.else
	{DataContract}
.endc
	public class <Structure_name>_DataSerialized extends DataObjectSerialized

		public method <Structure_name>_DataSerialized
			in req transportData			,String
			endparams
		proc
			SerializedData = transportData
		endmethod


	endclass

endnamespace


