<CODEGEN_FILENAME><Structure_name>_DataValidator.CodeGen.dbc</CODEGEN_FILENAME>
<OPTIONAL_USERTOKEN>RPSDATAFILES= </OPTIONAL_USERTOKEN>
<OPTIONAL_USERTOKEN>DATAFILENAME="<FILE_NAME>"</OPTIONAL_USERTOKEN>
;//****************************************************************************
;//
;// Title:       Symphony_DataValidator.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to define structure based Data validation Object
;//
;// Author:      Richard C. Morris, Synergex Professional Services Group
;//
;// Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;//****************************************************************************
;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author:	Richard C. Morris, Synergex Professional Services Group
;;
;; Template Name:	Symphony Framework : <TEMPLATE>.tpl
;;
;;***************************************************************************
import System
import System.Collections.Generic
import System.Text

import Synergex.SynergyDE.Select

namespace <NAMESPACE>

    public partial class <Structure_name>_DataValidator

		private mLastSelectCount	,int

		<KEY_LOOP>
		;;;<summary>
		;;;Method that allows the validation of a record in the file based on the <KEY_NAME> key segment values
		;;;</summary>
		public method ByKey_<KEY_NAME>	,boolean
			in req segmentData		,String
			endparams

			record segValues
				<SEGMENT_LOOP>
				<segment_name>	,<segment_spec>
				</SEGMENT_LOOP>
			endrecord

			record
				clause			,@Where
				selectionCheck	,@Select
				aEnum			,@AlphaEnumerator
			endrecord

			.include '<structure_name>' repository <RPSDATAFILES>, record="<structure_name>"
			.include '<structure_name>' repository <RPSDATAFILES>, record="criteria"
		proc

			clear mLastSelectCount

			;;move the inbound segment/selection data so we can get at the individual fields
			segValues = segmentData

			clause = new Where()

			;;now move to individual fields
			<SEGMENT_LOOP>
			criteria.<segment_name> = segValues.<segment_name>
			;;and create the where clause
			<IF ALPHA>
			clause = clause .and. (Where)(<structure_name>.<segment_name> .eq. criteria.<segment_name>)
			</IF ALPHA>
			<IF NUMERIC>
			clause = clause .and. (Where)(<structure_name>.<segment_name> .eq. criteria.<segment_name>)
			</IF NUMERIC>
			</SEGMENT_LOOP>

			;;now perform the selection
			selectionCheck = new Select(new From(<DATAFILENAME>, <structure_name>, "/io=i:i"), clause)
			aEnum = selectionCheck.GetEnumerator()
			if (aEnum.Count) then
			begin
				mLastSelectCount = aEnum.Count
				mreturn true
			end
			else
			begin
				mreturn false
			end
		endmethod
</KEY_LOOP>

		public property LastSelectCount	,int
			method get
			proc
				mreturn mLastSelectCount
			endmethod
		endproperty
	endclass
endnamespace

