<CODEGEN_FILENAME><Structure_name>_BLListViewModel.CodeGen.dbc</CODEGEN_FILENAME>
<OPTIONAL_USERTOKEN>RPSDATAFILES= </OPTIONAL_USERTOKEN>
<OPTIONAL_USERTOKEN>VISIBILITY_DEFAULT=false</OPTIONAL_USERTOKEN>
<OPTIONAL_USERTOKEN>DATAFILENAME="<FILE_NAME>"</OPTIONAL_USERTOKEN>
;//****************************************************************************
;//
;// Title:       Symphony_BLListViewModel.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to provide lookup List view model code
;//
;// Author:      Richard C. Morris, Synergex Professional Services Group
;//
;// Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;//****************************************************************************
;;****************************************************************************
;;
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author:	Richard C. Morris, Synergex Professional Services Group
;;
;; Template Name:	Symphony Framework : <TEMPLATE>.tpl
;;
;;****************************************************************************
import System
import System.Collections.Generic
import System.Text
import System.ComponentModel
import System.Threading

import Synergex.SynergyDE.Select

import Symphony.Core
import Symphony.Conductor.Model
import Symphony.Conductor.Commands
import Symphony.Conductor.Types
import Symphony.Conductor.DataIO
import Symphony.Conductor.ViewModel

<FILEIFEXIST:TPLINC:namespace.inc>

namespace <NAMESPACE>

	public class <Structure_name>_ListViewModel extends BackgroundLoadedSearchViewModel

		public method <Structure_name>_ListViewModel
			endparams
			parent(new <Structure_name>_Data(), new <Structure_name>_Visibility("<Structure_name>CriteriaView_ListViewModel", <VISIBILITY_DEFAULT>), new <Structure_name>_Data(), new <Structure_name>_Visibility("<Structure_name>ListView_ListViewModel"))
		proc
			addhandler(Worker.DoWork, worker_DoWork)
		endmethod

		;;private methods to load the list from the data file
		private method worker_DoWork	,void
			sender						,@Object
			eArgs						,@DoWorkEventArgs
			endparams

		    record
			<structure_name>	,STR<Structure_name>
		    endrecord

		proc
			;;get at the background worker object, do not reference the one in the VM!
			data worker	,@BackgroundWorker ,^as(sender, BackgroundWorker)

			data maincounter	,int	,0
			data counter		,int	,0

			;;first clear the results table!
			ResultsTable.ClearCollection()

			if (!Symphony.Conductor.Static.ThreadSafe.ThreadHasRunOnce)
			begin
				xcall s_server_thread_init()
				Symphony.Conductor.Static.ThreadSafe.ThreadHasRunOnce = true
			end

			data itemCount	,int	,0

			disposable data selCommand	,@Select, new Select(new From(<DATAFILENAME>, <structure_name>),
			&	<Structure_name>_Select.WhereClause(<structure_name>,
			&	CriteriaData, CriteriaVisibility))

			foreach <structure_name> in selCommand
			begin
				;;check we have not hit the max number of entries
				incr itemCount
				if (itemCount > MaxLoadCount) exitloop

				this.ResultsTable.AddToCollection(new <Structure_name>_Data((string)<structure_name>))
				incr maincounter
				incr counter
				;;notify every 10 iterations
				if (counter == 10)
				begin
					clear counter
					worker.ReportProgress(maincounter)
				end
				;;before we continue, see if the thread operations was canceled
				if (worker.CancellationPending == true)
				begin
					eArgs.Cancel = true
					exitloop
				end
			end
			
		endmethod

	endclass

endnamespace


