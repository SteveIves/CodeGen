<CODEGEN_FILENAME><Structure_name>_AsXML.CodeGen.dbc</CODEGEN_FILENAME>
;//****************************************************************************
;//
;// Title:       Symphony_AsXML.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to allow the import/export of Symphony data objects to XML
;//
;// Author:      Richard C. Morris, Synergex Professional Services Group
;//
;// Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;//****************************************************************************
;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author:	Richard C. Morris, Synergex Professional Services Group
;;
;; Template Name:	Symphony Framework : <TEMPLATE>.tpl
;;****************************************************************************

import System
import System.Collections.Generic
import System.Text
import System.Xml

namespace <NAMESPACE>
	
	public class <Structure_name>_AsXML 
		
		private mfileName		,String
		private mXMLDoc			,@XmlDocument
		private mDeclaration	,@XmlDeclaration
		private mRootNode		,@XmlElement
		
		public method <Structure_name>_AsXML
			in req fileName					,String
			endparams
		proc
			mfileName = fileName
			
		endmethod
		
		public method WriteCollectionToXML	,void
			in req dataCollection			,@IEnumerable<<Structure_name>_Data>
			endparams
		proc
			cleanUpAndOpenNew()
			
			data item		,@<Structure_name>_Data
			data mElement	,@XmlElement
			
			foreach item in dataCollection
			begin
				mElement = mXMLDoc.CreateElement("<STRUCTURE_NAME>")
				mXMLDoc.DocumentElement.PrependChild(mElement)
				writeObject(mElement, item)
			end

			closeWriter()
			
		endmethod
		
		
		public method WriteToXML	,void
			in req dataObject		,@<Structure_name>_Data
			endparams
		proc
			cleanUpAndOpenNew()			
			
			data mElement	,@XmlElement
			mElement = mXMLDoc.CreateElement("<STRUCTURE_NAME>")
			mXMLDoc.DocumentElement.PrependChild(mElement)
			writeObject(mElement, dataObject)

			closeWriter()
			
		endmethod
		
		public method LoadFromXML, @List<<Structure_name>_Data>
			endparams
		proc
			data objectItem	,@XmlNode
			data fieldItem	,@XmlNode
			data result	,@List<<Structure_name>_Data>	,new List<<Structure_name>_Data>()
			
			openExistingXMLFile()
			
			if (mXMLDoc == ^null)
				mreturn result
			
			foreach objectItem in mXMLDoc.DocumentElement.ChildNodes
			begin
				data dataObject	,@<Structure_name>_Data	,new <Structure_name>_Data()
				dataObject.InitialValidateData()
				foreach fieldItem in objectItem.ChildNodes
				begin
					using fieldItem.Name select
					("SynergyRecord"),
					begin
						dataObject.SynergyRecord = (a)fieldItem.InnerText
					end
					<FIELD_LOOP>
					<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
					("<Field_sqlname>"),
					begin
						<IF ALPHA>
						dataObject.<Field_sqlname> = (a)fieldItem.InnerText
						</IF ALPHA>
						<IF DATE_YYYYMMDD>
						dataObject.<Field_sqlname> = ^d((a)fieldItem.InnerText)
						</IF DATE_YYYYMMDD>
						<IF DECIMAL>
						dataObject.<Field_sqlname> = ^d((a)fieldItem.InnerText)
						</IF DECIMAL>
						<IF INTEGER>
						dataObject.<Field_sqlname> = ^i((a)fieldItem.InnerText)
						</IF INTEGER>
					end
					</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
					</FIELD_LOOP>
					endusing
				end
				result.Add(dataObject)
			end
			
			mreturn result
			
		endmethod
		
		.region "private methods"
		
		private method cleanUpAndOpenNew, void
			endparams
		proc
			if (System.IO.File.Exists(mfileName) == true)
			begin
				System.IO.File.Delete(mfileName)
			end
			
			mXMLDoc = new XmlDocument()
			
			mDeclaration = mXMLDoc.CreateXmlDeclaration("1.0", "utf-8", ^null)

			mRootNode = mXMLDoc.CreateElement("<STRUCTURE_NAME>Collection")

			mXMLDoc.InsertBefore(mDeclaration, mXMLDoc.DocumentElement)

			mXMLDoc.AppendChild(mRootNode)
			
		endmethod
		
		private method writeObject, void
			in req element			,@XmlElement
			in req dataObject		,@<Structure_name>_Data
			endparams
		proc
			;;write each field/value pair out
			data fieldElement	,@XmlElement
			data fieldValue		,@XmlText

			;;lets sore the full synergy record stuff first!!
			fieldElement = mXMLDoc.CreateElement("SynergyRecord")
			fieldValue = mXMLDoc.CreateTextNode(dataObject.SynergyRecord)
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)

			<FIELD_LOOP>
			<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
			fieldElement = mXMLDoc.CreateElement("<Field_sqlname>")
			;;individual field attributes
			fieldElement.SetAttribute("IsEnabled", dataObject.<Field_sqlname>IsEnabled.ToString())
			fieldElement.SetAttribute("IsReadOnly", dataObject.<Field_sqlname>IsReadOnly.ToString())
			<IF ALPHA>
			fieldValue = mXMLDoc.CreateTextNode(dataObject.<Field_sqlname>)
			</IF ALPHA>
			<IF DATE_YYYYMMDD>
			fieldValue = mXMLDoc.CreateTextNode(%string(dataObject.<Field_sqlname>))
			</IF DATE_YYYYMMDD>
			<IF DECIMAL>
			fieldValue = mXMLDoc.CreateTextNode(%string(dataObject.<Field_sqlname>))
			</IF DECIMAL>
			<IF INTEGER>
			fieldValue = mXMLDoc.CreateTextNode(%string(dataObject.<Field_sqlname>))
			</IF INTEGER>
			;;add the field
			element.AppendChild(fieldElement)
			;;add the text
			fieldElement.AppendChild(fieldValue)
			</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
			</FIELD_LOOP>
			mreturn
		endmethod
		
		private method closeWriter, void
			endparams
		proc
			mXMLDoc.Save(mfileName)
		endmethod
		
		private method openExistingXMLFile, void
			endparams
		proc
			if (System.IO.File.Exists(mfileName) == false)
			begin
				mreturn
			end
			
			mXMLDoc = new XmlDocument()
			
			mXMLDoc.Load(mfileName)
			

		endmethod

		
		.endregion
		
	endclass
	
endnamespace

