<CODEGEN_FILENAME><Structure_name>_MaintViewModel.CodeGen.dbc</CODEGEN_FILENAME>
;//****************************************************************************
;//
;// Title:       Symphony_MaintViewModel.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to provide CRUD maintenance of a structure
;//
;// Author:      Richard C. Morris, Synergex Professional Services Group
;//
;// Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;//****************************************************************************
;;****************************************************************************
;;
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author:	Richard C. Morris, Synergex Professional Services Group
;;
;; Template Name:	Symphony Framework : <TEMPLATE>.tpl
;;
;;****************************************************************************
import System
import System.Collections.Generic
import System.Text
import System.Windows

import Symphony.Conductor.ViewModel
import Symphony.Conductor.DataIO

import <NAMESPACE>.DataIO
import <NAMESPACE>.Model
import <NAMESPACE>.ViewModel

namespace <Structure_name>Maint.ViewModel

	public partial class <Structure_name>_MaintViewModel extends CRUDViewModel

		public method <Structure_name>_MaintViewModel
			sender					,@FrameworkElement
			endparams
			parent(sender, new <Structure_name>_data(), new <Structure_name>_data(), new <Structure_name>_Dataio(FileOpenMode.Update))
		proc
			;;create lookup/listview models
			m<Structure_name>ListVM = new <Structure_name>_ListViewModel()
			addhandler(m<Structure_name>ListVM.ItemSelected, <structure_name>ListItemSelected)

			;;need to know when we have changed visual states
			addhandler(AfterNavigateState, afterNavigateState_event)

			;;need to handle field focus, etc
			addhandler(StoryBoardComplete, animationComplete_event)
		endmethod

		private m<Structure_name>ListVM	,@<Structure_name>_ListViewModel

		public property <Structure_name>ListVM, @<Structure_name>_ListViewModel
			method get
			proc
				mreturn m<Structure_name>ListVM
			endmethod
		endproperty

		private method <structure_name>ListItemSelected, void
			in req sender						,@SelectedItemEventArgs
			endparams
		proc
			this.PrimaryData.SynergyRecord = sender.ItemValue.SynergyRecord
			this.RestoreBaseState()
			this.ProcessDataComplete(PrimaryData, "DataEntryState")
		endmethod

		private method afterNavigateState_event	,void
			eArgs								,@NavigateFromStateEventArgs
			endparams
		proc
			using eArgs.CurrentStateName select
			("PrimaryLookupState"),
			begin
				m<Structure_name>ListVM.ProcessSearchRequest()
			end
			endusing
		endmethod

		;;when the visual state animation has completed this event handler will be executed.
		;;Here you can now set the required focus.
		private method animationComplete_event, void
			endparams
		proc
			using this.CurrentStateName select
			("KeyEntryState"),
			begin
				data tmpDO	,@<Structure_name>_Data
				tmpDO = (@<Structure_name>_Data)PrimaryData

				;;focus the first field
				<PRIMARY_KEY>
				<SEGMENT_LOOP>
				<FIRST_SEGMENT>
				tmpDO.<Segment_name>IsFocused = true
				</FIRST_SEGMENT>
				</SEGMENT_LOOP>
				</PRIMARY_KEY>

				mProgramMode = programMode.keyEntry
				configureCommands()
			end
			("DataEntryState"),
			begin
				data tmpDO	,@<Structure_name>_Data
				tmpDO = (@<Structure_name>_Data)MasterData
				if (mProgramMode == programMode.Add) then
				begin
					<PRIMARY_KEY>
					<SEGMENT_LOOP>
					tmpDO.<Segment_name>IsEnabled = true
					</SEGMENT_LOOP>
					</PRIMARY_KEY>
					;;focus the first field
					<PRIMARY_KEY>
					<SEGMENT_LOOP>
					<FIRST_SEGMENT>
					tmpDO.<Segment_name>IsFocused = true
					</FIRST_SEGMENT>
					</SEGMENT_LOOP>
					</PRIMARY_KEY>
				end
				else
				begin
					mProgramMode = programMode.Modify
					<PRIMARY_KEY>
					<SEGMENT_LOOP>
					tmpDO.<Segment_name>IsEnabled = false
					</SEGMENT_LOOP>
					</PRIMARY_KEY>
;					need to focus the first non-key field
				end
				configureCommands()
			end
			("PrimaryLookupState"),
			begin
				mProgramMode = programMode.Lookup
				configureCommands()
			end
			endusing
		endmethod

	endclass


endnamespace


