<CODEGEN_FILENAME><Structure_name>_DataCLR.CodeGen.dbc</CODEGEN_FILENAME>
<OPTIONAL_USERTOKEN>RPSDATAFILES= </OPTIONAL_USERTOKEN>
;//****************************************************************************
;//
;// Title:       Symphony_Data.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to define structure based Data Object with CLR types
;//
;// Author:      Richard C. Morris, Synergex Professional Services Group
;//
;// Copyright (c) 2012, Synergex International, Inc. All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;//****************************************************************************
;;****************************************************************************
;; WARNING: This code was generated by CodeGen. Any changes that you
;;          make to this code will be overwritten if the code is regenerated!
;;
;; Template author: Richard C. Morris, Synergex Professional Services Group
;;
;; Template Name:   Symphony Framework : <TEMPLATE>.tpl
;;
;;***************************************************************************
import System
import System.Collections.Generic
import System.Text

import System.Runtime.Serialization

import System.ComponentModel

namespace <NAMESPACE>

	.include '<structure_noalias>' repository <RPSDATAFILES>, structure = 'STR<Structure_name>', prefix = "str_", end

    public partial class <Structure_name>_DataCLR extends Symphony.Conductor.Model.DataObjectBase

		public event PropertyChanged	,@PropertyChangedEventHandler
	
		public const RPSStructureName	,String	,"<STRUCTURE_NOALIAS>"

        ;;make the record availalbe and a copy
        .include '<structure_noalias>' repository <RPSDATAFILES>, private record = '<structure_name>_main', prefix = "<FIELD_PREFIX>", end
        .include '<structure_noalias>' repository <RPSDATAFILES>, private record = '<structure_name>_store', prefix = "<FIELD_PREFIX>", end

        ;;; <summary>
        ;;;  Constructor, initialise the base fields
        ;;; </summary>
        public method <Structure_name>_DataCLR
            endparams
            parent()
        proc
			init <structure_name>_main, <structure_name>_store
        endmethod

		;;; <summary>
		;;;  Alternate Constructor, accepts the structured data
		;;; </summary>
		public method <Structure_name>_DataCLR
			in req inData			,STR<Structure_name>
			endparams
			parent()
		proc
			init <structure_name>_main, <structure_name>_store
			SynergyRecord = (string)inData
		endmethod

		private mDateConveter		,@Symphony.Conductor.Converters.SynergyDecimalDateConverter	,new Symphony.Conductor.Converters.SynergyDecimalDateConverter()
		private mAlphaConveter		,@Symphony.Conductor.Converters.SynergyAlphaConverter	,new Symphony.Conductor.Converters.SynergyAlphaConverter()
		private mDecimalConveter	,@Symphony.Conductor.Converters.SynergyDecimalConverter	,new Symphony.Conductor.Converters.SynergyDecimalConverter()
		private mIntegerConveter	,@Symphony.Conductor.Converters.SynergyIntConverter	,new Symphony.Conductor.Converters.SynergyIntConverter()
		
        ;;Expose fields as properties for data binding
        <SYMPHONY_LOOPSTART>
        <FIELD_LOOP>
		<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
        ;;<Field_name>
		public property <Field_sqlname>, <FIELD_CSTYPE>
			method get
			proc
				<IF ALPHA>
				mreturn (<FIELD_CSTYPE>)mAlphaConveter.Convert(<Structure_name>_main.<Field_name>, ^null, ^null, ^null)
				</IF ALPHA>
				<IF DATE_YYYYMMDD>
				mreturn (<FIELD_CSTYPE>)mDateConveter.Convert(<Structure_name>_main.<Field_name>, ^null, ^null, ^null)
				</IF DATE_YYYYMMDD>
				<IF DECIMAL>
				<IF PRECISION>
				mreturn (<FIELD_CSTYPE>)mDecimalConveter.Convert(<Structure_name>_main.<Field_name>, ^null, "DECIMALPLACES#<FIELD_PRECISION>", ^null)
				<ELSE>
				mreturn (<FIELD_CSTYPE>)mDecimalConveter.Convert(<Structure_name>_main.<Field_name>, ^null, ^null, ^null)
				</IF>
				</IF DECIMAL>
				<IF INTEGER>
				mreturn (<FIELD_CSTYPE>)mIntegerConveter.Convert(<Structure_name>_main.<Field_name>, ^null, ^null, ^null)
				</IF INTEGER>
            endmethod
			method set
			proc
				<IF ALPHA>
				<Structure_name>_main.<Field_name> = (<FIELD_TYPE>)mAlphaConveter.ConvertBack(value, ^null, ^null, ^null)
				</IF ALPHA>
				<IF DATE_YYYYMMDD>
				<Structure_name>_main.<Field_name> = (<FIELD_TYPE>)mDateConveter.ConvertBack(value, ^null, ^null, ^null)
				</IF DATE_YYYYMMDD>
				<IF DECIMAL>
				<Structure_name>_main.<Field_name> = (<FIELD_TYPE>)mDecimalConveter.ConvertBack(value, ^null, ^null, ^null)
				</IF DECIMAL>
				<IF INTEGER>
				<Structure_name>_main.<Field_name> = (<FIELD_TYPE>)mIntegerConveter.ConvertBack(value, ^null, ^null, ^null)
				</IF INTEGER>
				if (<Structure_name>_main.<Field_name> != <Structure_name>_store.<Field_name>)
					RaisePropertyChanged("<Field_sqlname>")
				<Structure_name>_store.<Field_name> = <Structure_name>_main.<Field_name>
			endmethod
		endproperty
		</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
        </FIELD_LOOP>

        ;;; <summary>
        ;;; Expose the complete synergy record
        ;;; </summary>
		public override property SynergyRecord, String
            method get
            proc
                mreturn <Structure_name>_main
            endmethod
            method set
            proc
                <Structure_name>_main = value

                ;;Signal that all fields have changed
                <SYMPHONY_LOOPSTART>
                <FIELD_LOOP>
				<IF LANGUAGE>
				<IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
                if (<Structure_name>_main.<Field_name> != <Structure_name>_store.<Field_name>)
                begin
                    RaisePropertyChanged("<Field_sqlname>")
                end
				</IF CUSTOM_NOT_SYMPHONY_ARRAY_FIELD>
                </IF LANGUAGE>
                </FIELD_LOOP>            
			endmethod
        endproperty

		;;; <summary>
		;;; Allow the host to validate all fields. Each field will fire the validation method.
		;;; </summary>
		public override method InitialValidateData, void
			endparams
		proc
		endmethod
		
        ;;; <summary>
        ;;; Indicate from the UI which field now has focus. This then signals the
        ;;; CurrentFieldInfo change event so the UI can get the current field details
        ;;; </summary>
        ;;; <param name="fieldName">Name of field with focus</param>
        public override method SetFieldFocusFlag    ,void
            in req fieldName                        ,String
            endparams
        proc
        endmethod

	endclass
endnamespace

