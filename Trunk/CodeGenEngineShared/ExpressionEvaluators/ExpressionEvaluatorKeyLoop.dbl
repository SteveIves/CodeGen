;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluatorKeyLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates key loop expression nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class ExpressionEvaluator

        keyLoopExpressionEvaluators, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>

        private method registerKeyLoopExpressions, void
            endparams
        proc
			
			keyLoopExpressionEvaluators = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>()
			
			keyLoopExpressionEvaluators.Add("ASCENDING", evaluateKeyAscending)
            keyLoopExpressionEvaluators.Add("AUTO_SEQUENCE", evaluateKeyAutoSequence)
            keyLoopExpressionEvaluators.Add("AUTO_TIMESTAMP", evaluateKeyAutoTimestamp)
            keyLoopExpressionEvaluators.Add("CHANGES", evaluateKeyChanges)
            keyLoopExpressionEvaluators.Add("DESCENDING", evaluateKeyDescending)
            keyLoopExpressionEvaluators.Add("DUPLICATES", evaluateKeyDuplicates)
            keyLoopExpressionEvaluators.Add("DUPLICATESATEND", evaluateKeyDuplicatesAtEnd)
            keyLoopExpressionEvaluators.Add("DUPLICATESATFRONT", evaluateKeyDuplicatesAtFront)
            keyLoopExpressionEvaluators.Add("MULTIPLE_SEGMENTS", evaluateKeyMultipleSegments)
            keyLoopExpressionEvaluators.Add("NOCHANGES", evaluateKeyNoChanges)
            keyLoopExpressionEvaluators.Add("NODUPLICATES", evaluateKeyNoDuplicates)
            keyLoopExpressionEvaluators.Add("NULLKEY", evaluateKeyNull)
            keyLoopExpressionEvaluators.Add("NULLVALUE", evaluateKeyNullValue)
			keyLoopExpressionEvaluators.Add("SINGLE_SEGMENT", evaluateKeySingleSegment)

		endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------
        ;;;  <summary>
        ;;;  
        ;;;  </summary>
        ;;;  <param name="tkn"></param>
        ;;;  <param name="file"></param>
        ;;;  <param name="loops"></param>
        ;;;  <param name="specific"></param>
        ;;;  <returns></returns>
        public static method EvaluateKeyLoopExpression, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<RpsStructure, RpsKey, int, boolean> 
            endparams
        proc
            lambda isKeyLoop(node) node .is. KeyLoopNode
			data loop, @KeyLoopNode, ^as(loops.First(isKeyLoop), KeyLoopNode)
            mreturn specific(file.Context.CurrentStructure, loop.CurrentKey, loop.CurrentIndex)
		endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------
        ;;;  <summary>
        ;;;  
        ;;;  </summary>
        ;;;  <param name="tkn"></param>
        ;;;  <param name="file"></param>
        ;;;  <param name="loops"></param>
        ;;;  <returns></returns>
        private static method evaluateKeyAscending, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) (ky.SortOrder == RpsKeyOrder.Ascending)
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateKeyAutoSequence, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) (ky.Segments[0].DataType == RpsKeySegmentDataType.AutoSequence)
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateKeyAutoTimestamp, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) (ky.Segments[0].DataType == RpsKeySegmentDataType.AutoTimestamp)
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateKeyChanges, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) (ky.Modifiable)
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateKeyDescending, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) (ky.SortOrder == RpsKeyOrder.Descending)
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateKeyDuplicates, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) (ky.Duplicates == RpsKeyDuplicates.Duplicates)
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateKeyDuplicatesAtEnd, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) (ky.InsertDuplicates == RpsKeyInsertDups.AtEnd)
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateKeyDuplicatesAtFront, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) (ky.InsertDuplicates == RpsKeyInsertDups.AtFront)
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateKeyMultipleSegments, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) (ky.Segments.Count > 1)
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateKeyNoChanges, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) (ky.Modifiable == false)
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateKeyNoDuplicates, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) ky.Duplicates == RpsKeyDuplicates.NoDuplicates
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateKeyNull, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) (ky.NullKey != RpsKeyNullType.None)
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateKeyNullValue, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) (!String.IsNullOrWhiteSpace(ky.NullKeyValue))
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
        endmethod

        private static method evaluateKeySingleSegment, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str, ky, index) (ky.Segments.Count == 1)
            mreturn EvaluateKeyLoopExpression(tkn, file, loops, doEvaluate)
		endmethod

	endclass

endnamespace

