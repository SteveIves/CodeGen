;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluatorGeneric.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates generic expression nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import CodeGen.RepositoryAPI
import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks

.array 0

namespace CodeGen.Engine

    public partial class ExpressionEvaluator

        genericExpressionEvaluators, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>

        private method registerGenericExpressions, void
            endparams
        proc
			
			genericExpressionEvaluators = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>()

			;;Greneric Expressions
						
			genericExpressionEvaluators.Add("COUNTER_1", evaluateCounter1)
            genericExpressionEvaluators.Add("COUNTER_2", evaluateCounter2)
			genericExpressionEvaluators.Add("DEBUG_LOGGING", evaluateVerboseLogging)
			genericExpressionEvaluators.Add("FIELD_PREFIX", evaluateFieldPrefix)
			genericExpressionEvaluators.Add("FIELD_SUBSET", evaluateFieldSubset)
			genericExpressionEvaluators.Add("MULTIPLE_STRUCTURES", evaluateMultipleStructures)
			genericExpressionEvaluators.Add("NAMESPACE", evaluateNamespace)
			genericExpressionEvaluators.Add("NOT_COUNTER_1", evaluateNotCounter1)
			genericExpressionEvaluators.Add("NOT_COUNTER_2", evaluateNotCounter2)
			genericExpressionEvaluators.Add("VERBOSE_LOGGING", evaluateVerboseLogging)
			
			;;Structure expressions
			
			genericExpressionEvaluators.Add("STRUCTURE_FILES", evaluateStructureFiles)
			genericExpressionEvaluators.Add("STRUCTURE_KEYS", evaluateStructureKeys)
			genericExpressionEvaluators.Add("STRUCTURE_LDESC", evaluateStructureLongDesc)
			genericExpressionEvaluators.Add("STRUCTURE_RELATIONS", evaluateStructureRelations)
			genericExpressionEvaluators.Add("STRUCTURE_TAGS", evaluateStructureTags)
			genericExpressionEvaluators.Add("STRUCTURE_MULTIPLE_TAGS", evaluateStructureMultipleTags)
			genericExpressionEvaluators.Add("STRUCTURE_SINGLE_TAG", evaluateStructureSingleTag)
			genericExpressionEvaluators.Add("STRUCTURE_UTEXT", evaluateStructureUserText)
			
		endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------
        ;; Counter expressions

        private static method evaluateCounter1, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
		proc
            mreturn (file.Context.Counter1 != 0)
        endmethod

        private static method evaluateCounter2, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn (file.Context.Counter2 != 0)
        endmethod

		private static method evaluateDebugLogging, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			mreturn (file.Context.DebugLoggingEnabled)
		endmethod
		
		private static method evaluateFieldPrefix, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			mreturn (!string.IsNullOrWhiteSpace(file.Context.CurrentTask.FieldPrefix))
		endmethod
		
		private static method evaluateFieldSubset, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			mreturn (!string.IsNullOrWhiteSpace(file.Context.CurrentTask.Subset) || (file.Context.CurrentTask.SubsetFields.Count > 0))
		endmethod
		
		private static method evaluateMultipleStructures, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			mreturn (file.Context.MultiStructureMode)
		endmethod
		
		private static method evaluateNamespace, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			mreturn (!String.IsNullOrWhiteSpace(file.Context.Namespace))
		endmethod
		
		private static method evaluateNotCounter1, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			mreturn (file.Context.Counter1 == 0)
		endmethod
		
		private static method evaluateNotCounter2, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			mreturn (file.Context.Counter2 == 0)
		endmethod
		
		private static method evaluateVerboseLogging, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			mreturn (file.Context.VerboseLoggingEnabled)
		endmethod
		
		;; -------------------------------------------------------------------------------------------------------------------------------
        ;; Structure expressions

        private static method evaluateStructureExpression, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<RpsStructure, boolean> 
            endparams
        proc
            mreturn specific(file.Context.CurrentStructure)
        endmethod

		private static method evaluateStructureFiles, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			lambda doEvaluate(str) (str.Files.Count > 0)
			mreturn evaluateStructureExpression(tkn, file, loops, doEvaluate)
		endmethod
		
		private static method evaluateStructureKeys, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			lambda doEvaluate(str) (str.Keys.Count > 0)
			mreturn evaluateStructureExpression(tkn, file, loops, doEvaluate)
		endmethod
		
        private static method evaluateStructureLongDesc, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str) (!String.IsNullOrWhiteSpace(str.LongDescription))
			mreturn evaluateStructureExpression(tkn, file, loops, doEvaluate)
		endmethod

		private static method evaluateStructureRelations, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			lambda doEvaluate(str) (str.Relations.Count > 0)
			mreturn evaluateStructureExpression(tkn, file, loops, doEvaluate)
		endmethod
		
		private static method evaluateStructureTags, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			lambda doEvaluate(str) (str.Tags.Count > 0)
			mreturn evaluateStructureExpression(tkn, file, loops, doEvaluate)
		endmethod
		
		private static method evaluateStructureMultipleTags, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			lambda doEvaluate(str) (str.Tags.Count > 1)
			mreturn evaluateStructureExpression(tkn, file, loops, doEvaluate)
		endmethod
		
		private static method evaluateStructureSingleTag, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			lambda doEvaluate(str) (str.Tags.Count == 1)
			mreturn evaluateStructureExpression(tkn, file, loops, doEvaluate)
		endmethod
		
		private static method evaluateStructureUserText, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			lambda doEvaluate(str) (!String.IsNullOrWhiteSpace(str.UserText))
			mreturn evaluateStructureExpression(tkn, file, loops, doEvaluate)
		endmethod
		
		;; -------------------------------------------------------------------------------------------------------------------------------
        ;; User-defined token expressions

        private static method evaluateUserToken, boolean
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            ;; We get here for any expression <IF USERTOKEN_xxx> or <IF NOT_USERTOKEN_xxx>
            ;; Extract the search text from the token
            data userTokenName, string, tkn.Value.ToUpper().Replace("NOT_USERTOKEN_", "").Replace("USERTOKEN_", "")
			
			;; Make sure we have a user token name
            if (String.IsNullOrWhiteSpace(userTokenName))
                throw new ApplicationException(String.Format("Invalid user-defined token expression {0}", tkn.Value))
			
			;; Is it there?
            data found, boolean, false
            begin
                data local_userToken, @UserToken
                foreach local_userToken in file.Context.UserTokens
                begin
                    if (local_userToken.Name == userTokenName)
                    begin
                        found = true
                        exitloop
                    end
                end
            end
            mreturn found
		endmethod

	endclass

endnamespace

