;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluatorStructure.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates structure expression nodes
;; 
;;  Date:        5th December 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import CodeGen.RepositoryAPI
import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks

.array 0

namespace CodeGen.Engine
	
	public partial class ExpressionEvaluator
		
		structureExpressionEvaluators, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>
		
		private method registerStructureExpressions, void
			endparams
		proc
			
			structureExpressionEvaluators = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>()
			
			structureExpressionEvaluators.Add("STRUCTURE_KEYS", evaluateStructureKeys)
			structureExpressionEvaluators.Add("STRUCTURE_LDESC", evaluateStructureLongDesc)
			
		endmethod
		
		;; -------------------------------------------------------------------------------------------------------------------------------
		
		private static method evaluateStructureExpression, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			specific, @Func<RpsStructure, boolean> 
			endparams
		proc
			mreturn specific(file.Context.CurrentStructure)
		endmethod
		
		;; -------------------------------------------------------------------------------------------------------------------------------

		private static method evaluateStructureKeys, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			lambda doEvaluate(str)
			begin
				mreturn (str.Keys.Count > 0)
			end
			mreturn evaluateStructureExpression(tkn, file, loops, doEvaluate)
		endmethod
		
		private static method evaluateStructureLongDesc, boolean
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			lambda doEvaluate(str)
			begin
				mreturn (!String.IsNullOrWhiteSpace(str.LongDescription))
			end
			mreturn evaluateStructureExpression(tkn, file, loops, doEvaluate)
		endmethod

	endclass
	
endnamespace