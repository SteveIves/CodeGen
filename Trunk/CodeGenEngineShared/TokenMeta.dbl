
import System
import System.Collections.Generic
import System.Text

namespace CodeGen.Engine

	public enum TokenType
		FileHeader
		PreProcessor
		Generic
		StructureInfo
		FieldLoop
		FieldSelectionLoop
		KeyLoop
		KeySegmentLoop
		EnumLoop
		EnumMemberLoop
		RelationLoop
		ButtonLoop
		FileLoop
		TagLoop
		Window
		Counter
		CounterInstruction
		Text
		Control
		Expression
		User
		Loop
		LoopUtility
		;; Added for expression context
		NotInLoop
		StructureLoop
	endenum
	
	{Flags}
	public enum TokenValidity
		FieldLoop					, 1
		FieldSelectionLoop			, 2
		KeyLoop						, 4
		KeySegmentLoop				, 8
		EnumLoop					, 16
		EnumMemberLoop				, 32
		RelationLoop				, 64
		ButtonLoop					, 128
		FileLoop					, 256
		TagLoop						, 512
		StructureLoop				, 1024
		AnyLoop						, 2048
		NotInLoop					, 4096
		Anywhere					, 8192
	endenum
	
	public class TokenMeta
		
		public IsPaired				, boolean, false
		public Name					, string
		public TypeOfToken			, TokenType
		public Modifiers			, @Dictionary<string, TokenModifier>, new Dictionary<string, TokenModifier>()
		public SeperatedValidity	, @List<TokenValidity>
		public RequiresRepository	, boolean, false
		public RequiresNamespace	, boolean, true
		
		public property Validity	, TokenValidity
			method set
			proc
				data expressionTypes, @List<TokenValidity>, new List<TokenValidity>()
				begin
					data enumValue, Enum
					foreach enumValue in Enum.GetValues(^typeof(TokenValidity))
					if (value.HasFlag(enumValue))
						expressionTypes.Add((TokenValidity)enumValue)
				end
				SeperatedValidity = expressionTypes
			endmethod
		endproperty
		
	endclass
	
endnamespace
