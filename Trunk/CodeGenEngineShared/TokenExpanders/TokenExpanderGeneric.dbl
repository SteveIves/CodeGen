;; *****************************************************************************
;; 
;;  Title:       TokenExpanderGeneric.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands generic token nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.IO
import System.Linq
import System.Text
import System.Threading.Tasks

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        genericTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerGenericTokens, void
            endparams
		proc

			genericTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()

            genericTokenExpanders.Add("AUTHOR", expandAuthor)
            genericTokenExpanders.Add("CODEGEN_VERSION", expandCodegenVersion)
            genericTokenExpanders.Add("COMPANY", expandCompany)
			genericTokenExpanders.Add("COUNTER_1_DECREMENT", expandCounter1Decrement)
			genericTokenExpanders.Add("COUNTER_1_INCREMENT", expandCounter1Increment)
			genericTokenExpanders.Add("COUNTER_1_RESET", expandCounter1Reset)
			genericTokenExpanders.Add("COUNTER_1_VALUE", expandCounter1Value)
			genericTokenExpanders.Add("COUNTER_2_DECREMENT", expandCounter2Decrement)
			genericTokenExpanders.Add("COUNTER_2_INCREMENT", expandCounter2Increment)
			genericTokenExpanders.Add("COUNTER_2_RESET", expandCounter2Reset)
			genericTokenExpanders.Add("COUNTER_2_VALUE", expandCounter2Value)
			genericTokenExpanders.Add("DATE", expandDate)
            genericTokenExpanders.Add("DATE1", expandDate1)
            genericTokenExpanders.Add("DAY", expandDay)
            genericTokenExpanders.Add("FIELD_PREFIX", expandFieldPrefix)
            genericTokenExpanders.Add("GUID1", expandGuid1)
            genericTokenExpanders.Add("GUID2", expandGuid2)
            genericTokenExpanders.Add("GUID3", expandGuid3)
            genericTokenExpanders.Add("MONTH", expandMonth)
            genericTokenExpanders.Add("MONTHNAME", expandMonthName)
            genericTokenExpanders.Add("MONTHSHORTNAME", expandMonthShortName)
            genericTokenExpanders.Add("NAMESPACE", expandNamespace)
            genericTokenExpanders.Add("TEMPLATE", expandTemplate)
            genericTokenExpanders.Add("TIME", expandTime)
            genericTokenExpanders.Add("WEEKDAY", expandWeekday)
			genericTokenExpanders.Add("YEAR", expandYear)

        endmethod

        private static method expandAuthor, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn file.Context.Author
        endmethod

        private static method expandCodegenVersion, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn file.Context.Version
        endmethod

        private static method expandCompany, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn file.Context.Company
        endmethod

		private static method expandCounter1Decrement, string
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			file.Context.Counter1 -= 1
			mreturn ""
		endmethod
		
		private static method expandCounter1Increment, string
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			file.Context.Counter1 += 1
			mreturn ""
		endmethod
		
		private static method expandCounter1Reset, string
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			file.Context.Counter1 = 0
			mreturn ""
		endmethod
		
		private static method expandCounter1Value, string
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			mreturn Convert.ToString(file.Context.Counter1)
		endmethod
		
		private static method expandCounter2Decrement, string
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			file.Context.Counter2 -= 1
			mreturn ""
		endmethod
		
		private static method expandCounter2Increment, string
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			file.Context.Counter2 += 1
			mreturn ""
		endmethod
		
		private static method expandCounter2Reset, string
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			file.Context.Counter2 = 0
			mreturn ""
		endmethod
		
		private static method expandCounter2Value, string
			tkn, @Token 
			file, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			mreturn Convert.ToString(file.Context.Counter2)
		endmethod
		
		private static method expandDate, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn String.Format("{0:MM/dd/yyyy}", DateTime.Now)
        endmethod

        private static method expandDate1, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn String.Format("{0:dd/MM/yyyy}", DateTime.Now)
        endmethod

        private static method expandDay, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn String.Format("{0:dd}", DateTime.Now)
        endmethod

        private static method expandFieldPrefix, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            if (String.IsNullOrWhiteSpace(file.Context.CurrentTask.FieldPrefix)) then
                mreturn ""
            else
                mreturn file.Context.CurrentTask.FieldPrefix
        endmethod

        private static method expandGuid1, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn file.Context.Guid1
        endmethod

        private static method expandGuid2, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn file.Context.Guid2
        endmethod

        private static method expandGuid3, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn file.Context.Guid3
        endmethod

        private static method expandMonth, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn String.Format("{0:MM}", DateTime.Now)
        endmethod

        private static method expandMonthName, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn String.Format("{0:MMMM}", DateTime.Now)
        endmethod

        private static method expandMonthShortName, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn String.Format("{0:MMM}", DateTime.Now)
        endmethod

        private static method expandNamespace, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            if (!String.IsNullOrWhiteSpace(file.Context.CurrentTask.Namespace)) then
                mreturn file.Context.CurrentTask.Namespace
            else if (!String.IsNullOrWhiteSpace(file.Context.Namespace)) then
                mreturn file.Context.Namespace
            else
                throw new ApplicationException(file.GetTokenErrorMessage(tkn, "requires a namespace is provided"))
        endmethod

        private static method expandTemplate, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn file.Context.CurrentTemplateBaseName
        endmethod

        private static method expandTime, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn String.Format("{0:HH:mm}", DateTime.Now)
        endmethod

        private static method expandWeekday, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn DateTime.Now.DayOfWeek.ToString()
        endmethod

        private static method expandYear, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn DateTime.Now.Year.ToString()
		endmethod

	endclass

endnamespace