;; *****************************************************************************
;; 
;;  Title:       TokenExpanderRelationLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands relation loop token nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        relationLoopTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerRelationLoopTokens, void
            endparams
        proc
			
			relationLoopTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()
			
			relationLoopTokenExpanders.Add("RELATION_FROMKEY", expandRelationFromKey)
            relationLoopTokenExpanders.Add("RELATION_NAME", expandRelationName)
            relationLoopTokenExpanders.Add("RELATION_NUMBER", expandRelationNumber)
            relationLoopTokenExpanders.Add("RELATION_TOKEY", expandRelationToKey)
			relationLoopTokenExpanders.Add("RELATION_TOSTRUCTURE", expandRelationToStructure)

        endmethod

        ;;;  <summary>
        ;;;  
        ;;;  </summary>
        ;;;  <param name="tkn"></param>
        ;;;  <param name="file"></param>
        ;;;  <param name="loops"></param>
        ;;;  <param name="specific"></param>
        ;;;  <returns></returns>
        public static method ExpandRelationLoopToken, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<RpsStructure, RpsRelation, int, string> 
            endparams
        proc
            lambda isRelationLoop(node)
            begin
                mreturn node .is. RelationLoopNode
            end
			data loop, @RelationLoopNode, ^as(loops.First(isRelationLoop), RelationLoopNode)
            mreturn specific(file.Context.CurrentStructure, loop.CurrentRelation, loop.CurrentIndex)
        endmethod

        private static method expandRelationFromKey, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index)
            begin
                mreturn relation.FromKey
            end
            mreturn ExpandRelationLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandRelationName, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index)
            begin
                mreturn relation.Name
            end
            mreturn ExpandRelationLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandRelationNumber, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index)
            begin
                mreturn Convert.ToString(index + 1)
            end
            mreturn ExpandRelationLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandRelationToKey, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index)
            begin
                mreturn relation.ToKey
            end
            mreturn ExpandRelationLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandRelationToStructure, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index)
            begin
                mreturn relation.ToStructure
            end
            mreturn ExpandRelationLoopToken(tkn, file, loops, doExpand)
		endmethod

	endclass

endnamespace