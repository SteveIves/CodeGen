;; *****************************************************************************
;; 
;;  Title:       TokenExpanderSegmentLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands key segment loop token nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        keySegmentLoopTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerSegmentLoopTokens, void
            endparams
		proc

			keySegmentLoopTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()

            keySegmentLoopTokenExpanders.Add("SEGMENT_CSTYPE", expandSegmentCsType)
            keySegmentLoopTokenExpanders.Add("SEGMENT_DESC", expandSegmentDesc)
            keySegmentLoopTokenExpanders.Add("SEGMENT_KIND", expandSegmentKind)
            keySegmentLoopTokenExpanders.Add("SEGMENT_LENGTH", expandSegmentLength)
            keySegmentLoopTokenExpanders.Add("SEGMENT_LITVAL", expandSegmentLitval)
            keySegmentLoopTokenExpanders.Add("SEGMENT_MAPPEDNAME", expandSegmentMappedName)
            keySegmentLoopTokenExpanders.Add("SEGMENT_NAME", expandSegmentName)
            keySegmentLoopTokenExpanders.Add("SEGMENT_NUMBER", expandSegmentNumber)
            keySegmentLoopTokenExpanders.Add("SEGMENT_ORDER", expandSegmentOrder)
            keySegmentLoopTokenExpanders.Add("SEGMENT_POSITION", expandSegmentPosition)
            keySegmentLoopTokenExpanders.Add("SEGMENT_SEQUENCE", expandSegmentSequence)
            keySegmentLoopTokenExpanders.Add("SEGMENT_SNTYPE", expandSegmentSnType)
            keySegmentLoopTokenExpanders.Add("SEGMENT_SPEC", expandSegmentSpec)
            keySegmentLoopTokenExpanders.Add("SEGMENT_STRUCTURE", expandSegmentStructure)
            keySegmentLoopTokenExpanders.Add("SEGMENT_TYPE", expandSegmentType)
			keySegmentLoopTokenExpanders.Add("SEGMENT_VBTYPE", expandSegmentVbType)

        endmethod

        ;;;  <summary>
        ;;;  
        ;;;  </summary>
        ;;;  <param name="tkn"></param>
        ;;;  <param name="file"></param>
        ;;;  <param name="loops"></param>
        ;;;  <param name="specific"></param>
        ;;;  <returns></returns>
        public static method ExpandKeySegmentLoopToken, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<RpsStructure, RpsKey, RpsKeySegment, int, string> 
            endparams
        proc
            lambda isSegmentLoop(node) node .is. SegmentLoopNode
			data loop, @SegmentLoopNode, ^as(loops.First(isSegmentLoop), SegmentLoopNode)
            mreturn specific(file.Context.CurrentStructure, loop.CurrentKey, loop.CurrentSegment, loop.CurrentIndex)
        endmethod

        private static method expandSegmentCsType, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index)
            begin
                data value, string, ""
                if (segment.SegmentType == RpsKeySegmentType.Field) then
                begin
                    data field, @RpsField
                    foreach field in str.Fields
                    begin
                        if (field.Name == segment.Field)
                        begin
                            value = field.CsType
                            exitloop
                        end
                    end
                end
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("can only be used with FIELD key segments. Structure {0}, key {1}, contains a {2} segment", str.Name, ky.SequenceNumber, segment.SegmentType.ToString())))
                mreturn value
            end
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentDesc, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index)
            begin
                data value, string, ""
                if (segment.SegmentType == RpsKeySegmentType.Field)
                begin
                    data field, @RpsField
                    foreach field in str.Fields
                    begin
                        if (field.Name == segment.Field)
                        begin
                            value = field.Description
                            exitloop
                        end
                    end
                end
                mreturn value
            end
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentKind, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index) Convert.ToString((int)segment.SegmentType)
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentLength, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index) Convert.ToString(segment.Length)
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentLitval, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index) segment.LiteralValue
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentName, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index) segment.Field
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentMappedName, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index)
            begin
                data value, string, ""
                if (!String.IsNullOrWhiteSpace(str.MappedStructure)) then
                begin
                    if (segment.SegmentType == RpsKeySegmentType.Field) then
                    begin
                        data field, @RpsField
                        foreach field in str.Fields
                        begin
                            if (field.Name == segment.Field)
                            begin
                                value = field.MappedField
                                exitloop
                            end
                        end
                    end
                    else
                        throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("can only be used with FIELD key segments. Structure {0}, key {1}, contains a {2} segment", str.Name, ky.SequenceNumber, segment.SegmentType.ToString())))
                end
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} be mapped to another structure", str.Name)))
                mreturn value
            end
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentNumber, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index) Convert.ToString(index + 1)
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentOrder, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index)
            begin
                using (segment.Order) select
                (RpsKeySegmentOrder.Ascending),
                    mreturn "ASC"
                (RpsKeySegmentOrder.Descending),
                    mreturn "DESC"
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentPosition, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index) Convert.ToString(segment.Position)
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentSequence, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index)
            begin
                using (segment.Order) select
                (RpsKeySegmentOrder.Ascending),
                    mreturn "ASCENDING"
                (RpsKeySegmentOrder.Descending),
                    mreturn "DESCENDING"
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentSnType, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index)
            begin
                data value, string, ""
                if (segment.SegmentType == RpsKeySegmentType.Field) then
                begin
                    data field, @RpsField
                    foreach field in str.Fields
                    begin
                        if (field.Name == segment.Field)
                        begin
                            value = field.SnType
                            exitloop
                        end
                    end
                end
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("can only be used with FIELD key segments. Structure {0}, key {1}, contains a {2} segment", str.Name, ky.SequenceNumber, segment.SegmentType.ToString())))
                mreturn value
            end
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentSpec, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index)
            begin
                data value, string, ""
                if (segment.SegmentType == RpsKeySegmentType.Field) then
                begin
                    data field, @RpsField
                    foreach field in str.Fields
                    begin
                        if (field.Name == segment.Field)
                        begin
                            if ((field.IsGroup && !String.IsNullOrWhiteSpace(field.GroupStructure)) && file.Context.CurrentTask.GroupNoExpand) then
                            begin
                                ;; We've got an implicit structure which has not been expanded
                                value = field.TypeCode
                            end
                            else
                            begin
                                value = field.TypeCode + Convert.ToString(field.Size)
                                if (field.Precision > 0)
                                    value += "." + Convert.ToString(field.Precision)
                            end
                        end
                    end
                end
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("can only be used with FIELD key segments. Structure {0}, key {1}, contains a {2} segment", str.Name, ky.SequenceNumber, segment.SegmentType.ToString())))
                mreturn value
            end
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentStructure, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index) segment.Structure
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentType, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index)
            begin
                using (segment.DataType) select
                (RpsKeySegmentDataType.Alpha),
                    mreturn "ALPHA"
                (RpsKeySegmentDataType.AutoSequence),
                    mreturn "AUTO_SEQUENCE"
                (RpsKeySegmentDataType.AutoTimestamp),
                    mreturn "AUTO_TIMESTAMP"
                (RpsKeySegmentDataType.Decimal),
                    mreturn "DECIMAL"
                (RpsKeySegmentDataType.NoCaseAlpha),
                    mreturn "NOCASE"
                (RpsKeySegmentDataType.SignedInteger),
                    mreturn "INTEGER"
                (RpsKeySegmentDataType.UnsignedInteger),
                    mreturn "UNSIGNED"
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandSegmentVbType, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, segment, index)
            begin
                data value, string, ""
                if (segment.SegmentType == RpsKeySegmentType.Field) then
                begin
                    data field, @RpsField
                    foreach field in str.Fields
                    begin
                        if (field.Name == segment.Field)
                        begin
                            value = field.VbType
                            exitloop
                        end
                    end
                end
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("can only be used with FIELD key segments. Structure {0}, key {1}, contains a {2} segment", str.Name, ky.SequenceNumber, segment.SegmentType.ToString())))
                mreturn value
            end
            mreturn ExpandKeySegmentLoopToken(tkn, file, loops, doExpand)
		endmethod

	endclass

endnamespace