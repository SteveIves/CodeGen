;; *****************************************************************************
;; 
;;  Title:       TokenExpanderStructure.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands structure token nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        structureTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerStructureTokens, void
            endparams
        proc
			
			structureTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()
			
			structureTokenExpanders.Add("DATA_FIELDS_LIST", expandDataFieldsList)
            structureTokenExpanders.Add("DISPLAY_FIELD", expandDisplayField)
            structureTokenExpanders.Add("FILE_ADDRESSING", expandFileAddressing)
            structureTokenExpanders.Add("FILE_CHANGE_TRACKING", expandFileChangeTracking)
            structureTokenExpanders.Add("FILE_COMPRESSION", expandFileCompression)
            structureTokenExpanders.Add("FILE_DENSITY", expandFileDensity)
            structureTokenExpanders.Add("FILE_DESC", expandFileDesc)
            structureTokenExpanders.Add("FILE_NAME", expandFileName)
            structureTokenExpanders.Add("FILE_NAME_NOEXT", expandFileNameNoext)
            structureTokenExpanders.Add("FILE_PAGESIZE", expandFilePageSize)
            structureTokenExpanders.Add("FILE_RECTYPE", expandFileRecType)
            structureTokenExpanders.Add("FILE_STATIC_RFA", expandFileStaticRfa)
            structureTokenExpanders.Add("FILE_STORED_GRFA", expandFileStoredGrfa)
            structureTokenExpanders.Add("FILE_TYPE", expandFileType)
            structureTokenExpanders.Add("FILE_UTEXT", expandFileUserText)
            structureTokenExpanders.Add("MAPPED_FILE", expandMappedFile)
            structureTokenExpanders.Add("MAPPED_STRUCTURE", expandMappedStructure)
            structureTokenExpanders.Add("PRIMARY_KEY_FIELD", expandPrimaryKeyField)
            structureTokenExpanders.Add("STRUCTURE_CHILDREN", expandStructureChildren)
            structureTokenExpanders.Add("STRUCTURE_DESC", expandStructureDesc)
            structureTokenExpanders.Add("STRUCTURE_FIELDS", expandStructureFields)
            structureTokenExpanders.Add("STRUCTURE_KEYS", expandStructureKeys)
            structureTokenExpanders.Add("STRUCTURE_LDESC", expandStructureLongDescription)
            structureTokenExpanders.Add("STRUCTURE_NAME", expandStructureName)
            structureTokenExpanders.Add("STRUCTURE_NOALIAS", expandStructureNoAlias)
            structureTokenExpanders.Add("STRUCTURE_SIZE", expandStructureSize)
			structureTokenExpanders.Add("STRUCTURE_UTEXT", expandStructureUserText)

        endmethod

        ;;;  <summary>
        ;;;  
        ;;;  </summary>
        ;;;  <param name="tkn"></param>
        ;;;  <param name="file"></param>
        ;;;  <param name="loops"></param>
        ;;;  <param name="specific"></param>
        ;;;  <returns></returns>
        public static method ExpandStructureToken, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<RpsStructure, string> 
            endparams
        proc
            mreturn specific(file.Context.CurrentStructure)
        endmethod

        private static method expandDataFieldsList, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                data keyField, string, CodeGen.Engine.StructureTools.PrimaryKeyField(file.Context, str.Keys)
                data replacementText, string, ""
                ;; Iterate through the structure fields
                data Fld, @RpsField
                foreach Fld in str.Fields
                begin
                    ;; Skip the primary key field and any fields excluded by Toolkit
                    if ((Fld.Name != keyField) && (!Fld.ExcludedByToolkit))
                        replacementText += Fld.Name + ","
                end
                ;; Remove the trailing comma
                if (replacementText.EndsWith(","))
                    replacementText = replacementText.Substring(0, replacementText.Length - 1)
                mreturn replacementText
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandDisplayField, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (!String.IsNullOrWhiteSpace(str.DisplayField)) then
                    mreturn str.DisplayField
                else
                    throw new ApplicationException(String.Format("Token <DISPLAY_FIELD> requires that a display field be defined in repository structure {0}", str.Name))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandFileAddressing, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Files.Count > 0) then
                begin
                    using (str.Files[file.Context.CurrentFileIndex].Addressing) select
                    (RpsFileAddressing.Addressing32Bit),
                        mreturn "32"
                    (RpsFileAddressing.Addressing40Bit),
                        mreturn "40"
                    (),
                        mreturn ""
                    endusing
                end
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} to be assigned to a file definition", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandFileChangeTracking, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Files.Count > 0) then
                    mreturn str.Files[file.Context.CurrentFileIndex].ChangeTracking ? "YES" : "NO"
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} to be assigned to a file definition", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandFileCompression, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Files.Count > 0) then
                    mreturn str.Files[file.Context.CurrentFileIndex].RecordCompression ? "YES" : "NO"
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} to be assigned to a file definition", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandFileDensity, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Files.Count > 0) then
                    mreturn str.Files[file.Context.CurrentFileIndex].Density.ToString()
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} to be assigned to a file definition", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandFileDesc, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Files.Count > 0) then
                    mreturn str.Files[file.Context.CurrentFileIndex].Description
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} to be assigned to a file definition", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandFileName, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Files.Count > 0) then
                    mreturn str.Files[file.Context.CurrentFileIndex].FileSpec
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} to be assigned to a file definition", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandFileNameNoext, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Files.Count > 0) then
                begin
                    data value, string, str.Files[file.Context.CurrentFileIndex].FileSpec
                    ;; Remove the file extension
                    if (value.Contains("."))
                        value = value.Substring(0, value.LastIndexOf("."))
                    mreturn value
                end
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} to be assigned to a file definition", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandFilePageSize, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Files.Count > 0) then
                begin
                    using (str.Files[file.Context.CurrentFileIndex].PageSize) select
                    (RpsFilePageSize.PageSize512),
                        mreturn "512"
                    (RpsFilePageSize.PageSize1024),
                        mreturn "1024"
                    (RpsFilePageSize.PageSize2048),
                        mreturn "2048"
                    (RpsFilePageSize.PageSize4096),
                        mreturn "4096"
                    (RpsFilePageSize.PageSize8192),
                        mreturn "8192"
                    (RpsFilePageSize.PageSize16384),
                        mreturn "16384"
                    (RpsFilePageSize.PageSize32768),
                        mreturn "32768"
                    (),
                        mreturn "4096"
                    endusing
                end
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} to be assigned to a file definition", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandFileRecType, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Files.Count > 0) then
                begin
                    using (str.Files[file.Context.CurrentFileIndex].RecordType) select
                    (RpsRecordType.FixedLength),
                        mreturn "FIXED"
                    (RpsRecordType.MultipleFixedLength),
                        mreturn "MULTIPLE"
                    (RpsRecordType.VariableLength),
                        mreturn "VARIABLE"
                    (),
                        mreturn ""
                    endusing
                end
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} to be assigned to a file definition", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandFileStaticRfa, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Files.Count > 0) then
                    mreturn str.Files[file.Context.CurrentFileIndex].StaticRFA ? "YES" : "NO"
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} to be assigned to a file definition", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandFileStoredGrfa, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Files.Count > 0) then
                    mreturn str.Files[file.Context.CurrentFileIndex].StoredGRFA ? "YES" : "NO"
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} to be assigned to a file definition", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandFileType, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Files.Count > 0) then
                    mreturn str.Files[file.Context.CurrentFileIndex].FileType
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} to be assigned to a file definition", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandFileUserText, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Files.Count > 0) then
                    mreturn str.Files[file.Context.CurrentFileIndex].UserText
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} to be assigned to a file definition", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandMappedFile, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (String.IsNullOrWhiteSpace(str.MappedStructure)) then
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} be mapped to another structure", str.Name)))
                else if (String.IsNullOrWhiteSpace(str.MappedFileSpec)) then
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, "requires that the mapped structure to be assigned to a file definition"))
                else
                    mreturn str.MappedFileSpec
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandMappedStructure, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (!String.IsNullOrWhiteSpace(str.MappedStructure)) then
                    mreturn str.MappedStructure
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires structure {0} be mapped to another structure", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandPrimaryKeyField, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                if (str.Keys.Count > 0) then
                    mreturn StructureTools.PrimaryKeyField(file.Context, str.Keys)
                else
                    throw new ApplicationException(file.GetTokenErrorMessage(tkn, String.Format("requires that keys be defined in structure {0}", str.Name)))
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandStructureChildren, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                mreturn str.ChildCount.ToString()
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandStructureDesc, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                mreturn str.Description
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandStructureFields, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                data counter, int, 0
                data fld, @RpsField
                foreach fld in str.Fields
                    counter += fld.ArrayDimension[0]
                mreturn counter.ToString()
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandStructureKeys, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                mreturn str.Keys.Count.ToString()
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandStructureLongDescription, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                mreturn str.LongDescription
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandStructureName, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                mreturn str.Alias
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandStructureNoAlias, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                mreturn str.Name
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandStructureSize, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                mreturn str.Length.ToString()
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandStructureUserText, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str)
            begin
                mreturn str.UserText
            end
            mreturn ExpandStructureToken(tkn, file, loops, doExpand)
		endmethod

	endclass

endnamespace