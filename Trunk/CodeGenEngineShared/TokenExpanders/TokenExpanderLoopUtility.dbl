;; *****************************************************************************
;; 
;;  Title:       TokenExpanderLoopUtility.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands loop utility token nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        loopUtilityTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerLoopUtilityTokens, void
            endparams
        proc
			
			loopUtilityTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()
			
			loopUtilityTokenExpanders.Add(",", expandLoopUtilComma)
            loopUtilityTokenExpanders.Add("+", expandLoopUtilPlus)
            loopUtilityTokenExpanders.Add(":", expandLoopUtilColon)
            loopUtilityTokenExpanders.Add("&&", expandLoopUtilAndCs)
            loopUtilityTokenExpanders.Add(".AND.", expandLoopUtilAndDbl)
            loopUtilityTokenExpanders.Add("AND", expandLoopUtilAndEnglish)
            loopUtilityTokenExpanders.Add("||", expandLoopUtilOrCs)
            loopUtilityTokenExpanders.Add(".OR.", expandLoopUtilOrDbl)
			loopUtilityTokenExpanders.Add("OR", expandLoopUtilOrEnglish)

        endmethod

        private static method expandLoopUtilComma, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node)
            begin
                mreturn node .is. LoopNode
            end
			data loop, @LoopNode, ^as(loops.Last(isLoopNode), LoopNode)
            mreturn (loop.CurrentIndex < loop.MaxIndex) ? "," : String.Empty
        endmethod

        private static method expandLoopUtilPlus, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node)
            begin
                mreturn node .is. LoopNode
            end
            data loop, @LoopNode, ^as(loops.Last(isLoopNode), LoopNode)
            mreturn (loop.CurrentIndex < loop.MaxIndex) ? "+" : String.Empty
        endmethod

        private static method expandLoopUtilColon, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node)
            begin
                mreturn node .is. LoopNode
            end
            data loop, @LoopNode, ^as(loops.Last(isLoopNode), LoopNode)
            mreturn (loop.CurrentIndex < loop.MaxIndex) ? ":" : String.Empty
        endmethod

        private static method expandLoopUtilAndCs, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node)
            begin
                mreturn node .is. LoopNode
            end
            data loop, @LoopNode, ^as(loops.Last(isLoopNode), LoopNode)
            mreturn (loop.CurrentIndex < loop.MaxIndex) ? "&&" : String.Empty
        endmethod

        private static method expandLoopUtilAndDbl, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node)
            begin
                mreturn node .is. LoopNode
            end
            data loop, @LoopNode, ^as(loops.Last(isLoopNode), LoopNode)
            mreturn (loop.CurrentIndex < loop.MaxIndex) ? ".AND." : String.Empty
        endmethod

        private static method expandLoopUtilAndEnglish, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node)
            begin
                mreturn node .is. LoopNode
            end
            data loop, @LoopNode, ^as(loops.Last(isLoopNode), LoopNode)
            mreturn (loop.CurrentIndex < loop.MaxIndex) ? "AND," : String.Empty
        endmethod

        private static method expandLoopUtilOrCs, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node)
            begin
                mreturn node .is. LoopNode
            end
            data loop, @LoopNode, ^as(loops.Last(isLoopNode), LoopNode)
            mreturn (loop.CurrentIndex < loop.MaxIndex) ? "||" : String.Empty
        endmethod

        private static method expandLoopUtilOrDbl, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node)
            begin
                mreturn node .is. LoopNode
            end
            data loop, @LoopNode, ^as(loops.Last(isLoopNode), LoopNode)
            mreturn (loop.CurrentIndex < loop.MaxIndex) ? ".OR." : String.Empty
        endmethod

        private static method expandLoopUtilOrEnglish, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node)
            begin
                mreturn node .is. LoopNode
            end
            data loop, @LoopNode, ^as(loops.Last(isLoopNode), LoopNode)
            mreturn (loop.CurrentIndex < loop.MaxIndex) ? "OR" : String.Empty
        endmethod
    endclass
endnamespace

