;; *****************************************************************************
;; 
;;  Title:       TokenExpanderKeyLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands key loop token nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        keyLoopTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerKeyLoopTokens, void
            endparams
		proc

            keyLoopTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()
			
			keyLoopTokenExpanders.Add("KEY_CHANGES", expandKeyChanges)
            keyLoopTokenExpanders.Add("KEY_DENSITY", expandKeyDensity)
            keyLoopTokenExpanders.Add("KEY_DESCRIPTION", expandKeyDescription)
            keyLoopTokenExpanders.Add("KEY_DUPLICATES", expandKeyDuplicates)
            keyLoopTokenExpanders.Add("KEY_DUPLICATES_AT", expandKeyDuplicatesAt)
            keyLoopTokenExpanders.Add("KEY_LENGTH", expandKeyLength)
            keyLoopTokenExpanders.Add("KEY_NAME", expandKeyName)
            keyLoopTokenExpanders.Add("KEY_NULLTYPE", expandKeyNullType)
            keyLoopTokenExpanders.Add("KEY_NULLVALUE", expandKeyNullValue)
            keyLoopTokenExpanders.Add("KEY_NUMBER", expandKeyNumber)
            keyLoopTokenExpanders.Add("KEY_ORDER", expandKeyOrder)
            keyLoopTokenExpanders.Add("KEY_SEGMENTS", expandKeySegments)
			keyLoopTokenExpanders.Add("KEY_UNIQUE", expandKeyUnique)

        endmethod

        ;;;  <summary>
        ;;;  
        ;;;  </summary>
        ;;;  <param name="tkn"></param>
        ;;;  <param name="file"></param>
        ;;;  <param name="loops"></param>
        ;;;  <param name="specific"></param>
        ;;;  <returns></returns>
        public static method ExpandKeyLoopToken, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<RpsStructure, RpsKey, int, string> 
            endparams
        proc
            lambda isKeyLoop(node)
            begin
                mreturn node .is. KeyLoopNode
            end
			data loop, @KeyLoopNode, ^as(loops.First(isKeyLoop), KeyLoopNode)
            mreturn specific(file.Context.CurrentStructure, loop.CurrentKey, loop.CurrentIndex)
        endmethod

        private static method expandKeyChanges, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                mreturn ky.Modifiable ? "CHANGES" : "NOCHANGES"
            end
            mreturn ExpandKeyLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandKeyDensity, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                mreturn ky.Density.ToString()
            end
            mreturn ExpandKeyLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandKeyDescription, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                mreturn ky.Description
            end
            mreturn ExpandKeyLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandKeyDuplicates, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                using (ky.Duplicates) select
                (RpsKeyDuplicates.Duplicates),
                    mreturn "DUPLICATES"
                (RpsKeyDuplicates.NoDuplicates),
                    mreturn "UNIQUE"
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandKeyLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandKeyDuplicatesAt, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                using (ky.InsertDuplicates) select
                (RpsKeyInsertDups.AtFront),
                    mreturn "FRONT"
                (RpsKeyInsertDups.AtEnd),
                    mreturn "END"
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandKeyLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandKeyLength, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                mreturn ky.Size.ToString()
            end
            mreturn ExpandKeyLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandKeyName, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                mreturn ky.Name
            end
            mreturn ExpandKeyLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandKeyNullType, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                using (ky.NullKey) select
                (RpsKeyNullType.None),
                    mreturn "NONE"
                (RpsKeyNullType.Replicating),
                    mreturn "REPLICATE"
                (RpsKeyNullType.NonReplicating),
                    mreturn "NOREPLICATE"
                (RpsKeyNullType.Short),
                    mreturn "SHORT"
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandKeyLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandKeyNullValue, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                mreturn ky.NullKeyValue
            end
            mreturn ExpandKeyLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandKeyNumber, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                mreturn index.ToString()
            end
            mreturn ExpandKeyLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandKeyOrder, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                using (ky.SortOrder) select
                (RpsKeyOrder.Ascending),
                    mreturn "ASC"
                (RpsKeyOrder.Descending),
                    mreturn "DESC"
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandKeyLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandKeySegments, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                mreturn ky.Segments.Count.ToString()
            end
            mreturn ExpandKeyLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandKeyUnique, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                using (ky.Duplicates) select
                (RpsKeyDuplicates.NoDuplicates),
                    mreturn "UNIQUE"
                (RpsKeyDuplicates.Duplicates),
                    mreturn ""
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandKeyLoopToken(tkn, file, loops, doExpand)
		endmethod

	endclass

endnamespace