;;*****************************************************************************
;;
;; Title:       Usage.dbl
;;
;; Type:        Subroutine
;;
;; Description: Displays command line usage information
;;
;; Date:        16th October 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine

subroutine Usage

    endparams

    .include "CODEGEN_SRC:codegen.def"

proc

	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("")
    Console.WriteLine("codegen <options>")
    Console.WriteLine("")
    Console.WriteLine("    -t template [...]|*")
    Console.WriteLine("          Template(s) to process. Any number of templates can be specified,")
	Console.WriteLine("          separating each with a space. It is not necessary to specity the .tpl")
	Console.WriteLine("          file extension. Multiple templates can be selected by using the *")
	Console.WriteLine("          wildcard (e.g. data*), and all templates can be selected by using")
	Console.WriteLine("          the * wildcard alone.")
	Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -s structure[.group] [...]|*")
	Console.WriteLine("          Structure(s) to process. Any number of structures can be specified,")
	Console.WriteLine("          separating each with a space. All structures can be selected by")
	Console.WriteLine("          using the * wildcard as the first structure name. You can optionally")
    Console.WriteLine("          specify name name of a group to be processed within a structure.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -a alias [...]]")
    Console.WriteLine("          Structure aliases. You can specify multiple alias names, up to the")
    Console.WriteLine("          number of structure names specified with -s.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -ms")
    Console.WriteLine("          Multiple Structures. Specifies that the structures that follow the -s")
    Console.WriteLine("          command line option should all be available to templates being")
    Console.WriteLine("          processed, at the same time.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -file filename")
    Console.WriteLine("          Repository file name to process. This option causes all structures")
    Console.WriteLine("          that are assigned to the file definition to be available for use")
    Console.WriteLine("          when processing templates. The end result is similar to specifying")
    Console.WriteLine("          multiple structures with -s and using the -ms option.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -subset name")
	Console.WriteLine("          Subset of fields to use. Specify subsets in field user text strings")
	Console.WriteLine("          with @SUB=name; syntax. This option is only valid when processing a")
	Console.WriteLine("          single repository structure.")
	Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -fields field1 [field2...]")
	Console.WriteLine("          Create a subset from the list of supplied fields. This option is")
	Console.WriteLine("          only valid when processing a single repository structure and can't")
	Console.WriteLine("          be used at the same time as the -subset option.")
	Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -fo file [...]")
    Console.WriteLine("          File Override. This option allows you to specify the repository file")
    Console.WriteLine("          definition that is used for each structure that you are processing.")
    Console.WriteLine("          This is useful if the structure that you are using is assigned to")
    Console.WriteLine("          multiple files, because by default CodeGen always selects the first")
    Console.WriteLine("          assigned file.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -i inpdir")
    Console.WriteLine("          Input file directory containing templates. Defaults to the current")
    Console.WriteLine("          directory, or the directory specified with the CODEGEN_TPLDIR")
    Console.WriteLine("          environment variable. You can specify a full or relative path, or a")
    Console.WriteLine("          logical name followed by a colon (e.g. TPL:).")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -o outdir")
    Console.WriteLine("          Output directory. Defaults to the current directory, or the directory")
    Console.WriteLine("          specified with the CODEGEN_OUTDIR environment variable. You can use a")
    Console.WriteLine("          full or relative path, or a logical followed by a colon (e.g. SRC:).")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -n namespace")
    Console.WriteLine("          The namespace to use when replacing the <NAMESPACE> token. Codegen")
    Console.WriteLine("          will determine the default namespace using the environment variable")
    Console.WriteLine("          SYNDEFNS, and this can be overridden with the -n option.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -u usertokenfile")
	Console.WriteLine("          User defined token file. Specify a full or relative file spec of the")
	Console.WriteLine("          file that contains user defined token definitions. The file spec can")
	Console.WriteLine("          include Synergy logical names.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -ut name=value [...]")
    Console.WriteLine("          User defined tokens specified via the command line. Separate multiple")
	Console.WriteLine("          name=value with spaces. If spaces exist in your expansion value then")
    Console.WriteLine("          enclose the name=value pair in quotes.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -w wscfile[#n]")
    Console.WriteLine("          Process input from a UI Toolkit Window script file.  By default the")
    Console.WriteLine("          fields and buttons collection will be based on the first input window")
    Console.WriteLine("          found in the script file, but this can be overridden using the #n")
    Console.WriteLine("          qualifier, which specifies either a 1-based input window number")
    Console.WriteLine("          or the name of the input window to process.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -wn")
    Console.WriteLine("          When processing input from a UI Toolkit Window script file this")
	Console.WriteLine("          option prevents script file input window field attributes from being")
	Console.WriteLine("          used to override repository field attributes. This allows you to")
	Console.WriteLine("          generate code based only on the fields listed in an input window, but")
	Console.WriteLine("          using field meta data drawn only from the repository.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -ws wscfile")
    Console.WriteLine("          Window script selection list processing. When this option is used")
    Console.WriteLine("          CodeGen will examine fields which have selection windows specified")
    Console.WriteLine("          and will attempt to populate the field selections property based on")
    Console.WriteLine("          the selection items defined in the named selection window.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -f [o] [l] [t] [r] [w]")
    Console.WriteLine("          Override default field loop processing rules.")
    Console.WriteLine("          -f o   Include overlay fields.")
    Console.WriteLine("          -f l   Include fields which are 'Excluded by Language'.")
    Console.WriteLine("          -f t   Exclude fields which are 'Excluded by Toolkit'.")
    Console.WriteLine("          -f r   Exclude fields which are 'Excluded by ReportWriter'.")
    Console.WriteLine("          -f w   Exclude fields which are 'Excluded by Web'.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -g [f] [r] [i]")
    Console.WriteLine("          Override default group processing rules")
    Console.WriteLine("          -g f   Don't prefix group fields with group name")
    Console.WriteLine("          -g i   Don't expand implicit groups to individual fields")
    Console.WriteLine("          -g r   Don't use repository group field prefix")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -prefix <name>")
    Console.WriteLine("          When using the <FIELD_NAME> token, prefix field names with <name> .")
    Console.WriteLine("          Useful with repository .include with the optional prefix= qualifier.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -b a|d|n")
    Console.WriteLine("          Override default button loop processing rules.")
    Console.WriteLine("          -ba    Always use the default buttons defined in DefaultButtons.xml.")
    Console.WriteLine("          -bd    Never use the default buttons defined in DefaultButtons.xml.")
    Console.WriteLine("          -bn    Never load any buttons (DefaultButtons.xml or window script).")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -cw <pixels>")
    Console.WriteLine("          Overrides the default number of pixels per character to be used when")
    Console.WriteLine("          calculating pixel coordinates using tokens like <FIELD_PIXEL_WIDTH>.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -ch <pixels>")
    Console.WriteLine("          Overrides the default number of pixels per row to be used when")
    Console.WriteLine("          calculating pixel coordinates using tokens like <FIELD_PIXEL_ROW>.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -opk <key#>")
	Console.WriteLine("          Overrides the repository key that is used when a primary key block")
	Console.WriteLine("          (<PRIMARY_KEY>) is used. By default the first key defined is used.")
	Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -cdm <filespec>")
	Console.WriteLine("          Specifies that custom data mappings are loaded from an XML file.")
	Console.WriteLine("          Refer to Customizing Data Type Mappings in the docs for more info.")
	Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -r    Replace existing files.  By default existing files are not replaced.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -mw   Multi-write file if same file generated more than once.")
	Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -c    Continue processing after errors. If multiple templates, files or")
	Console.WriteLine("          tasks are being processed then this option allows code generation")
	Console.WriteLine("          to continue even though one template/structure combination has")
	Console.WriteLine("          generated an error.")
	Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -v    Verbose mode (displays additional information).")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -d    Debug mode (displays even more information).")
	Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -debug")
	Console.WriteLine("          Developer debug mode (displays extensive debugging information).")
	Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -dt   Create a log file containing the resuls of tokenization and parsing.")
	Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -lf   List Files. Lists the names of any files generated when not running")
	Console.WriteLine("          in verbose or debug logging modes.")
	Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -e    Display the command line used to start CodeGen.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -docs Display the CodeGen documentation, locally or in a Web browser.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -version")
	Console.WriteLine("          Display the CodeGen version number and build date.")
	Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -checkversion")
	Console.WriteLine("          Checks if a later version of CodeGen is available.")
	Console.WriteLine("          Requires Internet access.")
	Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	Console.WriteLine("    -h|?  Display this help information.")
    Console.WriteLine("")
	;;Limit for text   -------------------------------------------------------------------------------
	
    xreturn

endsubroutine
