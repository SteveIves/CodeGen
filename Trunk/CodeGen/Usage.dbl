;;*****************************************************************************
;;
;; Title:       Usage.dbl
;;
;; Type:        Subroutine
;;
;; Description: Displays command line usage information
;;
;; Date:        16th October 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine

subroutine Usage

    endparams

    .include "CODEGEN_SRC:codegen.def"

proc

    ;;Limit for text-------------------------------------------------------------------------------
    writes(Env.Tt,"")
    writes(Env.Tt,"codegen <options>")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -t template [...]|*")
    writes(Env.Tt,"          Template(s) to process. Up to ten template file names or wild-card")
    writes(Env.Tt,"          specs can follow, or * for all.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -s structure[.group] [...]|*")
    writes(Env.Tt,"          Structure(s) to process, or * for all. Up to ten repository structure")
    writes(Env.Tt,"          names can follow the -s. Optionally also specify a group.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -a alias [...]]")
    writes(Env.Tt,"          Structure aliases. Up to ten aliases may be specified and correspond")
    writes(Env.Tt,"          to the structure names specified with -s.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -ms")
    writes(Env.Tt,"          Multiple Structures. Specifies that the structures that follow the -s")
    writes(Env.Tt,"          command line option should all be available to templates being")
    writes(Env.Tt,"          processed, at the same time.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -file filename")
    writes(Env.Tt,"          Repository file name to process. This option causes all structures")
    writes(Env.Tt,"          that are assigned to the file definition to be available for use")
    writes(Env.Tt,"          when processing templates. The end result is similar to specifying")
    writes(Env.Tt,"          multiple structures with -s and using the -ms option.")
    writes(Env.Tt,"")
	writes(Env.Tt,"    -subset name")
	writes(Env.Tt,"          Subset of fields to use. Specify subsets in field user text strings")
	writes(Env.Tt,"          with @SUB=name; syntax. This option is only valid when processing a")
	writes(Env.Tt,"          single repository structure.")
	writes(Env.Tt,"")
	writes(Env.Tt,"    -fields field1 [field2...]")
	writes(Env.Tt,"          Create a subset from the list of supplied fields. This option is")
	writes(Env.Tt,"          only valid when processing a single repository structure and can't")
	writes(Env.Tt,"          be used at the same time as the -subset option.")
	writes(Env.Tt,"")
	writes(Env.Tt,"    -fo file [...]")
    writes(Env.Tt,"          File Override. This option allows you to specify which repository")
    writes(Env.Tt,"          file definition is used for each structure that you are processing.")
    writes(Env.Tt,"          This option is useful if the structure that you are using is assigned")
    writes(Env.Tt,"          to multiple files, because CodeGen will by default will always select")
    writes(Env.Tt,"          the first assigned file. You can specify up to 10 file definition")
    writes(Env.Tt,"          names to correspond to the structure names specified with -s.")
    writes(Env.Tt,"")
    ;;Limit for text-------------------------------------------------------------------------------
    writes(Env.Tt,"    -i inpdir")
    writes(Env.Tt,"          Input file directory containing templates. Defaults to the current")
    writes(Env.Tt,"          directory, or the directory specified with the CODEGEN_TPLDIR")
    writes(Env.Tt,"          environment variable. You can specify a full or relative path, or a")
    writes(Env.Tt,"          logical name followed by a colon (e.g. TPL:).")
    writes(Env.Tt,"")
    ;;Limit for text-------------------------------------------------------------------------------
    writes(Env.Tt,"    -o outdir")
    writes(Env.Tt,"          Output directory. Defaults to the current directory, or the directory")
    writes(Env.Tt,"          specified with the CODEGEN_OUTDIR environment variable. You can use a")
    writes(Env.Tt,"          full or relative path, or a logical followed by a colon (e.g. SRC:).")
    writes(Env.Tt,"")
    ;;Limit for text-------------------------------------------------------------------------------
    writes(Env.Tt,"    -n namespace")
    writes(Env.Tt,"          The namespace to use when replacing the <NAMESPACE> token. Codegen")
    writes(Env.Tt,"          will determine the default namespace using the environment variable")
    writes(Env.Tt,"          SYNDEFNS, and this can be overridden with the -n option.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -u usertokenfile")
	writes(Env.Tt,"          User defined token file. Specify a full or relative file spec of the")
	writes(Env.Tt,"          file that contains user defined token definitions. The file spec can")
	writes(Env.Tt,"          include Synergy logical names.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -ut name=value [...]")
    writes(Env.Tt,"          User defined tokens specified via the command line. Up to ten name/")
    writes(Env.Tt,"          value pairs can follow separated by spaces. If spaces exist in the")
    writes(Env.Tt,"          name or value then enclose the name=value pair in quotes.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -w wscfile[#n]")
    writes(Env.Tt,"          Process input from a UI Toolkit Window script file.  By default the")
    writes(Env.Tt,"          fields and buttons collection will be based on the first input window")
    writes(Env.Tt,"          found in the script file, but this can be overridden using the #n")
    writes(Env.Tt,"          qualifier, which specifies either a 1-based input window number")
    writes(Env.Tt,"          or the name of the input window to process.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -wn")
    writes(Env.Tt,"          When processing input from a UI Toolkit Window script file this option")
    writes(Env.Tt,"          prevents script file input window field attributes from being used to")
    writes(Env.Tt,"          override repository field attributes. This allows you to generate code")
    writes(Env.Tt,"          based on only the fields listed in an input window, but using only the")
    writes(Env.Tt,"          repository field definitions.")
    writes(Env.Tt,"")
    ;;Limit for text-------------------------------------------------------------------------------
    writes(Env.Tt,"    -ws wscfile")
    writes(Env.Tt,"          Window script selection list processing. When this option is used")
    writes(Env.Tt,"          CodeGen will examine any fields which have selection windows specified")
    writes(Env.Tt,"          and will attempt to populate the field selections property based on")
    writes(Env.Tt,"          the selection items defined in the named selection window.")
    writes(Env.Tt,"")
    ;;Limit for text-------------------------------------------------------------------------------
    writes(Env.Tt,"    -f [o] [l] [t] [r] [w]")
    writes(Env.Tt,"          Override default field loop processing rules.")
    writes(Env.Tt,"          -f o   Include overlay fields.")
    writes(Env.Tt,"          -f l   Include fields which are 'Excluded by Language'.")
    writes(Env.Tt,"          -f t   Exclude fields which are 'Excluded by Toolkit'.")
    writes(Env.Tt,"          -f r   Exclude fields which are 'Excluded by ReportWriter'.")
    writes(Env.Tt,"          -f w   Exclude fields which are 'Excluded by Web'.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -g [f] [r] [i]")
    writes(Env.Tt,"          Override default group processing rules")
    writes(Env.Tt,"          -g f   Don't prefix group fields with group name")
    writes(Env.Tt,"          -g i   Don't expand implicit groups to individual fields")
    writes(Env.Tt,"          -g r   Don't use repository group field prefix")
    writes(Env.Tt,"")
    ;;Limit for text-------------------------------------------------------------------------------
    writes(Env.Tt,"    -prefix <name>")
    writes(Env.Tt,"          When using the <FIELD_NAME> token, prefix field names with <name> .")
    writes(Env.Tt,"          Useful with repository .include with the optional prefix= qualifier.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -b a|d|n")
    writes(Env.Tt,"          Override default button loop processing rules.")
    writes(Env.Tt,"          -ba    Always use the default buttons defined in DefaultButtons.xml.")
    writes(Env.Tt,"          -bd    Never use the default buttons defined in DefaultButtons.xml.")
    writes(Env.Tt,"          -bn    Never load any buttons (DefaultButtons.xml or window script).")
    writes(Env.Tt,"")
    ;;Limit for text-------------------------------------------------------------------------------
    writes(Env.Tt,"    -cw <pixels>")
    writes(Env.Tt,"          Overrides the default number of pixels per character to be used when")
    writes(Env.Tt,"          calculating pixel coordinates using tokens like <FIELD_PIXEL_WIDTH>.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -ch <pixels>")
    writes(Env.Tt,"          Overrides the default number of pixels per row to be used when")
    writes(Env.Tt,"          calculating pixel coordinates using tokens like <FIELD_PIXEL_ROW>.")
    writes(Env.Tt,"")
	writes(Env.Tt,"    -opk <key#>")
	writes(Env.Tt,"          Overrides the repository key that is used when a primary key block")
	writes(Env.Tt,"          (<PRIMARY_KEY>) is used. By default the first key defined is used.")
	writes(Env.Tt,"")
	writes(Env.Tt,"    -cdm <filespec>")
	writes(Env.Tt,"          Specifies that custom data mappings are loaded from an XML file.")
	writes(Env.Tt,"          Refer to Customizing Data Type Mappings in the docs for more info.")
	writes(Env.Tt,"")
	writes(Env.Tt,"    -r    Replace existing files.  By default existing files are not replaced.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -v    Verbose mode (displays additional information when processing).")
    writes(Env.Tt,"")
	writes(Env.Tt,"    -d    Debug mode (displays even more information when processing).")
	writes(Env.Tt,"")
	writes(Env.Tt,"    -lf   List Files. Lists the names of any files generated when not running")
	writes(Env.Tt,"          in verbose or debug logging modes.")
	writes(Env.Tt,"")
	writes(Env.Tt,"    -e    Display the command line used to start CodeGen.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -rpsdebug")
    writes(Env.Tt,"          Enable Repository API debug logging messages. Only works with -d.")
    writes(Env.Tt,"")
    .ifdef D_GUI
    writes(Env.Tt,"    -docs Display the CodeGen user guide.")
    writes(Env.Tt,"")
    .endc
    writes(Env.Tt,"    -version")
    writes(Env.Tt,"          Display the CodeGen version number and build date.")
    writes(Env.Tt,"")
    writes(Env.Tt,"    -h|?  Display this help information.")
    writes(Env.Tt,"")

    xreturn

endsubroutine
