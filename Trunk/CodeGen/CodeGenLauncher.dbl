;;*****************************************************************************
;;
;; Title:       CodeGenLauncher.dbl
;;
;; Type:        Subroutine
;;
;; Description: Initialize environment and launch code generation
;;
;; Date:        21st October 2008
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI
import System.Collections
.ifdef DBLNET
import System.Collections.ObjectModel
.endc

subroutine CodeGenLauncher
		
	endparams
		
	.include "CODEGEN_SRC:codegen.def"
		
	static record
		ErrStatus			,int						;;Main error status variables
		FileIndex			,[#]int						;;Array of file indexes to use
		WscFile				,String						;;UI Toolkit window script file
		ProFormaFile		,String						;;BusinessCraft ProForma file name
		ClValues			,@ArrayList					;;Command line option values (New - CommandLineParser.Parse)
		Templates			,@ArrayList					;;Collection of template names
		Structures			,@RpsStructureCollection	;;Collection of repository structures
		FileDef				,@RpsFile					;;Repository file definition name
	endrecord
		
	external function
		xsubr				,^val
	endexternal
		
	.ifdef D_GUI
	.define D_SEPERATOR     "\"
	.endc

	.ifdef OS_UNIX
	.define D_SEPERATOR     "/"
	.endc
		
	.ifdef OS_VMS
	stack record
		UndefineMappings	,boolean
	endrecord
	.endc

proc

	;;Open the terminal and save the channel in the Environment class
	begin
		data tmpTT, int, 0
		open(tmpTT,i,"tt:")
		Env.Tt = tmpTT
		flags(7004020,1)
	end
		
	;;-------------------------------------------------------------------------
	;;Dbr or dbs?
		
	.ifdef DBLNET
	Env.Dbr = 0
	.else
	begin
		data terminal ,int
		data runtime  ,int
		xcall tnmbr(terminal,runtime)
		Env.Dbr = (runtime==0)
	end
	.endc
		
	;;-------------------------------------------------------------------------
	;;Echo command line?
		
	if (CommandLineParser.Parse("e"))
	begin
		data command, a256
		data tmpPos, int
		cmdln(command)
		.ifdef DBLNET
		Log(atrim(command),false,false)
		.else
		;;Find codegen_exe:codegen in the command line
		;;TODO: This won't work in .NET
		if (tmpPos = instr(1,StringTools.LowerCase(command),"codegen_exe:codegen.dbr ")) then
			command = command(tmpPos+24,trimz(command))
		else
		begin
			if (tmpPos = instr(1,StringTools.LowerCase(command),"codegen_exe:codegen "))
				command = command(tmpPos+20,trimz(command))
		end
		Log("codegen "+atrim(command),false,false)
		.endc
	end
		
	;;-------------------------------------------------------------------------
	;;Verbose mode?
		
	Env.Verbose = CommandLineParser.Parse("v")
		
	;;-------------------------------------------------------------------------
	;;Debug mode?
		
	if (CommandLineParser.Parse("d"))
	begin
		Env.Verbose = true
		Env.Debug = true
			
		;;Do we also need Repository API debug logging
		if (CommandLineParser.Parse("rpsdebug"))
			Repository.LogChannel = Env.Tt
	end
		
	;;-------------------------------------------------------------------------
	;;Developer debug mode?
		
	if (CommandLineParser.Parse("debug"))
	begin
		Env.Verbose = true
		Env.Debug = true
		Env.DeveloperDebug = true
			
		;;Do we also need Repository API debug logging
		if (CommandLineParser.Parse("rpsdebug"))
			Repository.LogChannel = Env.Tt
	end
		
	;;-------------------------------------------------------------------------
	;;Display file names mode

	Env.ListFiles = (CommandLineParser.Parse("lf") && (!Env.Verbose))

	;;-------------------------------------------------------------------------
	;;Display headings
		
	VerboseLog(CODEGEN_APPNAME + " " + CODEGEN_VERSION,true,true)
		
	;;-------------------------------------------------------------------------
	;;Are we being asked for usage information?
		
	if (CommandLineParser.Parse("h") || CommandLineParser.Parse("?"))
	begin
		Usage()
		ErrStatus=-1
	end
		
	;;-------------------------------------------------------------------------
	;;Are we being asked for documentation?
		
	if (CommandLineParser.Parse("docs"))
	begin
		Documentation()
		ErrStatus=-1
	end
		
	;;-------------------------------------------------------------------------
	;;Are we being asked for version information?
		
	if (CommandLineParser.Parse("version"))
	begin
		.ifdef DBLNET
		Log(CODEGEN_APPNAME+" "+CODEGEN_VERSION+" (Synergy .NET "+SYN_VERSION+" built "+datecompiled()+")",true,false)
		.else
		Log(CODEGEN_APPNAME+" "+CODEGEN_VERSION+" (Traditional Synergy "+SYN_VERSION+" built "+datecompiled()+")",true,false)
		.endc
		ErrStatus=-1
	end
		
	;;-------------------------------------------------------------------------
	;;Do we have a custom data mappings file specified?

	.ifdef OS_VMS
	UndefineMappings = false
	.endc

	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("cdm",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No data mappings file was found after the -cdm option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("Only one data mappings can be specified after the -cdm option!")
				ErrStatus=1
			end
			else if (!FileTools.FileExists((String)ClValues[0])) then
			begin
				ErrorLog("Failed to open custom data mappings file " + (String)ClValues[0])
				ErrStatus=1
			end
			else
			begin
				;;We opened the file, so we'll try to use it for custom data mappings later.
				data sts, int
				xcall setlog("CODEGEN_DATAMAPPING_FILE",(String)ClValues[0],sts)
				.ifdef OS_VMS
				UndefineMappings = true
				.endc
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Custom data mapping file set by -cdm to " + (String)ClValues[0],false,false)
			end
		end
	end

	;;-------------------------------------------------------------------------
	;;See if we have a template file location specified with CODEGEN_TPLDIR
	;;If present, this location overrides the default location (current dir)
		
	if (!ErrStatus)
	begin
		data TmpBuf, a256
		data length, int
		getlog("CODEGEN_TPLDIR",TmpBuf,length)
		if (length)
		begin
			.ifdef D_SEPERATOR
			if ((TmpBuf(length:1)!=":") && (TmpBuf(length:1)!=D_SEPERATOR))
				TmpBuf(length+1:1) = D_SEPERATOR
			.endc
			Env.TemplateDir = TmpBuf

			if (Env.DeveloperDebug)
				DebugLog("DEVDBG: Template location set by CODEGEN_TPLDIR to "+Env.TemplateDir,false,false)				
		end
	end
		
	;;-------------------------------------------------------------------------
	;;See if we have a template file location command line option
	;;If present, this location overrides the default and CODEGEN_TPLDIR
		
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("i",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No template location was found after the -i option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("Only one template location can be specified after the -i option!")
				ErrStatus=1
			end
			else
			begin
				data location, String, (String)ClValues[0]
				data length, int, location.Length
				.ifdef D_SEPERATOR
				if ((location(length:1)!=":") && (location(length:1)!=D_SEPERATOR))
					location = location + D_SEPERATOR
				.endc
				.ifdef OS_VMS
				if (location==".")
					location = "[]"
				.endc
				Env.TemplateDir = location
					
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Template location set by -i to " + Env.TemplateDir,false,false)				
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Report template file location (verbose mode only)
		
	if ((!ErrStatus) && Env.Verbose)
	begin
		if ((Env.TemplateDir.Length>0)&&(Env.TemplateDir!=".")&&(Env.TemplateDir!="[]")) then
			Log("Template location: " + Env.TemplateDir,false,false)
		else
			Log("Template location: Current directory",false,false)
	end
		
	;;-------------------------------------------------------------------------
	;;See if we have an output location specified with CODEGEN_OUTDIR
	;;If present, this location overrides the default location (current dir)
		
	if (!ErrStatus)
	begin
		data TmpBuf, a256
		data length, int
		getlog("CODEGEN_OUTDIR",TmpBuf,length)
		if (length)
		begin
			.ifdef D_SEPERATOR
			if ((TmpBuf(length:1)!=":") && (TmpBuf(length:1)!=D_SEPERATOR))
				TmpBuf(length+1:1)=D_SEPERATOR
			.endc
			Env.OutputDir = TmpBuf
				
			if (Env.DeveloperDebug)
				DebugLog("DEVDBG: Output location set by CODEGEN_OUTDIR to "+Env.OutputDir,false,false)				
		end
	end
		
	;;-------------------------------------------------------------------------
	;;See if we have an output location command line option
	;;If present, this location overrides the default and CODEGEN_OUTDIR
		
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("o",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No outout location was found after the -o option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("Only one output location can be specified after the -o option!")
				ErrStatus=1
			end
			else
			begin
				data location, String, (String)ClValues[0]
				data length, int, location.Length
				.ifdef D_SEPERATOR
				if ((location(length:1)!=":") && (location(length:1)!=D_SEPERATOR))
					location = location + D_SEPERATOR
				.endc
				.ifdef OS_VMS
				if (location==".")
					location = "[]"
				.endc
				Env.OutputDir = location
					
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Output location set by -o to " + Env.OutputDir,false,false)				
			end
		end
	end

	;;-------------------------------------------------------------------------
	;;Report output location (verbose mode only)
		
	if (!ErrStatus && Env.Verbose)
	begin
		if ((Env.OutputDir.Length>0)&&(Env.OutputDir!=".")&&(Env.OutputDir!="[]")) then
			Log("Output location:   " + Env.OutputDir,false,false)
		else
			Log("Output location:   Current directory",false,false)
	end
		
	;;-------------------------------------------------------------------------
	;;Make sure we can create files in the output location.  The output location
	;;variable is in global data, for use by the generator routines.
		
	if (!ErrStatus)
	begin
		if (!FileTools.CanCreateFileInFolder(Env.OutputDir))
		begin
			ErrorLog("Can't create files in " + Env.OutputDir)
			ErrStatus=1
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Replace existing files?
		
	if (!ErrStatus)
	begin
		Env.ReplaceFiles = CommandLineParser.Parse("r")
		if (Env.ReplaceFiles) then
			VerboseLog("Replace files:     YES",false,false)
		else
			VerboseLog("Replace files:     NO",false,false)
	end
		
	;;-------------------------------------------------------------------------
	;;See if we have an author name specified with CODEGEN_AUTHOR
	;;If present, this location overrides the default author of CodeGen
		
	if (!ErrStatus)
	begin
		data tmpbuf, a80
		data length, int
		getlog("CODEGEN_AUTHOR",tmpbuf,length)
		if (length)
		begin
			Env.Author = %atrim(tmpbuf)
			if (Env.DeveloperDebug)
				DebugLog("DEVDBG: Author name set by CODEGEN_AUTHOR to "+Env.Author,false,false)				
		end
	end
		
	;;-------------------------------------------------------------------------
	;;See if we have an author name specified with CODEGEN_COMPANY
	;;If present, this location overrides the default author of Synergex
		
	if (!ErrStatus)
	begin
		data tmpbuf, a80
		data length, int
		getlog("CODEGEN_COMPANY",tmpbuf,length)
		if (length)
		begin
			Env.Company = %atrim(tmpbuf)
			if (Env.DeveloperDebug)
				DebugLog("DEVDBG: Company name set by CODEGEN_COMPANY to "+Env.Company,false,false)				
		end
	end
		
	;;-------------------------------------------------------------------------
	;;See if we have a default namespace specified with SYNDEFNS
	;;If present, this location overrides the default of "codegen"
		
	if (!ErrStatus)
	begin
		data tmpbuf, a80
		data length, int
		getlog("SYNDEFNS",tmpbuf,length)
		if (length)
		begin
			Env.DefaultNamespace = %atrim(tmpbuf)

			if (Env.DeveloperDebug)
				DebugLog("DEVDBG: Namespace set by SYNDEFNS to "+Env.DefaultNamespace,false,false)				
		end
	end
		
	;;-------------------------------------------------------------------------
	;;See if we have a default namespace command line option
	;;If present, this location overrides the SYNDEFNS environment variable.
		
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("n",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No namespace was found after the -n option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("Only one namespace can be specified after the -n option!")
				ErrStatus=1
			end
			else
			begin
				Env.DefaultNamespace = (String)ClValues[0]
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Namespace set by -n to " + Env.DefaultNamespace,false,false)				
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Are we being asked to use a field / group member prefix

	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("prefix",ClValues)) then
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No field prefix value was found after the -prefix option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("Only one field prefix value can be specified after the -prefix option!")
				ErrStatus=1
			end
			else
			begin
				Env.ClDoFieldPrefix = true
				Env.ClFieldPrefix = (String)ClValues[0]
			end
		end
		else
		begin
			Env.ClDoFieldPrefix = false
			Env.ClFieldPrefix = ""
		end
	end
		
	;;-------------------------------------------------------------------------
	;;See if we have a request to override the default pixel width of a character
		
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("cw",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No character width was found after the -cw option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("Only one character width can be specified after the -cw option!")
				ErrStatus=1
			end
			else if (!StringTools.IsNumeric((String)ClValues[0])) then
			begin
				ErrorLog("The character width after the -cw option must be numeric!")
				ErrStatus=1
			end
			else
			begin
				Env.CharacterWidth = %integer((String)ClValues[0])
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;See if we have a request to override the default pixel height of a row
		
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("ch",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No character height was found after the -ch option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("Only one character height can be specified after the -ch option!")
				ErrStatus=1
			end
			else if (!StringTools.IsNumeric((String)ClValues[0])) then
			begin
				ErrorLog("The character height after the -ch option must be numeric!")
				ErrStatus=1
			end
			else
			begin
				Env.CharacterHeight = %integer((String)ClValues[0])
			end
		end
	end

	;;-------------------------------------------------------------------------
	;;Are we being asked to override the key that is used with the <PRIMARY_KEY> construct?
		
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("opk",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No key number was found after the -opk option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("Only one key number can be specified after the -opk option!")
				ErrStatus=1
			end
			else if (!StringTools.IsNumeric((String)ClValues[0])) then
			begin
				ErrorLog("The key number specified after the -opk option must be numeric!")
				ErrStatus=1
			end
			else
			begin
				Env.OverridePrimaryKeyNum = %integer((String)ClValues[0])
				DebugLog("<PRIMARY_KEY> blocks will use key "+string(Env.OverridePrimaryKeyNum),true,false)
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Determine which templates are to be processed

	if (!ErrStatus)
	begin
		VerboseLog("",false,false)

		if (!CommandLineParser.Parse("t",ClValues)) then
		begin
			Log("Nothing to do! Specify template(s) with the -t option.",false,false)
			ErrStatus=1
		end
		else if (!ClValues.Count) then
		begin
			ErrorLog("No template names were found after the -t option!")
			ErrStatus=1
		end
		else
		begin
			if (((String)ClValues[0])=="*") then
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Processing all templates (-t *)",false,false)
						
				if (!%WinDir(Env.TemplateDir+"*.tpl",Templates,WinDirCase.NoChange))
				begin
					ErrorLog("No templates to process in "+Env.TemplateDir)
					Log("       Set template directory with CODEGEN_TPLDIR or -t option.",false,false)
					ErrStatus=1
				end
			end
			else
			begin
				data ix, int
					
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Processing specific templates specified via -t option",false,false)
					
				;;Create a new templates collection
				Templates = new ArrayList()
					
				;;Check that all specified template files exist
				for ix from 0 thru ClValues.Count-1
				begin
					data AlreadyThere, boolean, false
						
					;;Add ".tpl" if necessary
					if (!%instr(1,(String)ClValues[ix],".tpl"))
						ClValues[ix] = (String)ClValues[ix] + ".tpl"
						
					;;Does this template spec contain a wildward?
					if (%instr(1,(String)ClValues[ix],"*")) then
					begin
						data TmpTemplates, @ArrayList
						TmpTemplates = new ArrayList()
						if (%WinDir(Env.TemplateDir+(String)ClValues[ix],TmpTemplates,WinDirCase.NoChange)) then
						begin
							;;Add these templates to the list to process, if not
							;;already there
							data tmpTemplate, String
							foreach tmpTemplate in TmpTemplates
							begin
								;;Add the template to the collection
								AlUtil.AddIfMissing(Templates,tmpTemplate)
							end
						end
						else
							Log("WARNING: No templates match " + (String)ClValues[ix],false,true)
					end
					else
					begin
						;;Make sure the template can be opened
						if (FileTools.FileExists(Env.TemplateDir+(String)ClValues[ix])) then
						begin
							;;Add the template to the collection
							AlUtil.AddIfMissing(Templates,(String)ClValues[ix])
						end
						else
						begin
							ErrorLog("Template " + (String)ClValues[ix] + " not found!")
							ErrStatus=1
							exitloop
						end
					end
				end
			end
		end
			
		if (!ErrStatus)
		begin
			data ix, int
			;;Report templates to process
			if (Env.Verbose)
			begin
				data tmpTemplate, String
				Log("Template(s):",false,false)
				foreach tmpTemplate in Templates
					Log(" - " + tmpTemplate,false,false)
			end
			;;Remove .tpl file extensions
			for ix from 0 thru Templates.Count-1
			begin
				.ifdef OS_VMS
				Templates[ix] = (String)(((a)((String)Templates[ix]))-".TPL")   ;;Temp fix for VMS, needs more work!!!
				Templates[ix] = (String)(((a)((String)Templates[ix]))-".tpl")   ;;Temp fix for VMS, needs more work!!!
				.else
				Templates[ix] = (String)(((a)((String)Templates[ix]))-".tpl")
				.endc
			end
		end
	end

	;;-------------------------------------------------------------------------
	;;Are we being asked to process a user defined token file?
		
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("u",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No user defined token file was found after the -u option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("Only one user defined token file can be specified after the -u option!")
				ErrStatus=1
			end
			else if (!FileTools.FileExists((String)ClValues[0])) then
			begin
				ErrorLog("The user token file specified after the -u option was not found!")
				ErrStatus=1
			end
			else
			begin
				data tmpch, int
				data tokenFile, String, (String)ClValues[0]
					
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Attempting to load user defined tokens from " + tokenFile,false,false)
					
				try
				begin
					.ifdef DBLNET
					UserTokenCollection.LoadTokensFromFile(tokenFile)
					.else
					data UserTokens, @UserTokenCollection
					UserTokens = new UserTokenCollection(tokenFile)
					if (UserTokens.Count)
						Env.UserTokens = UserTokens
					.endc
				end
				catch (ex)
				begin
					ErrorLog("Failed to process user defined token file " + tokenFile + "!")
					ErrStatus=1
				end
				endtry
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Do we have user defined tokens on the command line?
		
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("ut",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No user tokens were found after the -ut option!")
				ErrStatus=1
			end
			else
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Loading user tokens from command line (-ut)",false,false)
				.ifdef DBLNET
				UserTokenCollection.AddTokens(ClValues)
				.else
				if (Env.UserTokens==^null) then
					Env.UserTokens = new UserTokenCollection(ClValues)
				else
					Env.UserTokens.AddTokens(ClValues)
				.endc
			end
		end
	end		
		
	;;-------------------------------------------------------------------------
	;;Do we have a repository file definition specified?
		
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("file",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No file definition name was found after the -file option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("Only one file definition name can be specified after the -file option!")
				ErrStatus=1
			end
			else
			begin
				data fileName, String, ((String)ClValues[0]).ToUpper()

				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Repository file " + fileName + " was specified via the -file option",false,false)					
						
				;;Get the file details from the repository
				try
				begin
					FileDef = new RpsFile(fileName)
				end
				catch (e, @RpsFileException)
				begin
					ErrorLog("Failed to load repository file definition " + fileName + "!")
					ErrStatus = 1
				end
				endtry
					
				if (!ErrStatus)
				begin
					;;Make sure the file has at least one structure defined,
					;;and if so set as the structure(s) to process
					if (!FileDef.StructureCount) then
					begin
						ErrorLog("Repository file " + fileName + " does not have any structures assigned!")
						ErrStatus = 1
					end
					else
					begin
						Structures = FileDef.Structures
						Env.RpsInUse = true
							
						;;Default all structures to use the file being processed
						begin
							data ix, int
							FileIndex = new int[Structures.Count]
							for ix from 0 thru Structures.Count-1
							begin
								data iy, int
								FileIndex[ix+1] = 0
								for iy from 0 thru Structures[ix].Files.Count-1
								begin
									if (Structures[ix].Files[iy].Name==FileDef.Name)
									begin
										FileIndex[ix+1] = iy
										exitloop
									end
								end
							end
						end
					end
				end
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Do we have a UI Toolkit window script specified?
		
	if (!ErrStatus)
	begin
		WscFile = ""
		if (CommandLineParser.Parse("w",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No window script file name was found after the -w option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("Only one window script file name can be specified after the -w option!")
				ErrStatus=1
			end
			else if (FileDef!=^null) then
			begin
				ErrorLog("Options -file and -w  can not be used together!")
				ErrStatus=1
			end
			else
			begin
				WscFile = (String)ClValues[0]
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Window script file " + WscFile + " was specified via the -w option",false,false)					
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Are we being asked to ignore field attributes in UI Toolkit window scripts
		
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("wn"))
		begin
			Env.NoWscAttributes = true
			if (Env.DeveloperDebug)
				DebugLog("DEVDBG: Window script field attributes will be ignored because of the -wn option",false,false)
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Do we have a BusinessCraft ProForma file specified?
		
	if (!ErrStatus)
	begin
		ProFormaFile = ""
		if (CommandLineParser.Parse("proforma",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No ProForma file name was found after the -proforma option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("You can only specify one ProForma file name after the -proforma option!")
				ErrStatus=1
			end
			else if (FileDef!=^null) then
			begin
				ErrorLog("Can't use -file and -proforma options together!")
				ErrStatus=1
			end
			else if (WscFile.Length) then
			begin
				ErrorLog("Can't use -w and -proforma options together!")
				ErrStatus=1
			end
			else
			begin
				ProFormaFile = (String)ClValues[0]
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: ProForma file was specified via -proforma",false,false)					
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Do we have a custom assembly containing a BusinessCreft ProForma processor?
		
	if (!ErrStatus&&ProFormaFile.Length)
	begin
		data customFileSpec, a256
		data tmpLen, i4
		data libraries, @ArrayList
		data usingExtDir, Boolean, false
			
		if (Env.DeveloperDebug)
			DebugLog("DEVDBG: Attempting to load ProForma extension",false,false)					

		;;Do we have a CODEGEN_EXTDIR environment variable?
		xcall getlog("CODEGEN_EXTDIR",customFileSpec,tmpLen)
		if (tmpLen) then
			usingExtDir = true
		else
		begin
			;;No CODEGEN_EXTDIR so we'll look in CODEGEN_EXE
			xcall getlog("CODEGEN_EXE",customFileSpec,tmpLen)
		end
			
		;;Setup a file spec to locate custom token processor extensions
.ifdef DBLNET
		if (customFileSpec(%trim(customFileSpec):1)!="\")
			customFileSpec = %atrim(customFileSpec) + "\"
		customFileSpec = %atrim(customFileSpec) + "CodeGenProForma.dll"
.else
.ifdef D_GUI
		if (customFileSpec(%trim(customFileSpec):1)!="\")
			customFileSpec = %atrim(customFileSpec) + "\"
		customFileSpec = %atrim(customFileSpec) + "CodeGenProForma.elb"
.endc
.ifdef OS_UNIX
		if (customFileSpec(%trim(customFileSpec):1)!="/")
			customFileSpec = %atrim(customFileSpec) + "/"
		customFileSpec = %atrim(customFileSpec) + "CodeGenProForma.elb"
.endc
.ifdef OS_VMS
		customFileSpec = %atrim(customFileSpec) + "CodeGenProForma.exe"
.endc
.endc
			
		;;Search for and open custom token processor extensions
		if (!WinDir(customFileSpec,libraries,WinDirCase.NoChange)) then
		begin
			ErrorLog("ProForma processor "+atrim(customFileSpec)+" not found!")
			ErrStatus = 1
		end
		else
		begin
			data file, String, (String)libraries[0]
			data libSpec, String, "CODEGEN_EXE:"+file
			if (usingExtDir)
				libSpec = "CODEGEN_EXTDIR:"+file
			try
			begin
				DebugLog("Loading ProForma Extensions " + libSpec,true,false)
				xcall openelb(libSpec)
			end
			catch (e, @Exception)
			begin
				ErrorLog("Failed to load ProForma extensions")
				ErrStatus = 1
			end
			endtry
		end			
	end
		
	;;-------------------------------------------------------------------------
	;;Are we provided with a UI Toolkit window script to search for selection
	;;windows in?
		
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("ws",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No window script file name was found after the -ws option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("Only one window script file name can be specified after the -ws option!")
				ErrStatus=1
			end
			else if (!FileTools.FileExists((String)ClValues[0])) then
			begin
				ErrorLog("Failed to open selection window script " + (String)ClValues[0] + "!")
				ErrStatus=1
			end
			else
			begin
				;;Store the selection windows script file for later
				if (!ErrStatus)
				begin
					Env.SelectionWindowScript = (String)ClValues[0]
					DebugLog("Selection window processing enabled from file " + Env.SelectionWindowScript,false,false)
				end
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Do we have Repository structures specified?
		
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("s",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No structure names were specified after the -s option!")
				ErrStatus=1
			end
			else if (FileDef!=^null) then
			begin
				ErrorLog("Can't use -file and -s options together!")
				ErrStatus=1
			end
			else if (WscFile.Length) then
			begin
				ErrorLog("Can't use -w and -s options together!")
				ErrStatus=1
			end
			else if (ProFormaFile.Length) then
			begin
				ErrorLog("Can't use -proforma and -s options together!")
				ErrStatus=1
			end
			else
			begin
				Env.RpsInUse = true
					
				;;All or specific structures?
				if (((String)ClValues[0])=="*") then
				begin
					if (Env.DeveloperDebug)
						DebugLog("DEVDBG: Loading all structures (-s *)",false,false)
						
					;;Process all structures
					try
					begin
						Structures = new RpsStructureCollection(RpsLoadMode.Load)
						if (Structures.Count) then
							Env.AllStructures = true
						else
						begin
							ErrorLog("Repository contains no structures!")
							ErrStatus=1
						end
					end
					catch (ex, @RpsException)
					begin
						ErrorLog(ex.Message)
						ErrStatus=1
					end
					endtry
				end
				else
				begin
					;;Process specified structures
					data ix, int
						
					if (Env.DeveloperDebug)
						DebugLog("DEVDBG: Loading specific structures specified via -s option ",false,false)
							
					Structures = new RpsStructureCollection(RpsLoadMode.NoLoad)
						
					for ix from 0 thru ClValues.Count-1
					begin
						data newStructure, @RpsStructure
						data errorText, String

						ClValues[ix] = ((String)ClValues[ix]).ToUpper()
							
						if (Env.DeveloperDebug)
							DebugLog("DEVDBG: Loading structure " + (String)ClValues[ix],false,false)
							
						;;Load the structure from the repository
						try
						begin
							newStructure = new RpsStructure((String)ClValues[ix])
						end
						catch (ex)
						begin
							ErrorLog(ex.Message)
							if (Env.DeveloperDebug)
								DebugLog("DEVDBG: Error occured in CodeGen.RepositoryAPI.RpsStructure.RpsStructure('" + (String)ClValues[ix] + "')",false,false)
							ErrStatus = 1
						end
						endtry
							
						if (!ErrStatus)
						begin
							if (Env.SelectionWindowScript)
							begin
								if (!ProcessSelectionWindows(newStructure,errorText))
								begin
									ErrorLog("Failed to resolve selection windows for structure " + newStructure.Name)
									Log("       " + errorText,false,false)
									ErrStatus = 1
									exitloop
								end
							end
						end
							
						if (!ErrStatus)
							Structures.Add(newStructure)
					end
				end
					
				;;Default all structures to use the first file assigned
				if (!ErrStatus)
				begin
					data ix, int
					FileIndex = new int[Structures.Count]
					for ix from 1 thru Structures.Count
						FileIndex[ix] = 0
				end
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Are we being asked to process a subset of the fields in a structure?
		
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("subset",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No subset name was found after the -subset option!")
				ErrStatus=1
			end
			else if (ClValues.Count>1) then
			begin
				ErrorLog("Only one subset name can be specified after the -subset option!")
				ErrStatus=1
			end
			else if (!Env.RpsInUse) then
			begin
				ErrorLog("The -subset option can not be used without a repository structure!")
				ErrStatus=1
			end
			else if (Structures.Count>1) then
			begin
				ErrorLog("The -subset can only be used when processing a single structure!")
				ErrStatus=1
			end
			else
			begin
				Env.SubSetName = (String)ClValues[0]
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Subset processing was enabled for subset " + Env.SubSetName,false,false)					
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Are we being asked to create a subset from a list of field names?
	
	if (!ErrStatus)
	begin
		if (CommandLineParser.Parse("fields",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No field names were found after the -fields option!")
				ErrStatus=1
			end
			else if (!Env.RpsInUse) then
			begin
				ErrorLog("The -fields option can not be used without a repository structure!")
				ErrStatus=1
			end
			else if (Structures.Count>1) then
			begin
				ErrorLog("The -fields option can only be used when processing a single structure!")
				ErrStatus=1
			end
			else if (Env.SubSetName.Length>0) then
			begin
				ErrorLog("The -fields option can not be used with the -subset option!")
				ErrStatus=1
			end
			else
			begin
				data fieldName, String
				foreach fieldName in ClValues
					Env.SubSetFields.Add(fieldName.ToUpper())
				if (Env.DeveloperDebug)
				begin
					DebugLog("DEVDBG: Subset processing was enabled via command-line supplied fields",false,false)
					foreach fieldName in ClValues
						DebugLog("DEVDBG:  - Keeping field "+fieldName.ToUpper(),false,false)
				end
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;If we have a window script file or ProForma file then process it
		
	if (!ErrStatus)
	begin
			
		;;Create a default (empty) button collection
		Env.Buttons = new WscButtonCollection()
			
		;;Now parse the script file
		if (WscFile.Length) then
		begin
			data errTxt, string

			if (Env.DeveloperDebug)
				DebugLog("DEVDBG: Parsing window script " + WscFile,false,false)					
					
			ErrStatus = ParseWindowScript(WscFile,Structures,errTxt)
		end
		else if (ProFormaFile.Length)
		begin
			data errTxt, string
			data address, D_ADDR
				
			if (Env.DeveloperDebug)
				DebugLog("DEVDBG: Parsing ProForma file " + ProFormaFile,false,false)					
				
			if (address = %xaddr("ParseProForma",,1))
			begin
				data pfStructure, @RpsStructure

				Env.ProFormaStructures = new RpsStructureCollection(RpsLoadMode.NoLoad)

				try
				begin
					DebugLog("Executing ParseProForma()",false,false)

					if (ErrStatus = %xsubr(address,(a)ProFormaFile))
						exit

					;;Did we get any structures loaded?
					if (!Env.ProFormaStructures.Count)
					begin
						ErrorLog("ParseProForma() did not load any structures!")
						ErrStatus = 1
					end
				end
				catch (e, @Exception)
				begin
					ErrorLog("Failed to execute ParseProForma()")
					Log("       " + e.Message,false,false)
					if (e.InnerException!=^null)
						Log("       " + e.InnerException.Message,false,false)
					ErrStatus = 1
				end
				endtry

				;;Load the structures from ParseProForma()
				if (!ErrStatus)
				begin
					if (Structures == ^null)
						Structures = new RpsStructureCollection(RpsLoadMode.NoLoad)
						
					foreach pfStructure in Env.ProFormaStructures.GetEnumerator()
						Structures.Add(pfStructure)

					Env.RpsInUse = true
				end
			end
		end
			
		if (ErrStatus)
			exit
			
		if (Structures!=^null)
		begin
			data ix, int
			FileIndex = new int[Structures.Count]
			for ix from 1 thru Structures.Count
				FileIndex[ix] = 0
		end
			
		;;If we got buttons from the script file, but we're being told not to do
		;;button processing (-bn), then delete the buttons
		if (CommandLineParser.Parse("bn")&&Env.Buttons.Count)
		begin
			DebugLog("Removing script file buttons because of -bn",false,false)
			Env.Buttons.Clear()
		end
			
		;;If after parsing the script file we don't have any buttons, or we are being
		;;told to always use default buttons (-ba), and we're not being told to not
		;;load default buttons (-bd) and were not being told to not use any buttons
		;;(-bn) then add the default buttons that are defined in
		;;CODEGEN_EXE:DefaultButtons.xml
		if (((!Env.Buttons.Count)||(CommandLineParser.Parse("ba")))&&(!CommandLineParser.Parse("bd"))&&(!CommandLineParser.Parse("bn")))
		begin
			if (!Env.Buttons.Count) then
				DebugLog("Loading default buttons because no script file buttons were found",true,false)
			else if (CommandLineParser.Parse("ba"))
				DebugLog("Loading default buttons because of command line option -ba",true,false)
			Env.Buttons.LoadDefaultButtons()
		end
			
	end
		
	;;-------------------------------------------------------------------------
	;;Report if we're doing Repository processing
		
	if (!ErrStatus && Env.Verbose)
	begin
		if (Env.RpsInUse) then
		begin
			data str, @RpsStructure
			Log("Structure(s):",true,false)
				
			foreach str in Structures.GetEnumerator()
				Log(" - " + str.Name,false,false)
		end
		else
			Log("No Repository structure processing",false,false)
	end
		
	;;-------------------------------------------------------------------------
	;;Do we have structure aliases specified
		
	if (!ErrStatus&&Structures!=^null)
	begin			
		;;First, default all alias names to the same as the structure name
		data tmpStr, @RpsStructure
		foreach tmpStr in Structures.GetEnumerator()
			tmpStr.Alias = tmpStr.Name
			
		;;Now apply specific aliases from the command line
		if (CommandLineParser.Parse("a",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No aliases specified after -a option!")
				ErrStatus=1
			end
			else if (ClValues.Count>Structures.Count) then
			begin
				ErrorLog("More aliases than repository structures!")
				ErrStatus=1
			end
			else if (WscFile.Length) then
			begin
				ErrorLog("Can't use -w and -a options together!")
				ErrStatus=1
			end
			else
			begin
				data AliasIndex, int
				VerboseLog("Applying structure aliases",true,false)
				for AliasIndex from 0 thru ClValues.Count - 1
				begin
					Structures[AliasIndex].Alias = ((String)ClValues[AliasIndex]).ToUpper()
					VerboseLog(" - Structure " + Structures[AliasIndex].Name + " aliased as " + Structures[AliasIndex].Alias,false,false)
				end
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Do we have alternate repository file overrides specified
		
	if (!ErrStatus&&Structures!=^null)
	begin
		if (CommandLineParser.Parse("fo",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No repository file override names were found after the -fo option!")
				ErrStatus=1
			end
			else if (ClValues.Count>Structures.Count) then
			begin
				ErrorLog("You can't specify more repository file override names than structures!")
				ErrStatus=1
			end
			else if (WscFile.Length) then
			begin
				ErrorLog("File overrides can't be used when processing a window script file!")
				ErrStatus=1
			end
			else
			begin
				;;Check that the alternate file names are valid for the structures
				data clFileIndex, int
				VerboseLog("File overrides have been requested:",true,false)					
				for clFileIndex from 0 thru ClValues.Count-1
				begin
					data clFileName, String, ((String)ClValues[clFileIndex]).ToUpper()
					data matchingStructure, @RpsStructure
					data strFileIndex, int
					data foundFile, Boolean, false
						
					matchingStructure = Structures[clFileIndex]
						
					for strFileIndex from 0 thru matchingStructure.Files.Count-1
					begin
						if (matchingStructure.Files[strFileIndex].Name.eqs.clFileName)
						begin
							;;Found it - this is the one we need later
							FileIndex[clFileIndex] = strFileIndex
							foundFile = true
							VerboseLog(" - Using file " + clFileName + " with structure " + matchingStructure.Name,false,false)
							exitloop
						end
					end
					if (!foundFile)
					begin
						ErrorLog("Structure " + matchingStructure.Name + " is not assigned to file " + clFileName + "!")
						ErrStatus=1
						exitloop
					end
				end
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Do we have any custom token or expression processors?
		
	if (!ErrStatus)
	begin
		.ifdef DBLNET
		LoadSymphonyExt()
		.endc
		LoadExtensions()
		ReportExtensions()
	end
		
	;;-------------------------------------------------------------------------
	;;See if we have any special field processing filters specified
	if (!ErrStatus)
	begin
		;;Default to enable "excluded by language" filter
		Env.ExcludeLanguage = true

		if (CommandLineParser.Parse("f",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No field processing filters were found after the -f option!")
				ErrStatus=1
			end
			else if (ClValues.Count > 5) then
			begin
				ErrorLog("Too many field processing filters were found after the -f option!")
				ErrStatus=1
			end
			else if (Env.GenFromWsc) then
			begin
				ErrorLog("Field processing filters can't be used when processing a window script file!")
				ErrStatus=1
			end
			else
			begin
				data ix, int
				VerboseLog("Custom field filters are in use",true,false)
				for ix from 0 thru ClValues.Count-1
				begin
					using ((String)ClValues[ix]).ToLower() select
					("o"),  ;;Include overlay fields
					begin
						Env.IncludeOverlays = true
						VerboseLog(" - Overlays will be included",false,false)
					end
					("l"),  ;;Ignore excluded by language flag
					begin
						Env.ExcludeLanguage = false
						VerboseLog(" - 'Excluded by Language' will be ignored",false,false)
					end
					("t"),  ;;Honor excluded by toolkit flag
					begin
						Env.ExcludeToolkit = true
						VerboseLog(" - 'Excluded by Toolkit' will be honored",false,false)
					end
					("r"),  ;;Honor excluded by report writer flag
					begin
						Env.ExcludeReport = true
						VerboseLog(" - 'Excluded by ReportWriter' will be honored",false,false)
					end
					("w"),  ;;Honor excluded by web flag
					begin
						Env.ExcludeWeb = true
						VerboseLog(" - 'Excluded by Web' will be honored",false,false)
					end
					(),     ;;Invalid option
					begin
						ErrorLog("An invalid field filter -f " + (String)ClValues[ix] + " was encountered!")
						ErrStatus=1
						exitloop
					end
					endusing
				end
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;See if we have any special group processing filters specified

	if (!ErrStatus)
	begin
		;;Default to using both types of group field prefixes
		Env.GroupPrefix = true
		Env.GroupMemberPrefix = true
			
		if (CommandLineParser.Parse("g",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				ErrorLog("No group processing options were found after the -g option!")
				ErrStatus=1
			end
			else if (ClValues.Count > 3) then
			begin
				ErrorLog("Too many group processing options were found after the -g option!")
				ErrStatus=1
			end
			else if (Env.GenFromWsc) then
			begin
				ErrorLog("Group processing options can't be used when processing a window script file!")
				ErrStatus=1
			end
			else
			begin
				data ix, int
				VerboseLog("Custom group processing rules are in use",true,false)
				for ix from 0 thru ClValues.Count-1
				begin
					using ((String)ClValues[ix]).ToLower() select
					("f"),  ;;Do not prefix group fields with group name
					begin
						Env.GroupPrefix = false
						VerboseLog(" - Group members will not benot prefixed with the group name",false,false)
					end
					("i"),
					begin
						Env.DontExpandImplicitGroups = true
						VerboseLog(" - Implicit groups will not be expanded to individual fields",false,false)
					end
					("r"),  ;;Do not use repository group field prefix
					begin
						Env.GroupMemberPrefix = false
						VerboseLog(" - Repository group member prefix will not be used",false,false)
					end
					(),     ;;Invalid option
					begin
						ErrorLog("An invalid group processing option -f " + (String)ClValues[ix] + " was encountered!")
						ErrStatus=1
						exitloop
					end
					endusing
				end
			end
		end
	end
		
	;;-------------------------------------------------------------------------
	;;Are we being asked to process multiple structures at the same time (in the same template)
		
	if ((!ErrStatus)&&(Env.RpsInUse)&&(CommandLineParser.Parse("ms")||((FileDef!=^null)&&(Structures.Count>1))))
	begin
		data structureToCheck, @RpsStructure
			
		if (Env.DeveloperDebug)
			DebugLog("DEVDBG: Multiple structure processing requested via -ms",false,false)

		;;Make sure that we have at least two structures
		if (Structures.Count<2)
		begin
			ErrorLog("Option -ms requires you to specify at least two structures after -s")
			ErrStatus = 1
		end
			
		;;Check all of the structures and load them into the Env.CurrentStructures collection
		if (!ErrStatus)
		begin
			foreach structureToCheck in Structures.GetEnumerator()
			begin
				if (!CheckStructure(structureToCheck))
				begin
					ErrStatus = 1
					exitloop
				end
			end
		end
			
		if (!ErrStatus)
		begin
			Env.CurrentStructures = Structures
			Env.FileIndexes = FileIndex
			VerboseLog("Processing " + %string(Structures.Count) + " structures concurrently",true,false)
		end
	end
		
	;;-------------------------------------------------------------------------
	;;We're good to go. Generate souce code
		
	if (!ErrStatus)
	begin
			
		if (Env.DeveloperDebug)
		begin
			DebugLog("------------------------------",true,false)
			DebugLog("DEVDBG: READY TO GENERATE CODE",false,false)
			DebugLog("------------------------------",false,false)
		end

		VerboseLog("",false,false)
			
		Env.OutputFiles = new ArrayList()

		if ((!Env.RpsInUse)||(Env.CurrentStructures!=^null)) then
			call process_templates
		else
		begin
			data StrNum, int
			for StrNum from 0 thru Structures.Count-1
			begin
				;;Check the structure, flatten arrays and groups, etc.
				if (CheckStructure(Structures[StrNum]))
				begin
					Env.CurrentStructure = Structures[StrNum]
					Env.FileIndex = FileIndex[StrNum+1]						
					call process_templates						
					Env.CurrentStructure = ^null
				end
			end
		end

	end
		
	;;-------------------------------------------------------------------------
	;;Cleanup and exit
		
	clear Templates
		
	if (Env.FilesCreated&&Env.FilesFailed) then
	begin
		data msg, String, string(Env.FilesCreated) + " file"
		if (Env.FilesCreated>1)
			msg = msg + "s"
		msg = msg + " created, " + string(Env.FilesFailed) + " failed"
		Log(msg,(Env.Verbose||Env.Debug),false)
	end
	else if (Env.FilesCreated) then
	begin
		data msg, String, string(Env.FilesCreated) + " file"
		if (Env.FilesCreated>1)
			msg = msg + "s"
		msg = msg + " created"
		Log(msg,(Env.Verbose||Env.Debug),false)
	end
	else if (Env.FilesFailed)
	begin
		data msg, String, string(Env.FilesFailed) + " file"
		if (Env.FilesFailed>1)
			msg = msg + "s"
		msg = msg + " failed"
		Log(msg,(Env.Verbose||Env.Debug),false)
	end

	if (Env.ListFiles && (Env.OutputFiles!=^null) && (Env.OutputFiles.Count>0))
	begin
		data fileSpec, String
		foreach fileSpec in Env.OutputFiles
			Log(fileSpec,false,false)
	end
		
	.ifdef D_GUI
	if (Env.Dbr)
	begin
		data TmpBuf, a1
		display(Env.Tt,13,10,"Press a key: ")
		accept(Env.Tt,TmpBuf)
	end
	.endc
		
	.ifdef OS_VMS
	;;Remove the custom mappings file so it doesn't persist to the next command
	if (UndefineMappings)
	begin
		data tmpstatus, i4
		xcall setlog("CODEGEN_DATAMAPPING_FILE",,tmpstatus)
	end
	.endc
		
	close Env.Tt
		
	xreturn
		
	;;-------------------------------------------------------------------------------
	;;Iterate through the template files and generating code
		
process_templates,
		
	;;Process each template
	begin
		data tmpTemplate, String
		foreach tmpTemplate in Templates
		begin
			Env.CurrentTemplate = tmpTemplate
				
			;;If we're processing multiple structures in the same template then make
			;;sure that context is set to the first structure for each template
			if (Env.CurrentStructures!=^null)
			begin
				Env.CurrentStructure = Env.CurrentStructures[0]
				Env.FileIndex = Env.FileIndexes[1]
			end
				
			;;Generate the code
			if (!Generate())
				nop
				
			Env.CurrentTemplate = ""
		end
	end
		
	return
		
endsubroutine
