;;*****************************************************************************
;;
;; Title:       CodeGen.dbl
;;
;; Type:        Program
;;
;; Description: Template based code generator
;;
;; Date:        19th March 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System.Collections.Generic
import System.Collections.ObjectModel
import System.Collections.Specialized
import System.Diagnostics
import CodeGen
import CodeGen.Engine
import CodeGen.RepositoryAPI

.array 0

main CodeGen
	
	.include "CODEGEN_SRC:codegen.def"
	
	record
		ok			,boolean					;;Main error status variables
		ClValues	,@List<String>				;;Command line option values
		taskSet		,@CodeGenTaskSet
		task		,@CodeGenTask
	endrecord
	
proc
	
	ok = true
	flags(7004020,1)
	
	;;-------------------------------------------------------------------------
	;;Are we being asked to wait until a debugger is attached?

	if (CommandLineParser.Parse("attach"))
	begin
		Console.WriteLine()
		Console.Write("Attach your debugger then press a key to continue: ")
		Console.Read()
		Console.WriteLine()
	end
	
	;;-------------------------------------------------------------------------
	;;Are we being asked for usage, documentation or version information?
	
	if (CommandLineParser.Parse("h") || CommandLineParser.Parse("?")) then
	begin
		Usage()
		ok = false
	end
	else if (CommandLineParser.Parse("docs")) then
	begin
		Documentation()
		ok = false
	end
	else if (CommandLineParser.Parse("version")) then
	begin
		Console.WriteLine(String.Format("CodeGen {0} (Synergy {1} built {2})",CODEGEN_VERSION,SYN_VERSION,%datecompiled()))
		ok = false
	end
	else if (CommandLineParser.Parse("checkversion"))
	begin
		data currentVersion, string
		data latestVersion, string
		data message, string
		data newVersionAvailable, boolean, UpdateManager.CheckForNewVersion(currentVersion,latestVersion,message)

		Console.WriteLine("")
		Console.WriteLine("Update check")
		Console.WriteLine("Installed version: {0}",currentVersion)
		Console.WriteLine("Released version : {0}",latestVersion)
		Console.WriteLine(message)

		if (newVersionAvailable)
		begin
			Console.WriteLine("")
			Console.Write("Would you like to go to the download site now (Y/N) ? ")
			data ki, ConsoleKeyInfo, Console.ReadKey(false)
			if (ki.Key.ToString().ToUpper()=="Y")
				Process.Start("http://codegen.codeplex.com/releases")
			Console.WriteLine("")
		end

		ok = false
	end

	;;-------------------------------------------------------------------------
	;;OK, looks like we're going to be generating some code
	
	
	data sw, @StopWatch
	if (CommandLineParser.Parse("time"))
	begin
		sw = new Stopwatch()
		sw.Start()
	end

	if (ok)
	begin
		;;Create a new task set
		taskSet = new CodeGenTaskSet()
		
		;;Create a new task
		task = new CodeGenTask()
		task.Description = "Command-line task"
		
		;;Add the task to the task set
		taskSet.Tasks.Add(task)
		
		lambda messageFromTaskSet(sender,e)
		begin
			if (e.Action==NotifyCollectionChangedAction.Add)
			begin
				data message, String
				foreach message in e.NewItems
					if (message!=^null)
						Console.WriteLine(message)
			end
		end
		
		;;Listen for messages from the taskset as it processes
		taskSet.Messages.CollectionChanged += messageFromTaskSet
	end	

	;;-------------------------------------------------------------------------
	;;Echo command line?

	if (ok)
		taskSet.EchoCommands = CommandLineParser.Parse("e")
	
	;;-------------------------------------------------------------------------
	;;Logging level and debugging information
	
	if (ok)
	begin
		if (CommandLineParser.Parse("v")) then
			taskSet.LoggingLevel = LoggingLevel.Verbose

		else if (CommandLineParser.Parse("d")) then
			taskSet.LoggingLevel = LoggingLevel.Debug

		else if (CommandLineParser.Parse("debug"))
			taskSet.LoggingLevel = LoggingLevel.DeveloperDebug

		if (CommandLineParser.Parse("dt"))
			taskset.LogTokenizerResults = true
	end
	
	;;-------------------------------------------------------------------------
	;;Display file names mode
	
	if (ok)
		taskSet.ListGeneratedFiles = CommandLineParser.Parse("lf")
	
	;;-------------------------------------------------------------------------
	;;Do we have repository files specified on the command line?

	if (ok)
	begin
		if (CommandLineParser.Parse("rps",ClValues))
		begin
			using ClValues.Count select
			(0),
				nop
			(2),
			begin
				task.RepositoryMainFile = ClValues[0]
				task.RepositoryTextFile = ClValues[1]
			end
			(),
			begin
				Console.WriteLine("ERROR: Two file specs must follow the -rps option!")
				ok = false
			end
			endusing
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Do we have a custom data mappings file specified?
	
	if (ok)
	begin
		if (CommandLineParser.Parse("cdm",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No data mappings file was found after the -cdm option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: Only one data mappings can be specified after the -cdm option!")
				ok = false
			end
			else
				taskSet.DataMappingsFile = ClValues[0]
		end
	end
	
	;;-------------------------------------------------------------------------
	;;See if we have a template file location command line option
	
	if (ok)
	begin
		if (CommandLineParser.Parse("i",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No template location was found after the -i option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: Only one template location can be specified after the -i option!")
				ok = false
			end
			else
			begin
				taskSet.TemplateFolder = ClValues[0]
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;See if we have an output location command line option
	
	if (ok)
	begin
		if (CommandLineParser.Parse("o",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No outout location was found after the -o option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: Only one output location can be specified after the -o option!")
				ok = false
			end
			else
			begin
				taskSet.OutputFolder = ClValues[0]
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Replace existing files?
	
	if (ok)
		task.ReplaceFiles = CommandLineParser.Parse("r")
	
	;;-------------------------------------------------------------------------
	;;Multi-write the same outout file?
	
	if (ok)
		task.MultiWriteFiles = CommandLineParser.Parse("mw")
	
	;;-------------------------------------------------------------------------
	;;See if we have a default namespace command line option
	
	if (ok)
	begin
		if (CommandLineParser.Parse("n",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No namespace was found after the -n option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: Only one namespace can be specified after the -n option!")
				ok = false
			end
			else
			begin
				task.Namespace = ClValues[0]
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Are we being asked to use a field prefix
	
	if (ok)
	begin
		if (CommandLineParser.Parse("prefix",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No field prefix value was found after the -prefix option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: Only one field prefix value can be specified after the -prefix option!")
				ok = false
			end
			else
			begin
				task.FieldPrefix = ClValues[0]
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;See if we have a request to override the default pixel width of a character
	
	if (ok)
	begin
		if (CommandLineParser.Parse("cw",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No character width was found after the -cw option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: Only one character width can be specified after the -cw option!")
				ok = false
			end
			else if (!StringTools.IsNumeric(ClValues[0])) then
			begin
				Console.WriteLine("ERROR: The character width after the -cw option must be numeric!")
				ok = false
			end
			else
			begin
				task.CharacterWidth = %integer(ClValues[0])
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;See if we have a request to override the default pixel height of a row
	
	if (ok)
	begin
		if (CommandLineParser.Parse("ch",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No character height was found after the -ch option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: Only one character height can be specified after the -ch option!")
				ok = false
			end
			else if (!StringTools.IsNumeric(ClValues[0])) then
			begin
				Console.WriteLine("ERROR: The character height after the -ch option must be numeric!")
				ok = false
			end
			else
			begin
				task.CharacterHeight = %integer(ClValues[0])
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Are we being asked to override the key that is used with the <PRIMARY_KEY> construct?
	
	if (ok)
	begin
		if (CommandLineParser.Parse("opk",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No key number was found after the -opk option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: Only one key number can be specified after the -opk option!")
				ok = false
			end
			else if (!StringTools.IsNumeric(ClValues[0])) then
			begin
				Console.WriteLine("ERROR: The key number specified after the -opk option must be numeric!")
				ok = false
			end
			else
			begin
				task.PrimaryKeyNumber = %integer(ClValues[0])
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Are we being asked to process template defined output file sub-folders?
	
	if (ok)
		task.AllowTemplateFolder = CommandLineParser.Parse("tf")
	
	;;-------------------------------------------------------------------------
	;;Are we being asked to not append template folder names to namespaces?

	if (ok)
		task.DontAppendFolderToNamespace = CommandLineParser.Parse("nf")

	;;-------------------------------------------------------------------------
	;;Determine which templates are to be processed
	
	if (ok)
	begin
		if (CommandLineParser.Parse("t",ClValues))
		begin
			data tpl, String
			foreach tpl in ClValues
				task.Templates.Add(tpl)
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Are we being asked to process a user defined token file?
	
	if (ok)
	begin
		if (CommandLineParser.Parse("u",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No user defined token file was found after the -u option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: Only one user defined token file can be specified after the -u option!")
				ok = false
			end
			else
			begin
				task.UserTokenFile = ClValues[0]
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Do we have user defined tokens on the command line?
	
	if (ok)
	begin
		if (CommandLineParser.Parse("ut",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No user tokens were found after the -ut option!")
				ok = false
			end
			else
			begin
				data userTokenExpression, String
				foreach userTokenExpression in ClValues
				begin
					data parts, [#]String, userTokenExpression.Split("=")
					if (parts.GetLength(0)==2) then
						task.UserTokens.Add(new UserToken(parts[0].Trim(),parts[1].Trim()))
					else
					begin
						Console.WriteLine("ERROR: Invalid command line user token expression: " + userTokenExpression)
						ok = false
					end
				end
			end
		end
	end		

	;;-------------------------------------------------------------------------
	;;Do we have a repository file definition specified?
	
	if (ok)
	begin
		if (CommandLineParser.Parse("file",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No file definition name was found after the -file option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: Only one file definition name can be specified after the -file option!")
				ok = false
			end
			else
			begin
				task.RepositoryFile = (ClValues[0]).ToUpper()
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Do we have a UI Toolkit window script specified?
	
	if (ok)
	begin
		if (CommandLineParser.Parse("w",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No window script file name was found after the -w option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: Only one window script file name can be specified after the -w option!")
				ok = false
			end
			else
			begin
				task.WindowScript = ClValues[0]
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Are we being asked to ignore field attributes in UI Toolkit window scripts
	
	if (ok)
		task.IgnoreScriptFieldAttributes = CommandLineParser.Parse("wn")
	
	;;-------------------------------------------------------------------------
	;;Do we have a BusinessCraft ProForma file specified?
	
	if (ok)
	begin
		if (CommandLineParser.Parse("proforma",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No ProForma file name was found after the -proforma option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: You can only specify one ProForma file name after the -proforma option!")
				ok = false
			end
			else
			begin
				task.ProformaFile = ClValues[0]
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Are we provided with a UI Toolkit window script to search for selection windows in?
	
	if (ok)
	begin
		if (CommandLineParser.Parse("ws",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No window script file name was found after the -ws option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: Only one window script file name can be specified after the -ws option!")
				ok = false
			end
			else
			begin
				task.SelectionWindowScript = ClValues[0]
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Do we have Repository structures specified?
	
	if (ok)
	begin
		if (CommandLineParser.Parse("s",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No structure names were specified after the -s option!")
				ok = false
			end
			else
			begin
				data strName, String
				foreach strName in ClValues
					task.Structures.Add(strName.ToUpper())
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Are we being asked to process multiple structures at the same time (in the same template)
	
	if (ok)
		task.MultipleStructures = CommandLineParser.Parse("ms")
	
	;;-------------------------------------------------------------------------
	;;Are we being asked to process a subset of the fields in a structure?
	
	if (ok)
	begin
		if (CommandLineParser.Parse("subset",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No subset name was found after the -subset option!")
				ok = false
			end
			else if (ClValues.Count>1) then
			begin
				Console.WriteLine("ERROR: Only one subset name can be specified after the -subset option!")
				ok = false
			end
			else
			begin
				task.Subset = ClValues[0]
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Are we being asked to create a subset from a list of field names?
	
	if (ok)
	begin
		;;Syntax is now -fields structure:field structure:field
		if (CommandLineParser.Parse("fields",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No field names were found after the -fields option!")
				ok = false
			end
			else if (!task.Structures.Count) then
			begin
				Console.WriteLine("ERROR: The -fields option can't be used unless you specify structures with the -s option!")
				ok = false
			end
			else
			begin
				data fieldName, String
				
				foreach fieldName in ClValues
				begin
					if (fieldName.Contains(".")) then
					begin
						if (!task.MultipleStructures) then
						begin
							Console.WriteLine("ERROR: The -fields syntax that you used is only valid when processing multiple structures together!")
							ok = false
							exitloop
						end
						else
						begin
							data values, [#]String, fieldName.Split(".")
							if (values.Length>2 || String.IsNullOrWhiteSpace(values[0]) || string.IsNullOrWhiteSpace(values[1])) then
							begin
								Console.WriteLine("ERROR: Invalid -fields option value!")
								ok = false
								exitloop
							end
							else if (!task.Structures.Contains(values[0].ToUpper())) then
							begin
								Console.WriteLine("ERROR: One of the structures you specified via the -fields option was not specified with the -s option!")
								ok = false
								exitloop
							end
							else
							begin
								task.SubsetFields.Add(Tuple.Create(values[0].ToUpper(),values[1].ToUpper()))
							end
						end
					end
					else
					begin
						;;Add the field, assuming the first (or only) structure
						task.SubsetFields.Add(Tuple.Create(task.Structures[0].ToUpper(),fieldName.ToUpper()))
					end
				end
	
				if (taskSet.LoggingLevel == LoggingLevel.DeveloperDebug)
					Console.WriteLine("DEVDBG: Subset processing was enabled via command-line supplied fields")					
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Do we have any button processing settings?
	
	if (ok)
	begin
		task.AlwaysLoadDefaultButtons = CommandLineParser.Parse("ba")
		task.NeverLoadDefaultButtons = CommandLineParser.Parse("bd")
		task.NeverLoadAnyButtons = CommandLineParser.Parse("bn")

		data buttonOptions, int, 0
		if (task.AlwaysLoadDefaultButtons)
			buttonOptions += 1
		if (task.NeverLoadDefaultButtons)
			buttonOptions += 1
		if (task.NeverLoadAnyButtons)
			buttonOptions += 1
		if (buttonOptions > 1)
		begin
			Console.WriteLine("ERROR: Only one of the -ba, -bd and -bn options can be used at a time.")
			ok = false
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Do we have structure aliases specified
	
	if (ok)
	begin			
		if (CommandLineParser.Parse("a",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No aliases specified after -a option!")
				ok = false
			end
			else
			begin
				data aliasName, String
				foreach aliasName in ClValues
					task.Aliases.Add(aliasName)
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Do we have alternate repository file overrides specified
	
	if (ok)
	begin
		if (CommandLineParser.Parse("fo",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No repository file override names were found after the -fo option!")
				ok = false
			end
			else
			begin
				data fileName, String
				foreach fileName in ClValues
					task.FileOverrides.Add(fileName)
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;See if we have any special field processing filters specified
	
	if (ok)
	begin
		
		if (CommandLineParser.Parse("f",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No field processing filters were found after the -f option!")
				ok = false
			end
			else if (ClValues.Count > 5) then
			begin
				Console.WriteLine("ERROR: Too many field processing filters were found after the -f option!")
				ok = false
			end
			else
			begin
				data ix, int
				for ix from 0 thru ClValues.Count-1
				begin
					using (ClValues[ix]).ToLower() select
					("o"),	task.IncludeOverlayFields = true
					("l"),	task.IgnoreExcludeLanguage = true
					("t"),	task.HonorExcludeToolkit = true
					("r"),	task.HonorExcludeReportWriter = true
					("w"),	task.HonorExcludeWeb = true
					(),
					begin
						Console.WriteLine("ERROR: An invalid field filter -f " + ClValues[ix] + " was encountered!")
						ok = false
						exitloop
					end
					endusing
				end
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;See if we have any special group processing filters specified
	
	if (ok)
	begin
		if (CommandLineParser.Parse("g",ClValues))
		begin
			if (!ClValues.Count) then
			begin
				Console.WriteLine("ERROR: No group processing options were found after the -g option!")
				ok = false
			end
			else if (ClValues.Count > 3) then
			begin
				Console.WriteLine("ERROR: Too many group processing options were found after the -g option!")
				ok = false
			end
			else
			begin
				data ix, int
				for ix from 0 thru ClValues.Count-1
				begin
					using (ClValues[ix]).ToLower() select
					("f"),	task.GroupFieldNoGroupPrefix = true
					("i"),	task.GroupNoExpand = true
					("r"),  task.GroupFieldNoRpsPrefix = true
					(),
					begin
						Console.WriteLine("ERROR: An invalid group processing option -f " + ClValues[ix] + " was encountered!")
						ok = false
						exitloop
					end
					endusing
				end
			end
		end
	end
	
	;;-------------------------------------------------------------------------
	;;Are we being asked to continue processing after errors
	
	if (ok)
		taskSet.ContinueAfterError = CommandLineParser.Parse("c")

	;;-------------------------------------------------------------------------
	;;We're good to go. Generate souce code
	
	if (ok)
	begin
		new CodeGenerator(taskSet).GenerateCode()

		if (sw != ^null)
		begin
			sw.Stop()
			Console.WriteLine(String.Format("Elapsed time {0:00}:{1:00}:{2:00}.{3:00}",sw.Elapsed.Hours,sw.Elapsed.Minutes,sw.Elapsed.Seconds,sw.Elapsed.Milliseconds/10))
		end
	end	

	if (CommandLineParser.Parse("pause"))
	begin
		Console.WriteLine()
		Console.Write("Press a key to exit: ")
		Console.Read()
		Console.WriteLine()
	end
	
	stop
	
endmain
