
import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CustomExtensionsExample
	
	;;To implement a custom expansion token you must provide a class that implements the CodeGenParser.IExpansionToken interface.
	;;The class MUST have a default constructor. By default classes have an implicit default constructor, but if you need to
	;;explicitly define a constructor, make sure you don't define any parameters.
	;;
	;;This token can be used in structure loops, like this:
	;;
	;;		<STRUCTURE_LOOP>
	;;		My custom token produced this output: <CUSTOM_STRUCTURE_LOOP_TOKEN>
	;;		</STRUCTURE_LOOP>
	;;
	
	public class CustomStructureLoopToken implements IExpansionToken
		
		public property TokenName, String
			method get
			proc
				mreturn "CUSTOM_STRUCTURE_LOOP_TOKEN"
			endmethod
		endproperty
		
		public property Description, String
			method get
			proc
				mreturn "An example of a custom structure loop token."
			endmethod
		endproperty
		
		public property Validity, TokenValidity
			method get
			proc
				mreturn TokenValidity.NotInLoop
			endmethod
		endproperty
		
		public property TokenCase, TokenCaseMode
			method get
			proc
				mreturn TokenCaseMode.UppercaseOnly
			endmethod
		endproperty
		
		public method Expand, String
			tkn, @Token
			file, @FileNode 
			loops, @IEnumerable<LoopNode>
			endparams
		proc
			lambda doExpand(strs, str, index)
			begin
				;TODO: Add any code you need here, and return the string that is to be used to replace the token.

				mreturn "This is the output from CUSTOM_STRUCTURE_LOOP_TOKEN"
			end
			mreturn TokenExpander.ExpandStructureLoopToken(tkn, file, loops, doExpand)
			
		endmethod
		
	endclass
	
endnamespace
