
import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CustomExtensionsExample

	;;To implement a custom field loop expression you must build a class that implements the CodeGenParser.IFieldLoopExpression interface.
	;;The class MUST have a default constructor. By default classes have an implicit default constructor, but if you need to
	;;explicitly define a constructor, make sure you don't define any parameters.
	
	;;For example, if you wanted to build an expression to allow you to test for fields with a name of longer than 10 characters,
	;;you could do something like this:

	public class FieldNameLongerThan10 implements IExpressionToken
		
		public property TokenName, String
			method get
			proc
				mreturn "FIELD_NAME_LONGER_THAN_10"
			endmethod
		endproperty
		
		public property Description, String
			method get
			proc
				mreturn "Tests whether the name of a field is longer than ten characters."
			endmethod
		endproperty

		public property Validity, TokenValidity
			method get
			proc
				mreturn TokenValidity.FieldLoop
			endmethod
		endproperty

		public method Evaluate, Boolean
			tkn, @Token
			file, @FileNode 
			loops, @IEnumerable<LoopNode>
			endparams
		proc
			lambda process(str, field, index) field.Name.Length > 10
			mreturn ExpressionEvaluator.EvaluateFieldLoopExpression(tkn, file, loops, process)
		endmethod
		
	endclass

	;;You could then use this expression in field loops, like this:
	;;
	;;		<FIELD_LOOP>
	;;		Field <FIELD_NAME> <IF FIELD_NAME_LONGER_THAN_10>has a name longer than 10 characters!</IF>
	;;		</FIELD_LOOP>
	;;

endnamespace
