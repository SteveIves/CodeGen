;;*****************************************************************************
;;
;; Title:       RpsStructureCollection.dbl
;;
;; Type:        Class
;;
;; Description: Represents a collection of all Repository structures
;;
;; Date:        19th October 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import System.Collections.Generic

namespace CodeGen.RepositoryAPI

    public class RpsStructureCollection extends List<RpsStructure>

        ;; Constructor
        public method RpsStructureCollection
            LoadMode, RpsLoadMode
            endparams
        proc
            if (LoadMode==RpsLoadMode.Load)
            begin
                Repository.CheckIsOpen()
                LoadStructures()
            end
        endmethod

        ;; Constructor
        public method RpsStructureCollection
            required in fileDefName, String
            endparams
        proc
            LoadStructures(fileDefName)
        endmethod

        ;; Load structures
        private method LoadStructures, void
            endparams
            record local_data
                MemHandle       ,int
                StructureCount  ,int
                ix              ,int
            endrecord
        proc
            init local_data
            try
            begin
                ;;Get the number of structures in the repository
                dd_name(Repository.RpsControl,DDN_COUNT,DDN_STRUCT,StructureCount)
                if (Repository.RpsControl.error)
                    throw new RpsStructureException("Failed to get repository structure count")
                ;;Do we have any structures to load?
                if (StructureCount)
                begin
                    ;;Allocate structure name memory and get structure names
                    MemHandle = %mem_proc(DM_ALLOC,^size(strIdentifier)*StructureCount)
                    dd_name(Repository.RpsControl,DDN_LIST,DDN_STRUCT,StructureCount,^m(strIdentifier,MemHandle))
                    if (Repository.RpsControl.error)
                        throw new RpsStructureException("Failed to get repository structure names")
                    for ix from 1 thru StructureCount
                        this.Add(new RpsStructure(^m(strIdentifier[ix],MemHandle)))
                end
            end
            catch (ex, @Exception)
            begin
                throw new RpsStructureException("Failed to load repository structure. " + ex.Message)
            end
            finally
            begin
                ;;Release structure names memory
                if (StructureCount)
                    MemHandle = %mem_proc(DM_FREE,MemHandle)
            end
            endtry
        endmethod

        ;; Load structures for a file definition
        private method LoadStructures, void
            required in fileDefName, String
            endparams
            record local_data
                file_info       ,fl_info
                MemHandle       ,int
                ix              ,int
            endrecord
        proc
            init local_data
            try
            begin
                ;;Set the current file and get file information
                dd_file(Repository.RpsControl,DDL_INFO,fileDefName,^a(file_info))
                if (Repository.RpsControl.error)
                    throw new RpsFileException("Failed to get repository file information for file " + atrim(fileDefName))
                ;;Do we have any structures to load?
                if (file_info.fli_nmstructs)
                begin
                    ;;Allocate structure name memory and get structure names
                    MemHandle = %mem_proc(DM_ALLOC,^size(strIdentifier)*file_info.fli_nmstructs)
                    dd_file(Repository.RpsControl,DDL_STRS,file_info.fli_nmstructs,^m(strIdentifier,MemHandle))
                    if (Repository.RpsControl.error)
                        throw new RpsFileException("Failed to get repository structure names for file " + atrim(fileDefName))
                    for ix from 1 thru file_info.fli_nmstructs
                        this.Add(new RpsStructure(^m(strIdentifier[ix],MemHandle)))
                end
            end
            catch (ex, @Exception)
            begin
                throw new RpsFileException("Failed to load repository file " + atrim(fileDefName) + ". " + ex.Message)
            end
            finally
            begin
                ;;Release structure names memory
                if (file_info.fli_nmstructs)
                    MemHandle = %mem_proc(DM_FREE,MemHandle)
            end
            endtry
        endmethod

    endclass

endnamespace

