;;*****************************************************************************
;;
;; Title:       SymphonyConverterResources.dbl
;;
;; Type:        CodeGen Extension Class
;;
;; Description: Custom generic token <SYMPHONY_CONVERTER_RESOURCES>
;;
;; Author:      Richard C. Morris, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace Symphony.CodeGen.Extensions
	
	public class SymphonyConverterResources implements IExpansionToken
		
		public property TokenName, String
			method get
			proc
				mreturn "SYMPHONY_CONVERTER_RESOURCES"
			endmethod
		endproperty
		
		public property Description, String
			method get
			proc
				mreturn "SYMPHONY_CONVERTER_RESOURCES"
			endmethod
		endproperty
		
		public property Validity, TokenValidity
			method get
			proc
				mreturn TokenValidity.Anywhere
			endmethod
		endproperty
		
		public property TokenCase, TokenCaseMode
			method get
			proc
				mreturn TokenCaseMode.UppercaseOnly
			endmethod
		endproperty
		
		public method Expand, String
			tkn, @Token
			file, @FileNode 
			loops, @IEnumerable<LoopNode>
			endparams
		proc
			mreturn '<SymphonyConverters:SynergyAlphaConverter x:Key="alphaConverter" />' + %char(13) + %char(10)
			&	+ '<SymphonyConverters:SynergyAlphaDateTimeConverter x:Key="alphaDateConverter"/>' + %char(13) + %char(10)
			&	+ '<SymphonyConverters:SynergyAlphaYNConverter x:Key="alphaYnConverter"/>' + %char(13) + %char(10)
			&	+ '<SymphonyConverters:SynergyDecimalConverter x:Key="decimalConverter"/>' + %char(13) + %char(10)
			&	+ '<SymphonyConverters:SynergyDecimalDateConverter x:Key="decimalDateConverter"/>' + %char(13) + %char(10)
			&	+ '<SymphonyConverters:SynergyDecimalTFConverter x:Key="decimalTFConverter"/>' + %char(13) + %char(10)
			&	+ '<SymphonyConverters:SynergyImpliedDecimalConverter x:Key="impliedDecimalConverter"/>' + %char(13) + %char(10)
			&	+ '<SymphonyConverters:SynergyIntConverter x:Key="intConverter"/>' + %char(13) + %char(10)
			&	+ '<SymphonyConverters:SynergyIntTFConverter x:Key="intTFConverter"/>' + %char(13) + %char(10)
			&	+ '<SymphonyConverters:AlphaEnumToBooleanConverter x:Key="alphaEnumConverter"/>' + %char(13) + %char(10)
			&	+ '<SymphonyConverters:DecimalEnumToBooleanConverter x:Key="decimalEnumConverter"/>' + %char(13) + %char(10)
			&	+ '<SymphonyConverters:IntEnumToBooleanConverter x:Key="intEnumConverter"/>'
		endmethod
		
	endclass
	
endnamespace
