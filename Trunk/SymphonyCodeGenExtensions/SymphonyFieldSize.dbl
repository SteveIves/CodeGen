
import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI
;import Symphony.Core

namespace Symphony.CodeGen.Extensions
	
	public class SymphonyFieldSize implements IExpansionToken
		
		public property TokenName, String
			method get
			proc
				mreturn "SYMPHONY_FIELD_SIZE"
			endmethod
		endproperty
		
		public property Description, String
			method get
			proc
				mreturn "SYMPHONY_FIELD_SIZE"
			endmethod
		endproperty
		
		public property Validity, TokenValidity
			method get
			proc
				mreturn TokenValidity.FieldLoop
			endmethod
		endproperty
		
		public property TokenCase, TokenCaseMode
			method get
			proc
				mreturn TokenCaseMode.UppercaseOnly
			endmethod
		endproperty
		
		public method Expand, String
			tkn, @Token
			file, @FileNode 
			loops, @IEnumerable<LoopNode>
			endparams
		proc
			lambda process(str, field)
			begin
				;DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace)")
				if (field.Precision) then
					mreturn %string(field.Size + 2)
				else
					mreturn %string(field.Size)
			end
			mreturn TokenExpander.ExpandFieldLoopToken(tkn, file, loops, process)
		endmethod
		
	endclass
	
endnamespace
