
import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI
import Symphony.Core

namespace Symphony.CodeGen.Extensions
	
	public class SymphonyDecimalPlaces implements IExpansionToken
		
		private const rpsString, a*, "<SYMPHONY_DECIMAL_PLACES="

		public property TokenName, String
			method get
			proc
				mreturn "SYMPHONY_DECIMAL_PLACES"
			endmethod
		endproperty
		
		public property Description, String
			method get
			proc
				mreturn "SYMPHONY_DECIMAL_PLACES"
			endmethod
		endproperty
		
		public property Validity, TokenValidity
			method get
			proc
				mreturn TokenValidity.FieldLoop
			endmethod
		endproperty
		
		public property TokenCase, TokenCaseMode
			method get
			proc
				mreturn TokenCaseMode.UppercaseOnly
			endmethod
		endproperty
		
		public method Expand, String
			tkn, @Token
			file, @FileNode 
			loops, @IEnumerable<LoopNode>
			endparams
		proc
			lambda process(str, field)
			begin
				data startPos	,i4
				data endPos		,i4
				data height		,i4
				data width		,i4
				DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace)" + %string(field.Size))
				startPos = %instr(1, field.LongDescription, rpsString)				
				if (startPos) then
				begin
					startPos += %trim(rpsString)
					endPos = %instr(startPos, field.LongDescription,">")
					data numDec	,d2
					numDec = field.LongDescription(startPos , endpos - 1)
					DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace ) :" + %string(numDec))
					mreturn %string(numDec)
				end
				else
				begin
					DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace) default of " + Convert.ToString(field.Precision))
					mreturn Convert.ToString(field.Precision)
				end
			end
			mreturn TokenExpander.ExpandFieldLoopToken(tkn, file, loops, process)
		endmethod
		
	endclass
	
endnamespace
