
import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI
import Symphony.Core

namespace Symphony.CodeGen.Extensions
	
	public class SymphonyContentListFromWindow implements IExpansionToken
		
		public property TokenName, String
			method get
			proc
				mreturn "SYMPHONY_CONTENTLISTFROMWINDOW"
			endmethod
		endproperty
		
		public property Description, String
			method get
			proc
				mreturn "SYMPHONY_CONTENTLISTFROMWINDOW"
			endmethod
		endproperty
		
		public property Validity, TokenValidity
			method get
			proc
				mreturn TokenValidity.FieldLoop
			endmethod
		endproperty
		
		public property TokenCase, TokenCaseMode
			method get
			proc
				mreturn TokenCaseMode.UppercaseOnly
			endmethod
		endproperty
		
		public method Expand, String
			tkn, @Token
			file, @FileNode 
			loops, @IEnumerable<LoopNode>
			endparams
		proc
			lambda process(str, field)
			begin
				DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace) ")
				data result, String, ""
				if (field.SelectionWindowName != "   " && !%instr(1, SymphonyInternals.CheckDuplicateString, "|" + field.SelectionWindowName + "|"))
				begin
					result = '<ObjectDataProvider x:Key="'+field.SelectionWindowName.ToUpper()+'items" ObjectType="{x:Type content:'+field.SelectionWindowName.ToUpper()+'_Collection}"></ObjectDataProvider>'
					SymphonyInternals.CheckDuplicateString = SymphonyInternals.CheckDuplicateString + "|" + field.SelectionWindowName + "|"
				end
				DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: Replacement " + result)
				DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">  " + SymphonyInternals.CheckDuplicateString)
				mreturn result
			end
			mreturn TokenExpander.ExpandFieldLoopToken(tkn, file, loops, process)
		endmethod
		
	endclass
	
endnamespace
