
import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI
;import Symphony.Core

namespace Symphony.CodeGen.Extensions
	
	public class SymphonyDecimalFormat implements IExpansionToken
		
		private const rpsFormatString	,a*	,"<SYMPHONY_DECIMAL_FORMAT="
		private const rpsPlacesString	,a*	,"<SYMPHONY_DECIMAL_PLACES="
		
		public property TokenName, String
			method get
			proc
				mreturn "SYMPHONY_DECIMAL_FORMAT"
			endmethod
		endproperty
		
		public property Description, String
			method get
			proc
				mreturn "SYMPHONY_DECIMAL_FORMAT"
			endmethod
		endproperty
		
		public property Validity, TokenValidity
			method get
			proc
				mreturn TokenValidity.FieldLoop
			endmethod
		endproperty
		
		public property TokenCase, TokenCaseMode
			method get
			proc
				mreturn TokenCaseMode.UppercaseOnly
			endmethod
		endproperty
		
		public method Expand, String
			tkn, @Token
			file, @FileNode 
			loops, @IEnumerable<LoopNode>
			endparams
		proc
			lambda process(str, field)
			begin
				;DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace)")
				data startPos	,i4
				data endPos		,i4
				data tokenValue	,a30
				data tokenLength	,i4
				data formatString		,a11	,'#0.00000000'
				data formatStringBlank	,a11	,'##.########'
				
				;DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace)")
				
				tokenLength = %trim(rpsFormatString)
				startPos = %instr(1, field.LongDescription, rpsFormatString)
				if (startPos) then
				begin
					startPos += tokenLength
					endPos = %instr(startPos, field.LongDescription,">")
					tokenValue = field.LongDescription(startPos , endpos - 1)
					;DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace)" + %atrim(tokenValue))
					mreturn ",StringFormat=" + %atrim(tokenValue) + " "
				end
				else
				begin
					if (field.DataType == RpsFieldDataType.Decimal && field.Precision) then
					begin
						data numDec	,d2
						startPos = %instr(1, field.LongDescription, rpsPlacesString)
						if (startPos) then
						begin
							startPos += %trim(rpsPlacesString)
							endPos = %instr(startPos, field.LongDescription,">")
							numDec = field.LongDescription(startPos , endpos - 1)
						end
						else
						begin
							numDec = field.Precision
						end
						if (field.BlankIfZero == true) then
						begin
							;DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace) " + ",StringFormat=" + formatStringBlank(1:numDec+3))
							mreturn ",StringFormat=" + formatStringBlank(1:numDec+3)
						end
						else
						begin
							;DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace) " + ",StringFormat=" + formatString(1:numDec+3))
							mreturn ",StringFormat=" + formatString(1:numDec+3)
						end
					end
					else
					begin
						;DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace) blank.")
						mreturn ""
					end
				end
			end
			mreturn TokenExpander.ExpandFieldLoopToken(tkn, file, loops, process)
		endmethod
		
	endclass
	
endnamespace
