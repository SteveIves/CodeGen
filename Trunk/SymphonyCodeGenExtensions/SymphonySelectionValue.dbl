
import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI
import Symphony.Core

namespace Symphony.CodeGen.Extensions
	
	public class SymphonySelectionValue implements IExpansionToken
		
		public property TokenName, String
			method get
			proc
				mreturn "SYMPHONY_SELECTION_VALUE"
			endmethod
		endproperty
		
		public property Description, String
			method get
			proc
				mreturn "SYMPHONY_SELECTION_VALUE"
			endmethod
		endproperty
		
		public property Validity, TokenValidity
			method get
			proc
				mreturn TokenValidity.FieldSelectionLoop
			endmethod
		endproperty
		
		public property TokenCase, TokenCaseMode
			method get
			proc
				mreturn TokenCaseMode.UppercaseOnly
			endmethod
		endproperty
		
		public method Expand, String
			tkn, @Token
			file, @FileNode 
			loops, @IEnumerable<LoopNode>
			endparams
		proc
			lambda process(str, field, seltxt, selidx)
			begin
				DebugView.Write("SymphonyCodeGenExtenstion, <SYMPHONY_SELECTION_VALUE>: (Replace)" )
				data selDescription	,string
				data startPos		,i4
				data endPos			,i4
				
				selDescription = seltxt
				DebugView.Write("SymphonyCodeGenExtenstion, <SYMPHONY_SELECTION_VALUE>: (Replace) Description = " + selDescription)
				
				startPos = %instr(1, selDescription, "<")
				if (startPos) then
				begin
					endPos = %instr(1, selDescription, ">")
					selDescription = selDescription(startPos + 1, endPos - 1)
				end
				else
				begin
					selDescription = "<SELECTION_VALUE>"
				end
				
				mreturn selDescription
			end
			mreturn TokenExpander.ExpandFieldSelectionLoopToken(tkn, file, loops, process)
		endmethod
		
	endclass
	
endnamespace
