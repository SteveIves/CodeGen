
import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI
;import Symphony.Core

namespace Symphony.CodeGen.Extensions
	
	public class SymphonyAlphaSize implements IExpansionToken
		
		private const rpsTokenString, a*, "<SYMPHONY_ALPHA_SIZE="
		
		public property TokenName, String
			method get
			proc
				mreturn "SYMPHONY_ALPHA_SIZE"
			endmethod
		endproperty
		
		public property Description, String
			method get
			proc
				mreturn "SYMPHONY_ALPHA_SIZE"
			endmethod
		endproperty
		
		public property Validity, TokenValidity
			method get
			proc
				mreturn TokenValidity.FieldLoop
			endmethod
		endproperty
		
		public property TokenCase, TokenCaseMode
			method get
			proc
				mreturn TokenCaseMode.UppercaseOnly
			endmethod
		endproperty
		
		public method Expand, String
			tkn, @Token
			file, @FileNode 
			loops, @IEnumerable<LoopNode>
			endparams
		proc
			lambda process(str, field)
			begin
				;DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace:" + field.Name + ") " + %string(field.Size))
				data startPos	,i4, %instr(1, field.LongDescription, rpsTokenString)
				if (startPos) then
				begin
					startPos += %trim(rpsTokenString)
					data endPos,i4, %instr(startPos, field.LongDescription,">")
					data width	,d4, field.LongDescription(startPos , endpos - 1)
					;DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace:" + field.Name + ") " +'Width="' + %string(width))
					mreturn 'Width="' + %string(width) + '"'
				end
				else
				begin
					if (field.Size > 50) then
					begin
						data width, i4, 50 * file.Context.CurrentTask.CharacterWidth
						data height, i4, (field.Size / 50) * 22
						;DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace:" + field.Name + ") " +'Width="' + %string(width) + '" Height="' + %string(height) + '" TextWrapping="Wrap" AcceptsReturn="True"')
						mreturn 'Width="' + %string(width) + '" Height="' + %string(height) + '" TextWrapping="Wrap"'
					end
					else
					begin
						;DebugView.Write("SymphonyCodeGenExtension,<" + TokenName + ">: (Replace:" + field.Name + ") " + 'Width="<FIELD_PIXEL_WIDTH>"')
						data width, int, DefaultValues.DefaultCharacterWidth
						if (file.Context.CurrentTask.CharacterWidth > 0)
							width = file.Context.CurrentTask.CharacterWidth
						if (field.SelectionList.Count > 0) then
							mreturn Convert.ToString(field.SelectionListMaxLength * width)
						else if (field.Enumerated) then
							mreturn Convert.ToString(field.EnumeratedDisplayLength * width)
						else
							mreturn Convert.ToString(field.Size * width)
					end
				end
				
			end
			mreturn TokenExpander.ExpandFieldLoopToken(tkn, file, loops, process)
		endmethod
		
	endclass
	
endnamespace
