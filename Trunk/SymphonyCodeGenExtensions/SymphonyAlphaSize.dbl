;;*****************************************************************************
;;
;; Title:       SymphonyAlphaSize.dbl
;;
;; Type:        CodeGen Extension Class
;;
;; Description: Custom field loop token <SYMPHONY_ALPHA_SIZE>
;;
;; Author:      Richard C. Morris, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace Symphony.CodeGen.Extensions
	
	public class SymphonyAlphaSize implements IExpansionToken
		
		private const rpsTokenString, a*, "<SYMPHONY_ALPHA_SIZE="
		
		public property TokenName, String
			method get
			proc
				mreturn "SYMPHONY_ALPHA_SIZE"
			endmethod
		endproperty
		
		public property Description, String
			method get
			proc
				mreturn "SYMPHONY_ALPHA_SIZE"
			endmethod
		endproperty
		
		public property Validity, TokenValidity
			method get
			proc
				mreturn TokenValidity.FieldLoop
			endmethod
		endproperty
		
		public property TokenCase, TokenCaseMode
			method get
			proc
				mreturn TokenCaseMode.UppercaseOnly
			endmethod
		endproperty
		
		public method Expand, String
			tkn, @Token
			file, @FileNode 
			loops, @IEnumerable<LoopNode>
			endparams
		proc
			lambda process(str, field)
			begin
				data startPos	,i4, %instr(1, field.LongDescription, rpsTokenString)
				if (startPos) then
				begin
					startPos += %trim(rpsTokenString)
					data endPos,i4, %instr(startPos, field.LongDescription,">")
					data width	,d4, field.LongDescription(startPos , endpos - 1)
					mreturn 'Width="' + %string(width) + '"'
				end
				else
				begin
					if (field.Size > 50) then
					begin
						data width, i4, 50 * file.Context.CurrentTask.CharacterWidth
						data height, i4, (field.Size / 50) * file.Context.CurrentTask.CharacterWidth
						mreturn 'Width="' + %string(width) + '" Height="' + %string(height) + '" TextWrapping="Wrap"'
					end
					else
					begin
						mreturn 'Width="' + %string(field.Size * file.Context.CurrentTask.CharacterWidth) + '"'
					end
				end
				close(1000)
			end
			mreturn TokenExpander.ExpandFieldLoopToken(tkn, file, loops, process)
		endmethod
		
	endclass
	
endnamespace
