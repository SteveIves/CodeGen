
import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI
import Symphony.Core

namespace Symphony.CodeGen.Extensions
	
	public class SymphonySelWndLength implements IExpansionToken
		
		private const rpsTokenString, a*, "<SYMPHONY_SELWND_LENGTH="

		public property TokenName, String
			method get
			proc
				mreturn "SYMPHONY_SELWND_LENGTH"
			endmethod
		endproperty
		
		public property Description, String
			method get
			proc
				mreturn "SYMPHONY_SELWND_LENGTH"
			endmethod
		endproperty
		
		public property Validity, TokenValidity
			method get
			proc
				mreturn TokenValidity.FieldLoop
			endmethod
		endproperty
		
		public property TokenCase, TokenCaseMode
			method get
			proc
				mreturn TokenCaseMode.UppercaseOnly
			endmethod
		endproperty
		
		public method Expand, String
			tkn, @Token
			file, @FileNode 
			loops, @IEnumerable<LoopNode>
			endparams
		proc
			lambda process(str, field)
			begin
				DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace)" + %atrim(field.Name) + %atrim(field.LongDescription))
				data tokenLength, i4, %trim(rpsTokenString)
				data startPos,    i4, %instr(1, field.LongDescription, rpsTokenString)
				if (startPos) then
				begin
					startPos += tokenLength
					data endPos, i4, %instr(startPos, field.LongDescription,">")
					DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace)" + field.LongDescription(startPos , endpos - 1))
					mreturn field.LongDescription(startPos , endpos - 1)
				end
				else
				begin
					if (field.EnumeratedDisplayLength) then
					begin
						DebugView.Write("SymphonyCodeGenExtension, >" + TokenName + ">: (Replace) Using FIELD_ENUMLENGTH = " + %string(field.EnumeratedDisplayLength * file.Context.CurrentTask.CharacterWidth))
						mreturn %string(field.EnumeratedDisplayLength * file.Context.CurrentTask.CharacterWidth)
					end
					else
					begin
						DebugView.Write("SymphonyCodeGenExtension, <SYMPHONY_SELWND_LENGTH>: (Replace) hard wired 300, no SYMPHONY_SELWND_LENGTH set.")
						mreturn "300"
					end
				end
			end
			mreturn TokenExpander.ExpandFieldLoopToken(tkn, file, loops, process)
		endmethod
		
	endclass
	
endnamespace
