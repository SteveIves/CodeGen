
import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI
import Symphony.Core

namespace Symphony.CodeGen.Extensions
	
	public class SymphonyConverterParameter implements IExpansionToken
		
		private const rpsString, a*, "<SYMPHONY_CONVERTER_PARAMETER="

		public property TokenName, String
			method get
			proc
				mreturn "SYMPHONY_CONVERTER_PARAMETER"
			endmethod
		endproperty
		
		public property Description, String
			method get
			proc
				mreturn "SYMPHONY_CONVERTER_PARAMETER"
			endmethod
		endproperty
		
		public property Validity, TokenValidity
			method get
			proc
				mreturn TokenValidity.FieldLoop
			endmethod
		endproperty
		
		public property TokenCase, TokenCaseMode
			method get
			proc
				mreturn TokenCaseMode.UppercaseOnly
			endmethod
		endproperty
		
		public method Expand, String
			tkn, @Token
			file, @FileNode 
			loops, @IEnumerable<LoopNode>
			endparams
		proc
			lambda process(str, field)
			begin
				DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace)")
				data tokenLength, i4, %trim(rpsString)
				data startPos	, i4, %instr(1, field.LongDescription, rpsString)
				data tokenValue	, string
				if (startPos) then
				begin
					startPos += tokenLength
					data endPos, i4, %instr(startPos, field.LongDescription,">")
					tokenValue = field.LongDescription(startPos , endpos - 1)
					if (field.BlankIfZero == true && !tokenValue.Contains('BLANKIFZERO'))
						tokenValue = tokenValue + "|BLANKIFZERO"
					DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace)" + ",ConverterParameter=" + %atrim(tokenValue) + " ")
					mreturn ",ConverterParameter=" + tokenValue + " "
				end
				else
				begin
					tokenValue = String.Empty
					if (field.BlankIfZero == true && !tokenValue.Contains('BLANKIFZERO'))
						tokenValue = "|BLANKIFZERO"
					DebugView.Write("SymphonyCodeGenExtension, <" + TokenName + ">: (Replace) " + tokenValue)
					if (tokenValue == String.Empty) then
						mreturn ""
					else
						mreturn ",ConverterParameter=" + tokenValue + " "
				end
			end
			mreturn TokenExpander.ExpandFieldLoopToken(tkn, file, loops, process)
		endmethod
		
	endclass
	
endnamespace
