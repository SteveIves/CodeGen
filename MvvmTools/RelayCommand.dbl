;;*****************************************************************************
;;
;; Title:       RelayCommand.dbl
;;
;; Type:        Class
;;
;; Description: A utility class for handling WPF ICommand's in an MVVM app
;;
;; Date:        16th October 2019
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2019, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Diagnostics
import System.Windows.Input

namespace MvvmTools

    ;;;  <summary>
    ;;;  A command whose sole purpose is to relay its functionality to other objects by invoking delegates. The
    ;;;  default return value for the CanExecute method is 'true'.
    ;;;  </summary>
    public class RelayCommand implements ICommand

        readonly _execute, @Action<object>
        readonly _canExecute, @Predicate<object>

        ;;;  <summary>
        ;;;  Creates a new command that can always execute.
        ;;;  </summary>
        ;;;  <param name="execute">The execution logic.</param>
        public method RelayCommand
            execute, @Action<object> 
            this(execute, ^null)
        proc

        endmethod

        ;;;  <summary>
        ;;;  Creates a new command.
        ;;;  </summary>
        ;;;  <param name="execute">The execution logic.</param>
        ;;;  <param name="canExecute">The execution status logic.</param>
        public method RelayCommand
            execute, @Action<object> 
            canExecute, @Predicate<object> 
        proc
            if (execute == ^null)
                throw new ArgumentNullException("execute")
            _execute = execute
            _canExecute = canExecute
        endmethod

        ;; [DebuggerStepThrough]
        public method CanExecute, boolean
            parameter, @object 
        proc
            mreturn _canExecute == ^null ? true : _canExecute(parameter)
        endmethod

        public event CanExecuteChanged, @EventHandler, custom
            method add
            proc
                CommandManager.RequerySuggested += value
            endmethod
            method remove
            proc
                CommandManager.RequerySuggested -= value
            endmethod
        endevent

        public method Execute, void
            parameter, @object 
        proc
            _execute(parameter)
        endmethod

    endclass

endnamespace
