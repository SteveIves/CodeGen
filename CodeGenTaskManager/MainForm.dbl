
import System
import System.Collections.Generic
import System.ComponentModel
import System.Data
import System.Drawing
import System.IO
import System.Windows.Forms
import System.Xml
import System.Xml.Serialization

import CodeGen.Engine

namespace CodeGenTaskManager
	
	public partial class MainForm extends System.Windows.Forms.Form
		
		private mTaskSet			,@CodeGenTaskSet
		private mTaskSetOpen		,Boolean			,false
		private mTaskSetFile		,String
		private mTaskSetFolder		,String
		
		private const appName		,String				,"CodeGen Task Manager"
		private const fileName		,String				,"CodeGen Task Set File"
		private const fileFilter	,String				,"CodeGen Task Set (*.cts)|*.cts"
		
		public method MainForm
			endparams
		proc
			this.InitializeComponent()

			;;Implement user UI preferences			
			if (Properties.Settings.Default.StartMaximized)
				this.WindowState = WindowState.Maximized
				
			;;Load the options in the logging level combo from the LoggingLevel enumeration
			bindComboValues()
			
			;;Setup the data binding for the task grid. This can't be done at design time
			;;because all the other columns constantly get re-added by the designer!
			taskGrid.AutoGenerateColumns = false
			taskGrid.DataSource = tasksBindingSource

			;;Make sure the tasksets folder exists
			mTaskSetFolder = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + "\CodeGen Tasks"
			if (!Directory.Exists(mTaskSetFolder))
				Directory.CreateDirectory(mTaskSetFolder)

			;;If we have a default repository then activate it
			if (!String.IsNullOrEmpty(Properties.Settings.Default.RpsMainFile)&&(!String.IsNullOrEmpty(Properties.Settings.Default.RpsTextFile)))
			begin
				;;Make sure the files exist
				if (File.Exists(Properties.Settings.Default.RpsMainFile)&&File.Exists(Properties.Settings.Default.RpsTextFile)) then
				begin
					data sts, int
					setlog("RPSMFIL",Properties.Settings.Default.RpsMainFile,sts)
					setlog("RPSTFIL",Properties.Settings.Default.RpsTextFile,sts)
				end
				else
				begin
					;;Default repository specified, but files don't exist. Clear out the data.
					MessageBox.Show(this,"Default repository settings were found, but the files don't exist. Please specify default repository files via Tools > Options.")
					Properties.Settings.Default.RpsMainFile = String.Empty
					Properties.Settings.Default.RpsTextFile = String.Empty
					Properties.Settings.Default.Save()
				end

			end
				
			;;Configure the initial state of the UI	
			TaskSetOpen = false
				
		endmethod
				
		public property TaskSetOpen, Boolean
			method get
			proc
				mreturn mTaskSetOpen
			endmethod
			method set
			proc
				mTaskSetOpen = value

				mnuFileNew.Enabled = !mTaskSetOpen
				newToolStripButton.Enabled = !mTaskSetOpen
				
				mnuFileOpen.Enabled = !mTaskSetOpen
				openToolStripButton.Enabled = !mTaskSetOpen
				
				mnuFileClose.Enabled = mTaskSetOpen

				mnuFileSave.Enabled = mTaskSetOpen
				saveToolStripButton.Enabled = mTaskSetOpen
				
				mnuFileSaveAs.Enabled = mTaskSetOpen

				log.Enabled = mTaskSetOpen
				if (!log.Enabled)
					log.Items.Clear()

				txtTaskSetDescription.Enabled = mTaskSetOpen

				LoggingLevelComboBox.Enabled = mTaskSetOpen

				taskGrid.Enabled = mTaskSetOpen

				taskProperties.Enabled = mTaskSetOpen

				btnClearLog.Enabled = mTaskSetOpen

				btnGenerateCode.Enabled = (mTaskSetOpen&&mTaskSet.Tasks.Count>0)
				mnuGenerateCode.Enabled = (mTaskSetOpen&&mTaskSet.Tasks.Count>0)

				if (mTaskSetOpen) then
				begin
					this.Text = String.Format("{0} [{1}]",appName,mTaskSet.Description)
				end
				else
				begin
					txtTaskSetDescription.Text = ""
					this.Text = appName
				end

			endmethod
		endproperty
		
		private method tasksBindingSource_CurrentItemChanged, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			taskProperties.SelectedObject = tasksBindingSource.Current
		endmethod
		
		private method tasksBindingSource_ListChanged, void
			sender, @object 
			e, @System.ComponentModel.ListChangedEventArgs 
			endparams
		proc
			btnGenerateCode.Enabled = (tasksBindingSource.Count>0)
			mnuGenerateCode.Enabled = (tasksBindingSource.Count>0)
		endmethod
		
		private method doGenerateCode, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			Cursor = Cursors.WaitCursor
					
			log.Items.Clear()
			this.Refresh()
					
			data cg, @CodeGenerator
			cg = new CodeGenerator(mTaskSet,messageLogger)
			cg.GenerateCode()			
			cg.Dispose()
			cg = ^null
					
			Cursor = Cursors.Default
					
		endmethod
				
		private method messageLogger, void
			required in messageToLog, String
			required in blankLineBefore, Boolean
			required in blankLineAfter, Boolean
			endparams
		proc
			;;Log the message
			if (blankLineBefore)
				log.Items.Add("")
			log.Items.Add(messageToLog)
			if (blankLineAfter)
				log.Items.Add("")

			;;Make sure the newly added item is visible
			log.SelectedIndex = log.Items.Count - 1
			log.SelectedIndex = - 1

			;;Refresh the UI
			this.Update()

		endmethod
				
		private method newTaskSet, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			mTaskSet = new CodeGenTaskSet()
			displayTaskSet()
		endmethod
				
		private method openTaskSet, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			disposable data dlg, @OpenFileDialog, new OpenFileDialog()
			dlg.Filter = fileFilter
			dlg.InitialDirectory = mTaskSetFolder
			dlg.Multiselect = false
			dlg.RestoreDirectory = true
			dlg.Title = (String)"Open " + fileName
			if(dlg.ShowDialog() == DialogResult.OK)
			begin
				data stm, @Stream
				try
				begin
					stm = dlg.OpenFile()
					if (stm!=^null)
					begin
						mTaskSetFile = dlg.FileName
						data xs, @XmlSerializer, new XmlSerializer(^typeof(CodeGenTaskSet))
						data xr, @XmlReader, new XmlTextReader(stm)
						mTaskSet = (CodeGenTaskSet)xs.Deserialize(xr)
						stm.Close()
						displayTaskSet()
					end
				end
				catch (ex, @Exception)
				begin
					MessageBox.Show("Error: Could not read file from disk. Original error: " + ex.Message)
				end
				endtry
			end
		endmethod

		private method displayTaskSet, void
			endparams
		proc
			taskSetBindingSource.DataSource = mTaskSet
			LoggingLevelComboBox.SelectedText = mTaskSet.LoggingLevel.ToString()
			TaskSetOpen = true
		endmethod
				
		private method loggingLevelChanged, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			mTaskSet.LoggingLevel = (LoggingLevel)LoggingLevelComboBox.SelectedIndex
		endmethod
		
		private method saveTaskSet, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			if (TaskSetOpen)
			begin
				if (String.IsNullOrEmpty(mTaskSetFile)) then
					saveTaskSetAs(sender,e)
				else
				begin
					data stm, @StreamWriter, File.CreateText(mTaskSetFile)
					if(stm!=^null)
					begin
						data xs, @XmlSerializer, new XmlSerializer(mTaskSet.GetType())
						xs.Serialize(stm,mTaskSet)
						stm.Close()
					end
				end
			end
		endmethod
				
		private method saveTaskSetAs, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			disposable data dlg, @SaveFileDialog, new SaveFileDialog()
			dlg.Filter = fileFilter
			dlg.InitialDirectory = mTaskSetFolder
			dlg.RestoreDirectory = true
			dlg.Title = (String)"Save " + fileName
			if (dlg.ShowDialog() == DialogResult.OK)
			begin
				data stm, @Stream
				if((stm = dlg.OpenFile()) != ^null)
				begin
					data xs, @XmlSerializer, new XmlSerializer(mTaskSet.GetType())
					xs.Serialize(stm,mTaskSet)
					stm.Close()
				end
			end
		endmethod
				
		private method closeTaskSet, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			;TODO: Need to save if changed?
					
			taskSetBindingSource.Clear()
			mTaskSet = ^null
			mTaskSetFile = ^null
			LoggingLevelComboBox.SelectedIndex = -1
			taskProperties.SelectedObject = ^null
					
			TaskSetOpen = false

		endmethod
				
		private method closeApplication, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			this.Close()
		endmethod
				
		private method MainForm_FormClosing, void
			sender, @object 
			e, @System.Windows.Forms.FormClosingEventArgs 
			endparams
		proc
			;TODO: Do we need to save an open item before closing?
		endmethod
				
		private method descriptionChanged, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			;TODO: Shouldn't have to do this???
			if (mTaskSet!=^null)
				mTaskSet.Description = txtTaskSetDescription.Text
		endmethod
				
		private method showOptionsDialog, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			disposable data dlg, @CodeGenTaskManager.Dialogs.OptionsDialog, new CodeGenTaskManager.Dialogs.OptionsDialog()
			dlg.ShowDialog()
		endmethod

		private method showAboutDialog, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			disposable data dlg, @CodeGenTaskManager.Dialogs.AboutBox, new CodeGenTaskManager.Dialogs.AboutBox()
			dlg.ShowDialog()
		endmethod
		
		private method clearLog, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			log.Items.Clear()
		endmethod
		
		private method changeBaseFolder, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			disposable data dlg, @FolderBrowserDialog, new FolderBrowserDialog()
			if (!string.IsNullOrEmpty(mTaskSet.BaseFolder))
				dlg.SelectedPath = mTaskSet.BaseFolder

			if (dlg.ShowDialog()==DialogResult.OK)
			begin
				mTaskSet.BaseFolder = dlg.SelectedPath
				taskSetBindingSource.ResetBindings(false)
			end

		endmethod
		
		


		;LEAVE THIS AT THE BOTTOM!!!

		private method mnuSimulateTaskSet_Click, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			mTaskSet = new CodeGenTaskSet()
			mTaskSet.Description = "Simulated Task Set"
			mTaskSet.LoggingLevel = LoggingLevel.Verbose
			
			data newTask, @CodeGenTask, new CodeGenTask()
			newTask.Description = "Model"
			newTask.Structures.Add("PART")
			newTask.Templates.Add("Symphony_Data")
			newTask.Namespace = "MyApp.Model"
			newTask.OutputFolder = "D:\Temp\CodeGenUI\"
			newTask.FieldPrefix = "m"
			newTask.ReplaceFiles = true
			newTask.EchoCommand = true
			mTaskSet.tasks.Add(newTask)
			
			tasksBindingSource.DataSource = mTaskSet
			taskSetBindingSource.ResetBindings(false)
			
			TaskSetOpen = true
			
		endmethod
		
		private method bindComboValues, void
			endparams
		proc
			;;Bind the logging level combo box to the Logging level enumeration
			;;Doing this here because the Enum.GetValues screws up indentation
			LoggingLevelComboBox.DataSource = (Enum.GetValues(^TypeOf(CodeGen.Engine.LoggingLevel)))
		endmethod
				
	endclass
				
endnamespace
				
				