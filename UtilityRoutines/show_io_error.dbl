;;*****************************************************************************
;;
;; Title:       show_io_error.dbl
;;
;; Type:        Subroutine
;;
;; Description: Displays an I/O error
;;
;; Date:
;;
;; Author:      Richard Morris, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
;;
subroutine show_io_error
    .include 'CODEGEN_INC:ioerr.def'

    .include "WND:tools.def"
    .include "DBLDIR:windows.def"

    stack record
        bid,            i4
        wid,            i4
        char,           a1
    endrecord

    stack record display_data
        errno,          d4
        errtxt,         a80
        filnam,         a160
        acckey,         a50
    endrecord

proc

    xcall e_enter
    xcall ib_input(bid, 'errshow', 11, 77)

    ;error number

    xcall ib_field(bid, 'errno',
    &              D_FLD_TYPE,      D_DECIMAL,
    &              D_FLD_SIZE,      4,
    &              D_FLD_POS,       2, 2,
    &              D_FLD_PROMPT,    'Error Number',
    &              D_FLD_FPOS,      2, 15,
    &              D_FLD_READONLY
    &              )

    ;error text

    xcall ib_field(bid, 'errtxt',
    &              D_FLD_TYPE,      D_ALPHA,
    &              D_FLD_SIZE,      40,
    &              D_FLD_DIM,       2,
    &              D_FLD_FPOS,      2, 25,
    &              D_FLD_READONLY
    &              )

    ;file name

    xcall ib_field(bid, 'filnam',
    &              D_FLD_TYPE,      D_ALPHA,
    &              D_FLD_SIZE,      40,
    &              D_FLD_DIM,       4,
    &              D_FLD_POS,       5, 2,
    &              D_FLD_PROMPT,    'Filename',
    &              D_FLD_FPOS,      5, 25,
    &              D_FLD_READONLY
    &              )

    ;possible access key

    xcall ib_field(bid, 'acckey',
    &              D_FLD_TYPE,      D_ALPHA,
    &              D_FLD_SIZE,      50,
    &              D_FLD_DIM,       1,
    &              D_FLD_POS,       10, 2,
    &              D_FLD_PROMPT,    'Access Key',
    &              D_FLD_FPOS,      10, 25,
    &              D_FLD_READONLY
    &              )

    xcall ib_button(bid,'I_OK',DSB_TEXT,'Close',,,'C')
    xcall ib_button(bid,'MB_TRACE',DSB_TEXT,'Trace',,,'T')

    xcall ib_end(bid,wid)

    xcall w_brdr(wid,WB_ON,WB_TITLE,'File I/O Error')

    xcall u_window(D_PLACE,wid,3,5)

    xcall e_state(D_OFF,D_ECHO,D_CURSOR)

    errno = ioe_errno
    errtxt = ioe_errtxt
    filnam = ioe_filename
    acckey = ioe_key_value

    xcall i_display(wid,,display_data)

    ;xcall u_chr(char, wid)
    xcall w_proc(WP_HOURGLASS_OFF)
    xcall i_input(wid,,display_data,,,,D_NOTERM)

    if g_entnam=='MB_TRACE'
        xcall show_io_trace(ioerr)

    xcall e_exit

    xreturn

endsubroutine

subroutine show_io_trace
    .include 'CODEGEN_INC:ioerr.def'
    endparams

    .include 'WND:tools.def'

    stack record
        message         ,a1000
    endrecord

proc

    ;Display the full trace back, in a message box

    clear message

    for ioe_loop from 1 thru ioe_mem_cnt
    begin
        if (^m(io_traceback[ioe_loop].iot_routine, ioe_mem_pnt)=='   ')
            exitloop

        message = %atrim(message) + 'at line ' +
        &       %string(^d(^m(io_traceback[ioe_loop].iot_lineno, ioe_mem_pnt)))
        &       + ', in routine ' +
        &       ^m(io_traceback[ioe_loop].iot_routine, ioe_mem_pnt) +
        &       '\n'

    end

    xcall u_msgbox(%atrim(message),D_MICONSTOP+D_MOK,'File I/O Error Traceback')

    xreturn

endsubroutine


