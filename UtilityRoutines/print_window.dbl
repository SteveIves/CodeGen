;;*****************************************************************************
;;
;; Title:       print_window.dbl
;;
;; Type:        Subroutine
;;
;; Description: Prints the content of an input window
;;
;; Date:
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
;;
subroutine print_window

    required in a_window_id     ,n      ;;Input window ID
    optional in a_no_preview    ,n      ;;Don't preview, just print
    optional in a_no_border     ,n      ;;Don't draw a box around the window
    optional in a_no_title      ,n      ;;Don't print the window title
    endparams

    .include "WND:tools.def"
    .include "WND:system.def"
    .include "WND:fldinf.def"
    .include "DBLDIR:windows.def"

    stack record local_data
        .include "CODEGEN_INC:print_control.def"
    endrecord

    record ivar

        rows            ,i4         ;;Height of window
        cols            ,i4         ;;Width of window

        row_offset      ,i4
        col_offset      ,i4

        border_offset   ,i4         ;;Border ofset rows (because of title)

        fldnum          ,i4         ;;Input window field number

        prompt_row      ,i4
        prompt_col      ,i4
        prompt_len      ,i4

        hline_start     ,i4
        hline_end       ,i4

        row             ,i4
        ii              ,i4
        vloop           ,i4

        pos1            ,i4
        pos2            ,i4

        img_pos         ,i4
        img_width       ,i4
        img_height      ,i4

        v_start_row     ,i4
        v_end_row       ,i4
        v_col           ,i4

        got_a_box       ,i4
        box_row         ,i4
        box_depth       ,i4

        vert_num        ,i4
        vert_lin        ,[132]i4
        vert_typ        ,[132]i4

        font            ,DS_FONTTYP

        window_data     ,i4

    endrecord

    stack record avar

        line            ,a1000
          iline         ,[1000]i1@line
        store_line      ,a1000
        field_name      ,a15
        img_name        ,a255
        store_gs_attr   ,d5
        user_string     ,a80

    endrecord

    structure char
                        ,a1
    endstructure

proc

    init local_data
    clear ^i(ivar), avar

    xcall prt_start(prt_control,2,1)

    if (^passed(a_no_preview)&&a_no_preview)
        prt_nopreview = 1

    if (prt_handle)
    begin
        call print_the_window
        xcall prt_finish(prt_control)
    end

    xreturn

;;-----------------------------------------------------------------------------
;;
print_the_window,

    ;;Get the base window font details
    xcall u_wndfont(D_GETWNDFONT, a_window_id, font)
    xcall u_wndfont(D_GETFONT, font, wnd_font_name, wnd_font_pitch)

    ;;Extract the window contents
    xcall extract_window_data(a_window_id, window_data, rows, cols)

    ;;Print the window title
    if (^passed(a_no_title)&&a_no_title) then
        nop
    else
    begin
        ;;Is there a title?
        if %w_info(WIF_TTLFLG,a_window_id)
        begin
            data wndTitle, a60
            data ttlAttr, [2]d3, 0, 0
            xcall w_info(WI_TITLE,a_window_id,wndTitle,ttlAttr)
            ptxt_bold = TRUE
            xcall prt_string(prt_control,1,1,atrim(wndTitle))
            border_offset+=2
            row_offset+=2
        end
    end

    ;;Draw a box round the window area?
    if (^passed(a_no_border)&&a_no_border) then
        nop
    else
    begin
        row_offset += 1
        col_offset += 2
        xcall prt_box(prt_control,1+border_offset,1,rows+row_offset-1,cols+col_offset+2)
    end

    call process_images
    call process_fields
    call process_boxes
    call process_lines

    return

;;-----------------------------------------------------------------------------
;;
process_images,

    ;;Process image definitions
    ;;
    ;;Look for any image definitions and output the images. This is done first
    ;;so that it is possible to overlay text or lines over the top of the image.
    ;;An image definition is text in the window in the format:
    ;;
    ;;@IMG:imagefile.ext(width*height)
    ;;
    ;;Width and height are the number of columns and rows that the image should
    ;;occupy. The image will be stretched if required.

    for row from 1 thru rows
    begin

        line = ^m(char((row*cols)-(cols-1):cols),window_data)

        ;;Look for @IMG:
        if (img_pos=%instr(1,line,"@IMG:"))
        begin

            ;;Got an image spec, extract the image name
            pos1 = %instr(img_pos,line,"(")
            img_name = line(img_pos+1,pos1-1)

            ;;And the image width
            pos2 = %instr(pos1,line,"*")
            img_width = line(pos1+1,pos2-1)

            ;;And the image height
            pos1 = %instr(pos2, line, ")")
            img_height = line(pos2+1,pos1-1)

            ;;Output the image to the metafile
            xcall prt_img(prt_control,img_name,row,img_pos,img_width,img_height)

            ;;Remove the image definition from the window text buffer
            clear line(img_pos,pos1)
            ^m(char(row*cols-cols+1:cols),window_data) = line

        end
    end

    return

;;-----------------------------------------------------------------------------
;;
process_fields,

    clear fldnum
    repeat
    begin
        incr fldnum
        clear field_name

        xcall i_fldinf(a_window_id,field_name,fldnum,,gs_inpfld)

        if (!field_name)
            exitloop

        ;;Do we have field prompt information?
        if (gs_promptfld)
        begin
            xcall w_flds(a_window_id,WF_PARAM,gs_promptfld,prompt_row,prompt_col,prompt_len)

            ;;Extract the prompt only
            line = ^m(char((((prompt_row*cols)-cols)+prompt_col):prompt_len),window_data)

            font = gs_promptfont
            call build_font_details

            ;;Print prompts in bold
            ptxt_bold = TRUE

            ;;Output field prompt to metafile
            xcall prt_string(prt_control,row_offset+prompt_row,col_offset+prompt_col,%atrim(line))

            ;;Remove field prompt from window text buffer
            clear ^m(char((((prompt_row*cols)-cols)+prompt_col):prompt_len),window_data)
        end

        ;;Process the input field

        ;;Set attributes
        if gs_attr
        begin

            if gs_attr(2:1) ;;blink     ;;this should be - but it's a bug!!
                ptxt_italic = TRUE

            if gs_attr(3:1) ;;highlight
                ptxt_bold = TRUE

            if gs_attr(4:1) ;;blink
                ptxt_italic = TRUE

            if gs_attr(5:1) ;;blink
                ptxt_underline = TRUE

        end

        ;;Set justification
        ptxt_justify = gs_jst

        ;;Extract field content
        if (gs_viewlen) then
            line=^m(char((((gs_frow*cols)-cols)+gs_fcol):gs_viewlen),window_data)
        else
            line=^m(char((((gs_frow*cols)-cols)+gs_fcol):gs_dsplen),window_data)
        font=gs_font

        call build_font_details

        ;;Output field content to metafile
        xcall prt_string(prt_control,row_offset+gs_frow,col_offset+gs_fcol,%atrim(line))

        ;;Remove field content from window text buffer
        if (gs_viewlen) then
            clear ^m(char((((gs_frow*cols)-cols)+gs_fcol):gs_viewlen),window_data)
        else
            clear ^m(char((((gs_frow*cols)-cols)+gs_fcol):gs_dsplen),window_data)

    end

    return

;;-----------------------------------------------------------------------------
;;
process_boxes,

    ;;Process boxes
    repeat
    begin

        clear got_a_box

        for row from 1 thru rows
        begin

            ;;Check for each top horizontal line of a box
            line = ^m(char(row*cols-cols+1:cols),window_data)

            for hline_start from 1 thru %trim(line)
            begin

                if (iline[hline_start]==3 && iline[hline_start+1]==1)
                begin

                    box_row = row
                    got_a_box = TRUE
                    clear vert_num

                    ;;we have a top line.  find the end of it
                    for hline_end from hline_start thru %trim(line) + 1
                    begin

                        if (line(hline_end:1)==%char(5))
                            exitloop

                        ;;check for vertical lines from here
                        if (line(hline_end:1)==%char(4))
                        begin
                            incr vert_num
                            vert_lin[vert_num] = hline_end
                            vert_typ[vert_num] = 2
                        end

                        ;;check for upside down T's
                        if (line(hline_end:1)==%char(10))
                        begin
                            incr vert_num
                            vert_lin[vert_num] = hline_end
                            vert_typ[vert_num] = 10
                        end

                    end

                    hline_end = hline_end - hline_start + 1
                    clear line(hline_start:hline_end)

                    for ii from 1 thru vert_num
                        ^i(line(vert_lin[ii] : 1)) = vert_typ[ii]

                    ^m(char(row*cols-cols+1:cols),window_data) = line

                    ;;find the bottom line position

                    for box_depth from row thru rows
                    begin

                        clear line
                        line = ^m(char(box_depth*cols-cols+1:cols),window_data)

                        if (iline[hline_start]==9 && iline[hline_start+1]==1)
                            exitloop    ;;found the end

                        if (iline[hline_start]==7) then ;;crossover +
                            ^i(line(hline_start:1)) = 7
                        else
                        begin
                            if (iline[hline_start]==6 && iline[hline_start+1]==1) then
                            begin
                                ^i(line(hline_start:1)) = 1
                                ^i(line(hline_start+hline_end-1:1)) = 1
                            end
                            else
                                clear line(hline_start:1), line(hline_start+hline_end-1:1)
                        end

                        ^m(char(box_depth*cols-cols+1:cols),window_data) = line

                    end

                    for ii from hline_start thru hline_end
                        if iline(ii:1)==1
                            clear line(ii:1)

                    for ii from 1 thru vert_num
                        if (vert_typ[ii]!=10)
                            ^i(line(vert_lin[ii] : 1)) = 2

                    ^m(char(box_depth*cols-cols+1:cols),window_data) = line

                    xcall prt_box(prt_control,row_offset+box_row,col_offset+hline_start,box_depth-box_row+1,hline_end)

                end
            end
        end

        if (!got_a_box)
            exitloop

    end

    return

;;-----------------------------------------------------------------------------
;;
process_lines,

    ;;Process horizontal lines

    for row from 1 thru rows
    begin

        line = ^m(char(row*cols-cols+1:cols),window_data)

        for hline_start from 1 thru %trim(line)
        begin
            if (iline[hline_start]==1 && iline[hline_start+1]==1)
            begin

                ;;We have a line
                for hline_end from hline_start thru %trim(line) + 1
                begin
                    if line(hline_end:1)!=%char(1) &&
                    &   line(hline_end:1)!=%char(4) &&
                    &   line(hline_end:1)!=%char(7) &&
                    &   line(hline_end:1)!=%char(10)
                        exitloop
                end

                decr hline_end
                xcall prt_hline(prt_control,row_offset+row,col_offset+hline_start,col_offset+hline_end)

            end
        end
    end

    ;;Process vertical lines

    for row from 1 thru rows
    begin

        line = ^m(char(row*cols-cols+1:cols),window_data)

        for vloop from 1 thru %trim(line)
        begin

            if (iline[vloop]==2 || iline[vloop]==4 || iline[vloop]==10)
            begin

                ;;Ee have a vertical line

                v_start_row = row
                v_col = vloop
                store_line = line

                for v_end_row from row thru rows
                begin
                    line = ^m(char(v_end_row*cols-cols+1:cols),window_data)
                    if (iline[vloop]!=2 && iline[vloop]!=4 && iline[vloop]!=7 && iline[vloop]!=10)
                        exitloop
                end

                line = store_line

                decr v_end_row

                xcall prt_vline(prt_control,row_offset+v_start_row,row_offset+v_end_row,col_offset+v_col)

            end
        end
    end

    return

;;-----------------------------------------------------------------------------
;;
build_font_details,

    ;;Sort out the font details from the prompt/field prompt

    if font=="   " then
    begin
        fld_font_name = wnd_font_name
        fld_font_pitch = wnd_font_pitch
    end
    else
        xcall u_wndfont(D_GETFONT, font, fld_font_name, fld_font_pitch)

    ptxt_font = fld_font_name
    ptxt_pitch = fld_font_pitch

    return

endsubroutine

