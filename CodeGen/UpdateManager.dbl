;;*****************************************************************************
;;
;; Title:       UpdateManager.dbl
;;
;; Type:        Class
;;
;; Description: Manages the process of checking for CodeGen updates.
;;
;; Date:        16th March 2015
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.ifndef D_NETSTANDARD

import System
import System.Diagnostics
import System.IO
import System.Reflection
import System.ServiceModel.Syndication
import System.Xml

namespace CodeGen

    ;;; <summary>
    ;;; Automates the process of checking whether CodeGen updates are available.
    ;;; </summary>
    public static class UpdateManager

        private static atomUrl, string, "https://raw.githubusercontent.com/Synergex/CodeGen/master/CurrentRelease.xml"

        ;;; <summary>
        ;;; Checks whether a new varion of CodeGen is available for download.
        ;;; </summary>
        ;;; <param name="currentVersion">Returned currently installed version number.</param>
        ;;; <param name="latestVersion">Returned latest version number.</param>
        ;;; <param name="message">Returned message text.</param>
        ;;; <returns>True if an update is available.</returns>
        public static method CheckForNewVersion, boolean
            required out currentVersion, String
            required out latestVersion, String
            required out message, string
            endparams
        proc
            ;;Get the current installed version number
            currentVersion = getCurrentVersionNumber()

            ;;Get the latest version number available from GitHub
            latestVersion = getLatestVersionNumber()

            ;;Determine the response
            data updateAvailable, boolean
            message = getUpdateMessage(currentVersion,latestVersion,updateAvailable)

            ;;Record when the update check took place
            try
            begin
                ;;Create the file
                data sw = File.CreateText(updateCheckFile)
                sw.Write(DateTime.Now.ToString())
                sw.Close()
            end
            catch (ex)
            begin
                nop
            end
            endtry

            mreturn updateAvailable

        endmethod

        private static method getCurrentVersionNumber, string
            endparams
        proc
            data asy, @Assembly, Assembly.GetExecutingAssembly()
            data fvi, @FileVersionInfo, FileVersionInfo.GetVersionInfo(asy.Location)
            mreturn fvi.FileVersion
        endmethod

        private static method getLatestVersionNumber, String
            endparams
        proc
            try
            begin
                ;;Get an Atom formatter
                data formatter, @Atom10FeedFormatter, new Atom10FeedFormatter()				
                ;;Read the Atom feed
                disposable data reader, @XmlReader, XmlReader.Create(atomUrl)
                formatter.ReadFrom(reader)
                mreturn formatter.Feed.Title.Text
            end
            catch (e, @Exception)
            begin
                mreturn "Unknown"
            end
            endtry
        endmethod

        private static method getUpdateMessage, String
            required in currentVersion, String
            required in latestVersion, string
            required out updateAvailable, boolean
            endparams
        proc
            updateAvailable = false
            if (latestVersion=="Unknown") then
            begin
                mreturn "Failed to retrieve latest version information"
            end
            else
            begin
                if (latestVersion > currentVersion) then
                begin
                    updateAvailable = true
                    mreturn "An updated version of CodeGen is available"
                end
                else if (latestVersion < currentVersion) then
                begin
                    mreturn "You are running a pre-release version of CodeGen"
                end
                else
                begin
                    mreturn "You are running the latest version of CodeGen"
                end
            end
        endmethod

        private static appDataPath, string, Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),"CodeGen")
        private static autoUpdateFile, string, Path.Combine(appDataPath,"AutoUpdateInterval.txt")
        private static updateCheckFile, string, Path.Combine(appDataPath,"LastUpdateCheck.txt")

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="interval"></param>
        ;;; <returns></returns>
        public static method ScheduleAutoUpdateChecks, boolean
            required in interval, int
        proc
            ;;Create the auto-update interval file
            try
            begin
                data sw = File.CreateText(autoUpdateFile)
                sw.Write(interval.ToString())
                sw.Close()	
                mreturn true
            end
            catch (e, @Exception)
            begin
                mreturn false
            end
            endtry
        endmethod

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <returns></returns>
        public static method CancelAutoUpdateChecks, boolean
        proc
            if (File.Exists(autoUpdateFile))
            begin
                try
                begin
                    File.Delete(autoUpdateFile)
                    mreturn true
                end
                catch (ex)
                begin
                    mreturn false
                end
                endtry
            end
            mreturn true
        endmethod

        ;;; <summary>
        ;;; Check whether it is time to perform an auto update check
        ;;; </summary>
        ;;; <returns>True if an update check is due.</returns>
        public static method IsAutoUpdateCheckDue, boolean
        proc
            ;;Make sure the AppData\Local\CodeGen folder exists
            if (!Directory.Exists(appDataPath))
                Directory.CreateDirectory(appDataPath)

            data doUpdateCheck = false

            ;;Have auto update checks been scheduled?
            if (File.Exists(autoUpdateFile))
            begin
                if (File.Exists(updateCheckFile)) then
                begin
                    try
                    begin
                        data stringLastUpdateCheck = File.ReadAllText(updateCheckFile)
                        data lastUpdateCheck, DateTime
                        if (DateTime.TryParse(stringLastUpdateCheck,lastUpdateCheck)) then
                        begin
                            ;;We know when the last update check was. Now we need the interval.
                            data stringInterval = File.ReadAllText(autoUpdateFile)
                            data interval, int
                            if (Int32.TryParse(stringInterval,interval)) then
                            begin
                                if (DateTime.Compare(lastUpdateCheck.AddDays(interval),DateTime.Now) <= 0)
                                begin
                                    ;;An auto-update is due
                                    doUpdateCheck = true
                                end
                            end
                            else
                            begin
                                ;;Bad data in the update interval file
                                try
                                begin
                                    File.Delete(autoUpdateFile)
                                end
                                catch (ex)
                                begin
                                    nop
                                end
                                endtry
                            end
                        end
                        else
                        begin
                            ;;Update check file contains bad data
                            try
                            begin
                                File.Delete(updateCheckFile)
                            end
                            catch (ex)
                            begin
                                nop
                            end
                            endtry
                        end
                    end
                    catch (ex)
                    begin
                        ;;Failed to read update check file - maybe it's bad
                        try
                        begin
                            File.Delete(updateCheckFile)
                        end
                        catch (ex2)
                        begin
                            nop
                        end
                        endtry
                    end
                    endtry
                end
                else
                begin
                    ;;Auto update scheduled but no update check done
                    doUpdateCheck = true
                end
            end

            mreturn doUpdateCheck

        endmethod

    endclass

endnamespace

.endc
