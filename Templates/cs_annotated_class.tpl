<CODEGEN_FILENAME><Structure_name>.cs</CODEGEN_FILENAME>
<REQUIRES_USERTOKEN>XFNL_NAMESPACE</REQUIRES_USERTOKEN>
;//****************************************************************************
;//
;// Title:       cs_annotated_class.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: This template generates a C# class which wraps a Synergy
;//              xfNetLink .NET data class, and adds various "data annotation"
;//              attributes (see System.ComponentModel.DataAnnotations).
;//
;// Date:        12th August 2010
;//
;// Author:      Steve Ives, Synergex Professional Services Group
;//              http://www.synergex.com
;//
;//****************************************************************************
;//
;// Copyright (c) 2012, Synergex International, Inc.
;// All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
//*****************************************************************************
//
// Title:       <Structure_name>.cs
//
// Author:      <AUTHOR>
//
// Company:     <COMPANY>
//
//*****************************************************************************
//
// WARNING:     This code was generated by CodeGen. Any changes that you make
//              to this file will be lost if the code is regenerated.
//
//*****************************************************************************
//
using System;
using System.ComponentModel.DataAnnotations;

namespace <NAMESPACE>
{
    public class <Structure_name>
    {
        //Private data
        private <XFNL_NAMESPACE>.<Structure_name> synObj;

        //Constructors

        public <Structure_name>()
        {
            synObj = new <XFNL_NAMESPACE>.<Structure_name>();
        }

        public <Structure_name>(<XFNL_NAMESPACE>.<Structure_name> SynObj)
        {
            synObj = SynObj;
        }

        //Expose the wrapped xfNetLink object

        public <XFNL_NAMESPACE>.<Structure_name> SynObj
        {
            get { return synObj; }
            set {synObj = value; }
        }

        //Expose the individual fields, with annotations

        <FIELD_LOOP>
        //<FIELD_DESC>
        [Display(Name="<Field_sqlname>",ShortName="<FIELD_PROMPT>",Prompt="<FIELD_PROMPT>",Description="<FIELD_DESC>")]
        <IF ALPHA>
        [StringLength(<FIELD_SIZE>,ErrorMessage="<FIELD_DESC> cannot exceed <FIELD_SIZE> characters.")]
        </IF>
        <IF DECIMAL>
        [Range(1,<FIELD_MAXVALUE>, ErrorMessage = "Value for {0} must be between {1} and {2}.")]
        </IF>
        <IF REQUIRED>
        [Required(ErrorMessage="<FIELD_DESC> is required.")]
        </IF>
        <IF READONLY>
        [Editable(false)]
        </IF>
        public <FIELD_CSTYPE> <Field_sqlname>
        {
            get { return synObj.<Field_sqlname>; }
            set { synObj.<Field_sqlname> = value; }
        }

        </FIELD_LOOP>
    }
}

