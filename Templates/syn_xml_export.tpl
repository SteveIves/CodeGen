<CODEGEN_FILENAME><structure_name>_xml_export.dbl</CODEGEN_FILENAME>
<PROCESS_TEMPLATE>syn_xml_elem.tpl</PROCESS_TEMPLATE>
;//****************************************************************************
;//
;// Title:       syn_xml_export.dbl
;//
;// Type         CodeGen Template
;//
;// Description: This template generates a Synergy function which creates an
;//              XML file containing all of the records in a file.
;//
;// Date:        19th March 2007
;//
;// Author:      Steve Ives, Synergex Professional Services Group
;//              http://www.synergex.com
;//
;//****************************************************************************
;//
;// Copyright (c) 2012, Synergex International, Inc.
;// All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; Routine:     <structure_name>_xml_export
;;
;; Author:      <AUTHOR>
;;
;; Company:     <COMPANY>
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen. Any changes that you make
;;              to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************
;;

.include "<STRUCTURE_NOALIAS>" repository, structure="str<Structure_Name>", end

function <structure_name>_xml_export ,^val

    optional in  a_xml_file ,a
    optional out a_errtxt   ,a
    endparams

    .include "DBLDIR:synxml.def"

    stack record localData
        error           ,i4
        chn             ,i4
        xml_doc         ,XML_DOC_TYPE
        root_elem       ,XML_ELEM_TYPE
        xml_file        ,a256
        <structure_name>        ,str<Structure_Name>
    endrecord

proc

    init localData

    if (^passed(a_xml_file) && a_xml_file) then
        xml_file = a_xml_file
    else
        xml_file = "<structure_name>.xml"

    if (^passed(a_errtxt))
        clear a_errtxt

    onerror nofile
    begin
        using "<FILE_TYPE>" select
        ("DBL ISAM"),
            open(chn=%syn_freechn,i:i,"<FILE_NAME>")
        ("RELATIVE"),
            open(chn=%syn_freechn,i:r,"<FILE_NAME>")
        ("ASCII"),
            open(chn=%syn_freechn,i:s,"<FILE_NAME>")
        endusing
        exit
nofile, error=1
        if (^passed(a_errtxt))
            a_errtxt = "Failed to open file <FILE_NAME>"
    end
    offerror

    if (!error)
    begin
        find(chn,,^FIRST) [ERR=norec]
        exit
norec,  error=2
        if (^passed(a_errtxt))
            a_errtxt = "File <FILE_NAME> contains no records"
    end

    if (!error)
    begin
        xml_doc = %xml_doc_create

        root_elem = %xml_doc_getroot(xml_doc)
        xcall xml_elem_setname(root_elem,"<STRUCTURE_NAME>_COLLECTION")

        repeat
        begin
            reads(chn,<structure_name>,eof)
            xcall xml_elem_addchild(root_elem,%<structure_name>_xml_elem(<structure_name>))
        end

eof,
        xcall xml_doc_tofile(xml_doc,xml_file)
        xcall xml_doc_delete(xml_doc)

    end

    if (chn)
        close chn

    freturn error

endfunction

