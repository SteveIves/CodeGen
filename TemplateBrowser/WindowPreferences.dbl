;;*****************************************************************************
;;
;; Title:       WindowPreferences.dbl
;;
;; Type:        Class
;;
;; Description: Represents the size, position and state of the main window.
;;
;; Date:        30th July 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Windows

namespace TemplateBrowser
	
	public class WindowPreferences
		
		public method WindowPreferences
			endparams
		proc
			;;Load the settings
			load()
			
			;;Size it to fit the current screen
			sizeToFit()
			
			;;Move the window at least partially into view
			moveIntoView()

		endmethod
		
		private method load, void
		proc
			Top = Properties.Settings.Default.WindowTop
			Left = Properties.Settings.Default.WindowLeft
			Height = Properties.Settings.Default.WindowHeight
			Width = Properties.Settings.Default.WindowWidth
			State = Properties.Settings.Default.WindowState
		endmethod
		
		public method Save, void
		proc
			if (State!=WindowState.Minimized)
			begin
				Properties.Settings.Default.WindowTop = this.Top
				Properties.Settings.Default.WindowLeft = this.Left
				Properties.Settings.Default.WindowHeight = this.Height
				Properties.Settings.Default.WindowWidth = this.Width
				Properties.Settings.Default.WindowState = this.State
				Properties.Settings.Default.Save()
			end
		endmethod
		
		private method sizeToFit, void
		proc
			if (Height > System.Windows.SystemParameters.VirtualScreenHeight)
				Height = System.Windows.SystemParameters.VirtualScreenHeight

			if (Width > System.Windows.SystemParameters.VirtualScreenWidth)
				Width = System.Windows.SystemParameters.VirtualScreenWidth

		endmethod
		
		private method moveIntoView, void
		proc
			if (Top + Height / 2 > System.Windows.SystemParameters.VirtualScreenHeight)
				Top = System.Windows.SystemParameters.VirtualScreenHeight - Height
			
			if (Left + Width / 2 > System.Windows.SystemParameters.VirtualScreenWidth)
				Left = System.Windows.SystemParameters.VirtualScreenWidth - Width
			
			if (Top < 0)
				Top = 0
			
			if (Left < 0)
				Left = 0
			
		endmethod
		
		private mTop, double

		public property Top, double
			method get
			proc
				mreturn mTop
			endmethod
			method set
			proc
				mTop = value
			endmethod
		endproperty
		
		private mLeft, double

		public property Left, double
			method get
			proc
				mreturn mLeft
			endmethod
			method set
			proc
				mLeft = value
			endmethod
		endproperty
		
		private mHeight, double

		public property Height, double
			method get
			proc
				mreturn mHeight
			endmethod
			method set
			proc
				mHeight = value
			endmethod
		endproperty
		
		private mWidth, double

		public property Width, double
			method get
			proc
				mreturn mWidth
			endmethod
			method set
			proc
				mWidth = value
			endmethod
		endproperty
		
		private mState, WindowState

		public property State, WindowState
			method get
			proc
				mreturn mState
			endmethod
			method set
			proc
				mState = value
			endmethod
		endproperty
		
		
	endclass
	
endnamespace
