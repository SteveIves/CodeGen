<CODEGEN_FILENAME>DatabaseRoutinesTest.dbl</CODEGEN_FILENAME>
;//****************************************************************************
;//
;// Title:       DatabaseRoutinesTest.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Template to a program that can be used to test code generated
;//              by the various other DatabaseRoutines*.tpl templates.
;//
;// Date:        12th March 2008
;//
;// Author:      Steve Ives, Synergex Professional Services Group
;//              http://www.synergex.com
;//
;//****************************************************************************
;//
;// Copyright (c) 2012, Synergex International, Inc.
;// All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; Title:       DatabaseRoutinesTest.dbl
;;
;; Type:        Program
;;
;; Description: A Synergy program which connects to a SQL Server relational
;;              database. The program is intended to be used as a test platform
;;              for routines generated from the DatabaseRoutines* templates.
;;
;; Author:      <AUTHOR>
;;
;; Company:     <COMPANY>
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen. Any changes that you make
;;              to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************
;;
main DatabaseRoutinesTest

    .define DB_CONSTR "VTX12_SQLNATIVE://DataBaseName/.\\SQLEXPRESS///Trusted_connection=yes"

    .include "CONNECTDIR:ssql.def"

    record
        ok          ,boolean, true  ;;OK to continue?
        dbinit      ,boolean        ;;Is the database channel initialized?
        tt          ,int            ;;Terminal channel
        dbchn       ,int            ;;Database channel to use
        dbcursor    ,int            ;;A database cursor
        rowcount    ,int            ;;Rows to load / loaded
        failrows    ,int            ;;Rows that failed to insert
        errtxt      ,a512           ;;Error text
    endrecord

proc

    ;;Open the terminal
    open(tt=%syn_freechn,i,"tt:")
    xcall flags(7004020,1)

    ;;Initialize SQL Connection
    .ifdef OS_VMS
    xcall init_ssql
    .else
    begin
        data sts, int
        sts=%option(48,1)
    end
    .endc

    ;;Initialize a database channel
    if (%ssc_init(dbchn=1)==SSQL_NORMAL) then
    begin
        dbinit = true
        writes(tt,"Database channel initialized")
    end
    else
    begin
        ok = false
        writes(tt,"Failed to initialize database channel!")
    end

    ;;Connect to the database
    if (ok)
    begin
        if (%ssc_connect(dbchn,DB_CONSTR)==SSQL_NORMAL) then
            writes(tt,"Connected to database")
        else
        begin
            data len, int
            ok = false
            xcall ssc_getemsg(dbchn,errtxt,len)
            writes(tt,"Failed to connect to database!")
            writes(tt,"Connect string was " + DB_CONSTR)
            writes(tt,"Error was: " + errtxt(1:len))
        end
    end

    ;;-------------------------------------------------------------------------
    ;;If the ok variable is true, then we are connected to the database
    if (ok)
    begin
        writes(tt,"Ready to do some work!")

        ;Add code to interact with the database here.  The database channel is
        ;referenced by the variable dbchn.

;       writes(tt,"Checking for table ??? ... ")
;       if (%???Exists(dbchn,errtxt))
;       begin
;           writes(tt,"Deleting table ??? ... ")
;           if (!???Drop(dbchn,errtxt))
;           begin
;               writes(tt,%atrim(errtxt))
;               clear ok
;           end
;       end
;       if (ok)
;       begin
;           writes(tt,"Creating table ??? ... ")
;           if (!???Create(dbchn,errtxt))
;           begin
;               writes(tt,%atrim(errtxt))
;               clear ok
;           end
;       end
;
;       if (ok)
;       begin
;           writes(tt,"Loading table ??? ... ")
;           ;;Don't pass rowcount (or set it to 0) to load the full file!
;           rowcount = 100
;           if (%???Load(dbchn,errtxt,true,tt,rowcount,failrows)) then
;               writes(tt,string(rowcount) + " rows loaded, "+string(failrows)+" failed")
;           else
;           begin
;               writes(tt,%atrim(errtxt))
;               clear ok
;           end
;       end

    end

    ;;-------------------------------------------------------------------------
    ;; Disconnect from the database
    if (dbinit)
    begin
        if (%ssc_release(dbchn)==SSQL_FAILURE)
        begin
            data len, int
            ok = false
            writes(tt,"Failed to release database channel!")
            if (%ssc_getemsg(dbchn,errtxt,len)==SSQL_NORMAL)
                writes(tt,errtxt(1:len))
        end
    end

    ;;Close the terminal
    close tt
    sleep 2
    stop

endmain

;;*****************************************************************************
;;
;;Does a string contain a numeric value?
;;
function IsNumeric, ^val

    a_number        ,a
    endparams

    .align
    stack record
        retval          ,boolean
        posn            ,i4
        number          ,d28.10
    endrecord

proc

    retval = true

    posn = ^size(a_number)

    ;;Is the last character between "p" and "y"
    if((a_number(posn:1)>='p')&&(a_number(posn:1)<='y')) then
    begin
        ;;If it's the first character then it's a single-digit negative
        if(posn==1)
            exit
        ;;Make sure the rest of the value looks OK
        try
        begin
            number=a_number(1:posn-1)
        end
        catch (ex, @BadDigitException)
        begin
            retval = false
        end
        endtry
    end
    else
    begin
        ;;No "p" through "y", check the whole value
        try
        begin
            number = a_number
        end
        catch (ex, @BadDigitException)
        begin
            retval = false
        end
        endtry
    end

    freturn retval

endfunction

;;*****************************************************************************
;;
;;Does a d8 date field contain a valid date?
;;
function IsDate, boolean
    required in argDate, d8
    endparams
proc
    try
    begin
        data jp, int
        jp = %jperiod(argDate)
        freturn true
    end
    catch (ex)
    begin
        freturn false
    end
    endtry
endfunction

