;;*****************************************************************************
;;
;; Title:       GenericTokenTests.dbl
;;
;; Type:        Unit test class
;;
;; Description: Unit tests for CodeGenEngine.ExpandToken()
;;
;; Date:        28th November 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.VisualStudio.TestTools.UnitTesting
import System

.include "CODEGEN_SRC:codegen.def"

namespace CodeGen.UnitTests
	
	{TestClass}
	public class GenericTokenTests
		
		private mMsg	,String
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_Author, void
			endparams
		proc
			Assert.IsTrue(doTest("<AUTHOR>",CODEGEN_APPNAME+" "+CODEGEN_VERSION),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_CodeGenVersion, void
			endparams
		proc
			Assert.IsTrue(doTest("<CODEGEN_VERSION>",CODEGEN_APPNAME+" "+CODEGEN_VERSION),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_Company, void
			endparams
		proc
			Assert.IsTrue(doTest("<COMPANY>","Synergex"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_Date, void
			endparams
		proc
			data today = String.Format("{0:D2}/{1:D2}/{2:D4}",DateTime.Now.Month,DateTime.Now.Day,DateTime.Now.Year)
			Assert.IsTrue(doTest("<DATE>",today),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_Date1, void
			endparams
		proc
			data today = String.Format("{0:D2}/{1:D2}/{2:D4}",DateTime.Now.Day,DateTime.Now.Month,DateTime.Now.Year)
			Assert.IsTrue(doTest("<DATE1>",today),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_Year, void
			endparams
		proc
			Assert.IsTrue(doTest("<YEAR>",DateTime.Now.Year.ToString()),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_Month, void
			endparams
		proc
			Assert.IsTrue(doTest("<MONTH>",DateTime.Now.Month.ToString("D2")),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_MonthName, void
			endparams
		proc
			Assert.IsTrue(doTest("<MONTHNAME>",DateTime.Now.ToString("MMMM")),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_MonthShortName, void
			endparams
		proc
			Assert.IsTrue(doTest("<MONTHSHORTNAME>",DateTime.Now.ToString("MMM")),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_Day, void
			endparams
		proc
			Assert.IsTrue(doTest("<DAY>",DateTime.Now.Day.ToString("D2")),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_WeekDay, void
			endparams
		proc
			Assert.IsTrue(doTest("<WEEKDAY>",DateTime.Now.DayOfWeek.ToString()),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_DisplayField, void
			endparams
		proc
			;TODO: Suspect not working because we haven't run the structure through CheckStructure
			Assert.IsTrue(doTest("<DISPLAY_FIELD>","FIELD002"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_StructureFields, void
			endparams
		proc
			Assert.IsTrue(doTest("<STRUCTURE_FIELDS>",TestEnv.Structure.Fields.Count.ToString()),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_FileAddressing, void
			endparams
		proc
			Assert.IsTrue(doTest("<FILE_ADDRESSING>","40"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_FileCompression, void
			endparams
		proc
			Assert.IsTrue(doTest("<FILE_COMPRESSION>","YES"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_FileDesc, void
			endparams
		proc
			Assert.IsTrue(doTest("<FILE_DESC>","Unit test file definition"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_FileDensity, void
			endparams
		proc
			Assert.IsTrue(doTest("<FILE_DENSITY>","75"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_FileName, void
			endparams
		proc
			Assert.IsTrue(doTest("<FILE_NAME>","DAT:myfile.ism"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_FileNameNoExt, void
			endparams
		proc
			Assert.IsTrue(doTest("<FILE_NAME_NOEXT>","DAT:myfile"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_FilePageSize, void
			endparams
		proc
			Assert.IsTrue(doTest("<FILE_PAGESIZE>","4096"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_FileRecType, void
			endparams
		proc
			Assert.IsTrue(doTest("<FILE_RECTYPE>","FIXED"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_FileStaticRfa, void
			endparams
		proc
			Assert.IsTrue(doTest("<FILE_STATIC_RFA>","YES"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_FileType, void
			endparams
		proc
			Assert.IsTrue(doTest("<FILE_TYPE>","DBL ISAM"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_FileUserText, void
			endparams
		proc
			Assert.IsTrue(doTest("<FILE_UTEXT>","This is FILE User Text!!!"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_MappedFile, void
			endparams
		proc
			Assert.IsTrue(doTest("<MAPPED_FILE>",""),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_MappedStructure, void
			endparams
		proc
			Assert.IsTrue(doTest("<MAPPED_STRUCTURE>","OTHER_STRUCTURE"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_NameSpace, void
			endparams
		proc
			CodeGen.Engine.Env.DefaultNamespace = "CodeGen.UnitTests"
			Assert.IsTrue(doTest("<NAMESPACE>",CodeGen.Engine.Env.DefaultNamespace),mMsg)
			CodeGen.Engine.Env.DefaultNamespace = ""
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_PrimaryKeyField, void
			endparams
		proc
			Assert.IsTrue(doTest("<PRIMARY_KEY_FIELD>","FIELD001"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_DataFieldsList, void
			endparams
		proc
			Assert.IsTrue(doTest("<DATA_FIELDS_LIST>","FIELD002,FIELD003,FIELD004,FIELD005,FIELD006,FIELD007,FIELD008,FIELD009,FIELD010,FIELD011,FIELD012[1],FIELD012[2],FIELD013[1,1],FIELD013[1,2],FIELD013[2,1],FIELD013[2,2],FIELD014[1,1,1],FIELD014[1,1,2],FIELD014[1,2,1],FIELD014[1,2,2],FIELD014[2,1,1],FIELD014[2,1,2],FIELD014[2,2,1],FIELD014[2,2,2],FIELD015[1,1,1,1],FIELD015[1,1,1,2],FIELD015[1,1,2,1],FIELD015[1,1,2,2],FIELD015[1,2,1,1],FIELD015[1,2,1,2],FIELD015[1,2,2,1],FIELD015[1,2,2,2],FIELD015[2,1,1,1],FIELD015[2,1,1,2],FIELD015[2,1,2,1],FIELD015[2,1,2,2],FIELD015[2,2,1,1],FIELD015[2,2,1,2],FIELD015[2,2,2,1],FIELD015[2,2,2,2],FIELD016.F16_GF1,FIELD016.F16_GF2,FIELD017[1].GF1,FIELD017[1].GF2,FIELD017[2].GF1,FIELD017[2].GF2"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_StructureName, void
			endparams
		proc
			Assert.IsTrue(doTest("<STRUCTURE_NAME>","UNIT_TEST"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_StructureNoAlias, void
			endparams
		proc
			Assert.IsTrue(doTest("<STRUCTURE_NOALIAS>","UNIT_TEST"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_StructureChildren, void
			endparams
		proc
			Assert.IsTrue(doTest("<STRUCTURE_CHILDREN>","17"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_StructureDesc, void
			endparams
		proc
			Assert.IsTrue(doTest("<STRUCTURE_DESC>","Structure used with CodeGen unit tests"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_StructureKeys, void
			endparams
		proc
			Assert.IsTrue(doTest("<STRUCTURE_KEYS>",TestEnv.Structure.Keys.Count.ToString()),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_StructureLongDesc, void
			endparams
		proc
			Assert.IsTrue(doTest("<STRUCTURE_LDESC>","@MAP=OTHER_STRUCTURE;"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_StructureSize, void
			endparams
		proc
			Assert.IsTrue(doTest("<STRUCTURE_SIZE>",TestEnv.Structure.Length.ToString()),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_StructureUserText, void
			endparams
		proc
			Assert.IsTrue(doTest("<STRUCTURE_UTEXT>","This is user text for the UNIT_TEST structure!"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_Template, void
			endparams
		proc
			CodeGen.Engine.Env.CurrentTemplate = "THE_TEMPLATE"
			Assert.IsTrue(doTest("<TEMPLATE>",CodeGen.Engine.Env.CurrentTemplate),mMsg)
			CodeGen.Engine.Env.CurrentTemplate = ""
		endmethod

		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_Time, void
			endparams
		proc
			Assert.IsTrue(doTest("<TIME>",String.Format("{0:D2}:{1:D2}",DateTime.Now.Hour,DateTime.Now.Minute)),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_WindowHeight, void
			endparams
		proc
			Assert.IsTrue(doTest("<WINDOW_HEIGHT>","20"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_WindowHeightPx, void
			endparams
		proc
			Assert.IsTrue(doTest("<WINDOW_HEIGHTPX>",string(CodeGen.Engine.Env.WindowHeight*CodeGen.Engine.Env.CharacterHeight)),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_WindowName, void
			endparams
		proc
			Assert.IsTrue(doTest("<WINDOW_NAME>","UNIT_TEST"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_WindowWidth, void
			endparams
		proc
			Assert.IsTrue(doTest("<WINDOW_WIDTH>",CodeGen.Engine.Env.WindowWidth.ToString()),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_WindowWidthPx, void
			endparams
		proc
			Assert.IsTrue(doTest("<WINDOW_WIDTHPX>",string(CodeGen.Engine.Env.WindowWidth*CodeGen.Engine.Env.CharacterWidth)),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Generic Token Tests")}
		public method GenericToken_FieldPrefix, void
			endparams
		proc
			CodeGen.Engine.Env.ClFieldPrefix = "thePrefix"
			CodeGen.Engine.Env.ClDoFieldPrefix = true
			Assert.IsTrue(doTest("<FIELD_PREFIX>","thePrefix"),mMsg)
			CodeGen.Engine.Env.ClDoFieldPrefix = false
			CodeGen.Engine.Env.ClFieldPrefix = ""
		endmethod

		
.region "Support methods"

		private method doTest, Boolean
			required in  inBuffer	,String
			required in  expBuffer	,String
			endparams
		proc
			data ok				,Boolean
			data mainBuffer		,a32768	,inBuffer
			data expectedResult	,a32768	,expBuffer
			data tokenStart		,int	,instr(1,mainBuffer,"<") 
			data tokenEnd		,int	,instr(tokenStart,mainBuffer,">")
			data errStatus		,int	,0
			
			mMsg = "PROCESSING: " + atrim(mainBuffer) + " EXPECTED: " + atrim(expectedResult)
			
			if (ok=CodeGen.Engine.ExpandToken(TestEnv.Structure,tokenStart,tokenEnd,mainBuffer,errStatus))
			begin
				if (instr(1,mainBuffer,"~~~ REMOVE THIS RECORD ~~~"))
					mainBuffer = mainBuffer - "~~~ REMOVE THIS RECORD ~~~"
				ok = (mainBuffer.eqs.expectedResult)
			end
			
			if (!ok)
				mMsg = mMsg + " ACTUAL: " + atrim(mainBuffer)
			
			mreturn ok
			
		endmethod
		
.endregion

	endclass
	
endnamespace