;;*****************************************************************************
;;
;; Title:       FileTokenTests.dbl
;;
;; Type:        Unit test class
;;
;; Description: Unit tests for CodeGenEngine.ExpandFileToken()
;;
;; Date:        28th November 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.VisualStudio.TestTools.UnitTesting
import System

.include "CODEGEN_SRC:codegen.def"

namespace CodeGen.UnitTests
	
	{TestClass}
	public class FileTokenTests
		
		private mMsg	,String
		
		{TestMethod}
		{TestCategory("File Loop Token Tests")}
		public method FileToken_Addressing, void
			endparams
		proc
			Assert.IsTrue(doTest("<FLOOP_ADDRESSING>","40"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("File Loop Token Tests")}
		public method FileToken_Compression, void
			endparams
		proc
			Assert.IsTrue(doTest("<FLOOP_COMPRESSION>","YES"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("File Loop Token Tests")}
		public method FileToken_Description, void
			endparams
		proc
			Assert.IsTrue(doTest("<FLOOP_DESC>","Unit test file definition"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("File Loop Token Tests")}
		public method FileToken_Density, void
			endparams
		proc
			Assert.IsTrue(doTest("<FLOOP_DENSITY>","75"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("File Loop Token Tests")}
		public method FileToken_FileName, void
			endparams
		proc
			Assert.IsTrue(doTest("<FLOOP_NAME>","DAT:myfile.ism"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("File Loop Token Tests")}
		public method FileToken_FileNameNoExt, void
			endparams
		proc
			Assert.IsTrue(doTest("<FLOOP_NAME_NOEXT>","DAT:myfile"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("File Loop Token Tests")}
		public method FileToken_PageSize, void
			endparams
		proc
			Assert.IsTrue(doTest("<FLOOP_PAGESIZE>","4096"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("File Loop Token Tests")}
		public method FileToken_RecordType, void
			endparams
		proc
			Assert.IsTrue(doTest("<FLOOP_RECTYPE>","FIXED"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("File Loop Token Tests")}
		public method FileToken_StaticRfa, void
			endparams
		proc
			Assert.IsTrue(doTest("<FLOOP_STATIC_RFA>","YES"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("File Loop Token Tests")}
		public method FileToken_FileType, void
			endparams
		proc
			Assert.IsTrue(doTest("<FLOOP_TYPE>","DBL ISAM"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("File Loop Token Tests")}
		public method FileToken_UserText, void
			endparams
		proc
			Assert.IsTrue(doTest("<FLOOP_UTEXT>","This is FILE User Text!!!"),mMsg)
		endmethod
		
.region "Support methods"
		
		private method doTest, Boolean
			required in  inBuffer	,String
			required in  expBuffer	,String
			endparams
		proc
			data ok				,Boolean
			data mainBuffer		,a32768	,inBuffer
			data expectedResult	,a32768	,expBuffer
			data tokenStart		,int	,instr(1,mainBuffer,"<") 
			data tokenEnd		,int	,instr(tokenStart,mainBuffer,">")
			data errStatus		,int	,0
			
			mMsg = "PROCESSING: " + atrim(mainBuffer) + " EXPECTED: " + atrim(expectedResult)
			
			if (ok=CodeGen.Engine.ExpandFileToken(TestEnv.Structure,TestEnv.FirstFile,1,tokenStart,tokenEnd,false,mainBuffer,errStatus))
			begin
				if (instr(1,mainBuffer,"~~~ REMOVE THIS RECORD ~~~"))
					mainBuffer = mainBuffer - "~~~ REMOVE THIS RECORD ~~~"
				ok = (mainBuffer.eqs.expectedResult)
			end
			
			if (!ok)
				mMsg = mMsg + " ACTUAL: " + atrim(mainBuffer)
			
			mreturn ok
			
		endmethod
		
.endregion
		
	endclass
	
endnamespace