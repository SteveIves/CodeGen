;;*****************************************************************************
;;
;; Title:       SegmentTokenTests.dbl
;;
;; Type:        Unit test class
;;
;; Description: Unit tests for CodeGenEngine.ExpandSegmentToken()
;;
;; Date:        29th November 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.VisualStudio.TestTools.UnitTesting
import System

namespace CodeGen.UnitTests
	
	{TestClass}
	public class SegmentTokenTests
		
		private mMsg			,String
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_CsType, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_CSTYPE>","string"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_Desc, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_DESC>","Field one is an A1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_Kind, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_KIND>","1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_Length, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_LENGTH>","1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_Litval, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_LITVAL>",""),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_Name, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_NAME>","FIELD001"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_MappedName, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_MAPPEDNAME>","OTHER_FIELD"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_Number, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_NUMBER>","1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_Order, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_ORDER>","ASC"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_Position, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_POSITION>","1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_Sequence, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_SEQUENCE>","ASCENDING"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_Spec, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_SPEC>","A1"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_Structure, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_STRUCTURE>",""),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_Type, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_TYPE>","ALPHA"),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Key Segment Loop Token Tests")}
		public method SegmentToken_VbType, void
			endparams
		proc
			Assert.IsTrue(doTest(TestEnv.KeyZeroSegOne,0,TestEnv.KeyZeroSegOneFld,true,"<SEGMENT_VBTYPE>","String"),mMsg)
		endmethod
		
.region "Support methods"
		
		private method doTest, Boolean
			required in theSeg			,@CodeGen.RepositoryAPI.RpsKeySegment
			required in segNbr			,int
			required in theFld			,@CodeGen.RepositoryAPI.RpsField
			required in isLastSegment	,Boolean
			required in inBuffer		,String
			required in expBuffer		,String
			endparams
		proc
			data ok				,Boolean
			data mainBuffer		,a32768	,inBuffer
			data expectedResult	,a32768	,expBuffer
			data tokenStart		,int	,instr(1,mainBuffer,"<") 
			data tokenEnd		,int	,instr(tokenStart,mainBuffer,">")

			mMsg = "PROCESSING: " + atrim(mainBuffer) + " EXPECTED: " + atrim(expectedResult)
			
			if (ok=CodeGen.Engine.ExpandSegmentToken(theSeg,segNbr,theFld,tokenStart,tokenEnd,isLastSegment,false,mainBuffer))
			begin
				if (instr(1,mainBuffer,"~~~ REMOVE THIS RECORD ~~~"))
					mainBuffer = mainBuffer - "~~~ REMOVE THIS RECORD ~~~"
				ok = (mainBuffer.eqs.expectedResult)
			end
			
			if (!ok)
				mMsg = mMsg + " ACTUAL: " + atrim(mainBuffer)
			
			mreturn ok
			
		endmethod
		
.endregion
		
	endclass
	
endnamespace