;;*****************************************************************************
;;
;; Title:       ExpandFileToken.dbl
;;
;; Type:        Function
;;
;; Description: Expands file loop tokens
;;
;; Date:        1st June 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine
	
	function ExpandFileToken        ,boolean
		required in    Str          ,@RpsStructure  ;;Current structure
		required in    File         ,@RpsFile       ;;Current file
		required in    FileNbr      ,int            ;;Current file number
		required in    TokenStart   ,int            ;;Start position of token in buffer
		required in    TokenEnd     ,int            ;;End position of token in buffer
		required in    OutputOff	,boolean        ;;Is output suppressed because of an expression
		required inout buffer       ,a              ;;Buffer containing the token to be expanded
		required inout ErrStatus    ,int            ;;Error status (set to 1 to abort processing)
		endparams
		
		.include "CODEGEN_SRC:codegen.def"
		
		stack record
			ReplacedToken   ,boolean
		endrecord
		
	proc
		
		ReplacedToken = false
		
		using buffer(TokenStart,TokenEnd) select
		
		("<,>"),
		begin
			data tmpTxt, a1," "
			if (FileNbr<Str.Files.Count-1)
				tmpTxt=","
			ReplacedToken = ReplaceToken(buffer,"<,>",tmpTxt)
		end
		
		("<+>"),
		begin
			data tmpTxt, a1," "
			if (FileNbr<Str.Files.Count-1)
				tmpTxt="+"
			ReplacedToken = ReplaceToken(buffer,"<+>",tmpTxt)
		end
		
		("<:>"),
		begin
			data tmpTxt, a1," "
			if (FileNbr<Str.Files.Count-1)
				tmpTxt=":"
			ReplacedToken = ReplaceToken(buffer,"<:>",tmpTxt)
		end
		
		("<&&>"),
		begin
			data tmpTxt, a2,"  "
			if (FileNbr<Str.Files.Count-1)
				tmpTxt="&&"
			ReplacedToken = ReplaceToken(buffer,"<&&>",tmpTxt)
		end
		
		("<.AND.>"),
		begin
			data tmpTxt, a5,"     "
			if (FileNbr<Str.Files.Count-1)
				tmpTxt=".AND."
			ReplacedToken = ReplaceToken(buffer,"<.AND.>",tmpTxt)
		end
		
		("<AND>"),
		begin
			data tmpTxt, a3,"   "
			if (FileNbr<Str.Files.Count-1)
				tmpTxt="AND"
			ReplacedToken = ReplaceToken(buffer,"<AND>",tmpTxt)
		end
		
		("<||>"),
		begin
			data tmpTxt, a2,"  "
			if (FileNbr<Str.Files.Count-1)
				tmpTxt="||"
			ReplacedToken = ReplaceToken(buffer,"<||>",tmpTxt)
		end
		
		("<.OR.>"),
		begin
			data tmpTxt, a4,"    "
			if (FileNbr<Str.Files.Count-1)
				tmpTxt=".OR."
			ReplacedToken = ReplaceToken(buffer,"<.OR.>",tmpTxt)
		end
		
		("<OR>"),
		begin
			data tmpTxt, a2,"  "
			if (FileNbr<Str.Files.Count-1)
				tmpTxt="OR"
			ReplacedToken = ReplaceToken(buffer,"<OR>",tmpTxt)
		end
		
		("<FLOOP_ADDRESSING>"),
		begin
			using File.Addressing select
			(RpsFileAddressing.Addressing32Bit),
				ReplacedToken = ReplaceToken(buffer,"<FLOOP_ADDRESSING>","32")
			(RpsFileAddressing.Addressing40Bit),
				ReplacedToken = ReplaceToken(buffer,"<FLOOP_ADDRESSING>","40")
			endusing
		end
		
		.ifdef DBLV10
		("<FLOOP_CHANGE_TRACKING>","<floop_change_tracking>"),
		begin
			data tmpToken   ,a19
			data tmpValue   ,a3
			tmpToken = buffer(TokenStart,TokenEnd)
			using File.ChangeTracking select
			(true),
				tmpValue="YES"
			(false),
				tmpValue="NO"
			endusing
			if tmpToken=="<floop_change_tracking>"
				locase tmpValue
			ReplacedToken = ReplaceToken(buffer,tmpToken,tmpValue)
		end
		.endc

		("<FLOOP_COMPRESSION>","<floop_compression>"),
		begin
			data tmpToken   ,a19
			data tmpValue   ,a3
			tmpToken = buffer(TokenStart,TokenEnd)
			using File.RecordCompression select
			(true),
				tmpValue="YES"
			(false),
				tmpValue="NO"
			endusing
			if tmpToken=="<floop_compression>"
				locase tmpValue
			ReplacedToken = ReplaceToken(buffer,tmpToken,tmpValue)
		end
		
		("<FLOOP_DESC>"),
			ReplacedToken = ReplaceToken(buffer,"<FLOOP_DESC>",File.Description)
		
		("<FLOOP_DENSITY>"),
			ReplacedToken = ReplaceToken(buffer,"<FLOOP_DENSITY>",string(File.Density))
		
		("<FLOOP_NAME>"),
			ReplacedToken = ReplaceToken(buffer,"<FLOOP_NAME>",File.FileSpec)
		
		("<FLOOP_NAME_NOEXT>"),
		begin
			data tmpname, String
			data dotpos, int
			tmpname = File.FileSpec
			if (dotpos=%rvstr(1,tmpname,"."))
				tmpname = tmpname(1:dotpos-1)
			ReplacedToken = ReplaceToken(buffer,"<FLOOP_NAME_NOEXT>",atrim(tmpname))
		end
		
		("<FLOOP_PAGESIZE>"),
		begin
			using File.PageSize select
			(RpsFilePageSize.PageSize512),
				ReplacedToken = ReplaceToken(buffer,"<FLOOP_PAGESIZE>","512")
			(RpsFilePageSize.PageSize1024),
				ReplacedToken = ReplaceToken(buffer,"<FLOOP_PAGESIZE>","1024")
			(RpsFilePageSize.PageSize2048),
				ReplacedToken = ReplaceToken(buffer,"<FLOOP_PAGESIZE>","2048")
			(RpsFilePageSize.PageSize4096),
				ReplacedToken = ReplaceToken(buffer,"<FLOOP_PAGESIZE>","4096")
			(RpsFilePageSize.PageSize8192),
				ReplacedToken = ReplaceToken(buffer,"<FLOOP_PAGESIZE>","8192")
			.ifdef DBLV10
			(RpsFilePageSize.PageSize16384),
				ReplacedToken = ReplaceToken(buffer,"<FLOOP_PAGESIZE>","16384")
			(RpsFilePageSize.PageSize32768),
				ReplacedToken = ReplaceToken(buffer,"<FLOOP_PAGESIZE>","32768")
			.endc
			endusing
		end
		
		("<FLOOP_RECTYPE>","<floop_rectype>"),
		begin
			data tmptoken, a15
			data tmptype, a8
			tmptoken = buffer(TokenStart,TokenEnd)
			using File.RecordType select
			(RpsRecordType.FixedLength),
				tmptype="FIXED"
			(RpsRecordType.VariableLength),
				tmptype="VARIABLE"
			(RpsRecordType.MultipleFixedLength),
				tmptype="MULTIPLE"
			endusing
			if (tmptoken=="<floop_rectype>")
				locase tmptype
			ReplacedToken = ReplaceToken(buffer,tmptoken,tmptype)
		end
		
		("<FLOOP_STATIC_RFA>","<floop_static_rfa>"),
		begin
			data tmpToken   ,a18
			data tmpValue   ,a3
			tmpToken = buffer(TokenStart,TokenEnd)
			using File.StaticRfa select
			(true),
				tmpValue="YES"
			(false),
				tmpValue="NO"
			endusing
			if tmpToken=="<floop_static_rfa>"
				locase tmpValue
			ReplacedToken = ReplaceToken(buffer,tmpToken,tmpValue)
		end
		
		.ifdef DBLV10
		("<FLOOP_STORED_GRFA>","<floop_stored_grfa>"),
		begin
			data tmpToken   ,a19
			data tmpValue   ,a3
			tmpToken = buffer(TokenStart,TokenEnd)
			using File.StoredGRFA select
			(true),
				tmpValue="YES"
			(false),
				tmpValue="NO"
			endusing
			if tmpToken=="<floop_stored_grfa>"
				locase tmpValue
			ReplacedToken = ReplaceToken(buffer,tmpToken,tmpValue)
		end
		.endc

		("<FLOOP_TYPE>"),
			ReplacedToken = ReplaceToken(buffer,"<FLOOP_TYPE>",File.FileType)
		
		("<FLOOP_UTEXT>"),
			ReplacedToken = ReplaceToken(buffer,"<FLOOP_UTEXT>",File.UserText)

		("<COUNTER_"),
			ReplacedToken = ProcessCounters(buffer(TokenStart,TokenEnd),buffer,OutputOff)
		
		(),
		begin
			;;If we didn't match anything so far then lets see if we have any custom file loop token processors
			if (Env.CustomFileTokens.Count>0)
			begin
				;;We do have custom processors, look for a match
				data customToken, @CustomFileToken
				foreach customToken in Env.CustomFileTokens
				begin
					if (customToken.Token==buffer(TokenStart,TokenEnd))
					begin
						;;Found a match, expand the custom token
						ReplacedToken = customToken.Replace(Str,File,FileNbr,TokenStart,TokenEnd,OutputOff,buffer,ErrStatus)
						exitloop
					end
				end
			end
		end
		
		endusing
		
		if (ReplacedToken&&!buffer)
			buffer="~~~ REMOVE THIS RECORD ~~~"
		
		freturn ReplacedToken
		
	endfunction
	
endnamespace
