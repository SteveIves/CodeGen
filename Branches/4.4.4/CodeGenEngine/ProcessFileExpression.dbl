;;*****************************************************************************
;;
;; Title:       ProcessFileExpression.dbl
;;
;; Type:        Function
;;
;; Description: Processes file loop expressions
;;
;; Date:        1st June 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI
import System.Collections

namespace CodeGen.Engine
	
	function ProcessFileExpression              ,boolean
		
		required in    Str                      ,@RpsStructure
		required in    File                     ,@RpsFile
		required in    FileNbr                  ,int
		required in    TokenStart               ,int
		required in    TokenEnd                 ,int
		required inout Loop1ConditionMode       ,@ArrayList
		required inout Loop1ConditionApplies    ,@ArrayList
		required inout Loop1OutputOff           ,boolean
		required inout buffer                   ,a
		required inout ErrStatus                ,int
		endparams
		
		stack record
			result								,boolean
		endrecord

	proc
		
		Loop1ConditionMode.Add((@a)buffer(TokenStart+4,TokenEnd-1))
		Loop1ConditionApplies.Add((@boolean)false)

		result = false
		
		using ((a)Loop1ConditionMode[Loop1ConditionMode.Count-1]) select

		("ASCII "),
			if (File.FileType=="ASCII")
				result = true
		
		.ifdef DBLV10
		("CHANGE_TRACKING "),
			if (File.ChangeTracking)
				result = true
		.endc

		("DESCRIPTION "),
			if (File.Description)
				result = true

		("FIRST "),
			if (FileNbr == 0)
				result = true

		("ISAM "),
			if (File.FileType=="DBL ISAM")
				result = true

		.ifdef DBLV10
		("NOCHANGE_TRACKING "),
			if (!File.ChangeTracking)
				result = true
		.endc

		("NODESCRIPTION "),
			if (!File.Description)
				result = true
				
		("NORECORDCOMPRESSION "),
			if (!File.RecordCompression)
				result = true
		
		.ifdef DBLV10
		("NOSTORED_GRFA "),
			if (!File.StoredGRFA)
				result = true
		.endc
		
		("NOTASCII "),
			if (File.FileType!="ASCII")
				result = true
		
		("NOTISAM "),
			if (File.FileType!="DBL ISAM")
				result = true
		
		("NOTRECORDTYPEFIXED "),
			if (File.RecordType!=RpsRecordType.FixedLength)
				result = true
		
		("NOTRECORDTYPEMULTIPLE "),
			if (File.RecordType!=RpsRecordType.MultipleFixedLength)
				result = true

		("NOTRECORDTYPEVARIABLE "),
			if (File.RecordType!=RpsRecordType.VariableLength)
					result = true
		
		("NOTRELATIVE "),
			if (File.FileType!="RELATIVE")
				result = true
		
		("NOTSTATICRFA "),
			if (!File.StaticRfa)
				result = true

		("NOTTERABYTE "),
			if (File.Addressing==RpsFileAddressing.Addressing32Bit)
				result = true
		
		("NOTUSERDEFINED "),
			if (File.FileType!="USER DEFINED")
				result = true
		
		("NOUSERTEXT "),
			if (!File.UserText)
				result = true

		("PAGESIZE1024 "),
			if (File.PageSize==RpsFilePageSize.PageSize1024)
				result = true
		
			.ifdef DBLV10
		("PAGESIZE16384 "),
			if (File.PageSize==RpsFilePageSize.PageSize16384)
				result = true
			.endc
			
		("PAGESIZE2048 "),
			if (File.PageSize==RpsFilePageSize.PageSize2048)
				result = true
		
			.ifdef DBLV10
		("PAGESIZE32768 "),
			if (File.PageSize==RpsFilePageSize.PageSize32768)
				result = true
			.endc
		
		("PAGESIZE4096 "),
			if (File.PageSize==RpsFilePageSize.PageSize4096)
				result = true
				
		("PAGESIZE8192 "),
			if (File.PageSize==RpsFilePageSize.PageSize8192)
				result = true
				
		("PAGESIZE512 "),
			if (File.PageSize==RpsFilePageSize.PageSize512)
				result = true
				
		("RECORDCOMPRESSION "),
			if (File.RecordCompression)
				result = true
		
		("RECORDTYPEFIXED "),
			if (File.RecordType==RpsRecordType.FixedLength)
				result = true
		
		("RECORDTYPEMULTIPLE "),
			if (File.RecordType==RpsRecordType.MultipleFixedLength)
				result = true
		
		("RECORDTYPEVARIABLE "),
			if (File.RecordType==RpsRecordType.VariableLength)
				result = true
		
		("RELATIVE "),
			if (File.FileType=="RELATIVE")
				result = true
		
		("STATICRFA "),
			if (File.StaticRfa)
				result = true
		
		.ifdef DBLV10
		("STORED_GRFA "),
			if (File.StoredGRFA)
				result = true
		.endc
		
		("TERABYTE "),
			if (File.Addressing==RpsFileAddressing.Addressing40Bit)
				result = true

		("USERDEFINED "),
			if (File.FileType=="USER DEFINED")
				result = true
		
		("USERTEXT "),
			if (File.UserText)
				result = true
		
		("COUNTER_","NOT_COUNTER_"),
			result = ProcessCounterExpression(Loop1ConditionMode)
		
		;;Presence of a user token
		("USERTOKEN_"),
		begin
			data utName, string, buffer(TokenStart+4,TokenEnd-1) - "USERTOKEN_"
			data ut, @UserToken
			
			if (Env.UserTokens==^null)
				exit
				
.ifdef DBLNET
			foreach ut in Env.UserTokens
.else
			foreach ut in Env.UserTokens.GetEnumerator()
.endc
			begin
				if (ut.Name=="<"+utName+">")
				begin
					result = true
					exitloop
				end
			end
		end
		
		;;Absence of a user token
		("NOT_USERTOKEN_"),
		begin
			data utName, string, buffer(TokenStart+4,TokenEnd-1) - "NOT_USERTOKEN_"
			data ut, @UserToken
			data found, boolean, false
			
			if (Env.UserTokens==^null) then
			begin
				result = true
			end
			else
			begin
.ifdef DBLNET
				foreach ut in Env.UserTokens
.else
				foreach ut in Env.UserTokens.GetEnumerator()
.endc
				begin
					if (ut.Name=="<"+utName+">")
					begin
						found=true
						exitloop
					end
				end
				result = (!found)
			end
		end
		
		(),
		begin
			;;If we haven't evaluated an expression by the time we get here then the only
			;;remaining possibility is that there may be a custom expression extension
			data customExpressionProcessed, Boolean, false
			
			if (Env.CustomFileExpressions.Count>0)
			begin
				data customExpression, @CustomFileExpression
				foreach customExpression in Env.CustomFileExpressions
				begin
					if (customExpression.Expression.eqs.(a)Loop1ConditionMode[Loop1ConditionMode.Count-1])
					begin
						result = customExpression.Evaluate(Str,File,FileNbr)
						customExpressionProcessed = true
						exitloop
					end
				end
			end
			
			if (customExpressionProcessed)
				exit
				
			ErrorLog("Invalid file loop expression " + buffer(TokenStart,TokenEnd))
			ErrStatus = 1
		end
		
		endusing

		Loop1ConditionApplies[Loop1ConditionApplies.Count-1] = (@boolean)result

		if (ErrStatus) then
			freturn false
		else
			freturn ProcessExpression(TokenStart,TokenEnd,Loop1ConditionMode,Loop1ConditionApplies,Loop1OutputOff,false,buffer)
		
	endfunction
	
endnamespace
