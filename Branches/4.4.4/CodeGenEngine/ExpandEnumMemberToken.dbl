;;*****************************************************************************
;;
;; Title:       ExpandEnumMemberToken.dbl
;;
;; Type:        Function
;;
;; Description: Expands enum member loop tokens
;;
;; Date:        5th November 2009
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

    function ExpandEnumMemberToken      ,boolean
        required in    Enums            ,@RpsEnumCollection ;;Enumerations
        required in    EnumNbr          ,int                ;;Enumeration number
        required in    EnumMemberNbr    ,int                ;;Enumeration member number
        required in    TokenStart       ,int                ;;Start position of token in buffer
		required in    TokenEnd         ,int                ;;End position of token in buffer
		required in    OutputOff		,boolean			;;Is output currently suppressed?
		required inout buffer           ,a                  ;;Buffer containing token to be replaced
        endparams

        stack record
            ThisEnum        ,@RpsEnum
            ReplacedToken   ,boolean
        endrecord

    proc

        ReplacedToken = false

        ThisEnum = Enums[EnumNbr]

        using buffer(TokenStart,TokenEnd) select

        ("<,>"),
        begin
            if (EnumMemberNbr<ThisEnum.Members.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<,>",",")
            else
                ReplacedToken = ReplaceToken(buffer,"<,>","")
        end

        ("<+>"),
        begin
            if (EnumMemberNbr<ThisEnum.Members.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<+>","+")
            else
                ReplacedToken = ReplaceToken(buffer,"<+>","")
        end

        ("<:>"),
        begin
            if (EnumMemberNbr<ThisEnum.Members.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<:>",":")
            else
                ReplacedToken = ReplaceToken(buffer,"<:>","")
        end

        ("<&&>"),
        begin
            if (EnumMemberNbr<ThisEnum.Members.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<&&>","&&")
            else
                ReplacedToken = ReplaceToken(buffer,"<&&>","")
        end

        ("<.AND.>"),
        begin
            if (EnumMemberNbr<ThisEnum.Members.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<.AND.>",".AND.")
            else
                ReplacedToken = ReplaceToken(buffer,"<.AND.>","")
        end

        ("<AND>"),
        begin
            if (EnumMemberNbr<ThisEnum.Members.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<AND>","AND")
            else
                ReplacedToken = ReplaceToken(buffer,"<AND>","")
        end

        ("<||>"),
        begin
            if (EnumMemberNbr<ThisEnum.Members.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<||>","||")
            else
                ReplacedToken = ReplaceToken(buffer,"<||>","")
        end

        ("<.OR.>"),
        begin
            if (EnumMemberNbr<ThisEnum.Members.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<.OR.>",".OR.")
            else
                ReplacedToken = ReplaceToken(buffer,"<.OR.>","")
        end

        ("<OR>"),
        begin
            if (EnumMemberNbr<ThisEnum.Members.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<OR>","OR")
            else
                ReplacedToken = ReplaceToken(buffer,"<OR>","")
        end

        ("<ENUM_MEMBER_NAME>","<enum_member_name>","<Enum_Member_Name>","<Enum_member_name>","<EnumMemberName>","<enumMemberName>"),
        begin
            data EnumNameToken, a18
            data tmpname, a30
            EnumNameToken=buffer(TokenStart,TokenEnd)
            using EnumNameToken select
            ("<ENUM_MEMBER_NAME>"),
                tmpname=ThisEnum.Members[EnumMemberNbr].Name
            ("<enum_member_name>"),
				tmpname=StringTools.LowerCase(ThisEnum.Members[EnumMemberNbr].Name)
            ("<Enum_Member_Name>"),
				tmpname=StringTools.MixedCase(ThisEnum.Members[EnumMemberNbr].Name)
            ("<Enum_member_name>"),
				tmpname=StringTools.XfCase(ThisEnum.Members[EnumMemberNbr].Name)
            ("<EnumMemberName>"),
				tmpname=StringTools.PascalCase(ThisEnum.Members[EnumMemberNbr].Name)
            ("<enumMemberName>"),
                tmpname=StringTools.CamelCase(ThisEnum.Members[EnumMemberNbr].Name)
            endusing
            ReplacedToken = ReplaceToken(buffer,EnumNameToken,tmpname)
        end

        ("<ENUM_MEMBER_EXPLICIT_VALUE>"),
            ReplacedToken = ReplaceToken(buffer,"<ENUM_MEMBER_EXPLICIT_VALUE>",ThisEnum.Members[EnumMemberNbr].ExplicitValue)

        ("<ENUM_MEMBER_IMPLICIT_VALUE>"),
            ReplacedToken = ReplaceToken(buffer,"<ENUM_MEMBER_IMPLICIT_VALUE>",ThisEnum.Members[EnumMemberNbr].ImplicitValue)
		
		("<COUNTER_"),
			ReplacedToken = ProcessCounters(buffer(TokenStart,TokenEnd),buffer,OutputOff)
		
		(),
		begin
			;;If we didn't match anything so far then lets see if we have any custom enum member loop token processors
			if (Env.CustomEnumMemberTokens.Count>0)
			begin
				;;We do have custom processors, look for a match
				data customToken, @CustomEnumMemberToken
				foreach customToken in Env.CustomEnumMemberTokens
				begin
					if (customToken.Token==buffer(TokenStart,TokenEnd))
					begin
						;;Found a match, expand the custom token
						ReplacedToken = customToken.Replace(Enums,EnumNbr,EnumMemberNbr,TokenStart,TokenEnd,buffer)
						exitloop
					end
				end
			end
		end
		
        endusing

		if (ReplacedToken&&!buffer)
			buffer="~~~ REMOVE THIS RECORD ~~~"
		
		freturn ReplacedToken

    endfunction

endnamespace
