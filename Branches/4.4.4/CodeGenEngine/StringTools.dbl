;;*****************************************************************************
;;
;; Title:       StringTools.dbl
;;
;; Type:        Functions
;;
;; Description: Various string handling functions
;;
;; Date:        15th November 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

	public class StringTools

		;;; <summary>
		;;; Converts a string to camel case
		;;; </summary>
		;;; <param name="inString">String to be converted</param>
		;;; <returns>Converted string</returns>
		public static method CamelCase, a
			required in inString, a
			endparams
			stack record
				outString   ,a80
			endrecord
		proc
			outString = inString
			if (trimz(outString))
			begin
				data pos, int
				;;Start with the original string
				locase outString
				;;Remove any leading numeric characters and spaces
				repeat
				begin
					using outString(1:1) select
					("0" thru "9", " "),
						outString = outString(2,^size(outString))
					(),
						exitloop
					endusing
				end
				;;Uppercase any character which follows anything other than 0-9, A-Z, a-z
				pos=1
				while ((pos+=1)<=trim(outString))
				begin
					using outString(pos:1) select
					("0" thru "9", "A" thru "Z", "a" thru "z"),
						nop
					(),
						upcase outString(pos+1:1)
					endusing
				end
				;;Remove anything that is not 0-9, A-Z, a-z, [, ], (, ), @
				clear pos
				while ((pos+=1)<=trim(outString))
				begin
					using outString(pos:1) select
					("0" thru "9", "A" thru "Z", "a" thru "z", "[", "]", "(", ")", "@"),
						nop
					(),
					begin
						outString(pos,^size(outString)) = outString(pos+1,^size(outString))
						if (pos>0)
							pos-=1
					end
					endusing
				end
			end
			mreturn atrim(outString)
		endmethod

		;;; <summary>
		;;; Determines if a string contains a numeric value. Blanks are considered to be zero.
		;;; </summary>
		;;; <param name="inString">String to test</param>
		;;; <returns>True if the string contains a numeric value</returns>
		public static method IsNumeric, boolean
			required in inString, a
			endparams
			stack record
				numeric, boolean
			endrecord
		proc
			try
			begin
				data d28, d28
				d28 = atrim(inString)
				numeric = true
			end
			catch (e, @BadDigitException)
			begin
				numeric = false
			end
			endtry
			mreturn numeric
		endmethod
	
		public static method IsValidSynergyIdentifier, boolean
			required in name, a
			endparams
			stack record
				nameOk, boolean
				length, int
			endrecord
		proc
			nameOk = true

			;;Length must be between 1 and 30
			length = %trim(name)
			nameOk = ((length>0)&&(length<=30))
			
			;;First character must be alphabetic
			if (nameOk)
			begin
				using %decml(name(1:1)) select
				(65 thru 90, 97 thru 122),
					nop
				(),
					nameOk = false
				endusing
			end
			
			;;Subsequent characters must be alphabetic, numeric, $ or _
			if (nameOk&&(length>1))
			begin
				data pos, int
				for pos from 2 thru length
				begin
					using %decml(name(pos:1)) select
					(36, 48 thru 57, 65 thru 90, 97 thru 122, 95),
						nop
					(),
					begin
						nameOk = false
						exitloop
					end
					endusing
				end
			end

			mreturn nameOk
			
		endmethod

		;;; <summary>
		;;; Determines if a string contains only whitespace characters (speces and/or tabs)
		;;; </summary>
		;;; <param name="inString">String to test</param>
		;;; <returns>True if the string only contains whitespace characters</returns>
		public static method IsWhitespace, boolean
			required in inString, a
			endparams
			stack record
				ix          ,int
				whitespace  ,boolean
			endrecord
		proc
			whitespace = true
			for ix from 1 thru trimz(inString)
			begin
				using decml(inString(ix:1)) select
				(32,9), ;;Space or tab is OK
					nop
				(),     ;;Anything else is not
				begin
					whitespace = false
					exitloop
				end
				endusing
			end
			mreturn whitespace
		endmethod
		
		;;; <summary>
		;;; Converts a string to lower case
		;;; </summary>
		;;; <param name="inString">String to be converted</param>
		;;; <returns>Converted string</returns>
		public static method LowerCase, a
			required in inString, a
			endparams
			stack record
				outString, String
			endrecord
		proc
			outString = atrim(inString)
			mreturn (a)(outString.ToLower())
		endmethod
		
		;;; <summary>
		;;; Converts a string to mixed case
		;;; </summary>
		;;; <param name="inString">String to be converted</param>
		;;; <returns>Converted string</returns>
		public static method MixedCase, a
			required in inString, a
			endparams
			.include "CODEGEN_SRC:codegen.def"
			stack record
				len         ,i4
				outString   ,a CODEGEN_BUFSZ
			endrecord
		proc
			outString = inString
			if (len=trimz(outString))
			begin
				data pos, int
				locase outString
				;;Uppercase the first character
				if (outString(1:1)=="@") then
				begin
					if (trim(outString)>1)
						upcase outString(2:1)
				end
				else
					upcase outString(1:1)
				;;Uppercase anything after an "_"
				pos=1
				repeat
				begin
					pos=instr(pos,outString,"_")
					if (pos&&(pos<len)) then
						upcase outString(pos+=1:1)
					else
						exitloop
				end
				;;Uppercase anything after a "."
				pos=1
				repeat
				begin
					pos=instr(pos,outString,".")
					if (pos&&(pos<len)) then
						upcase outString(pos+=1:1)
					else
						exitloop
				end
			end
			mreturn atrim(outString)
		endmethod
		
		;;; <summary>
		;;; Extracts and returns a number which is delimited by the first
		;;; set of parentheses in a string.
		;;; </summary>
		;;; <param name="inString">String to test</param>
		;;; <returns>Number that was delimited by first set or parentheses, or zero.</returns>
		public static method NumberFromParens ,int
			required in inString, a
			endparams
			stack record
				startPos    ,int
				endPos      ,int
				intVal      ,int
			endrecord
		proc
			clear intVal
			if (startPos = instr(1,inString,"("))
			begin
				if (endPos = instr(startPos,inString,")"))
				begin
					if ((endPos-=1)>(startPos+=1))
					begin
						try
						begin
							intVal = integer(inString(startPos,endPos))
						end
						catch (e, @BadDigitException)
						begin
							nop
						end
						endtry
					end
				end
			end
			mreturn intVal
		endmethod
		
		;;; <summary>
		;;; Converts a string to pascal case
		;;; </summary>
		;;; <param name="inString">String to be converted</param>
		;;; <returns>Converted string</returns>
		public static method PascalCase, a
			required in inString, a
			endparams
			stack record
				outString, a80
			endrecord
		proc
			outString = inString
			if (trimz(outString))
			begin
				data pos, int
				;;Start with the original string
				locase outString
				;;Remove any leading numeric characters and spaces
				repeat
				begin
					using outString(1:1) select
					("0" thru "9", " "),
						outString = outString(2,^size(outString))
					(),
						exitloop
					endusing
				end
				;;Uppercase any character which follows anything other than 0-9, A-Z, a-z
				pos=1
				while ((pos+=1)<=trim(outString))
				begin
					using outString(pos:1) select
					("0" thru "9", "A" thru "Z", "a" thru "z"),
						nop
					(),
						upcase outString(pos+1:1)
					endusing
				end
				;;Remove anything that is not 0-9, A-Z, a-z, [, ], (, ), @
				clear pos
				while ((pos+=1)<=trim(outString))
				begin
					using outString(pos:1) select
					("0" thru "9", "A" thru "Z", "a" thru "z", "[", "]", "(", ")", "@"),
						nop
					(),
					begin
						outString(pos,^size(outString)) = outString(pos+1,^size(outString))
						if (pos>0)
							pos-=1
					end
					endusing
				end
				;;Uppercase the first character
				if (outstring(1:1)=="@") then
				begin
					if (trim(outString)>1)
						upcase outString(2:1)
				end
				else
					upcase outString(1:1)
			end
			mreturn atrim(outString)
		endmethod
		
		private enum QuoteType
			SingleQuote, 1
			DoubleQuote, 2
		endenum

		;;; <summary>
		;;; Extracts and returns the first quoted string from within a string.
		;;; The quoted string can be delimited by either single or double quotes.
		;;; If no quoted string is found then a blank string is returned.
		;;; </summary>
		;;; <param name="inString">String to test</param>
		;;; <returns>Content of first quoted string (not including the quotes) or blank.</returns>
		public static method QuotedString ,a
			required in inString, a
			endparams
			stack record local_data
				gotQuote    ,int
				thisPos     ,int
				startPos    ,int
				endPos      ,int
				QuoteMode   ,QuoteType
			endrecord
		proc
			init local_data
			for thisPos from 1 thru trim(inString)
			begin
				using inString(thisPos:1) select
				("'"),
				begin
					if (!gotQuote) then
					begin
						gotQuote = 1
						startPos = thisPos + 1
						QuoteMode = QuoteType.SingleQuote
					end
					else
					begin
						if (QuoteMode == QuoteType.SingleQuote)
						begin
							gotQuote = 2
							endPos = thisPos - 1
							exitloop
						end
					end
				end
				('"'),
				begin
					if (!gotQuote) then
					begin
						gotQuote = 1
						startPos = thisPos + 1
						QuoteMode = QuoteType.DoubleQuote
					end
					else
					begin
						if (QuoteMode == QuoteType.DoubleQuote)
						begin
							gotQuote = 2
							endPos = thisPos - 1
							exitloop
						end
					end
				end
				endusing
			end
			if (gotQuote == 2) then
				mreturn atrim(inString(startPos,endPos))
			else
				mreturn ""
		endmethod
		
		;;; <summary>
		;;; Removes any leading spaces from a string.
		;;; </summary>
		;;; <param name="inString">String to test</param>
		;;; <returns>String with leading spaces removed</returns>
		public static method RemoveLeading, a
			required in inString, a
			endparams
		proc
			if (inString) then
			begin
				data pos, int, 0
				repeat
					if (inString(pos+=1:1))
						exitloop
				mreturn inString(pos,trim(inString))
			end
			else
				mreturn ""
		endmethod
		
		;;; <summary>
		;;; Extracts and returns a string which is delimited by the first
		;;; set of parentheses within a string.
		;;; </summary>
		;;; <param name="inString">String to test</param>
		;;; <returns>String that was delimited by first set or parentheses, or blank.</returns>
		public static method StringFromParens, a
			required in inString, a
			endparams
			stack record
				startPos    ,int
				endPos      ,int
				result      ,String
			endrecord
		proc
			result = ""
			if (startPos = instr(1,inString,"("))
			begin
				if (endPos = instr(1,inString,")"))
				begin
					incr startPos
					decr endPos
					if (endPos>startPos)
						result = atrim(inString(startPos,endPos))
				end
			end
			mreturn (a)result
		endmethod
		
		;;; <summary>
		;;; Converts a string to upper case
		;;; </summary>
		;;; <param name="inString">String to be converted</param>
		;;; <returns>Converted string</returns>
		public static method UpperCase, a
			required in inString, a
			endparams
			.include "CODEGEN_SRC:codegen.def"
			stack record
				outString, String
			endrecord
		proc
			outString = atrim(inString)
			mreturn (a)(outString.ToUpper())
		endmethod
		
		;;; <summary>
		;;; Converts a string to xfNetLink compatible case
		;;; </summary>
		;;; <param name="inString">String to be converted</param>
		;;; <returns>Converted string</returns>
		public static method XfCase, a
			required in inString, a
			endparams
			.include "CODEGEN_SRC:codegen.def"
			stack record
				len         ,int
				outString   ,a CODEGEN_BUFSZ
			endrecord
		proc
			outString = inString
			if (len=trimz(outString))
			begin
				data pos, int
				locase outString
				;;Uppercase the first character
				if (outString(1:1)=="@") then
				begin
					if (trim(outString)>1)
						upcase outString(2:1)
				end
				else
					upcase outString(1:1)
				;;Uppercase anything following a "."
				pos=1
				repeat
				begin
					pos=instr(pos,outString,".")
					if (pos) && (pos<len) then
						upcase outString(pos+=1:1)
					else
						exitloop
				end
			end
			mreturn atrim(outString)
		endmethod
		
	endclass

endnamespace
