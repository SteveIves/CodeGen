
import System
import Microsoft.VisualStudio.TestTools.UnitTesting
import CodeGen.Engine
import System.Collections.Generic

.array 0

namespace UnitTests
	
	{TestClass}
	public partial class TokenizerTests
		
		private tab,  String, %char(9)
		private crlf, String, %char(13)+%char(10)

		{TestMethod}
		{TestCategory("Tokenization")}
		public method Tokenizer_EmbeddedTokens001, void
		proc
			data templateCode, String, "<<DATE>>"
			data tokens, @List<Token>, new Tokenizer().Tokenize(templateCode)
			Assert.IsTrue(tokens.Count==3&&tokens[0].TypeOfToken==TokenType.Text&&tokens[1].TypeOfToken==TokenType.Generic&&tokens[2].TypeOfToken==TokenType.Text)
		endmethod

		{TestMethod}
		{TestCategory("Tokenization")}
		public method Tokenizer_EmbeddedTokens002, void
		proc
			data templateCode, String, "</<DATE>>"
			data tokens, @List<Token>, new Tokenizer().Tokenize(templateCode)
			Assert.IsTrue(tokens.Count==3&&tokens[0].TypeOfToken==TokenType.Text&&tokens[1].TypeOfToken==TokenType.Generic&&tokens[2].TypeOfToken==TokenType.Text)
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization")}
		public method Tokenizer_EmbeddedTokens003, void
		proc
			
			;<Border Name="keyEntry" Grid.Row="2" Opacity="0" Panel.ZIndex="0" IsEnabled="False">
			;    <local:<Structure_name>_KeyView></local:<Structure_name>_KeyView>
			;</Border>
			data templateCode, String, '<Border Name="keyEntry" Grid.Row="2" Opacity="0" Panel.ZIndex="0" IsEnabled="False">' + crlf + '    <local:<Structure_name>_KeyView></local:<Structure_name>_KeyView>' + crlf + '</Border>'
			
			;TextNode		<Border Name="keyEntry" Grid.Row="2" Opacity="0" Palel.ZIndex="0" IsEnabled="False"><CR><LF>    <local:
			;StructureInfo	<Structure_name>
			;TextNode		_KeyView></local:
			;StructureInfo	<Structure_name>
			;TextNode		_KeyView><CR><LF></Border>
			data tokens, @List<Token>, new Tokenizer().Tokenize(templateCode)
			
			Assert.IsTrue(tokens.Count==5)
			
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization")}
		public method Tokenizer_InvalidExpression001, void
		proc
			data taskset, @CodeGenTaskSet, new CodeGenTaskSet()
			data task, @CodeGenTask, new CodeGenTask()
			taskset.Tasks.Add(task)
			data context, @CodeGenContext, new CodeGenContext(taskset)
			context.CurrentTask = task
			data tokens, @List<Token>, new Tokenizer(context).Tokenize("<FIELD_LOOP><IF CRAP>Crap!!!</IF>")
			Assert.IsTrue(((context.CurrentTask.Errors == 1) && (context.CurrentTask.LastErrorMessage == "Invalid expression <IF CRAP> at offset 12!")))
		endmethod
		
		{TestMethod}
		{TestCategory("Tokenization")}
		public method Tokenizer_InvalidExpression002, void
		proc
			data taskset, @CodeGenTaskSet, new CodeGenTaskSet()
			data task, @CodeGenTask, new CodeGenTask()
			taskset.Tasks.Add(task)
			data context, @CodeGenContext, new CodeGenContext(taskset)
			context.CurrentTask = task
			data tokens, @List<Token>, new Tokenizer(context).Tokenize("<FIELD_LOOP><IF CRAP>Crap!!!</IF CRAP></FIELD_LOOP>")

			if ((context.CurrentTask.Errors == 2) && (context.CurrentTask.Messages[0] == "ERROR:   Invalid expression <IF CRAP> at offset 12!")&& (context.CurrentTask.Messages[1] == "ERROR:   Invalid expression <IF CRAP> at offset 29!")) then
				Assert.IsTrue(true)
			else
				Assert.Fail(string.Format("Expected 1 error, got {0}. Last error was {1}.",context.CurrentTask.Errors,context.CurrentTask.LastErrorMessage))
		endmethod

	endclass
	
endnamespace
