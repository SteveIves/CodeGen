;;*****************************************************************************
;;
;; Title:       position_window.dbl
;;
;; Type:        Subroutine
;;
;; Description: Position a window in the center of the application window, or
;;              relative to another window.
;;
;; Date:
;;
;; Author:      Richard C. Morris, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
;;
subroutine position_window
    required in a_object_id         ,n  ;;ID of window to place
    required in a_islist            ,n  ;;Window to place is a list
    required in a_relative_to_id    ,n  ;;Position window relative to this window
    required in a_row_offset        ,n  ;;Row offset from relative window
    required in a_col_offset        ,n  ;;Column offset from relative window
    endparams

    .include "WND:tools.def"
    .include "WND:windows.def"

    stack record
        wndid,          i4
        row,            i4
        col,            i4
    endrecord

proc

    if (^passed(a_relative_to_id)&&a_relative_to_id) then
    begin
        row = %w_info(WIF_ACTPROW, a_relative_to_id)
        col = %w_info(WIF_ACTPCOL, a_relative_to_id)

        if (^passed(a_row_offset)&&a_row_offset) then
           row+=a_row_offset
       else
           row+=1

      if (^passed(a_col_offset)&&a_col_offset) then
          col+=a_col_offset
      else
          col+=1
    end
    else
    begin
        if (^passed(a_islist)&&a_islist) then
        begin
            xcall l_status(a_object_id, D_LINPID, wndid)
            row = (%w_info(WIF_SROWS) - %w_info(WIF_ROWS, a_object_id))/2
            col = (%w_info(WIF_SCOLS) - %w_info(WIF_DCOLSIZ, wndid))/2
        end
        else
        begin
            row = (%w_info(WIF_SROWS) - %w_info(WIF_DROWSIZ, a_object_id))/2
            col = (%w_info(WIF_SCOLS) - %w_info(WIF_DCOLSIZ, a_object_id))/2
        end
    end

    if (^passed(a_islist)&&a_islist) then
    begin
        xcall l_remove(a_object_id)
        xcall l_place(a_object_id, row, col)
    end
    else
    begin
        xcall u_window(D_REMOVE, a_object_id)
        xcall u_window(D_PLACE, a_object_id, row, col)
    end

    xreturn

endsubroutine

