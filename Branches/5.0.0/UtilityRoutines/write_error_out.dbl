;;*****************************************************************************
;;
;; Title:       write_errror_out.dbl
;;
;; Type:        Subroutine
;;
;; Description: Logs error details
;;
;; Date:
;;
;; Author:      Richard C Morris, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
;;
subroutine write_error_out  ;write errors to a log file
    .include 'CODEGEN_INC:ioerr.def'

    .align
    record ivar
        idf_log_chan        ,i4     ;log channel number
    endrecord

    .align
    record
        fulldate            ,a20
        year                ,d4@fulldate
        mon                 ,d2@fulldate+4
        day                 ,d2@fulldate+6
        hour                ,d2@fulldate+8
        min                 ,d2@fulldate+10
        SEC                 ,d2@fulldate+12
        time_stamp          ,a255
    endrecord

    .align
    record
        len,                i4
        last_error_number,  i4
        last_error_text,    a255
        file_name,          a255
        computer_name,      a50
        client_name,        a50
        routine_name,       a30
        lineno,             d5
    endrecord

proc

    idf_log_chan = %syn_freechn

    xcall getlog('ERROR_FILE_NAME', file_name, len)

    open(idf_log_chan, 'a:s', %atrim(file_name)) [ERR=bad_open]
    if (0)
    begin
bad_open,
        xreturn                 ;nothing we can do!
    end

    ;write out to the opened file

    fulldate = %datetime

    xcall ertxt(last_error_number=%ernum, last_error_text)

    xcall s_bld(time_stamp,, '%2d/%2d/%4d %2d:%2d:%2d Error %d: %a',
    &           day, mon, year, hour, min, sec,
    &           last_error_number, %atrim(last_error_text))

    writes(idf_log_chan, %atrim(time_stamp ))

    xcall getlog('COMPUTERNAME', computer_name, len)
    if (len)
    begin
        clear time_stamp
        time_stamp (23,255) = 'Computer Name = ' + computer_name
        writes(idf_log_chan, %atrim(time_stamp ))
    end

    xcall getlog('clientname', client_name, len)
    if (len)
    begin
        clear time_stamp
        time_stamp (23,255) = 'Client Name = ' + client_name
        writes(idf_log_chan, %atrim(time_stamp ))
    end

    ;if passed the IOERR arguemnt, use to display the stored traceback

    if (%passed(ioerr))
    then
    begin
        ;writes out file details first

        clear time_stamp
        time_stamp (23,255) = 'File Name = ' + ioe_filename
        writes(idf_log_chan, %atrim(time_stamp ))

        time_stamp (23,255) = 'Access Mode = ' + ioe_mode
        writes(idf_log_chan, %atrim(time_stamp ))

        time_stamp (23,255) = 'Key Value = ' + ioe_key_value
        writes(idf_log_chan, %atrim(time_stamp ))

        time_stamp (23,255) = 'Key of Reference = ' + %string(ioe_key_ref)
        writes(idf_log_chan, %atrim(time_stamp ))

        for ioe_loop from 1 thru ioe_mem_cnt
        begin
            if (^m(io_traceback[ioe_loop].iot_routine, ioe_mem_pnt).eq.'   ')
                exitloop
            ;
            time_stamp (23,255) = 'at line ' +
                &       %string(^d(^m(io_traceback[ioe_loop].iot_lineno, ioe_mem_pnt)))
                &       + ', in routine ' +
                &       ^m(io_traceback[ioe_loop].iot_routine, ioe_mem_pnt)

            writes(idf_log_chan, %atrim(time_stamp ))
        end
    end
    else
    begin
        ;output the full trace back...

        len=1
        repeat
        begin
            xcall modname(len, routine_name, lineno)
            if (routine_name.eq.'   ') exitloop
            incr len
            time_stamp (23,255) = 'at line ' +
                &       %string(lineno)
                &       + ', in routine ' +
                &       routine_name
        end
    end

    close(idf_log_chan)

    xreturn

endsubroutine


