;;*****************************************************************************
;;
;; Title:       display_local_fields.dbl
;;
;; Type:        Subroutine
;;
;; Description: Displays information to local display fields by calling the
;;              change methods for any field in an input set.  The change
;;              methods need to support this functionality.  Refer to the
;;              CodeGen documentation for more information.
;;
;; Date:
;;
;; Author:      Richard Morris, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************
;;
subroutine display_local_fields, REENTRANT
    a_wndid         ,n  ;Window id
    a_data          ,a  ;Window data area
    methdat1        ,a
    methdat2        ,a
    methdat3        ,a
    methdat4        ,a
    methdat5        ,a
    methdat6        ,a
    methdat7        ,a
    methdat8        ,a
    methdat9        ,a
    methdat10       ,a
    methdat11       ,a
    methdat12       ,a
    methdat13       ,a
    methdat14       ,a
    methdat15       ,a
    methdat16       ,a
    methdat17       ,a
    methdat18       ,a
    methdat19       ,a
    methdat20       ,a
    endparams

    .include "WND:system.def"
    .include "WND:tools.def"
    .include "WND:setinf.def"
    .include "WND:fldinf.def"

    .align
    stack record
    .include 'WND:inpinf.def'
    endrecord

    .align
    stack record
        count           ,i4     ;;Field counter
        pendsts         ,i4     ;;Pending status for change methods
    endrecord

    stack record
        set_number      ,i4     ;;Ordinal set number
        fld_number      ,i4     ;;Field number
        save_data       ,i4     ;;Dynamic memory handle
        fld_name        ,a30    ;;Name of input field
    endrecord

    global data section DISPLAY_LOCAL_FIELDS_DATA ,init
    record
        dlf_dispfld ,a30        ;;Used to propagate current field name between this
                                ;;routine and generated change methods
    endrecord
    endglobal

proc

    clear set_number, ^i(inputinfo)

    ;;Save original input data area
    save_data = %mem_proc(DM_ALLOC, ^size(a_data))
    ^m(save_data) = a_data

    ;;Get set info for the ALL set
    xcall i_setinf(a_wndid, "ALL", set_number,, gs_fldset)

    for count from 1 thru gs_setcnt
    begin

        ;;Get the field name
        clear fld_name
        xcall i_fldinf(a_wndid, fld_name, gs_setfldi(count), , gs_inpfld)

        ;;If the field has a change method, call it
        if (gs_change && (gs_change!='C_NOCHANGE'))
        begin

            ;;Temporarily turn off the change method
            xcall i_fldmod(a_wndid, fld_name, , , D_OFF, D_FLD_CHANGE)

            ;;Simulate an inputinfo record
            inp_wndid = a_wndid
            inp_setnum = -99

            ;;Field name used by change methods when NOT called by I_INPUT
            dlf_dispfld = fld_name

            ;;Call the change method
            onerror no_routine
            xcall xsubr(gs_change,
                &           a_data(gs_pos:gs_siz),          ;;Data entered
                &           a_data(gs_pos:gs_siz),          ;;Data stored
                &           pendsts = D_OK,                 ;;Pending status
                &           inputinfo,                      ;;Input info block
                &           ^m(save_data),                  ;;Input record
                &           methdat1, methdat2, methdat3, methdat4, methdat5,
                &           methdat6, methdat7, methdat8, methdat9, methdat10,
                &           methdat11, methdat12, methdat13, methdat14, methdat15,
                &           methdat16, methdat17, methdat18, methdat19, methdat20)

            if FALSE
no_routine,     offerror

            ;;Turn the change method back on
            xcall i_fldmod(a_wndid, fld_name, , , D_FLD_CHANGE, gs_change)
            offerror

        end
    end

    xcall i_display(a_wndid, "ALL", ^m(save_data))
    save_data = %mem_proc(DM_FREE,save_data)

    clear dlf_dispfld

    xreturn

endsubroutine

