;; *****************************************************************************
;; 
;;  Title:       TokenExpanderButtonLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands button loop token nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        buttonLoopTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerButtonLoopTokens, void
            endparams
        proc
			
			buttonLoopTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()
			
			buttonLoopTokenExpanders.Add("BUTTON_CAPTION", expandButtonCaption)
            buttonLoopTokenExpanders.Add("BUTTON_COLPX", expandButtonColPx)
            buttonLoopTokenExpanders.Add("BUTTON_ELB", expandButtonElb)
            buttonLoopTokenExpanders.Add("BUTTON_IMAGE", expandButtonImage)
            buttonLoopTokenExpanders.Add("BUTTON_METHOD", expandButtonMethod)
            buttonLoopTokenExpanders.Add("BUTTON_NAME", expandButtonName)
            buttonLoopTokenExpanders.Add("BUTTON_NUMBER", expandButtonNumber)
            buttonLoopTokenExpanders.Add("BUTTON_QUICKSELECT", expandButtonQuickSelect)
            buttonLoopTokenExpanders.Add("BUTTON_ROWPX", expandButtonRowPx)
			buttonLoopTokenExpanders.Add("BUTTON_WIDTHPX", expandButtonWidthPx)

        endmethod

        ;;;  <summary>
        ;;;  
        ;;;  </summary>
        ;;;  <param name="tkn"></param>
        ;;;  <param name="file"></param>
        ;;;  <param name="loops"></param>
        ;;;  <param name="specific"></param>
        ;;;  <returns></returns>
        public static method ExpandButtonLoopToken, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<WscButtonCollection, WscButton, int, string> 
            endparams
        proc
            lambda isButtonLoop(node)
            begin
                mreturn node .is. ButtonLoopNode
            end
			data loop, @ButtonLoopNode, ^as(loops.First(isButtonLoop), ButtonLoopNode)
            mreturn specific(file.Context.Buttons, loop.CurrentButton, loop.CurrentIndex)
        endmethod

        private static method expandButtonCaption, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(buttons, button, index)
            begin
                mreturn button.Caption
            end
            mreturn ExpandButtonLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandButtonColPx, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(buttons, button, index)
            begin
                data btnWidth, int
                data btnPos, int, 0
                data BtnIdx, int
                for BtnIdx from 0 thru index
                begin
                    btnWidth = file.Context.Buttons[index].Caption.Length * file.Context.CurrentTask.CharacterWidth
                    if (btnWidth < 75)
                        btnWidth = 75
                    btnPos += (btnWidth + 15)
                end
                btnWidth = file.Context.Buttons[0].Caption.Length * file.Context.CurrentTask.CharacterWidth
                if (btnWidth < 75)
                    btnWidth = 75
                btnPos -= btnWidth
                mreturn btnPos.ToString()
            end
            mreturn ExpandButtonLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandButtonElb, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(buttons, button, index)
            begin
                mreturn button.ElbName
            end
            mreturn ExpandButtonLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandButtonImage, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(buttons, button, index)
            begin
                mreturn button.ImageName
            end
            mreturn ExpandButtonLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandButtonMethod, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(buttons, button, index)
            begin
                mreturn button.MethodName
            end
            mreturn ExpandButtonLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandButtonName, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(buttons, button, index)
            begin
                mreturn button.Name
            end
            mreturn ExpandButtonLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandButtonNumber, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(buttons, button, index)
            begin
                mreturn Convert.ToString(index + 1)
            end
            mreturn ExpandButtonLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandButtonQuickSelect, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(buttons, button, index)
            begin
                mreturn button.QuickSelect
            end
            mreturn ExpandButtonLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandButtonRowPx, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(buttons, button, index)
            begin
                ;; Calculate the pixel height of the window, excluding the button row space,
                ;; using the same calculations that <WINDOW_HEIGHTPX> use
                data windowHeight, int
                if (file.Context.WindowHeight != 0) then
                    windowHeight = file.Context.WindowHeight * file.Context.CurrentTask.CharacterHeight
                else
                begin
                    data fldCount, int, 0
                    data fld, @RpsField
                    foreach fld in file.Context.CurrentStructure.Fields
                        fldCount += fld.ArrayDimension[1]
                    windowHeight = fldCount * file.Context.CurrentTask.CharacterHeight
                end
                mreturn Convert.ToString(windowHeight + 15)
            end
            mreturn ExpandButtonLoopToken(tkn, file, loops, doExpand)
        endmethod

        private static method expandButtonWidthPx, string
            tkn, @Token 
            file, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(buttons, button, index)
            begin
                data btnWidth, int
                btnWidth = file.Context.Buttons[index].Caption.Length * file.Context.CurrentTask.CharacterWidth
                if (btnWidth < 75)
                    btnWidth = 75
                mreturn btnWidth.ToString()
            end
            mreturn ExpandButtonLoopToken(tkn, file, loops, doExpand)
		endmethod

	endclass

endnamespace