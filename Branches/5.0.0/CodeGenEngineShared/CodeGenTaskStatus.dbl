;;*****************************************************************************
;;
;; Title:       CodeGenTaskStatus.dbl
;;
;; Type:        Partial Class (see also CodeGenTask.dbl)
;;
;; Description: Represents the part of a task that CodeGenerator will fill in
;;              during code generation.
;;
;; Date:        31st August 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System.Collections.ObjectModel
import System.Xml.Serialization

.array 0

namespace CodeGen.Engine

	public partial class CodeGenTask
	
		.region "Task status properties"
		
		{NonSerialized}
		private mComplete, Boolean, false
		
		;TODO: When back into a single assembly, set should be internal
		;;; <summary>
		;;; Did the task complete without any errors
		;;; </summary>
		{XmlIgnore}
		public property Complete, Boolean
			method get
			proc
				mreturn mComplete
			endmethod
			method set
			proc
				mComplete = value
			endmethod
		endproperty
		
		{NonSerialized}
		private mErrors, int
		
		;TODO: When back into a single assembly, set should be internal
		;;; <summary>
		;;; The number of errors reported during the processing of the task.
		;;; </summary>
		{XmlIgnore}
		public property Errors, int
			method get
			proc
				mreturn mErrors
			endmethod
			method set
			proc
				mErrors = value
			endmethod
		endproperty
		
		{NonSerialized}
		private mWarnings, int
		
		;TODO: When back into a single assembly, set should be internal
		;;; <summary>
		;;; The number of errors reported during the processing of the task.
		;;; </summary>
		{XmlIgnore}
		public property Warnings, int
			method get
			proc
				mreturn mWarnings
			endmethod
			method set
			proc
				mWarnings = value
			endmethod
		endproperty
		
		{NonSerialized}
		private mLastErrorMessage, String, String.Empty
		
		;TODO: When back into a single assembly, set should be internal
		;;; <summary>
		;;; Did the task complete without errors
		;;; </summary>
		{XmlIgnore}
		public property LastErrorMessage, String
			method get
			proc
				mreturn mLastErrorMessage
			endmethod
			method set
			proc
				mLastErrorMessage = value
			endmethod
		endproperty
		
		{NonSerialized}
		private mFilesGenerated, @ObservableCollection<String>, new ObservableCollection<String>()
		
		;;; <summary>
		;;; List of files that were generated by this task.
		;;; </summary>
		{XmlIgnore}
		public property FilesGenerated, @ObservableCollection<String>
			method get
			proc
				mreturn mFilesGenerated
			endmethod
			method set
			proc
				mFilesGenerated = value
			endmethod
		endproperty
		
		{NonSerialized}
		private mFilesProvided, @ObservableCollection<String>, new ObservableCollection<String>()
		
		;;; <summary>
		;;; List of additoinal files that provided by this task.
		;;; </summary>
		{XmlIgnore}
		public property FilesProvided, @ObservableCollection<String>
			method get
			proc
				mreturn mFilesProvided
			endmethod
			method set
			proc
				mFilesProvided = value
			endmethod
		endproperty
		
		{NonSerialized}
		private mFilesFailed, int, 0
		
		;;; <summary>
		;;; Number of files that failed, either because of errors, not overwriting
		;;; existing files, or not writing files multiple times.
		;;; </summary>
		{XmlIgnore}
		public property FilesFailed, int
			method get
			proc
				mreturn mFilesFailed
			endmethod
			method set
			proc
				mFilesFailed = value
			endmethod
		endproperty
		
		{NonSerialized}
		private mMessages, @ObservableCollection<String>, new ObservableCollection<String>()
		
		{XmlIgnore}
		public property Messages, @ObservableCollection<String>
			method get
			proc
				mreturn mMessages
			endmethod
		endproperty		
		
		{NonSerialized}
		private mTaskSet, @CodeGenTaskSet
		
		;;Internal because it is only ever used by the task set
		{XmlIgnore}
		internal property TaskSet, @CodeGenTaskSet
			method get
			proc
				mreturn mTaskSet
			endmethod
			method set
			proc
				mTaskSet = value
			endmethod
		endproperty
		
		.endregion
		
		.region "Public methods"
		
		;TODO: When back into a single assembly, should be internal
		public method Log				,void
			required in text			,String
			endparams
		proc
			;;Log the message to this task
			Messages.Add(text)
			;;And also to the task set
			TaskSet.Log(text)
		endmethod
		
		;TODO: When back into a single assembly, should be internal
		public method Log				,void
			required in text			,String
			required in blankLineBefore	,boolean
			required in blankLineAfter	,boolean
			endparams
		proc
			;;Log the message to this task
			if (blankLineBefore)
				Messages.Add("")
			Messages.Add(text)
			if (blankLineAfter)
				Messages.Add("")
			;;And also to the task set
			TaskSet.Log(text,blankLineBefore,blankLineAfter)
		endmethod
		
		;TODO: When back into a single assembly, should be internal
		public method VerboseLog		,void
			required in text			,String
			required in blankLineBefore	,boolean
			required in blankLineAfter	,boolean
			endparams
		proc
			if ((int)(TaskSet.LoggingLevel)>=(int)LoggingLevel.Verbose)
			begin
				;;Log the message to this task
				if (blankLineBefore)
					Messages.Add("")
				Messages.Add(text)
				if (blankLineAfter)
					Messages.Add("")
				;;And also to the task set
				TaskSet.VerboseLog(text,blankLineBefore,blankLineAfter)
			end
		endmethod
		
		;TODO: When back into a single assembly, should be internal
		public method VerboseLog		,void
			required in text			,String
			endparams
		proc
			if ((int)(TaskSet.LoggingLevel)>=(int)LoggingLevel.Verbose)
			begin
				;;Log the message to this task
				Messages.Add(text)
				;;And also to the task set
				TaskSet.VerboseLog(text)
			end
		endmethod
		
		;TODO: When back into a single assembly, should be internal
		public method ErrorLog			,boolean
			required in text			,String
			endparams
		proc
			;;Log the message to this task
			Messages.Add(String.Format("ERROR:   {0}",text))
			LastErrorMessage = text
			Errors += 1
			;;And also to the task set
			TaskSet.ErrorLog(text)
			mreturn true
		endmethod
		
		;TODO: When back into a single assembly, should be internal
		public method Warning			,void
			required in text			,String
			endparams
		proc
			;;Log the message to this task
			Messages.Add(String.Format("WARNING: {0}",text))
			Warnings += 1
			;;And also to the task set
			TaskSet.Warning(text)
		endmethod
		
		;TODO: When back into a single assembly, should be internal
		public method DebugLog			,void
			required in text			,String
			required in blankLineBefore	,boolean
			required in blankLineAfter	,boolean
			endparams
		proc
			if ((int)(TaskSet.LoggingLevel)>=(int)LoggingLevel.Debug)
			begin
				;;Log the message to this task
				if (blankLineBefore)
					Messages.Add("")
				Messages.Add(text)
				if (blankLineAfter)
					Messages.Add("")
				;;And also to the task set
				TaskSet.DebugLog(text,blankLineBefore,blankLineAfter)
			end
		endmethod
		
		;TODO: When back into a single assembly, should be internal
		public method DebugLog			,void
			required in text			,String
			endparams
		proc
			if ((int)(TaskSet.LoggingLevel)>=(int)LoggingLevel.Debug)
			begin
				;;Log the message to this task
				Messages.Add(text)
				;;And also to the task set
				TaskSet.DebugLog(text)
			end
		endmethod
		
		;TODO: When back into a single assembly, should be internal
		public method DevDebugLog		,void
			required in text			,String
			endparams
		proc
			if (TaskSet.LoggingLevel==LoggingLevel.DeveloperDebug)
			begin
				;;Log the message to this task
				Messages.Add(string.Format("DEVDBG: {0}",text))
				;;And also to the task set
				TaskSet.DevDebugLog(text)
			end
		endmethod

		;TODO: When back to single assembly, should be internal
		public method echoCommand, void
			endparams
		proc
			data command, String, "codegen"
			
			;;Templates
			if (Templates.Count>0)
			begin
				command += " -t"
				data tmp, String
				foreach tmp in Templates
					command += " " + tmp
			end
			
			;;Structures
			if (Structures.Count>0)
			begin
				command += " -s"
				data tmp, String
				foreach tmp in Structures
					command += " " + tmp
			end
			
			;;Processing multiple structures
			if (MultipleStructures)
				command += " -ms"
			
			;;Aliases
			if (Aliases.Count>0)
			begin
				command += " -a"
				data tmp, String
				foreach tmp in Aliases
					command += " " + tmp
			end
			
			;;File overrides
			if (FileOverrides.Count>0)
			begin
				command += " -fo"
				data tmp, String
				foreach tmp in FileOverrides
					command += " " + tmp
			end
			
			;;Subset
			if (!String.IsNullOrWhiteSpace(Subset))
				command += " -subset " + Subset
			
			;;Repository file
			if (!String.IsNullOrWhiteSpace(RepositoryFile))
				command += " -file " + RepositoryFile
			
			;;Window Script
			if (!String.IsNullOrWhiteSpace(WindowScript))
				command += " -w " + WindowScript
			
			;;Ignore script field attributes
			if (IgnoreScriptFieldAttributes)
				command += " -wn"
			
			;;Selection window script
			if (!String.IsNullOrWhiteSpace(SelectionWindowScript))
				command += " -ws " + SelectionWindowScript
			
			;;Namespace
			if (!String.IsNullOrWhiteSpace(Namespace))
				command += " -n " + Namespace
			
			;;Replace files
			if (ReplaceFiles)
				command += " -r"
			
			;;Multi-write files
			if (MultiWriteFiles)
				command += " -mw"
			
			;;Field prefix
			if (!String.IsNullOrWhiteSpace(FieldPrefix))
				command += " -prefix " + FieldPrefix
			
			;;User token file
			if (!String.IsNullOrWhiteSpace(UserTokenFile))
				command += " -u " + UserTokenFile
			
			;;Command line user tokens
			if (UserTokens.Count>0)
			begin
				command += " -ut"
				data tmp, @UserToken
				foreach tmp in UserTokens
					command += " " + tmp.Name + "=" + tmp.Value
			end
			
			;;
			if (IncludeOverlayFields)
				command += " -f o"
			
			;;
			if (IgnoreExcludeLanguage)
				command += " -f l"
			
			;;
			if (HonorExcludeToolkit)
				command += " -f t"
			
			;;
			if (HonorExcludeReportWriter)
				command += " -f r"
			
			;;
			if (HonorExcludeWeb)
				command += " -f w"
			
			;;
			if (GroupFieldNoGroupPrefix)
				command += " -g f"
			
			;;
			if (GroupFieldNoRpsPrefix)
				command += " -g r"
			
			;;
			if (GroupNoExpand)
				command += " -g i"
			
			;;
			if (AlwaysLoadDefaultButtons)
				command += " -b a"
			
			;;
			if (NeverLoadDefaultButtons)
				command += " -b d"
			
			;;
			if (NeverLoadAnyButtons)
				command += " -b n"
			
			;;Template folder
			if (!String.IsNullOrWhiteSpace(TemplateFolder))
				command += " -i " + TemplateFolder
			
			;;Output folder
			if (!String.IsNullOrWhiteSpace(OutputFolder))
				command += " -o " + OutputFolder
			
			;;Character width
			if (CharacterWidth!=12)
				command += " -cw " + CharacterWidth.ToString()
			
			;;Character height
			if (CharacterHeight!=25)
				command += " -ch " + CharacterHeight.ToString()
			
			;;Custom data mapping
			if (!String.IsNullOrWhiteSpace(TaskSet.DataMappingsFile))
				command += " -cdm " + TaskSet.DataMappingsFile
				
			;;List files mode
			if (TaskSet.ListGeneratedFiles)
				command += " -lf"
				
			;;Logging level			
			using TaskSet.LoggingLevel select
			(LoggingLevel.Verbose),
				command += " -v"
			(LoggingLevel.Debug),
				command += " -d"
			(LoggingLevel.DeveloperDebug),
				command += " -debug"
			endusing	
			
			Log(command,true,false)
			
		endmethod
		
		.endregion

	endclass

endnamespace
