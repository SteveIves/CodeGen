
import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CustomExtensionsExample
	
	;;To implement a custom expression you must build a class that implements the CodeGen.Engine.IExpressionToken interface.
	;;The class MUST have a default constructor. By default classes have an implicit default constructor, but if you need to
	;;explicitly define a constructor, make sure you don't define any parameters.
	;;
	;;You can use this expression in field selection loops, like this:
	;;
	;;		<SELECTION_LOOP>
	;;		If you see YES then the expression evaluated to true: <IF CUSTOM_FIELD_SELECTION_LOOP_EXPRESSION>YES</IF>
	;;		</SELECTION_LOOP>
	;;
	
	public class CustomFieldSelectionLoopExpression implements IExpressionToken
		
		public property TokenName, String
			method get
			proc
				mreturn "CUSTOM_FIELD_SELECTION_LOOP_EXPRESSION"
			endmethod
		endproperty
		
		public property Description, String
			method get
			proc
				mreturn "An example of a custom field selection loop expression."
			endmethod
		endproperty
		
		public property Validity, TokenValidity
			method get
			proc
				mreturn TokenValidity.FieldSelectionLoop
			endmethod
		endproperty
		
		public method Evaluate, Boolean
			tkn, @Token
			file, @FileNode 
			loops, @IEnumerable<LoopNode>
			endparams
		proc
			lambda doEvaluate(str, field, selection, index)
			begin
				;TODO: Add code here to determine the result of the expression, and return true or false
				
				
				mreturn true
			end
			mreturn ExpressionEvaluator.EvaluateFieldSelectionLoopExpression(tkn, file, loops, doEvaluate)
		endmethod
		
	endclass
	
	
endnamespace
