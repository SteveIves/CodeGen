<CODEGEN_FILENAME><StructureName>ListVm.dbl</CODEGEN_FILENAME>
<REQUIRES_USERTOKEN>MVVM_DATA_NAMESPACE</REQUIRES_USERTOKEN>
<PROCESS_TEMPLATE>synnet_mvvm_vm_tk</PROCESS_TEMPLATE>
<PROCESS_TEMPLATE>synnet_mvvm_data</PROCESS_TEMPLATE>
<PROCESS_TEMPLATE>synnet_mvvm_relay_command</PROCESS_TEMPLATE>
;//****************************************************************************
;//
;// Title:       mvvm_vm_list.tpl
;//
;// Type:        CodeGen Template
;//
;// Description: Generates a ViewModel for a simple list program.
;//
;// Date:        17th February 2011
;//
;// Author:      Steve Ives, Synergex Professional Services Group
;//              http://www.synergex.com
;//
;//****************************************************************************
;//
;// Copyright (c) 2012, Synergex International, Inc.
;// All rights reserved.
;//
;// Redistribution and use in source and binary forms, with or without
;// modification, are permitted provided that the following conditions are met:
;//
;// * Redistributions of source code must retain the above copyright notice,
;//   this list of conditions and the following disclaimer.
;//
;// * Redistributions in binary form must reproduce the above copyright notice,
;//   this list of conditions and the following disclaimer in the documentation
;//   and/or other materials provided with the distribution.
;//
;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;// POSSIBILITY OF SUCH DAMAGE.
;//
;;*****************************************************************************
;;
;; File:        <StructureName>ListVm.dbl
;;
;; Description: ViewModel class for structure <STRUCTURE_NOALIAS>
;;
;; Type:        Class
;;
;; Author:      <AUTHOR>, <COMPANY>
;;
;;*****************************************************************************
;;
;; WARNING:     This code was generated by CodeGen. Any changes that you make
;;              to this file will be lost if the code is regenerated.
;;
;;*****************************************************************************

import System
import System.Collections
import System.Collections.ObjectModel
import System.ComponentModel
import System.Windows.Input

namespace <MVVM_DATA_NAMESPACE>

    public class <StructureName>ListVm extends ToolkitViewModel

        .region "Constructors"

        public method <StructureName>ListVm
            endparams
        proc
        endmethod

        .endregion

        .region "Public properties"

        private mItems, @ObservableCollection<<StructureName>>

        public property Items, @ObservableCollection<<StructureName>>
            method get
            proc
                if (mItems==^null)
                begin
                    mItems = new ObservableCollection<<StructureName>>()
                    RaiseMenuEvent("LOAD")
                end
                mreturn mItems
            endmethod
            method set
            proc
                mItems = value
                notifyPropertyChanged("Items")
            endmethod
        endproperty

        private mSelectedItem, @<StructureName>

        public property SelectedItem, @<StructureName>
            method get
            proc
                mreturn mSelectedItem
            endmethod
            method set
            proc
                mSelectedItem = value
                notifyPropertyChanged("SelectedItem")
            endmethod
        endproperty

        .endregion

        .region "Public methods"

        public method LoadData, void
            required in aItems, @ArrayList
            endparams
            record
                thisItem, @<StructureName>
                ocItems, @ObservableCollection<<StructureName>>
            endrecord
        proc
            ocItems = new ObservableCollection<<StructureName>>()
            foreach thisItem in aItems
                ocItems.Add(thisItem)
            Items = ocItems;
        endmethod

        public method DeleteSelectedItem, void
            endparams
        proc
            mItems.Remove(mSelectedItem)
            notifyPropertyChanged("Items")
        endmethod

        .endregion

        .region "Select Command"

        private mCommandSelect, @ICommand

        public property CommandSelect, @ICommand
            method get
            proc
                if (mCommandSelect==^null)
                    mCommandSelect = new RelayCommand(CommandSelectExecute, CommandSelectCanExecute)
                mreturn mCommandSelect
            endmethod
        endproperty

        private method CommandSelectExecute, void
            parameter, @Object
            endparams
        proc
            this.RaiseMenuEvent("SELECT")
        endmethod

        private method CommandSelectCanExecute, Boolean
            parObject, @Object
            endparams
        proc
            mreturn (mSelectedItem!=^null)
        endmethod

        .endregion

        .region "Delete Command"

        private mCommandDelete, @ICommand

        public property CommandDelete, @ICommand
            method get
            proc
                if (mCommandDelete==^null)
                    mCommandDelete = new RelayCommand(CommandDeleteExecute, CommandDeleteCanExecute)
                mreturn mCommandDelete
            endmethod
        endproperty

        private method CommandDeleteExecute, void
            parameter, @Object
            endparams
        proc
            this.RaiseMenuEvent("DELETE")
        endmethod

        private method CommandDeleteCanExecute, Boolean
            parObject, @Object
            endparams
        proc
            mreturn (mSelectedItem!=^null)
        endmethod

        .endregion

        .region "Close Command"

        private mCommandClose, @ICommand

        public property CommandClose, @ICommand
            method get
            proc
                if (mCommandClose==^null)
                    mCommandClose = new RelayCommand(CommandCloseExecute, CommandCloseCanExecute)
                mreturn mCommandClose
            endmethod
        endproperty

        private method CommandCloseExecute, void
            parameter, @Object
            endparams
        proc
            this.RaiseMenuEvent("CLOSE")
        endmethod

        private method CommandCloseCanExecute, Boolean
            parObject, @Object
            endparams
        proc
            mreturn true
        endmethod

        .endregion

    endclass

endnamespace

