
import System.Windows
import System.Windows.Forms
import System.Windows.Input

namespace HarmonyCoreGenerator.ViewModel

    ;;;  <summary>
    ;;;  Provider class for online help.  
    ;;;  </summary>
    public class HelpProvider
    
.region "Fields"
    
        ;;;  <summary>
        ;;;  Help topic dependency property. 
        ;;;  </summary>
        ;;;  <remarks>This property can be attached to an object such as a form or a textbox, and 
        ;;;  can be retrieved when the user presses F1 and used to display context sensitive help.</remarks>
        public static readonly HelpTopicProperty, @DependencyProperty, DependencyProperty.RegisterAttached("HelpString", ^typeof(string), ^typeof(HelpProvider))
    
.endregion Fields
    
.region "Constructors"
    
        ;;;  <summary>
        ;;;  Static constructor that adds a command binding to Application.Help, binding it to 
        ;;;  the CanExecute and Executed methods of this class. 
        ;;;  </summary>
        ;;;  <remarks>With this in place, when the user presses F1 our help will be invoked.</remarks>
        static method HelpProvider

        proc
            CommandManager.RegisterClassCommandBinding(^typeof(FrameworkElement), new CommandBinding(ApplicationCommands.Help, new ExecutedRoutedEventHandler(ShowHelpExecuted), new CanExecuteRoutedEventHandler(ShowHelpCanExecute)))
        endmethod

.endregion Constructors

.region "Methods"
    
        ;;;  <summary>
        ;;;  Getter for <see cref="HelpTopicProperty"/>. Get a help topic that's attached to an object. 
        ;;;  </summary>
        ;;;  <param name="obj">The object that the help topic is attached to.</param>
        ;;;  <returns>The help topic.</returns>
        public static method GetHelpTopic, string
            obj, @DependencyObject 
        proc
            mreturn (string)obj.GetValue(HelpTopicProperty)
        endmethod
    
        ;;;  <summary>
        ;;;  Setter for <see cref="HelpTopicProperty"/>. Attach a help topic value to an object. 
        ;;;  </summary>
        ;;;  <param name="obj">The object to which to attach the help topic.</param>
        ;;;  <param name="value">The value of the help topic.</param>
        public static method SetHelpTopic, void
            obj, @DependencyObject 
            value, string 
        proc
            obj.SetValue(HelpTopicProperty, value)
        endmethod
    
        ;;;  <summary>
        ;;;  Show help table of contents. 
        ;;;  </summary>
        public static method ShowHelpTableOfContents, void
        proc
            Help.ShowHelp(^null, "HarmonyCoreGenerator.chm", HelpNavigator.TableOfContents)
        endmethod
    
        ;;;  <summary>
        ;;;  Show a help topic in the online CHM style help. 
        ;;;  </summary>
        ;;;  <param name="helpTopic">The help topic to show. This must match exactly with the name 
        ;;;  of one of the help topic's .htm files, without the .htm extention and with spaces instead of underscores
        ;;;  in the name. For instance, to display the help topic "This_is_my_topic.htm", pass the string "This is my topic".</param>
        ;;;  <remarks>You can also pass in the help topic with the underscore replacement already done. You can also 
        ;;;  add the .htm extension. 
        ;;;  Certain characters other than spaces are replaced by underscores in RoboHelp help topic names. 
        ;;;  This method does not yet account for all those replacements, so if you really need to find a help topic
        ;;;  with one or more of those characters, do the underscore replacement before passing the topic.</remarks>
        public static method ShowHelpTopic, void
            helpTopic, string 
        proc
            data local_helpTopic_p, string, helpTopic
            ;;  Strip off trailing period.
            if (local_helpTopic_p.IndexOf(".") == local_helpTopic_p.Length - 1)
                local_helpTopic_p = local_helpTopic_p.Substring(0, local_helpTopic_p.Length - 1)
            local_helpTopic_p = local_helpTopic_p.Replace(" ", "_").Replace("\", "_").Replace("/", "_").Replace(":", "_").Replace("*", "_").Replace("?", "_").Replace("""", "_").Replace(">", "_").Replace("<", "_").Replace("|", "_") + (local_helpTopic_p.IndexOf(".htm") == -1 ? ".htm" : "")
            System.Windows.Forms.Help.ShowHelp(^null, "HarmonyCoreGenerator.chm", HelpNavigator.Topic, local_helpTopic_p)
        endmethod
    
        ;;;  <summary>
        ;;;  Whether the F1 help command can execute. 
        ;;;  </summary>
        private static method ShowHelpCanExecute, void
            sender, @Object 
            e, @CanExecuteRoutedEventArgs 
        proc
            data senderElement, @FrameworkElement, ^as(sender, FrameworkElement)
            if (HelpProvider.GetHelpTopic(senderElement) != ^null)
                e.CanExecute = true
        endmethod
    
        ;;;  <summary>
        ;;;  Execute the F1 help command. 
        ;;;  </summary>
        ;;;  <remarks>Calls ShowHelpTopic to show the help topic attached to the framework element that's the 
        ;;;  source of the call.</remarks>
        private static method ShowHelpExecuted, void
            sender, @Object 
            e, @ExecutedRoutedEventArgs 
        proc
            ShowHelpTopic(HelpProvider.GetHelpTopic(^as(sender, FrameworkElement)))
        endmethod
    
.endregion Methods

    endclass

endnamespace

