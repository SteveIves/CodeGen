
import System
import System.Collections.Generic
import System.Text
import System.Windows.Input
import HarmonyCoreGenerator.Model
import System.IO

namespace HarmonyCoreGenerator.ViewModel

    public partial class GeneratorViewModel

.region "OpenSolutionCommand"

        private _OpenSolutionCommand, @ICommand

        public property OpenSolutionCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    openSolution()
                end
                if (_OpenSolutionCommand == ^null)
                    _OpenSolutionCommand = new RelayCommand(execute)
                mreturn _OpenSolutionCommand
            endmethod
        endproperty

.endregion

.region "OpenSmcCommand"

        private _OpenSmcCommand, @ICommand

        public property OpenSmcCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    openSmc()
                end
                if (_OpenSmcCommand == ^null)
                    _OpenSmcCommand = new RelayCommand(execute)
                mreturn _OpenSmcCommand
            endmethod
        endproperty

.endregion

.region "CloseSolutionCommand"

        private _CloseSolutionCommand, @ICommand

        public property CloseSolutionCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    closeSolution()
                end
                lambda canExecute(param)
                begin
                    mreturn _SolutionOpen
                end
                if (_CloseSolutionCommand == ^null)
                    _CloseSolutionCommand = new RelayCommand(execute, canExecute)
                mreturn _CloseSolutionCommand
            endmethod
        endproperty

.endregion

.region "SaveSettingsCommand"

        private _SaveSettingsCommand, @ICommand

        public property SaveSettingsCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    saveSettings()
                end
                lambda canExecute(param)
                begin
                    mreturn _SolutionOpen
                end
                if (_SaveSettingsCommand == ^null)
                    _SaveSettingsCommand = new RelayCommand(execute, canExecute)
                mreturn _SaveSettingsCommand
            endmethod
        endproperty

.endregion

.region "RefreshRepositoryCommand"

        private _RefreshRepositoryCommand, @ICommand

        public property RefreshRepositoryCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    refreshRepository(true)
                end
                lambda canExecute(param)
                begin
                    mreturn _SolutionOpen
                end
                if (_RefreshRepositoryCommand == ^null)
                    _RefreshRepositoryCommand = new RelayCommand(execute, canExecute)
                mreturn _RefreshRepositoryCommand
            endmethod
        endproperty

.endregion

.region "SetOdataProcessingModeCommand"

        public ODataStructuresGrid, @System.Windows.Controls.DataGrid

        private _SetOdataProcessingModeCommand, @ICommand

        public property SetOdataProcessingModeCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    data row, @ODataStructureRow
                    foreach row in ODataStructuresGrid.SelectedItems
                    begin
                        row.ProcessingMode = (string)param
                    end
                end
                if (_SetOdataProcessingModeCommand == ^null)
                    _SetOdataProcessingModeCommand = new RelayCommand(execute)
                mreturn _SetOdataProcessingModeCommand
            endmethod
        endproperty

.endregion

.region "SetBridgeProcessingModeCommand"

        public BridgeStructuresGrid, @System.Windows.Controls.DataGrid

        private _SetBridgeProcessingModeCommand, @ICommand

        public property SetBridgeProcessingModeCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    data row, @BridgeStructureRow
                    foreach row in BridgeStructuresGrid.SelectedItems
                    begin
                        row.ExposedByBridge = (string)param == "true" ? true : false
                    end
                end
                if (_SetBridgeProcessingModeCommand == ^null)
                    _SetBridgeProcessingModeCommand = new RelayCommand(execute)
                mreturn _SetBridgeProcessingModeCommand
            endmethod
        endproperty

.endregion

.region "SetInterfaceProcessingModeCommand"

        public InterfacesGrid, @System.Windows.Controls.DataGrid

        private _SetInterfaceProcessingModeCommand, @ICommand

        public property SetInterfaceProcessingModeCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    data row, @MduInterfaceRow
                    foreach row in InterfacesGrid.SelectedItems
                    begin
                        row.Exposed = (string)param == "true" ? true : false
                    end
                end
                if (_SetInterfaceProcessingModeCommand == ^null)
                    _SetInterfaceProcessingModeCommand = new RelayCommand(execute)
                mreturn _SetInterfaceProcessingModeCommand
            endmethod
        endproperty

.endregion

.region "GenerateCodeCommand"

        private _GenerateCodeCommand, @ICommand

        public property GenerateCodeCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    generateCode()
                end
                lambda canExecute(param)
                begin
                    mreturn _SolutionOpen
                end
                if (_GenerateCodeCommand == ^null)
                    _GenerateCodeCommand = new RelayCommand(execute, canExecute)
                mreturn _GenerateCodeCommand
            endmethod
        endproperty

.endregion

.region "Help Commands"

        private _HelpCommand, @ICommand

        public property HelpCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    HelpProvider.ShowHelpTableOfContents()
                end
                if (_HelpCommand == ^null)
                    _HelpCommand = new RelayCommand(execute)
                mreturn _HelpCommand
            endmethod
        endproperty

.endregion

.region "ExitCommand"

        private _ExitCommand, @ICommand

        public property ExitCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    ;;If we changed current directory, but it back
                    if (!String.IsNullOrWhiteSpace(_OriginalFolder))
                        Directory.SetCurrentDirectory(_OriginalFolder)
                    ;;And exit
                    Environment.^id("Exit")(0)
                end
                if (_ExitCommand == ^null)
                    _ExitCommand = new RelayCommand(execute)
                mreturn _ExitCommand
            endmethod
        endproperty

.endregion

    endclass

endnamespace
