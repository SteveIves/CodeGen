
import CodeGen.Engine
import CodeGen.RepositoryAPI
import HarmonyCoreGenerator.Model
import Microsoft.Win32
import Newtonsoft.Json
import System.Collections.Generic
import System.Collections.ObjectModel
import System.IO
import System.Linq
import System.Windows
import System.Xml.Linq

.array 0

namespace HarmonyCoreGenerator.ViewModel
    
    public partial class GeneratorViewModel extends ViewModelBase

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>        
        public method GeneratorViewModel
        proc

            data commandLineArgs = Environment.GetCommandLineArgs()

            if (commandLineArgs.Length > 1) then
            begin
                ;;Is argument 2 a solution file that exists?
                if (commandLineArgs[1].ToLower().EndsWith(".sln") && File.Exists(commandLineArgs[1]))
                begin
                    ;;Looks like it, let's try to use it.
                    doOpenSolution(commandLineArgs[1])
                end
            end
            else
            begin
                ;;Default to opeing the last used solution
                data lastSolution = Properties.Settings.Default.LastSolution
                if (!String.IsNullOrWhiteSpace(lastSolution) && File.Exists(lastSolution))
                    doOpenSolution(lastSolution)
            end

        endmethod

        private method openSolution, void
        proc
            if (_SolutionOpen)
                closeSolution()

            data dlg = new OpenFileDialog()

            dlg.Title = "Open Visual Studio Solution"
            dlg.Filter = "Solution Files (*.sln)|*.sln"
            dlg.CheckFileExists = true
            dlg.Multiselect = false

            ;;If we have a lst used solution, default to it
            data lastSolution = Properties.Settings.Default.LastSolution
            if (!String.IsNullOrWhiteSpace(lastSolution) && File.Exists(lastSolution))
            begin
                dlg.InitialDirectory = Path.GetDirectoryName(lastSolution)
                dlg.FileName = Path.GetFileName(lastSolution)
            end

            ;;Show the dialog
            data result, Nullable<boolean>, dlg.ShowDialog()

            if (result == true)
            begin
                ;;Default to the same solution next time
                Properties.Settings.Default.LastSolution = dlg.FileName
                Properties.Settings.Default.Save()

                doOpenSolution(dlg.FileName)
            end

        endmethod

        private method doOpenSolution, void
            required in aSolutionFile, string
        proc
            SolutionFile = aSolutionFile
            SolutionFolder = Path.GetDirectoryName(_SolutionFile)
            SettingsFile = Path.Combine(Path.GetDirectoryName(_SolutionFile), Path.GetFileNameWithoutExtension(_SolutionFile) + Properties.Settings.Default.HarmonyCoreProjectFileExtension)
            TasksetFile = Path.Combine(Path.GetDirectoryName(_SolutionFile), Path.GetFileNameWithoutExtension(_SolutionFile) + Properties.Settings.Default.CodeGenProjectFileExtension)

            ;;Make sure we're in the solution folder
            Directory.SetCurrentDirectory(_SolutionFolder)

            data errors = new List<string>()
            data temp, string

            if (File.Exists(_SettingsFile)) then
            begin
                ;; Load existing settings file
                data settingsJson = File.ReadAllText(_SettingsFile)
                Options = JsonConvert.DeserializeObject<HarmonyCoreOptions>(
                &    settingsJson,
                &    new JsonSerializerSettings() {DefaultValueHandling = DefaultValueHandling.Populate}
                &    )
                Options.TrackChanges = true

                ;; Repository files
                if (!File.Exists(Options.RepositoryMainFile))
                    errors.Add("Repository main file not found!")

                if (!File.Exists(Options.RepositoryTextFile))
                    errors.Add("Repository text file not found!")

                ;; User tokens file should be in the solution folder
                if (!File.Exists(Options.UserTokensFile))
                    errors.Add("user defined tokens file not found!")

                ;; Verify the services folder is present
                if (!Directory.Exists(Options.ServicesFolder))
                    errors.Add("Services folder not found!")

                ;; Verify the controllers folder is present
                if (!Directory.Exists(Options.ControllersFolder))
                    errors.Add("Controllers folder not found!")

                ;; Verify the self host folder is present
                if (!Directory.Exists(Options.SelfHostFolder))
                    errors.Add("Self host folder not found!")

                ;; Verify the isolated folder is present
                if (!Directory.Exists(Options.IsolatedFolder))
                    errors.Add("Isolated folder not found!")

                ;; Verify the models folder is present
                if (!Directory.Exists(Options.ModelsFolder))
                    errors.Add("Models folder not found!")

                ;; Do we have a unit tests folder?
                if (!String.IsNullOrWhiteSpace(Options.UnitTestFolder) && !Directory.Exists(Options.UnitTestFolder))
                    errors.Add("Unit test folder not found!")

                ;; Templates folder should be right below the solution folder.
                if (!Directory.Exists(Options.TemplatesFolder))
                    errors.Add("Templates folder not found!")

                ;; For existing projects, show the code generation page
                if (errors.Count == 0)
                    SelectedTabIndex = 3
            end
            else
            begin
                ;; No settings file, start from scratch

                Options = new HarmonyCoreOptions()
                Options.TrackChanges = true

                ;; TODO: For now we're assuming the repository project is in "schema centric" mode and Debug mode is being used

                ;; Repository files

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.RepositoryFolder, "bin", "Debug", Properties.Settings.Default.RepositoryMainFile)

                if (File.Exists(temp)) then
                    Options.RepositoryMainFile = FileTools.GetRelativePath(_SolutionFolder,temp)
                else
                    errors.Add(String.Format("Repository main file '{0}' was not found in the expected location!",Properties.Settings.Default.RepositoryMainFile))

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.RepositoryFolder, "bin", "Debug", Properties.Settings.Default.RepositoryTextFile)

                if (File.Exists(temp)) then
                    Options.RepositoryTextFile = FileTools.GetRelativePath(_SolutionFolder,temp)
                else
                    errors.Add(String.Format("Repository text file '{0}' was not found in the expected location!",Properties.Settings.Default.RepositoryTextFile))

                ;; User tokens file should be in the solution folder

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.UserTokenFile)

                if (File.Exists(temp)) then
                    Options.UserTokensFile = FileTools.GetRelativePath(_SolutionFolder,temp)
                else
                    errors.Add(String.Format("File '{0}' was not found in the solution directory!",Properties.Settings.Default.UserTokenFile))

                ;; Verify the services folder is present

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.ServicesFolder)

                if (!Directory.Exists(temp)) then
                    errors.Add(String.Format("Folder '{0}' was not found in the solution directory!",Properties.Settings.Default.ServicesFolder))
                else
                begin
                    Options.ServicesFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                    Options.ServicesProject = Properties.Settings.Default.ServicesProject
                    ;;Verify that the project is present
                    if (!File.Exists(Path.Combine(Options.ServicesFolder, Options.ServicesProject)))
                        errors.Add(String.Format("Project '{0}' was not found!",Properties.Settings.Default.ServicesProject))
                end

                ;; Verify the controllers folder is present

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.ControllersFolder)

                if (!Directory.Exists(temp)) then
                    errors.Add(String.Format("Folder '{0}' was not found in the solution directory!",Properties.Settings.Default.ControllersFolder))
                else
                begin
                    Options.ControllersFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                    Options.ControllersProject = Properties.Settings.Default.ControllersProject
                    ;;Verify that the project is present
                    if (!File.Exists(Path.Combine(Options.ControllersFolder, Options.ControllersProject)))
                        errors.Add(String.Format("Project '{0}' was not found!",Properties.Settings.Default.ControllersProject))
                end

                ;; Verify the self host folder is present

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.HostFolder)

                if (!Directory.Exists(temp)) then
                    errors.Add(String.Format("Folder '{0}' was not found in the solution directory!",Properties.Settings.Default.HostFolder))
                else
                begin
                    Options.SelfHostFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                    Options.SelfHostProject = Properties.Settings.Default.HostProject
                    ;;Verify that the project is present
                    if (!File.Exists(Path.Combine(Options.SelfHostFolder, Options.SelfHostProject)))
                        errors.Add(String.Format("Project '{0}' was not found!",Properties.Settings.Default.HostProject))
                end

                ;; Verify the isolated folder is present

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.IsolatedFolder)

                if (!Directory.Exists(temp)) then
                    errors.Add(String.Format("Folder '{0}' was not found in the solution directory!",Properties.Settings.Default.IsolatedFolder))
                else
                begin
                    Options.IsolatedFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                    Options.IsolatedProject = Properties.Settings.Default.IsolatedProject
                    ;;Verify that the project is present
                    if (!File.Exists(Path.Combine(Options.IsolatedFolder, Options.IsolatedProject)))
                        errors.Add(String.Format("Project '{0}' was not found!",Properties.Settings.Default.IsolatedProject))
                end

                ;; Verify the models folder is present

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.ModelsFolder)

                if (!Directory.Exists(temp)) then
                    errors.Add(String.Format("Folder '{0}' was not found in the solution directory!",Properties.Settings.Default.ModelsFolder))
                else
                begin
                    Options.ModelsFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                    Options.ModelsProject = Properties.Settings.Default.ModelsProject
                    ;;Verify that the project is present
                    if (!File.Exists(Path.Combine(Options.ModelsFolder, Options.ModelsProject)))
                        errors.Add(String.Format("Project '{0}' was not found!",Properties.Settings.Default.ModelsProject))
                end

                ;; Do we have a unit tests folder?

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.TestFolder)

                if (!Directory.Exists(temp)) then
                    Options.UnitTestFolder = String.Empty
                else
                begin
                    Options.UnitTestFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                    Options.UnitTestProject = Properties.Settings.Default.TestProject
                    ;;Verify that the project is present
                    if (!File.Exists(Path.Combine(Options.UnitTestFolder, Options.UnitTestProject)))
                        errors.Add(String.Format("Project '{0}' was not found!",Properties.Settings.Default.TestProject))
                end

                ;; Load the repository

                if (errors.Count == 0)
                begin
                    data rps = new Repository(Options.RepositoryMainFile, Options.RepositoryTextFile, false)
                    begin
                        data str, @RpsStructure
                        foreach str in rps.Structures
                            Options.Structures.Add(new StructureRow(str))
                    end
                    ;; For new projects, show the structure selection page
                    if (errors.Count == 0)
                        SelectedTabIndex = 1
                end

                ;; Templates folder should be right below the solution folder.
                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.TemplatesFolder)
                if (Directory.Exists(temp)) then
                    Options.TemplatesFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                else
                    errors.Add(String.Format("Folder '{0}' was not found in the solution directory!",Properties.Settings.Default.TemplatesFolder))
            end

            if (errors.Count == 0) then
            begin
                if (Options.Structures.Count > 0)
                    SelectedStructure = Options.Structures.First()

                SolutionOpen = true

                WindowTitle = String.Format("{0} [{1}]",Properties.Settings.Default.WindowTitle,SolutionFile)

            end
            else
            begin
                data message = "The solution configuration was not as expected"
                data error, string
                foreach error in errors
                    message = message + Environment.NewLine + " - " + error

                MessageBox.Show(message, "Unsupported Configuration", MessageBoxButton.OK, MessageBoxImage.Exclamation)

                ;; Clear things down so the UI is blank
                SolutionFile = String.Empty
                SolutionFolder = String.Empty
                SettingsFile = String.Empty
                TasksetFile = String.Empty
                Options = new HarmonyCoreOptions()
            end
            
        endmethod

        private method closeSolution, void
        proc
            if (_SolutionOpen)
            begin
                if (Options.UnsavedChanges)
                begin
                    if (MessageBox.Show("Save changes before closing the solution?", "Unsaved Changes", MessageBoxButton.YesNo, MessageBoxImage.Question, MessageBoxResult.Yes) == MessageBoxResult.Yes)
                    begin
                        saveSettings()
                    end
                end

                SolutionOpen = false
                SolutionFile = String.Empty
                SettingsFile = String.Empty
                CodeGenOutput = new ObservableCollection<string>()
                Options = new HarmonyCoreOptions()
                SelectedTabIndex = 0

                WindowTitle = String.Format("{0}",Properties.Settings.Default.WindowTitle)

            end
        endmethod
        
        private method saveSettings, void
        proc
            try
            begin
                data jsonData = JsonConvert.SerializeObject(
                &    Options,
                &    Formatting.Indented, 
                &    new JsonSerializerSettings() {DefaultValueHandling = DefaultValueHandling.Include}
                &    )
                File.WriteAllText(_SettingsFile, jsonData)
                Options.ChangesSaved()
            end
            catch (ex, @Exception)
            begin
                MessageBox.Show("Failed to save settings! Error was " + ex.Message)
            end
            endtry
        endmethod
        
        private method refreshRepository, void
        proc
            ;; Ensure the code generation page is visible
            if (SelectedTabIndex != 1)
                SelectedTabIndex = 1

            data rps = new Repository(Options.RepositoryMainFile, Options.RepositoryTextFile, false)
            data str, @RpsStructure
            data row, @StructureRow
            
            ;;First look for structures in our list that are no longer in the repository

            data rowsToDelete = new List<StructureRow>()
            foreach row in Options.Structures
            begin
                ;;Is this structure still in the repository?
                if (rps.Structures.Any(lambda (s) { s.Name.Equals(row.Name) }))
                    nextloop
                ;;Nope, lose it!
                rowsToDelete.Add(row)
            end

            ;;Delete structures no longer in the repository

            foreach row in rowsToDelete
            begin
                Options.Structures.Remove(row)
            end

            ;;Next look for structures in repository that are not in our list
            foreach str in rps.Structures
            begin
                ;;Is the strcuture already in our list of structiures
                if (Options.Structures.Any(lambda(s) { s.Name.Equals(str.Name) }))
                    nextloop
                ;;Nope, add it!
                ;TODO: Add in alphabetic order!
                Options.Structures.Add(new StructureRow(str))
            end

        endmethod
        
        private method generateCode, void
        proc
            ;; Ensure the code generation page is visible
            if (SelectedTabIndex != 3)
                SelectedTabIndex = 3

            ;;Make sure we're in the solution folder
            Directory.SetCurrentDirectory(_SolutionFolder)

            if (Options.UnsavedChanges)
            begin
                if (MessageBox.Show("Save configuration changes before generating?","There are Unsaved Changes",MessageBoxButton.YesNo,MessageBoxImage.Question,MessageBoxResult.Yes) == MessageBoxResult.Yes)
                begin
                    saveSettings()
                end
            end

            StatusBarText = "Generating code..."

            CodeGenOutput = new ObservableCollection<string>()

            data taskset = new CodeGenTaskSet()
            &    {
            &    Description = "Code generation tasks for Harmony Core solution.",
            &    RepositoryMainFile = Options.RepositoryMainFile,
            &    RepositoryTextFile = Options.RepositoryTextFile,
            &    TemplateFolder = Options.TemplatesFolder,
            &    EchoCommands = true,
            &    ListGeneratedFiles = true,
            &    LoggingLevel = CodeGenLoggingLevel
            &    }
            setDefines(taskset)
            data task, @CodeGenTask

            ;; Create a task to generate model and metadata classes

            task = new CodeGenTask()
            task.Description = "Generate model and metadata classes"
            task.Templates.Add("ODataModel")
            task.Templates.Add("ODataMetaData")
            task.OutputFolder = Options.ModelsFolder
            task.Namespace = "Services.Models"
            addStructureAndFileStructures(task)
            addStructureOnlyStructures(task)
            addCustomCodeStructures(task)
            addStandardOptions(task)
            taskset.Tasks.Add(task)

            ;; Create a task to generate controller classes

            task = new CodeGenTask()
            task.Description = "Generate controller classes"
            task.Templates.Add("ODataController")
            task.OutputFolder = Options.ControllersFolder
            task.Namespace = "Services.Controllers"
            addStructureAndFileStructures(task)
            addStructureOnlyStructures(task)
            addStandardOptions(task)
            taskset.Tasks.Add(task)

            ;; Create a task to generate the DBContext class

            task = new CodeGenTask()
            task.Description = "Generate the DBContext class"
            task.Templates.Add("ODataDbContext")
            task.OutputFolder = Options.ModelsFolder
            task.Namespace = "Services.Models"
            task.MultipleStructures = true
            addStructureAndFileStructures(task)
            addStructureOnlyStructures(task)
            addStandardOptions(task)
            taskset.Tasks.Add(task)

            ;; Create a task to generate the EdbBuilder and Startup classes

            task = new CodeGenTask()
            task.Description = "Generate the EdbBuilder and Startup classes"
            task.Templates.Add("ODataEdmBuilder")
            task.Templates.Add("ODataStartup")
            task.OutputFolder = Options.ServicesFolder
            task.Namespace = "Services"
            task.MultipleStructures = true
            task.UserTokens.Add(new UserToken("CONTROLLERS_NAMESPACE", "Services.Controllers"))
            task.UserTokens.Add(new UserToken("MODELS_NAMESPACE", "Services.Models"))
            addStructureAndFileStructures(task)
            addStructureOnlyStructures(task)
            addStandardOptions(task)
            taskset.Tasks.Add(task)

            ;; Create a task to generate self hosting program and environment

            if (Options.GenerateSelfHost)
            begin
                task = new CodeGenTask()
                task.Description = "Generate self hosting program and environment"
                task.Templates.Add("ODataSelfHost")
                task.Templates.Add("ODataSelfHostEnvironment")
                task.OutputFolder = Options.SelfHostFolder
                task.Namespace = "Services.Host"
                task.MultipleStructures = true
                addStructureAndFileStructures(task)
                ;; TODO: if we have a parameter file structure we need to add that here also
                addStandardOptions(task)
                taskset.Tasks.Add(task)
            end

            ;; Create tasks to generate swagger docs

            if (Options.GenerateSwaggerDocs)
            begin
                task = new CodeGenTask()
                task.Description = "Generate swagger documentation"
                task.Templates.Add("ODataSwaggerYaml")
                task.OutputFolder = Path.Combine(Options.ServicesFolder, "wwwroot")
                task.MultipleStructures = true
                addStructureAndFileStructures(task)
                addStructureOnlyStructures(task)
                addStandardOptions(task)
                taskset.Tasks.Add(task)

                task = new CodeGenTask()
                task.Description = "Generate swagger complex types documentation"
                task.Templates.Add("ODataSwaggerType")
                task.OutputFolder = Path.Combine(Options.ServicesFolder, "wwwroot")
                addStructureAndFileStructures(task)
                addStructureOnlyStructures(task)
                addStandardOptions(task)
                taskset.Tasks.Add(task)
            end

            ;; Create a task to generate Postman tests

            if (Options.GeneratePostmanTests)
            begin
                task = new CodeGenTask()
                task.Description = "Generate Postman tests"
                task.Templates.Add("ODataPostManTests")
                task.OutputFolder = _SolutionFolder
                task.MultipleStructures = true
                addStructureAndFileStructures(task)
                addStructureOnlyStructures(task)
                addStandardOptions(task)
                taskset.Tasks.Add(task)
            end

            ;; Create tass to generatea unit test environment

            if (Options.GenerateUnitTests)
            begin
                task = new CodeGenTask()
                task.Description = "Generate client-side models, data loaders and unit tests"
                task.Templates.Add("ODataClientModel")
                task.Templates.Add("ODataTestDataLoader")
                task.Templates.Add("ODataUnitTests")
                task.OutputFolder = Options.UnitTestFolder
                task.Namespace = "Services.Test"
                addStructureAndFileStructures(task)
                addStructureOnlyStructures(task)
                addStandardOptions(task)
                taskset.Tasks.Add(task)

                task = new CodeGenTask()
                task.Description = "Generate test environment"
                task.Templates.Add("ODataTestEnvironment")
                task.OutputFolder = Options.UnitTestFolder
                task.Namespace = "Services.Test"
                task.MultipleStructures = true
                addStructureAndFileStructures(task)
                ;; TODO: if we have a parameter file structure we need to add that here also
                addStandardOptions(task)
                taskset.Tasks.Add(task)

                task = new CodeGenTask()
                task.Description = "Generate unit test environment and hosting program"
                task.Templates.Add("ODataUnitTestEnvironment")
                task.Templates.Add("ODataUnitTestHost")
                task.OutputFolder = Options.UnitTestFolder
                task.Namespace = "Services.Test"
                task.MultipleStructures = true
                addStructureAndFileStructures(task)
                addStandardOptions(task)
                taskset.Tasks.Add(task)

                task = new CodeGenTask()
                task.Description = "Generate test constants class"
                task.Templates.Add("ODataTestConstantsProperties")
                task.OutputFolder = Options.UnitTestFolder
                task.Namespace = "Services.Test"
                task.MultipleStructures = true
                addStructureAndFileStructures(task)
                addStructureOnlyStructures(task)
                addStandardOptions(task)
                taskset.Tasks.Add(task)

                task = new CodeGenTask()
                task.Description = "Generate test constants values"
                task.Templates.Add("ODataTestConstantsValues")
                task.OutputFolder = Options.UnitTestFolder
                task.Namespace = "Services.Test"
                task.MultipleStructures = true
                addStructureAndFileStructures(task)
                addStructureOnlyStructures(task)
                addNoReplaceOptions(task)
                taskset.Tasks.Add(task)
            end

            ;; Do it all!

            data codegen = new CodeGenerator(taskset)
            data success, boolean

            try
            begin
                ;;Generate code
                success = codegen.GenerateCode()

                ;;Display the results
                CodeGenOutput = taskset.Messages

                ;;Save the taskset to a file so we can manually generate from it later
                taskset.SaveToFile(_TasksetFile)

                ;;Add new files to the Visual Studio Solutions
                data messages = new List<String>()
                updateProjectFiles(taskset,messages)

                data message, string
                foreach message in messages
                    CodeGenOutput.Add(message)

            end
            catch (e, @Exception)
            begin
                StatusBarText = String.Format("Unexpected error during code generation. Error was '{0}'",e.Message)
            end
            endtry

            if (success) then
            begin
                StatusBarText = "Success"
            end
            else
            begin
                StatusBarText = "Errors occured during code generation"
            end

            structureAndFileStructures = ^null
            structureAndFileAliases = ^null

        endmethod
        
        ;;; <summary>
        ;;; Extracts a list of all source files generated by a task set and
        ;;; adds them to the appropriate Visual Studio project if necessary.
        ;;; </summary>
        ;;; <param name="taskset">Completed CodeGen taskset to check</param>
        private method updateProjectFiles, void
            required in taskset, @CodeGenTaskSet
            required out messages, @List<String>
        proc
            ;;Initialize the return messages collection
            if (messages == ^null) then
                messages = new List<String>()
            else
                messages.Clear()

            ;;Extract a list of all source files generated by the taskset
            data task, @CodeGenTask
            data newFile, string
            data allNewFiles = new List<String>()

            foreach task in taskset.Tasks
            begin
                foreach newFile in task.FilesGenerated
                begin
                    if (Path.GetExtension(newFile).ToLower().Equals(".dbl"))
                    begin
                        allNewFiles.Add(newFile)
                    end
                end
            end

            ;;Determine which project each of the new files belongs to

            data servicesFiles = new List<String>()
            data controllersFiles = new List<String>()
            data modelsFiles = new List<String>()
            data hostFiles = new List<String>()
            data isolatedFiles = new List<String>()
            data unitTestFiles = new List<String>()

            data sourceFilePath, string
            data sourceFileNameOnly, string

            foreach sourceFilePath in allNewFiles
            begin
                sourceFileNameOnly = Path.GetFileName(sourceFilePath)

                if (sourceFilePath.StartsWith(String.Format("{0}\",Options.ServicesFolder))) then
                    servicesFiles.Add(sourceFileNameOnly)
                else if (sourceFilePath.StartsWith(String.Format("{0}\",Options.ControllersFolder))) then
                    controllersFiles.Add(sourceFileNameOnly)
                else if (sourceFilePath.StartsWith(String.Format("{0}\",Options.SelfHostFolder))) then
                    hostFiles.Add(sourceFileNameOnly)
                else if (sourceFilePath.StartsWith(String.Format("{0}\",Options.IsolatedFolder))) then
                    isolatedFiles.Add(sourceFileNameOnly)
                else if (sourceFilePath.StartsWith(String.Format("{0}\",Options.ModelsFolder))) then
                    modelsFiles.Add(sourceFileNameOnly)
                else if (sourceFilePath.StartsWith(String.Format("{0}\",Options.UnitTestFolder)))
                    unitTestFiles.Add(sourceFileNameOnly)
            end

            ;;Add any new files to the projects

            if (servicesFiles.Count > 0)
            begin
                updateProjectFile(Path.Combine(Options.ServicesFolder,Options.ServicesProject),servicesFiles)
                if (servicesFiles.Count != 0)
                begin
                    messages.Add("")
                    messages.Add("New files were added to " + Options.ServicesProject)
                    messages.AddRange(servicesFiles)
                end
            end

            if (controllersFiles.Count > 0)
            begin
                updateProjectFile(Path.Combine(Options.ControllersFolder,Options.ControllersProject),controllersFiles)
                if (controllersFiles.Count != 0)
                begin
                    messages.Add("")
                    messages.Add("New files were added to " + Options.ControllersProject)
                    messages.AddRange(controllersFiles)
                end
            end

            if (modelsFiles.Count > 0)
            begin
                updateProjectFile(Path.Combine(Options.ModelsFolder,Options.ModelsProject),modelsFiles)
                if (modelsFiles.Count != 0)
                begin
                    messages.Add("")
                    messages.Add("New files were added to " + Options.ModelsProject)
                    messages.AddRange(modelsFiles)
                end
            end

            if (hostFiles.Count > 0)
            begin
                updateProjectFile(Path.Combine(Options.SelfHostFolder,Options.SelfHostProject),hostFiles)
                if (hostFiles.Count != 0)
                begin
                    messages.Add("")
                    messages.Add("New files were added to " + Options.SelfHostProject)
                    messages.AddRange(hostFiles)
                end
            end

            if (isolatedFiles.Count > 0)
            begin
                updateProjectFile(Path.Combine(Options.IsolatedFolder,Options.IsolatedProject),isolatedFiles)
                if (isolatedFiles.Count != 0)
                begin
                    messages.Add("")
                    messages.Add("New files were added to " + Options.IsolatedProject)
                    messages.AddRange(isolatedFiles)
                end
            end

            if (unitTestFiles.Count > 0)
            begin
                updateProjectFile(Path.Combine(Options.UnitTestFolder,Options.UnitTestProject),unitTestFiles)
                if (unitTestFiles.Count != 0)
                begin
                    messages.Add("")
                    messages.Add("New files were added to " + Options.UnitTestProject)
                    messages.AddRange(unitTestFiles)
                end
            end

            if (messages.Count == 0)
            begin
                messages.Add("")
                messages.Add("No new source files were added to projects")
            end

        endmethod

        ;;; <summary>
        ;;; Adds any new source files to a Visual Studio project
        ;;; </summary>
        ;;; <param name="aProjectFile">Full file spec of project file to check.</param>
        ;;; <param name="aSourceFiles">Collection of source files to check.</param>
        private method updateProjectFile, void
            required in aProjectFile, string
            required inout aSourceFiles, @List<String>
        proc

            data sourceFilesAdded = new List<String>()

            data xDoc = XDocument.Load(aProjectFile)

            ;;Find all <ItemGroup> elements
            data itemGroups = xDoc.Descendants("ItemGroup")

            ;;Find the <ItemGroup> that contains <Compile> elements
            data itemGroupsWithCompileItems = itemGroups.Where(lambda (ig) { ig.Descendants("Compile").Count() > 0 })

            ;;Build a list of new <Compile> elements to add
            data newItems = new List<XElement>()
            begin
                data newFile, string
                foreach newFile in aSourceFiles
                begin
                    ;;If we're adding to an existing <ItemList> we need to make sure that
                    ;;this file is not already included.
                    if (itemGroupsWithCompileItems.Count() > 0)
                    begin
                        data itemGroup = itemGroupsWithCompileItems.FirstOrDefault()
                        if (itemGroup.Descendants().Any(lambda(xe) { xe.FirstAttribute.Value.Equals(newFile) }))
                            nextloop
                    end
                    ;;Add a new <Compile> element for the file
                    data newItem = new XElement("Compile")
                    newItem.SetAttributeValue("Include", newFile)
                    newItems.Add(newItem)

                    ;;Tell the calling routine that we added this file
                    sourceFilesAdded.Add(newFile)
                end
            end

            ;;Did we find any new items for the project?
            if (newItems.Count > 0)
            begin
                ;;Did we find an <ItemGroup> with existing <Compile> elements?
                if (itemGroupsWithCompileItems.Count() > 0) then
                begin
                    ;;Yes, add the new items to it
                    itemGroupsWithCompileItems.FirstOrDefault().Add(newItems.ToArray())
                end
                else
                begin
                    ;;No, add a new item group after the last one and add new items to it.
                    data lastItemGroup = itemGroups.LastOrDefault()
                    lastItemGroup.AddAfterSelf(new XElement("ItemGroup", newItems.ToArray()))
                end
            
                ;;Save the updated project file
                ;;Don't use xDoc.Save(aProjectFile) becsuse it adds an XML declaration to the project file.
                File.WriteAllText(aProjectFile,xDoc.ToString())
            end

            ;;Tell the calling routine what we did
            aSourceFiles = sourceFilesAdded

        endmethod

        private method setDefines, void
            taskset, @CodeGenTaskSet 
        proc
            if (Options.FullCollectionEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_GET_ALL")

            if (Options.PrimaryKeyEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_GET_ONE")

            if (Options.CreateTestFiles)
                taskset.Defines.Add("DEFINED_ENABLE_CREATE_TEST_FILES")

            if (Options.GenerateSwaggerDocs)
                taskset.Defines.Add("DEFINED_ENABLE_SWAGGER_DOCS")

            if (Options.EnableApiVersioning)
                taskset.Defines.Add("DEFINED_ENABLE_API_VERSIONING")

            if (Options.AlternateKeyEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_ALTERNATE_KEYS")

            if (Options.CollectionCountEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_COUNT")

            if (Options.IndividualPropertyEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_PROPERTY_ENDPOINTS")

            if (Options.DocumentPropertyEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_PROPERTY_VALUE_DOCS")

            if (Options.ODataSelect)
                taskset.Defines.Add("DEFINED_ENABLE_SELECT")

            if (Options.ODataFilter)
                taskset.Defines.Add("DEFINED_ENABLE_FILTER")

            if (Options.ODataOrderBy)
                taskset.Defines.Add("DEFINED_ENABLE_ORDERBY")

            if (Options.ODataTop)
                taskset.Defines.Add("DEFINED_ENABLE_TOP")

            if (Options.ODataSkip)
                taskset.Defines.Add("DEFINED_ENABLE_SKIP")

            if (Options.ODataRelations)
                taskset.Defines.Add("DEFINED_ENABLE_RELATIONS")

            if (Options.PutEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_PUT")

            if (Options.PostEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_POST")

            if (Options.PatchEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_PATCH")

            if (Options.DeleteEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_DELETE")

            if (Options.StoredProcedureRouting)
                taskset.Defines.Add("DEFINED_ENABLE_SPROC")

            if (Options.AdapterRouting)
                taskset.Defines.Add("DEFINED_ENABLE_ADAPTER_ROUTING")

            if (Options.Authentication)
                taskset.Defines.Add("DEFINED_ENABLE_AUTHENTICATION")

            if (Options.CustomAuthentication)
                taskset.Defines.Add("DEFINED_ENABLE_CUSTOM_AUTHENTICATION")

            if (Options.FieldSecurity)
                taskset.Defines.Add("DEFINED_ENABLE_FIELD_SECURITY")

            if (Options.CaseSensitiveUrls)
                taskset.Defines.Add("DEFINED_ENABLE_CASE_SENSITIVE_URL")

            if (Options.CrossDomainBrowsing)
                taskset.Defines.Add("DEFINED_ENABLE_CORS")

            if (Options.IISSupport)
                taskset.Defines.Add("DEFINED_ENABLE_IIS_SUPPORT")

            if (Options.ReadOnlyProperties)
                taskset.Defines.Add("DEFINED_ENABLE_READ_ONLY_PROPERTIES")

            if (Options.ODataSelect || Options.ODataFilter || Options.ODataOrderBy || Options.ODataTop || Options.ODataSkip || Options.ODataRelations)
                taskset.Defines.Add("DEFINED_PARAM_OPTIONS_PRESENT")

        endmethod
        
        private static structureAndFileStructures, @List<string>
        private static structureAndFileAliases, @List<string>
        
        private method addStructureAndFileStructures, void
            task, @CodeGenTask 
        proc
            ;; One time only per code generation pass

            if (structureAndFileStructures == ^null)
            begin
                structureAndFileStructures = new List<string>()
                structureAndFileAliases = new List<string>()
                data row, @StructureRow
                foreach row in Options.Structures.Where(lambda (row) { row.ProcessingMode.Equals("Structure and File") })
                begin
                    structureAndFileStructures.Add(row.Name)
                    structureAndFileAliases.Add(String.IsNullOrWhiteSpace(row.Alias) ? row.Name : row.Alias)
                end
            end

            ;; Add the structures to the current task

            data ix, int
            for ix from 0 thru structureAndFileStructures.Count - 1
            begin
                task.Structures.Add(structureAndFileStructures[ix])
                task.Aliases.Add(structureAndFileAliases[ix])
            end

        endmethod
        
        private static structureOnlyStructures, @List<string>
        private static structureOnlyAliases, @List<string>
        
        private method addStructureOnlyStructures, void
            task, @CodeGenTask 
        proc

            ;; One time only per code generation pass

            if (structureOnlyStructures == ^null)
            begin
                structureOnlyStructures = new List<string>()
                structureOnlyAliases = new List<string>()
                data row, @StructureRow
                foreach row in Options.Structures.Where(lambda (row) { row.ProcessingMode.Equals("Structure Only") })
                begin
                    structureOnlyStructures.Add(row.Name)
                    structureOnlyAliases.Add(String.IsNullOrWhiteSpace(row.Alias) ? row.Name : row.Alias)
                end
            end

            ;; Add the structures to the current task

            data ix, int
            for ix from 0 thru structureOnlyStructures.Count - 1
            begin
                task.Structures.Add(structureOnlyStructures[ix])
                task.Aliases.Add(structureOnlyAliases[ix])
            end

        endmethod
        
        private static customCodeStructures, @List<string>
        private static customCodeAliases, @List<string>
        
        private method addCustomCodeStructures, void
            task, @CodeGenTask 
        proc

            ;; One time only per code generation pass

            if (customCodeStructures == ^null)
            begin
                customCodeStructures = new List<string>()
                customCodeAliases = new List<string>()

                data row, @StructureRow
                foreach row in Options.Structures.Where(lambda (row) { row.ProcessingMode.Equals("Custom Code Only") })
                begin
                    customCodeStructures.Add(row.Name)
                    customCodeAliases.Add(String.IsNullOrWhiteSpace(row.Alias) ? row.Name : row.Alias)
                end
            end

            ;; Add the structures to the current task

            data ix, int
            for ix from 0 thru customCodeStructures.Count - 1
            begin
                task.Structures.Add(customCodeStructures[ix])
                task.Aliases.Add(customCodeAliases[ix])
            end

        endmethod
        
        private method addStandardOptions, void
            task, @CodeGenTask 
        proc
            addNoReplaceOptions(task)
            task.ReplaceFiles = true
        endmethod
        
        private method addNoReplaceOptions, void
            task, @CodeGenTask 
        proc
            task.UserTokenFile = Options.UserTokensFile
            task.IncludeOverlayFields = Options.FieldOverlays
            task.UseAlternateFieldNames = Options.AlternateFieldNames
        endmethod
        
    endclass

endnamespace
