
import Microsoft.Win32
import MvvmTools
import Newtonsoft.Json
import System.Collections.Generic
import System.Collections.ObjectModel
import System.IO
import System.Linq
import System.Windows
import System.Xml.Linq
import CodeGen.Engine
import CodeGen.MethodCatalogAPI
import CodeGen.RepositoryAPI
import HarmonyCoreGenerator.Model
import MvvmTools
import System.Diagnostics
import Microsoft.VisualStudio.Threading

.array 0

namespace HarmonyCoreGenerator.ViewModel
    
    public enum MainWindowTabPages
        SolutionInfo,       0
        ODataApis,          1
        BridgeApis,         2
        BridgeStructures,   3
        Miscellaneous,      4
        CodeGeneration,     5
        CreateSolution,     6
    endenum

    public partial class GeneratorViewModel extends ViewModelBase

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>
        public method GeneratorViewModel
        proc
            data commandLineArgs = Environment.GetCommandLineArgs()

            if (commandLineArgs.Length > 1) then
            begin
                ;;Is argument 2 a solution file that exists?
                if (commandLineArgs[1].ToLower().EndsWith(".sln") && File.Exists(commandLineArgs[1]))
                begin
                    ;;Looks like it, let's try to use it.
                    doOpenSolution(commandLineArgs[1])
                end
            end
            else
            begin
                ;;Default to opeing the last used solution
                data lastSolution = Properties.Settings.Default.LastSolution
                if (!String.IsNullOrWhiteSpace(lastSolution) && File.Exists(lastSolution)) then
                begin
                    doOpenSolution(lastSolution)
                end
                else
                begin
                    Properties.Settings.Default.LastSolution = String.Empty
                    Properties.Settings.Default.Save()

                    SolutionOpen = false
                    CreateTabVisible = false
                    SolutionTabsVisible = false
                end
            end

        endmethod

        private method addStandardOptions, void
            task, @CodeGenTask 
        proc
            addNoReplaceOptions(task)
            task.ReplaceFiles = true
        endmethod
        
        private method addNoReplaceOptions, void
            task, @CodeGenTask 
        proc
            task.UserTokenFile = Options.UserTokensFile
            task.IncludeOverlayFields = Options.FieldOverlays
            task.UseAlternateFieldNames = Options.AlternateFieldNames
        endmethod
        
    endclass

endnamespace
