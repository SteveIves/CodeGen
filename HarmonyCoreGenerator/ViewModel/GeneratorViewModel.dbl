
import Microsoft.Win32
import MvvmTools
import Newtonsoft.Json
import System.Collections.Generic
import System.Collections.ObjectModel
import System.IO
import System.Linq
import System.Windows
import System.Xml.Linq
import CodeGen.Engine
import CodeGen.MethodCatalogAPI
import CodeGen.RepositoryAPI
import HarmonyCoreGenerator.Model
import MvvmTools

.array 0

namespace HarmonyCoreGenerator.ViewModel
    
    public partial class GeneratorViewModel extends ViewModelBase

        ;;; <summary>
        ;;; Constructor
        ;;; </summary>        
        public method GeneratorViewModel
        proc

            data commandLineArgs = Environment.GetCommandLineArgs()

            if (commandLineArgs.Length > 1) then
            begin
                ;;Is argument 2 a solution file that exists?
                if (commandLineArgs[1].ToLower().EndsWith(".sln") && File.Exists(commandLineArgs[1]))
                begin
                    ;;Looks like it, let's try to use it.
                    doOpenSolution(commandLineArgs[1])
                end
            end
            else
            begin
                ;;Default to opeing the last used solution
                data lastSolution = Properties.Settings.Default.LastSolution
                if (!String.IsNullOrWhiteSpace(lastSolution) && File.Exists(lastSolution))
                    doOpenSolution(lastSolution)
            end

        endmethod

        private method openSolution, void
        proc
            if (_SolutionOpen)
                closeSolution()

            data dlg = new OpenFileDialog()

            dlg.Title = "Open Visual Studio Solution"
            dlg.Filter = "Solution Files (*.sln)|*.sln"
            dlg.CheckFileExists = true
            dlg.Multiselect = false

            ;;If we have a last used solution, default to it
            data lastSolution = Properties.Settings.Default.LastSolution
            if (!String.IsNullOrWhiteSpace(lastSolution) && File.Exists(lastSolution))
            begin
                dlg.InitialDirectory = Path.GetDirectoryName(lastSolution)
                dlg.FileName = Path.GetFileName(lastSolution)
            end

            ;;Show the dialog
            data result, Nullable<boolean>, dlg.ShowDialog()

            if (result == true)
            begin
                ;;Default to the same solution next time
                Properties.Settings.Default.LastSolution = dlg.FileName
                Properties.Settings.Default.Save()

                doOpenSolution(dlg.FileName)
            end

        endmethod

        ;;; <summary>
        ;;; Open a Visual Studio Solution
        ;;; </summary>
        ;;; <param name="aSolutionFile">Full path to the solution to open</param>
        private method doOpenSolution, void
            required in aSolutionFile, string
        proc
            SolutionFile = Path.GetFileName(aSolutionFile)

            ;;Determine the folder the solution file is in
            SolutionFolder = Path.GetDirectoryName(aSolutionFile)

            ;;Make sure we're in the solution folder
            if (String.IsNullOrWhiteSpace(_SolutionFolder)) then
            begin
                ;;Use current directory
                SolutionFolder = Directory.GetCurrentDirectory()
            end
            else
            begin
                ;;Set current directory
                OriginalFolder = Directory.GetCurrentDirectory()
                Directory.SetCurrentDirectory(_SolutionFolder)
            end

            ;;Set the file specs for our main configuration files

            SettingsFile = Path.Combine(
            &    _SolutionFolder,
            &    String.Format(
            &    "{0}{1}",
            &    Path.GetFileNameWithoutExtension(_SolutionFile),
            &    Properties.Settings.Default.HarmonyCoreProjectFileExtension
            &    )
            &    )

            ODataTaskSetFile = Path.Combine(
            &    _SolutionFolder,
            &    String.Format(
            &    "{0}{1}",
            &    Path.GetFileNameWithoutExtension(_SolutionFile),
            &    Properties.Settings.Default.CodeGenProjectFileExtension
            &    )
            &    )

            ODataTaskSetFile = Path.Combine(
            &    _SolutionFolder,
            &    String.Format(
            &    "{0}.odata{1}",
            &    Path.GetFileNameWithoutExtension(_SolutionFile),
            &    Properties.Settings.Default.CodeGenProjectFileExtension
            &    )
            &    )

            BridgeTaskSetFile = Path.Combine(
            &    _SolutionFolder,
            &    String.Format(
            &    "{0}.bridge{1}",
            &    Path.GetFileNameWithoutExtension(_SolutionFile),
            &    Properties.Settings.Default.CodeGenProjectFileExtension
            &    )
            &    )

            data errors = new List<string>()
            data temp, string

            if (File.Exists(_SettingsFile)) then
            begin
                ;; Load existing settings file
                data settingsJson = File.ReadAllText(_SettingsFile)
                Options = JsonConvert.DeserializeObject<HarmonyCoreOptions>(
                &    settingsJson,
                &    new JsonSerializerSettings() {DefaultValueHandling = DefaultValueHandling.Populate}
                &    )
                Options.TrackChanges = true

                ;; Repository files
                if (!File.Exists(Options.RepositoryMainFile))
                    errors.Add("Repository main file not found!")

                if (!File.Exists(Options.RepositoryTextFile))
                    errors.Add("Repository text file not found!")

                ;; User tokens file should be in the solution folder
                if (!File.Exists(Options.UserTokensFile))
                    errors.Add("user defined tokens file not found!")

                ;; Verify the services folder is present
                if (!Directory.Exists(Options.ServicesFolder))
                    errors.Add("Services folder not found!")

                ;; Verify the controllers folder is present
                if (!Directory.Exists(Options.ControllersFolder))
                    errors.Add("Controllers folder not found!")

                ;; Verify the self host folder is present
                if (!Directory.Exists(Options.SelfHostFolder))
                    errors.Add("Self host folder not found!")

                ;; Verify the isolated folder is present
                if (!Directory.Exists(Options.IsolatedFolder))
                    errors.Add("Isolated folder not found!")

                ;; Verify the models folder is present
                if (!Directory.Exists(Options.ModelsFolder))
                    errors.Add("Models folder not found!")

                ;; Do we have a unit tests folder?
                if (!String.IsNullOrWhiteSpace(Options.UnitTestFolder) && !Directory.Exists(Options.UnitTestFolder))
                    errors.Add("Unit test folder not found!")

                ;; Do we have a traditional bridge folder?
                if (!String.IsNullOrWhiteSpace(Options.TraditionalBridgeFolder) && !Directory.Exists(Options.TraditionalBridgeFolder))
                    errors.Add("Traditional Bridge folder not found!")

                ;; Templates folder should be right below the solution folder.
                if (!Directory.Exists(Options.TemplatesFolder))
                    errors.Add("Templates folder not found!")

                ;;Do we have an SMC file?
                if (!String.IsNullOrWhiteSpace(Options.SmcExportFile))
                begin
                    if (File.Exists(Options.SmcExportFile)) then
                    begin
                        refreshSmc()
                    end
                    else
                    begin
                        errors.Add("SMC export file not found!")
                    end
                end

                ;; Check for repository changes
                ;TODO: Need to make this happen after the UI has been painted.
                refreshRepository(false)

                ;; For existing projects show the code generation page
                if (errors.Count == 0)
                    SelectedTabIndex = 5
            end
            else
            begin
                ;; No settings file, start from scratch

                Options = new HarmonyCoreOptions()
                Options.TrackChanges = true

                ;; Repository files

;                parseRepositoryProject(Path.Combine(
;                &    _SolutionFolder,
;                &    Properties.Settings.Default.RepositoryFolder,
;                &    Properties.Settings.Default.RepositoryProject))

                ;; TODO: For now we're assuming the repository project is in "schema centric" mode and Debug mode is being used

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.RepositoryFolder, "bin", "Debug", Properties.Settings.Default.RepositoryMainFile)

                if (File.Exists(temp)) then
                    Options.RepositoryMainFile = FileTools.GetRelativePath(_SolutionFolder,temp)
                else
                    errors.Add(String.Format("Repository main file '{0}' was not found in the expected location!",Properties.Settings.Default.RepositoryMainFile))

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.RepositoryFolder, "bin", "Debug", Properties.Settings.Default.RepositoryTextFile)

                if (File.Exists(temp)) then
                    Options.RepositoryTextFile = FileTools.GetRelativePath(_SolutionFolder,temp)
                else
                    errors.Add(String.Format("Repository text file '{0}' was not found in the expected location!",Properties.Settings.Default.RepositoryTextFile))

                ;; User tokens file should be in the solution folder

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.UserTokenFile)

                if (File.Exists(temp)) then
                    Options.UserTokensFile = FileTools.GetRelativePath(_SolutionFolder,temp)
                else
                    errors.Add(String.Format("File '{0}' was not found in the solution directory!",Properties.Settings.Default.UserTokenFile))

                ;; Verify the services folder is present

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.ServicesFolder)

                if (!Directory.Exists(temp)) then
                    errors.Add(String.Format("Folder '{0}' was not found in the solution directory!",Properties.Settings.Default.ServicesFolder))
                else
                begin
                    Options.ServicesFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                    Options.ServicesProject = Properties.Settings.Default.ServicesProject
                    ;;Verify that the project is present
                    if (!File.Exists(Path.Combine(Options.ServicesFolder, Options.ServicesProject)))
                        errors.Add(String.Format("Project '{0}' was not found!",Properties.Settings.Default.ServicesProject))
                end

                ;; Verify the controllers folder is present

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.ControllersFolder)

                if (!Directory.Exists(temp)) then
                    errors.Add(String.Format("Folder '{0}' was not found in the solution directory!",Properties.Settings.Default.ControllersFolder))
                else
                begin
                    Options.ControllersFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                    Options.ControllersProject = Properties.Settings.Default.ControllersProject
                    ;;Verify that the project is present
                    if (!File.Exists(Path.Combine(Options.ControllersFolder, Options.ControllersProject)))
                        errors.Add(String.Format("Project '{0}' was not found!",Properties.Settings.Default.ControllersProject))
                end

                ;; Verify the self host folder is present

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.HostFolder)

                if (!Directory.Exists(temp)) then
                    errors.Add(String.Format("Folder '{0}' was not found in the solution directory!",Properties.Settings.Default.HostFolder))
                else
                begin
                    Options.SelfHostFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                    Options.SelfHostProject = Properties.Settings.Default.HostProject
                    ;;Verify that the project is present
                    if (!File.Exists(Path.Combine(Options.SelfHostFolder, Options.SelfHostProject)))
                        errors.Add(String.Format("Project '{0}' was not found!",Properties.Settings.Default.HostProject))
                end

                ;; Verify the isolated folder is present

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.IsolatedFolder)

                if (!Directory.Exists(temp)) then
                    errors.Add(String.Format("Folder '{0}' was not found in the solution directory!",Properties.Settings.Default.IsolatedFolder))
                else
                begin
                    Options.IsolatedFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                    Options.IsolatedProject = Properties.Settings.Default.IsolatedProject
                    ;;Verify that the project is present
                    if (!File.Exists(Path.Combine(Options.IsolatedFolder, Options.IsolatedProject)))
                        errors.Add(String.Format("Project '{0}' was not found!",Properties.Settings.Default.IsolatedProject))
                end

                ;; Verify the models folder is present

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.ModelsFolder)

                if (!Directory.Exists(temp)) then
                    errors.Add(String.Format("Folder '{0}' was not found in the solution directory!",Properties.Settings.Default.ModelsFolder))
                else
                begin
                    Options.ModelsFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                    Options.ModelsProject = Properties.Settings.Default.ModelsProject
                    ;;Verify that the project is present
                    if (!File.Exists(Path.Combine(Options.ModelsFolder, Options.ModelsProject)))
                        errors.Add(String.Format("Project '{0}' was not found!",Properties.Settings.Default.ModelsProject))
                end

                ;; Do we have a unit tests folder?

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.TestFolder)

                if (!Directory.Exists(temp)) then
                    Options.UnitTestFolder = String.Empty
                else
                begin
                    Options.UnitTestFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                    Options.UnitTestProject = Properties.Settings.Default.TestProject
                    ;;Verify that the project is present
                    if (!File.Exists(Path.Combine(Options.UnitTestFolder, Options.UnitTestProject)))
                        errors.Add(String.Format("Project '{0}' was not found!",Properties.Settings.Default.TestProject))
                end

                ;; Do we have a traditional bridge folder?

                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.TraditionalBridgeFolder)

                if (!Directory.Exists(temp)) then
                    Options.TraditionalBridgeFolder = String.Empty
                else
                begin
                    Options.TraditionalBridgeFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                    Options.TraditionalBridgeProject = Properties.Settings.Default.TraditionalBridgeProject
                    ;;Verify that the project is present
                    if (!File.Exists(Path.Combine(Options.TraditionalBridgeFolder, Options.TraditionalBridgeProject)))
                        errors.Add(String.Format("Project '{0}' was not found!",Properties.Settings.Default.TraditionalBridgeProject))
                end

                ;; Load the repository

                if (errors.Count == 0)
                begin
                    data rps = new Repository(Options.RepositoryMainFile, Options.RepositoryTextFile, false)
                    begin
                        data str, @RpsStructure
                        foreach str in rps.Structures
                        begin
                            Options.ODataStructures.Add(new ODataStructureRow(str))
                            Options.BridgeStructures.Add(new BridgeStructureRow(str))
                        end
                    end
                    ;; For new projects, show the OData Features tab
                    if (errors.Count == 0)
                        SelectedTabIndex = 1
                end

                ;; Templates folder should be right below the solution folder.
                temp = Path.Combine(_SolutionFolder, Properties.Settings.Default.TemplatesFolder)
                if (Directory.Exists(temp)) then
                    Options.TemplatesFolder = FileTools.GetRelativePath(_SolutionFolder,temp)
                else
                    errors.Add(String.Format("Folder '{0}' was not found in the solution directory!",Properties.Settings.Default.TemplatesFolder))
            end

            if (errors.Count == 0) then
            begin
                if (Options.ODataStructures.Count > 0)
                    SelectedOdataStructure = Options.ODataStructures.First()
                
                if (Options.BridgeStructures.Count > 0)
                    SelectedBridgeStructure = Options.BridgeStructures.First()

                SolutionOpen = true

                WindowTitle = String.Format("{0} [{1}]",Properties.Settings.Default.WindowTitle,_SolutionFile)
            end
            else
            begin
                data message = "The solution configuration was not as expected"
                data error, string
                foreach error in errors
                    message = message + Environment.NewLine + " - " + error

                MessageBox.Show(message, "Unsupported Configuration", MessageBoxButton.OK, MessageBoxImage.Exclamation)

                ;; Clear things down so the UI is blank
                SolutionFile = String.Empty
                SolutionFolder = String.Empty
                SettingsFile = String.Empty
                ODataTaskSetFile = String.Empty
                BridgeTaskSetFile = String.Empty
                Options = new HarmonyCoreOptions()
            end
            
        endmethod

;        private method parseRepositoryProject, void
;            required in aProjectFile, string
;        proc
;            data xDoc = XDocument.Load(aProjectFile)
;
;            ;;Find all <ItemGroup> elements
;            data propertyGroups = xDoc.Descendants("PropertyGroup")
;
;            ;;Now find the propertyGroups that contain the attrribute "Condition"
;            ;;There should be two, one for Debug mode and one for Release mode
;
;            data propertyGroupsWithCondition = propertyGroups.Where(lambda (pg) { pg.Attributes("Condition").Count() > 0 })
;
;
;        endmethod

        private method closeSolution, void
        proc
            if (_SolutionOpen)
            begin
                if (Options.UnsavedChanges)
                begin
                    if (MessageBox.Show("Save changes before closing the solution?", "Unsaved Changes", MessageBoxButton.YesNo, MessageBoxImage.Question, MessageBoxResult.Yes) == MessageBoxResult.Yes)
                    begin
                        saveSettings()
                    end
                end

                SolutionOpen = false
                SolutionFile = String.Empty
                SettingsFile = String.Empty
                CodeGenOutput = new ObservableCollection<LogEntry>()
                Options = new HarmonyCoreOptions()
                SelectedTabIndex = 0

                WindowTitle = String.Format("{0}",Properties.Settings.Default.WindowTitle)

            end
        endmethod
        
        private method openSmc, void
        proc
            data dlg = new OpenFileDialog()

            dlg.Title = "Open SMC Export File"
            dlg.Filter = "Smc Export Files (*.xml)|*.xml"
            dlg.CheckFileExists = true
            dlg.Multiselect = false

            ;;If we have a last used SMC file, default to it
            data lastSmcFile = Properties.Settings.Default.LastSmcFile
            if (!String.IsNullOrWhiteSpace(lastSmcFile) && File.Exists(lastSmcFile))
            begin
                dlg.InitialDirectory = Path.GetDirectoryName(lastSmcFile)
                dlg.FileName = Path.GetFileName(lastSmcFile)
            end

            ;;Show the dialog
            data result, Nullable<boolean>, dlg.ShowDialog()

            if (result == true)
            begin
                ;;Default to the same solution next time
                Properties.Settings.Default.LastSmcFile = dlg.FileName
                Properties.Settings.Default.Save()

                doOpenSmc(dlg.FileName)
            end

        endmethod

        ;;; <summary>
        ;;; Open an SMC Export File
        ;;; </summary>
        ;;; <param name="aSmcExportFile">Full path to the SMC export file to open</param>
        private method doOpenSmc, void
            required in aSmcExportFile, string
        proc

            Options.SmcExportFile = aSmcExportFile
            Options.Interfaces = new ObservableCollection<MduInterfaceRow>()
            SelectedInterfaceMethods = new ObservableCollection<SmcMethod>()

            ;;Parse the SMC XML file into an @Smc object
            data smc = new smc(aSmcExportFile)

            ;;Iterate through the interfaces in the SMC and add them to the UI
            data iface, @SmcInterface
            foreach iface in smc.Interfaces
            begin
                Options.Interfaces.Add(new MduInterfaceRow(iface))
                data meth, @SmcMethod
;                foreach meth in iface.Methods
;                begin
;                    SelectedInterfaceMethods.Add(meth)
;                end
            end

            if (Options.Interfaces.Count>0)
            begin
                SelectedInterface = Options.Interfaces.First()
            end

        endmethod

        private method saveSettings, void
        proc
            try
            begin
                ;;Serialoze the Options object into a JSON string
                data jsonData = JsonConvert.SerializeObject(
                &    Options,
                &    Formatting.Indented, 
                &    new JsonSerializerSettings() {DefaultValueHandling = DefaultValueHandling.Include}
                &    )
                ;;And save the string to the Harmony Core project settings file
                File.WriteAllText(_SettingsFile, jsonData)
                Options.ChangesSaved()
            end
            catch (ex, @Exception)
            begin
                MessageBox.Show("Failed to save settings! Error was " + ex.Message)
            end
            endtry
        endmethod
        
        private method refreshRepository, void
            required in showNoChangesMessage, boolean
        proc
            data rps = new Repository(Options.RepositoryMainFile, Options.RepositoryTextFile, false)
            
            ;;Look for structures in our OData structures list that are no longer in the repository

            data ODataRow, @ODataStructureRow
            data ODatarowsToDelete = new List<ODataStructureRow>()

            foreach ODataRow in Options.ODataStructures
            begin
                if (!rps.Structures.Any(lambda (s) { s.Name.Equals(ODataRow.Name) }))
                begin
                    ODatarowsToDelete.Add(ODataRow)
                end
            end

            ;;Look for structures in our Bridge structures list that are no longer in the repository

            data BridgeRow, @BridgeStructureRow
            data BridgeRowsToDelete = new List<BridgeStructureRow>()

            foreach BridgeRow in Options.BridgeStructures
            begin
                if (!rps.Structures.Any(lambda (s) { s.Name.Equals(BridgeRow.Name) }))
                begin
                    BridgeRowsToDelete.Add(BridgeRow)
                end
            end

            ;;Look for structures in repository that are not in our list

            data str, @RpsStructure
            data ODataStructuresToAdd = new List<RpsStructure>()
            data BridgeStructuresToAdd = new List<RpsStructure>()

            foreach str in rps.Structures
            begin
                ;; OData
                if (!Options.ODataStructures.Any(lambda(s) { s.Name.Equals(str.Name) }))
                begin
                    ODataStructuresToAdd.Add(str)
                end
                ;; Bridge
                if (!Options.BridgeStructures.Any(lambda(s) { s.Name.Equals(str.Name) }))
                begin
                    BridgeStructuresToAdd.Add(str)
                end
            end

            ;;Tell the user what we are about to do and give them the chance to cancel

            if (ODatarowsToDelete.Count > 0 || ODataStructuresToAdd.Count > 0 || BridgeRowsToDelete.Count > 0 || BridgeStructuresToAdd.Count > 0) then
            begin
                ;; Ensure the repository page is visible
                if (SelectedTabIndex != 1)
                begin
                    SelectedTabIndex = 1
                end

                data caption = "Repository Changes Detected"
                data message = String.Empty

                if (ODataStructuresToAdd.Count > 0)
                begin
                    message += "Structures to be added:"
                    foreach str in ODataStructuresToAdd
                    begin
                        message += Environment.NewLine + " - " + str.Name
                    end
                    message += Environment.NewLine
                end

                if (ODatarowsToDelete.Count > 0)
                begin
                    message += Environment.NewLine + "Structures to be removed:"
                    foreach ODataRow in ODatarowsToDelete
                    begin
                        message += Environment.NewLine + " - " + ODataRow.Name
                    end
                    message += Environment.NewLine + "Note: Source files will NOT be removed from projects:"
                end

                if (MessageBox.Show(message,caption,MessageBoxButton.OKCancel,MessageBoxImage.Information,MessageBoxResult.Cancel) == MessageBoxResult.OK)
                begin
                    ;;Remove old OData structures
                    foreach ODataRow in ODataRowsToDelete
                    begin
                        Options.ODataStructures.Remove(ODataRow)
                    end

                    ;;Remove old Bridge structures
                    foreach BridgeRow in BridgeRowsToDelete
                    begin
                        Options.BridgeStructures.Remove(BridgeRow)
                    end

                    ;;Add new OData structures, in alphabetical sequence
                    foreach str in ODataStructuresToAdd
                    begin
                        data ix, int
                        data added = false

                        for ix from 0 thru Options.ODataStructures.Count
                        begin
                            if (Options.ODataStructures[ix].Name > str.Name)
                            begin
                                Options.ODataStructures.Insert(ix,new ODataStructureRow(str))
                                added = true
                                exitloop
                            end
                        end

                        ;;If we didn't already add it then add it at the end
                        if (!added)
                        begin
                            Options.ODataStructures.Add(new ODataStructureRow(str))
                        end
                    end

                    ;;Add new Bridge structures, in alphabetical sequence
                    foreach str in BridgeStructuresToAdd
                    begin
                        data ix, int
                        data added = false

                        for ix from 0 thru Options.BridgeStructures.Count
                        begin
                            if (Options.BridgeStructures[ix].Name > str.Name)
                            begin
                                Options.BridgeStructures.Insert(ix,new BridgeStructureRow(str))
                                added = true
                                exitloop
                            end
                        end

                        ;;If we didn't already add it then add it at the end
                        if (!added)
                        begin
                            Options.BridgeStructures.Add(new BridgeStructureRow(str))
                        end
                    end

                    saveSettings()

                end
            end
            else
            begin
                if (showNoChangesMessage)
                begin
                    MessageBox.Show("No repository changes were found.","Refresh Repository",MessageBoxButton.OK,MessageBoxImage.Information)
                end
            end

            if (Options.ODataStructures.Count > 0)
            begin
                SelectedODataStructure = Options.ODataStructures.First()
            end

            if (Options.BridgeStructures.Count > 0)
            begin
                SelectedBridgeStructure = Options.BridgeStructures.First()
            end

        endmethod
        
        private method refreshSmc, void
        proc
            ;;Select the first interface and dispay its methods
            if (Options.Interfaces.Count>0)
            begin
                SelectedInterface = Options.Interfaces.First()

                ;;Load the SMC
                data catalog = new Smc(Options.SmcExportFile)

                ;;Find the interface
                data iface, @SmcInterface, catalog.Interfaces.FirstOrDefault(lambda(i) { i.Name.Equals(SelectedInterface.InterfaceName) } )

                ;;Load the interfaces methods
                if (iface!=^null)
                begin
                    SelectedInterfaceMethods = new ObservableCollection<SmcMethod>(iface.Methods)
                end
            end

            ;;TODO: Look for interfaces in environment that are no longer in the SMC
            
            ;;TODO: Look for interfaces in the SMC that are not in our environment

        endmethod

        private method generateODataCode, void
        proc
            ;; Ensure the code generation page is visible
            if (SelectedTabIndex != 5)
            begin
                SelectedTabIndex = 5
            end

            ;;Make sure we're in the solution folder
            Directory.SetCurrentDirectory(_SolutionFolder)

            if (Options.UnsavedChanges)
            begin
                if (MessageBox.Show("Save configuration changes before generating?","There are Unsaved Changes",MessageBoxButton.YesNo,MessageBoxImage.Question,MessageBoxResult.Yes) == MessageBoxResult.Yes)
                begin
                    saveSettings()
                end
            end

            StatusBarText = "Generating OData Code..."

            CodeGenOutput = new ObservableCollection<LogEntry>()

            data taskset = new CodeGenTaskSet()
            &    {
            &    Description = "Code generation tasks for Harmony Core solution.",
            &    RepositoryMainFile = Options.RepositoryMainFile,
            &    RepositoryTextFile = Options.RepositoryTextFile,
            &    TemplateFolder = Options.TemplatesFolder,
            &    EchoCommands = true,
            &    ListGeneratedFiles = true,
            &    LoggingLevel = CodeGenLoggingLevel
            &    }
            setOdataDefines(taskset)

            ;;Define code generation tasks based on options selected in the UI

            data task, @CodeGenTask

            ;;---------------------------------------------------------------------------------------------
            ;; OData

            ;; OData model & metadata classes

            task = new CodeGenTask()
            task.Description = "Generate model and metadata classes"
            task.Templates.Add("ODataModel")
            task.Templates.Add("ODataMetaData")
            task.OutputFolder = Options.ModelsFolder
            task.Namespace = "Services.Models"
            addStructureAndFileStructures(task)
            addStructureOnlyStructures(task)
            addCustomCodeStructures(task)
            addStandardOptions(task)
;            addhandler(task.StartingTask,StartingTask)
;            addhandler(task.TaskComplete,EndingTask)
            taskset.Tasks.Add(task)

            ;; OData controllers

            task = new CodeGenTask()
            task.Description = "Generate controller classes"
            task.Templates.Add("ODataController")
            task.OutputFolder = Options.ControllersFolder
            task.Namespace = "Services.Controllers"
            addStructureAndFileStructures(task)
            addStructureOnlyStructures(task)
            addStandardOptions(task)
;            addhandler(task.StartingTask,StartingTask)
;            addhandler(task.TaskComplete,EndingTask)
            taskset.Tasks.Add(task)

            ;; DBContext

            task = new CodeGenTask()
            task.Description = "Generate the DBContext class"
            task.Templates.Add("ODataDbContext")
            task.OutputFolder = Options.ModelsFolder
            task.Namespace = "Services.Models"
            task.MultipleStructures = true
            addStructureAndFileStructures(task)
            addStructureOnlyStructures(task)
            addStandardOptions(task)
;            addhandler(task.StartingTask,StartingTask)
;            addhandler(task.TaskComplete,EndingTask)
            taskset.Tasks.Add(task)

            ;; EdbBuilder and Startup classes

            task = new CodeGenTask()
            task.Description = "Generate the EdmBuilder and Startup classes"
            task.Templates.Add("ODataEdmBuilder")
            task.Templates.Add("ODataStartup")
            task.OutputFolder = Options.ServicesFolder
            task.Namespace = "Services"
            task.MultipleStructures = true
            task.UserTokens.Add(new UserToken("CONTROLLERS_NAMESPACE", "Services.Controllers"))
            task.UserTokens.Add(new UserToken("MODELS_NAMESPACE", "Services.Models"))
            addStructureAndFileStructures(task)
            addStructureOnlyStructures(task)
            addStandardOptions(task)
;            addhandler(task.StartingTask,StartingTask)
;            addhandler(task.TaskComplete,EndingTask)
            taskset.Tasks.Add(task)

            ;; Self hosting program & environment

            if (Options.GenerateSelfHost)
            begin
                task = new CodeGenTask()
                task.Description = "Generate self hosting program and environment"
                task.Templates.Add("ODataSelfHost")
                task.Templates.Add("ODataSelfHostEnvironment")
                task.OutputFolder = Options.SelfHostFolder
                task.Namespace = "Services.Host"
                task.MultipleStructures = true
                task.UserTokens.Add(new UserToken("SERVICES_NAMESPACE", "Services"))
                task.UserTokens.Add(new UserToken("MODELS_NAMESPACE", "Services.Models"))
                addStructureAndFileStructures(task)
                ;; TODO: if we have a parameter file structure we need to add that here also
                addStandardOptions(task)
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)
            end

            ;; Swagger documentation

            if (Options.VersioningOrSwagger == VersioningOrSwaggerMode.GenerateSwaggerDoc)
            begin
                task = new CodeGenTask()
                task.Description = "Generate swagger documentation"
                task.Templates.Add("ODataSwaggerYaml")
                task.OutputFolder = Path.Combine(Options.ServicesFolder, "wwwroot")
                task.MultipleStructures = true
                addStructureAndFileStructures(task)
                addStructureOnlyStructures(task)
                addStandardOptions(task)
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)

                task = new CodeGenTask()
                task.Description = "Generate swagger complex types documentation"
                task.Templates.Add("ODataSwaggerType")
                task.OutputFolder = Path.Combine(Options.ServicesFolder, "wwwroot")
                addStructureAndFileStructures(task)
                addStructureOnlyStructures(task)
                addStandardOptions(task)
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)
            end

            ;; Postman tests

            if (Options.GeneratePostmanTests)
            begin
                task = new CodeGenTask()
                task.Description = "Generate Postman tests"
                task.Templates.Add("ODataPostManTests")
                task.OutputFolder = _SolutionFolder
                task.MultipleStructures = true
                addStructureAndFileStructures(task)
                addStructureOnlyStructures(task)
                addStandardOptions(task)
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)
            end

            ;;---------------------------------------------------------------------------------------------
            ;; Unit tests

            if (Options.GenerateUnitTests)
            begin
                ;; Client-side model, data loader and unit tests

                task = new CodeGenTask()
                task.Description = "Generate client-side models, data loaders and unit tests"
                task.Templates.Add("ODataClientModel")
                task.Templates.Add("ODataTestDataLoader")
                task.Templates.Add("ODataUnitTests")
                task.OutputFolder = Options.UnitTestFolder
                task.Namespace = "Services.Test"
                addStructureAndFileStructures(task)
                addStructureOnlyStructures(task)
                addStandardOptions(task)
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)

                ;; Test environment

                task = new CodeGenTask()
                task.Description = "Generate test environment"
                task.Templates.Add("ODataTestEnvironment")
                task.OutputFolder = Options.UnitTestFolder
                task.Namespace = "Services.Test"
                task.MultipleStructures = true
                addStructureAndFileStructures(task)
                ;; TODO: if we have a parameter file structure we need to add that here also
                addStandardOptions(task)
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)

                ;; Unit test environment and hosting program

                task = new CodeGenTask()
                task.Description = "Generate unit test environment and hosting program"
                task.Templates.Add("ODataUnitTestEnvironment")
                task.Templates.Add("ODataUnitTestHost")
                task.OutputFolder = Options.UnitTestFolder
                task.Namespace = "Services.Test"
                task.MultipleStructures = true
                addStructureAndFileStructures(task)
                addStandardOptions(task)
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)

                ;; Test constants properties

                task = new CodeGenTask()
                task.Description = "Generate test constants class"
                task.Templates.Add("ODataTestConstantsProperties")
                task.OutputFolder = Options.UnitTestFolder
                task.Namespace = "Services.Test"
                task.MultipleStructures = true
                addStructureAndFileStructures(task)
                addStructureOnlyStructures(task)
                addStandardOptions(task)
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)

                ;; Test constants values (one time, no replace)

                task = new CodeGenTask()
                task.Description = "Generate test constants values"
                task.Templates.Add("ODataTestConstantsValues")
                task.OutputFolder = Options.UnitTestFolder
                task.Namespace = "Services.Test"
                task.MultipleStructures = true
                addStructureAndFileStructures(task)
                addStructureOnlyStructures(task)
                addNoReplaceOptions(task)
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)
            end

            ;;---------------------------------------------------------------------------------------------
            ;; Execute the OData tasks

            try
            begin
                data success, boolean
                data codegen = new CodeGenerator(taskset)

                ;;Generate the code
                success = codegen.GenerateCode()

                ;;Display the results
                CodeGenOutput = taskset.Messages

                ;;Save the taskset to a file so we can manually generate from it later
                taskset.SaveToFile(_ODataTaskSetFile)

                ;;Add new files to the Visual Studio Solutions
                data messages, @ObservableCollection<LogEntry>
                updateProjectFiles(taskset,messages)

                ;;Display details of files added to projects
                CodeGenOutput.AddRange(messages)

                ;;Update the status bar
                StatusBarText = success ? "Success" : "Errors occured during code generation"
            end
            catch (e, @Exception)
            begin
                StatusBarText = String.Format("Unexpected error during code generation. Error was '{0}'",e.Message)
            end
            endtry

            structureAndFileStructures = ^null
            structureAndFileAliases = ^null

        endmethod
        
        private method generateBridgeCode, void
        proc
            ;; Ensure the code generation page is visible
            if (SelectedTabIndex != 5)
            begin
                SelectedTabIndex = 5
            end

            ;;Make sure we're in the solution folder
            Directory.SetCurrentDirectory(_SolutionFolder)

            if (Options.UnsavedChanges)
            begin
                if (MessageBox.Show("Save configuration changes before generating?","There are Unsaved Changes",MessageBoxButton.YesNo,MessageBoxImage.Question,MessageBoxResult.Yes) == MessageBoxResult.Yes)
                begin
                    saveSettings()
                end
            end

            StatusBarText = "Generating Traditional Bridge Code..."

            CodeGenOutput = new ObservableCollection<LogEntry>()

            data taskset = new CodeGenTaskSet()
            &    {
            &    Description = "Code generation tasks for Harmony Core solution.",
            &    RepositoryMainFile = Options.RepositoryMainFile,
            &    RepositoryTextFile = Options.RepositoryTextFile,
            &    EchoCommands = true,
            &    ListGeneratedFiles = true,
            &    LoggingLevel = CodeGenLoggingLevel,
            &    MethodCatalog = new Smc(Options.SmcExportFile)
            &    }

            if (Options.Authentication)
                taskset.Defines.Add("DEFINED_ENABLE_AUTHENTICATION")

            ;;Define code generation tasks based on options selected in the UI

            data task, @CodeGenTask
            data iface, @MduInterfaceRow

            ;;Do we have at least one interface selected for processing?
            foreach iface in Options.Interfaces
            begin
                ;;Is this interface selected for processing?
                if (!iface.Exposed)
                begin
                    nextloop
                end

                ;; Dispatcher classes (Traditional Side)

                task = new CodeGenTask()
                task.Description = "Generate a dispatcher class for each method"
                task.Templates.Add("InterfaceMethodDispatchers")
                task.Interface = iface.InterfaceName
                task.TemplateFolder = Path.Combine(Options.TemplatesFolder,"TraditionalBridge")
                task.OutputFolder = Path.Combine(Options.TraditionalBridgeFolder,"Dispatchers")
                task.Namespace = String.Format("{0}.{1}",Options.TraditionalBridgeFolder,"Dispatchers")
                task.UserTokens.Add(new UserToken("MODELS_NAMESPACE", String.Format("{0}.{1}",Options.TraditionalBridgeFolder,"Models")))
                task.ReplaceFiles = true
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)

                ;; Main dispatcher class (Traditional Side)

                task = new CodeGenTask()
                task.Description = "Generate main dispatcher class"
                task.Templates.Add("InterfaceDispatcher")
                task.Interface = iface.InterfaceName
                task.TemplateFolder = Path.Combine(Options.TemplatesFolder,"TraditionalBridge")
                task.OutputFolder = Path.Combine(Options.TraditionalBridgeFolder,"Dispatchers")
                task.Namespace = String.Format("{0}.{1}",Options.TraditionalBridgeFolder,"Dispatchers")
                task.UserTokens.Add(new UserToken("MODELS_NAMESPACE", String.Format("{0}.{1}",Options.TraditionalBridgeFolder,"Models")))
                task.ReplaceFiles = true
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)

                ;; Sample data generator class (Traditional Side)

                task = new CodeGenTask()
                task.Description = "Generate a class to generate sample response data"
                task.Templates.Add("InterfaceTestResponses")
                task.Interface = iface.InterfaceName
                task.TemplateFolder = Path.Combine(Options.TemplatesFolder,"TraditionalBridge")
                task.OutputFolder = Path.Combine(Options.TraditionalBridgeFolder,"Methods")
                task.Namespace = String.Format("{0}.{1}",Options.TraditionalBridgeFolder,"Methods")
                task.ReplaceFiles = true
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)

                ;; Request and response models for the service class methods (.NET side)

                task = new CodeGenTask()
                task.Description = "Generate request and response models for the service class methods"
                task.Templates.Add("InterfaceServiceModels")
                task.Interface = iface.InterfaceName
                task.TemplateFolder = Path.Combine(Options.TemplatesFolder,"TraditionalBridge")
                task.OutputFolder = Options.ModelsFolder
                task.Namespace = Options.ModelsFolder
                task.ReplaceFiles = true
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)

                ;; Service class (.NET side)

                task = new CodeGenTask()
                task.Description = "Generate the service class (.NET side)"
                task.Templates.Add("InterfaceService")
                task.Interface = iface.InterfaceName
                task.TemplateFolder = Path.Combine(Options.TemplatesFolder,"TraditionalBridge")
                task.OutputFolder = Options.ControllersFolder
                task.Namespace = Options.ControllersFolder
                task.UserTokens.Add(new UserToken("MODELS_NAMESPACE", String.Format("{0}.{1}",Options.TraditionalBridgeFolder,"Models")))
                task.ReplaceFiles = true
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)

                ;; Web API controller (.NET side)

                task = new CodeGenTask()
                task.Description = "Generate Web API controller (.NET side)"
                task.Templates.Add("InterfaceController")
                task.Interface = iface.InterfaceName
                task.TemplateFolder = Path.Combine(Options.TemplatesFolder,"TraditionalBridge")
                task.OutputFolder = Options.ControllersFolder
                task.Namespace = Options.ControllersFolder
                task.UserTokens.Add(new UserToken("MODELS_NAMESPACE", String.Format("{0}.{1}",Options.TraditionalBridgeFolder,"Models")))
                task.ReplaceFiles = true
;                addhandler(task.StartingTask,StartingTask)
;                addhandler(task.TaskComplete,EndingTask)
                taskset.Tasks.Add(task)

                ;; Postman tests for the WebAPI operations

                if (Options.SmcPostmanTests)
                begin
                    task = new CodeGenTask()
                    task.Description = "Generate Postman tests for the Interface"
                    task.Templates.Add("InterfacePostmanTests")
                    task.Interface = iface.InterfaceName
                    task.TemplateFolder = Path.Combine(Options.TemplatesFolder,"TraditionalBridge")
                    task.OutputFolder = SolutionFolder
                    task.ReplaceFiles = true
;                    addhandler(task.StartingTask,StartingTask)
;                    addhandler(task.TaskComplete,EndingTask)
                    taskset.Tasks.Add(task)
                end

                ;; SignalR Service

                if (Options.SmcSignalRHubs)
                begin
                    task = new CodeGenTask()
                    task.Description = "Generate a SignalR hub for the Interface"
                    task.Templates.Add("SignalRHub ")
                    task.Interface = iface.InterfaceName
                    task.TemplateFolder = Path.Combine(Options.TemplatesFolder,"SignalR")
                    task.OutputFolder = Options.ControllersFolder
                    task.Namespace = Options.ControllersFolder
                    task.UserTokens.Add(new UserToken("MODELS_NAMESPACE", String.Format("{0}.{1}",Options.TraditionalBridgeFolder,"Models")))
                    task.ReplaceFiles = true
;                    addhandler(task.StartingTask,StartingTask)
;                    addhandler(task.TaskComplete,EndingTask)
                    taskset.Tasks.Add(task)
                end

            end

            ;;---------------------------------------------------------------------------------------------
            ;; Execute the Traditional Bridge tasks

            try
            begin
                data success, boolean
                data codegen = new CodeGenerator(taskset)

                ;;Generate the code
                success = codegen.GenerateCode()

                ;;Display the results
                CodeGenOutput = taskset.Messages

                ;;Save the taskset to a file so we can manually generate from it later
                taskset.SaveToFile(_BridgeTaskSetFile)

                ;;Add new files to the Visual Studio Solutions
                data messages, @ObservableCollection<LogEntry>
                updateProjectFiles(taskset,messages)

                ;;Display details of files added to projects
                CodeGenOutput.AddRange(messages)

                ;;Update the status bar
                StatusBarText = success ? "Success" : "Errors occured during code generation"
            end
            catch (e, @Exception)
            begin
                StatusBarText = String.Format("Unexpected error during code generation. Error was '{0}'",e.Message)
            end
            endtry

            structureAndFileStructures = ^null
            structureAndFileAliases = ^null

        endmethod

;        ;;; <summary>
;        ;;; Event handler to log as each code generation task begins
;        ;;; </summary>
;        ;;; <param name="task">Task that is beginning</param>
;        public method StartingTask, void
;            task, @CodeGenTask
;        proc
;            CodeGenOutput.Add(new LogEntry("Starting task: " + task.Description))
;        endmethod

;        ;;; <summary>
;        ;;; Event handler to log as each code generation task ends
;        ;;; </summary>
;        ;;; <param name="task">Task that ended</param>
;        public method EndingTask, void
;            task, @CodeGenTask
;        proc
;            CodeGenOutput.Add(new LogEntry("Task complete"))
;            removehandler(task.StartingTask,StartingTask)
;            removehandler(task.TaskComplete,EndingTask)
;        endmethod

        ;;; <summary>
        ;;; Extracts a list of all source files generated by a task set and
        ;;; adds them to the appropriate Visual Studio project if necessary.
        ;;; </summary>
        ;;; <param name="taskset">Completed CodeGen taskset to check</param>
        private method updateProjectFiles, void
            required in taskset, @CodeGenTaskSet
            required out messages, @ObservableCollection<LogEntry>
        proc
            ;;Initialize the return messages collection
            messages = new ObservableCollection<LogEntry>()

            ;;Extract a list of all source files generated by the taskset
            data task, @CodeGenTask
            data newFile, string
            data allNewFiles = new List<String>()

            foreach task in taskset.Tasks
            begin
                foreach newFile in task.FilesGenerated
                begin
                    if (Path.GetExtension(newFile).ToLower().Equals(".dbl"))
                    begin
                        allNewFiles.Add(newFile)
                    end
                end
            end

            ;;Determine which project each of the new files belongs to

            data servicesFiles = new List<String>()
            data controllersFiles = new List<String>()
            data modelsFiles = new List<String>()
            data hostFiles = new List<String>()
            data isolatedFiles = new List<String>()
            data unitTestFiles = new List<String>()
            data traditionalBridgeFiles = new List<String>()

            data sourceFilePath, string
            data removeString, string
            data index, int
            data tmpFile, string

            foreach sourceFilePath in allNewFiles
            begin
                if (sourceFilePath.StartsWith(removeString=String.Format("{0}\",Options.ServicesFolder))) then
                begin
                    index = sourceFilePath.IndexOf(removeString)
                    servicesFiles.Add((index < 0) ? sourceFilePath : sourceFilePath.Remove(index, removeString.Length))
                end
                else if (sourceFilePath.StartsWith(removeString=String.Format("{0}\",Options.ControllersFolder))) then
                begin
                    index = sourceFilePath.IndexOf(removeString)
                    controllersFiles.Add((index < 0) ? sourceFilePath : sourceFilePath.Remove(index, removeString.Length))
                end
                else if (sourceFilePath.StartsWith(removeString=String.Format("{0}\",Options.SelfHostFolder))) then
                begin
                    index = sourceFilePath.IndexOf(removeString)
                    hostFiles.Add((index < 0) ? sourceFilePath : sourceFilePath.Remove(index, removeString.Length))
                end
                else if (sourceFilePath.StartsWith(removeString=String.Format("{0}\",Options.IsolatedFolder))) then
                begin
                    index = sourceFilePath.IndexOf(removeString)
                    isolatedFiles.Add((index < 0) ? sourceFilePath : sourceFilePath.Remove(index, removeString.Length))
                end
                else if (sourceFilePath.StartsWith(removeString=String.Format("{0}\",Options.ModelsFolder))) then
                begin
                    index = sourceFilePath.IndexOf(removeString)
                    modelsFiles.Add((index < 0) ? sourceFilePath : sourceFilePath.Remove(index, removeString.Length))
                end
                else if (sourceFilePath.StartsWith(removeString=String.Format("{0}\",Options.UnitTestFolder))) then
                begin
                    index = sourceFilePath.IndexOf(removeString)
                    unitTestFiles.Add((index < 0) ? sourceFilePath : sourceFilePath.Remove(index, removeString.Length))
                end
                else if (sourceFilePath.StartsWith(removeString=String.Format("{0}\",Options.TraditionalBridgeFolder)))
                begin
                    index = sourceFilePath.IndexOf(removeString)
                    traditionalBridgeFiles.Add((index < 0) ? sourceFilePath : sourceFilePath.Remove(index, removeString.Length))
                end
            end

            ;;Add any new files to the projects

            if (servicesFiles.Count > 0)
            begin
                updateProjectFile(Path.Combine(Options.ServicesFolder,Options.ServicesProject),servicesFiles)
                if (servicesFiles.Count != 0)
                begin
                    messages.Add(new LogEntry(""))
                    messages.Add(new LogEntry("New files were added to " + Options.ServicesProject))
                    foreach tmpFile in servicesFiles
                    begin
                        messages.Add(new LogEntry(" - " + tmpFile))
                    end
                end
            end

            if (controllersFiles.Count > 0)
            begin
                updateProjectFile(Path.Combine(Options.ControllersFolder,Options.ControllersProject),controllersFiles)
                if (controllersFiles.Count != 0)
                begin
                    messages.Add(new LogEntry(""))
                    messages.Add(new LogEntry("New files were added to " + Options.ControllersProject))
                    foreach tmpFile in controllersFiles
                    begin
                        messages.Add(new LogEntry(" - " + tmpFile))
                    end
                end
            end

            if (modelsFiles.Count > 0)
            begin
                updateProjectFile(Path.Combine(Options.ModelsFolder,Options.ModelsProject),modelsFiles)
                if (modelsFiles.Count != 0)
                begin
                    messages.Add(new LogEntry(""))
                    messages.Add(new LogEntry("New files were added to " + Options.ModelsProject))
                    foreach tmpFile in modelsFiles
                    begin
                        messages.Add(new LogEntry(" - " + tmpFile))
                    end
                end
            end

            if (hostFiles.Count > 0)
            begin
                updateProjectFile(Path.Combine(Options.SelfHostFolder,Options.SelfHostProject),hostFiles)
                if (hostFiles.Count != 0)
                begin
                    messages.Add(new LogEntry(""))
                    messages.Add(new LogEntry("New files were added to " + Options.SelfHostProject))
                    foreach tmpFile in hostFiles
                    begin
                        messages.Add(new LogEntry(" - " + tmpFile))
                    end
                end
            end

            if (isolatedFiles.Count > 0)
            begin
                updateProjectFile(Path.Combine(Options.IsolatedFolder,Options.IsolatedProject),isolatedFiles)
                if (isolatedFiles.Count != 0)
                begin
                    messages.Add(new LogEntry(""))
                    messages.Add(new LogEntry("New files were added to " + Options.IsolatedProject))
                    foreach tmpFile in isolatedFiles
                    begin
                        messages.Add(new LogEntry(" - " + tmpFile))
                    end
                end
            end

            if (unitTestFiles.Count > 0)
            begin
                updateProjectFile(Path.Combine(Options.UnitTestFolder,Options.UnitTestProject),unitTestFiles)
                if (unitTestFiles.Count != 0)
                begin
                    messages.Add(new LogEntry(""))
                    messages.Add(new LogEntry("New files were added to " + Options.UnitTestProject))
                    foreach tmpFile in unitTestFiles
                    begin
                        messages.Add(new LogEntry(" - " + tmpFile))
                    end
                end
            end

            if (traditionalBridgeFiles.Count > 0)
            begin
                updateProjectFile(Path.Combine(Options.TraditionalBridgeFolder,Options.TraditionalBridgeProject),traditionalBridgeFiles)
                if (unitTestFiles.Count != 0)
                begin
                    messages.Add(new LogEntry(""))
                    messages.Add(new LogEntry("New files were added to " + Options.TraditionalBridgeProject))
                    foreach tmpFile in traditionalBridgeFiles
                    begin
                        messages.Add(new LogEntry(" - " + tmpFile))
                    end
                end
            end

            if (messages.Count == 0)
            begin
                messages.Add(new LogEntry(""))
                messages.Add(new LogEntry("No new source files were added to projects"))
            end

        endmethod

        ;;; <summary>
        ;;; Adds any new source files to a Visual Studio project
        ;;; </summary>
        ;;; <param name="aProjectFile">Full file spec of project file to check.</param>
        ;;; <param name="aSourceFiles">Collection of source files to check.</param>
        private method updateProjectFile, void
            required in aProjectFile, string
            required inout aSourceFiles, @List<String>
        proc

            data sourceFilesAdded = new List<String>()

            ;;Load the project file and get the root namespace of the document
            data xDoc = XDocument.Load(aProjectFile)
            data testNs = xDoc.Root.GetDefaultNamespace()

            ;;Find all <ItemGroup> elements
            data itemGroups = xDoc.Descendants(testNs + "ItemGroup")

            ;;Find the <ItemGroup> that contains <Compile> elements
            data itemGroupsWithCompileItems = itemGroups.Where(lambda (ig) { ig.Descendants(testNs + "Compile").Count() > 0 })

            ;;Build a list of new <Compile> elements to add
            data newItems = new List<XElement>()
            begin
                data newFile, string
                foreach newFile in aSourceFiles
                begin
                    ;;If we're adding to an existing <ItemList> we need to make sure that
                    ;;this file is not already included.
                    if (itemGroupsWithCompileItems.Count() > 0)
                    begin
                        data itemGroup = itemGroupsWithCompileItems.FirstOrDefault()
                        if (itemGroup.Descendants().Any(lambda(xe) { xe.FirstAttribute.Value.Equals(newFile) }))
                            nextloop
                    end
                    ;;Add a new <Compile> element for the file
                    data newItem = new XElement(testNs + "Compile")
                    newItem.SetAttributeValue("Include", newFile)
                    newItems.Add(newItem)

                    ;;Tell the calling routine that we added this file
                    sourceFilesAdded.Add(newFile)
                end
            end

            ;;Did we find any new items for the project?
            if (newItems.Count > 0)
            begin
                ;;Did we find an <ItemGroup> with existing <Compile> elements?
                if (itemGroupsWithCompileItems.Count() > 0) then
                begin
                    ;;Yes, add the new items to it
                    itemGroupsWithCompileItems.FirstOrDefault().Add(newItems.ToArray())
                end
                else
                begin
                    ;;No, add a new item group after the last one and add new items to it.
                    data lastItemGroup = itemGroups.LastOrDefault()
                    lastItemGroup.AddAfterSelf(new XElement(testNs + "ItemGroup", newItems.ToArray()))
                end
            
                ;;Save the updated project file
                ;;Don't use xDoc.Save(aProjectFile) becsuse it adds an XML declaration to the project file.
                File.WriteAllText(aProjectFile,xDoc.ToString())
            end

            ;;Tell the calling routine what we did
            aSourceFiles = sourceFilesAdded

        endmethod

        private method setOdataDefines, void
            taskset, @CodeGenTaskSet 
        proc
            taskset.Defines.Clear()

            if (Options.FullCollectionEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_GET_ALL")

            if (Options.PrimaryKeyEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_GET_ONE")

            if (Options.CreateTestFiles)
                taskset.Defines.Add("DEFINED_ENABLE_CREATE_TEST_FILES")

            if (Options.VersioningOrSwagger == VersioningOrSwaggerMode.GenerateSwaggerDoc)
                taskset.Defines.Add("DEFINED_ENABLE_SWAGGER_DOCS")

            if (Options.VersioningOrSwagger == VersioningOrSwaggerMode.ApiVersioning)
                taskset.Defines.Add("DEFINED_ENABLE_API_VERSIONING")

            if (Options.AlternateKeyEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_ALTERNATE_KEYS")

            if (Options.CollectionCountEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_COUNT")

            if (Options.IndividualPropertyEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_PROPERTY_ENDPOINTS")

            if (Options.DocumentPropertyEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_PROPERTY_VALUE_DOCS")

            if (Options.ODataSelect)
                taskset.Defines.Add("DEFINED_ENABLE_SELECT")

            if (Options.ODataFilter)
                taskset.Defines.Add("DEFINED_ENABLE_FILTER")

            if (Options.ODataOrderBy)
                taskset.Defines.Add("DEFINED_ENABLE_ORDERBY")

            if (Options.ODataTop)
                taskset.Defines.Add("DEFINED_ENABLE_TOP")

            if (Options.ODataSkip)
                taskset.Defines.Add("DEFINED_ENABLE_SKIP")

            if (Options.ODataRelations)
                taskset.Defines.Add("DEFINED_ENABLE_RELATIONS")

            if (Options.PutEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_PUT")

            if (Options.PostEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_POST")

            if (Options.PatchEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_PATCH")

            if (Options.DeleteEndpoints)
                taskset.Defines.Add("DEFINED_ENABLE_DELETE")

            if (Options.StoredProcedureRouting)
                taskset.Defines.Add("DEFINED_ENABLE_SPROC")

            if (Options.AdapterRouting)
                taskset.Defines.Add("DEFINED_ENABLE_ADAPTER_ROUTING")

            if (Options.Authentication)
                taskset.Defines.Add("DEFINED_ENABLE_AUTHENTICATION")

            if (Options.CustomAuthentication)
                taskset.Defines.Add("DEFINED_ENABLE_CUSTOM_AUTHENTICATION")

            if (Options.FieldSecurity)
                taskset.Defines.Add("DEFINED_ENABLE_FIELD_SECURITY")

            if (Options.CaseSensitiveUrls)
                taskset.Defines.Add("DEFINED_ENABLE_CASE_SENSITIVE_URL")

            if (Options.CrossDomainBrowsing)
                taskset.Defines.Add("DEFINED_ENABLE_CORS")

            if (Options.IISSupport)
                taskset.Defines.Add("DEFINED_ENABLE_IIS_SUPPORT")

            if (Options.ReadOnlyProperties)
                taskset.Defines.Add("DEFINED_ENABLE_READ_ONLY_PROPERTIES")

            if (Options.ODataSelect || Options.ODataFilter || Options.ODataOrderBy || Options.ODataTop || Options.ODataSkip || Options.ODataRelations)
                taskset.Defines.Add("DEFINED_PARAM_OPTIONS_PRESENT")

        endmethod
        
        private static structureAndFileStructures, @List<string>
        private static structureAndFileAliases, @List<string>
        
        private method addStructureAndFileStructures, void
            task, @CodeGenTask 
        proc
            ;; One time only per code generation pass

            if (structureAndFileStructures == ^null)
            begin
                structureAndFileStructures = new List<string>()
                structureAndFileAliases = new List<string>()
                data row, @ODataStructureRow
                foreach row in Options.ODataStructures.Where(lambda (row) { row.ProcessingMode.Equals("Structure and File") })
                begin
                    structureAndFileStructures.Add(row.Name)
                    structureAndFileAliases.Add(String.IsNullOrWhiteSpace(row.Alias) ? row.Name : row.Alias)
                end
            end

            ;; Add the structures to the current task

            data ix, int
            for ix from 0 thru structureAndFileStructures.Count - 1
            begin
                task.Structures.Add(structureAndFileStructures[ix])
                task.Aliases.Add(structureAndFileAliases[ix])
            end

        endmethod
        
        private static structureOnlyStructures, @List<string>
        private static structureOnlyAliases, @List<string>
        
        private method addStructureOnlyStructures, void
            task, @CodeGenTask 
        proc

            ;; One time only per code generation pass

            if (structureOnlyStructures == ^null)
            begin
                structureOnlyStructures = new List<string>()
                structureOnlyAliases = new List<string>()
                data row, @ODataStructureRow
                foreach row in Options.ODataStructures.Where(lambda (row) { row.ProcessingMode.Equals("Structure Only") })
                begin
                    structureOnlyStructures.Add(row.Name)
                    structureOnlyAliases.Add(String.IsNullOrWhiteSpace(row.Alias) ? row.Name : row.Alias)
                end
            end

            ;; Add the structures to the current task

            data ix, int
            for ix from 0 thru structureOnlyStructures.Count - 1
            begin
                task.Structures.Add(structureOnlyStructures[ix])
                task.Aliases.Add(structureOnlyAliases[ix])
            end

        endmethod
        
        private static customCodeStructures, @List<string>
        private static customCodeAliases, @List<string>
        
        private method addCustomCodeStructures, void
            task, @CodeGenTask 
        proc

            ;; One time only per code generation pass

            if (customCodeStructures == ^null)
            begin
                customCodeStructures = new List<string>()
                customCodeAliases = new List<string>()

                data row, @ODataStructureRow
                foreach row in Options.ODataStructures.Where(lambda (row) { row.ProcessingMode.Equals("Custom Code Only") })
                begin
                    customCodeStructures.Add(row.Name)
                    customCodeAliases.Add(String.IsNullOrWhiteSpace(row.Alias) ? row.Name : row.Alias)
                end
            end

            ;; Add the structures to the current task

            data ix, int
            for ix from 0 thru customCodeStructures.Count - 1
            begin
                task.Structures.Add(customCodeStructures[ix])
                task.Aliases.Add(customCodeAliases[ix])
            end

        endmethod
        
        private static traditionalBridgeStructures, @List<string>
        private static traditionalBridgeAliases, @List<string>
        
        private method addTraditionalBridgeStructures, void
            task, @CodeGenTask 
        proc

            ;; One time only per code generation pass

            if (traditionalBridgeStructures == ^null)
            begin
                traditionalBridgeStructures = new List<string>()
                traditionalBridgeAliases = new List<string>()

                data row, @ODataStructureRow
                foreach row in Options.ODataStructures.Where(lambda (row) { row.ProcessingMode.Equals("Traditional Bridge Only") })
                begin
                    traditionalBridgeStructures.Add(row.Name)
                    traditionalBridgeAliases.Add(String.IsNullOrWhiteSpace(row.Alias) ? row.Name : row.Alias)
                end
            end

            ;; Add the structures to the current task

            data ix, int
            for ix from 0 thru traditionalBridgeStructures.Count - 1
            begin
                task.Structures.Add(traditionalBridgeStructures[ix])
                task.Aliases.Add(traditionalBridgeAliases[ix])
            end

        endmethod

        private method addStandardOptions, void
            task, @CodeGenTask 
        proc
            addNoReplaceOptions(task)
            task.ReplaceFiles = true
        endmethod
        
        private method addNoReplaceOptions, void
            task, @CodeGenTask 
        proc
            task.UserTokenFile = Options.UserTokensFile
            task.IncludeOverlayFields = Options.FieldOverlays
            task.UseAlternateFieldNames = Options.AlternateFieldNames
        endmethod
        
    endclass

endnamespace
