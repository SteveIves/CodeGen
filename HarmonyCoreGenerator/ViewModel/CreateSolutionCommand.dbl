
import CodeGen.Engine
import Microsoft.VisualStudio.Threading
import MvvmTools
import System
import System.Diagnostics
import System.IO
import System.Windows
import System.Windows.Forms
import System.Windows.Input

namespace HarmonyCoreGenerator.ViewModel

    public partial class GeneratorViewModel

.region "StartCreateSolutionCommand"

        private _StartCreateSolutionCommand, @ICommand

        public property StartCreateSolutionCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    startCreateSolution(param)
                end
                if (_StartCreateSolutionCommand == ^null)
                    _StartCreateSolutionCommand = new RelayCommand(execute)
                mreturn _StartCreateSolutionCommand
            endmethod
        endproperty

        ;;; <summary>
        ;;; Create a new Visual Studio solution from the "harmonycore" project template.
        ;;; </summary>
        private method startCreateSolution, void
            param, @Object
        proc
            if (_SolutionOpen)
                closeSolution()

            if (String.IsNullOrWhiteSpace(Properties.Settings.Default.LastNewSolutionFolder)) then
            begin
                NewSolutionFolder = String.Empty
            end
            else
            begin
                if (Directory.Exists(Properties.Settings.Default.LastNewSolutionFolder)) then
                begin
                    NewSolutionFolder = Properties.Settings.Default.LastNewSolutionFolder
                end
                else
                begin
                    Properties.Settings.Default.LastNewSolutionFolder = String.Empty
                    Properties.Settings.Default.Save()
                end
            end

            CreateTabVisible = true
            SelectedTabIndex = (int)MainWindowTabPages.CreateSolution
        endmethod

.endregion

.region "DoCreateSolutionCommand"

        private _DoCreateSolutionCommand, @ICommand

        public property DoCreateSolutionCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    doCreateSolution(param)
                end
                lambda canExecute(param)
                begin
                    mreturn !String.IsNullOrWhiteSpace(NewSolutionFolder) 
                    &    &&   Directory.Exists(NewSolutionFolder) 
                    &    &&  !String.IsNullOrWhiteSpace(NewSolutionName)
                    &    &&  !Directory.GetDirectories(NewSolutionFolder,NewSolutionName,SearchOption.TopDirectoryOnly).Length>0
                end
                if (_DoCreateSolutionCommand == ^null)
                    _DoCreateSolutionCommand = new RelayCommand(execute,canExecute)
                mreturn _DoCreateSolutionCommand
            endmethod
        endproperty

        private async method AddToolOutputSafe, void
            entry, @LogEntry
        proc
            await HarmonyCoreGenerator.App.JTF.SwitchToMainThreadAsync()
            ToolOutput.Add(entry)
        endmethod

        ;;; <summary>
        ;;; Create a new Visual Studio solution from the "harmonycore" project template.
        ;;; </summary>
        private async method doCreateSolution, void
            param, @Object
        proc
            ToolOutput.Clear()

            Properties.Settings.Default.LastNewSolutionFolder = NewSolutionFolder
            Properties.Settings.Default.Save()

            data solutionDir, string, String.Format("{0}\",Path.Combine(NewSolutionFolder,NewSolutionName))
            data solutionFile, string, Path.Combine(solutionDir,String.Format("{0}.sln",NewSolutionName))

            disposable data prc = new Process()
            prc.StartInfo.FileName = "dotnet"
            prc.StartInfo.Arguments = String.Format("new harmonycore -n {0} -o {0}",NewSolutionName)
            prc.StartInfo.CreateNoWindow = true
            prc.StartInfo.UseShellExecute = false
            prc.StartInfo.EnvironmentVariables.Add("SolutionDir",solutionDir)
            prc.StartInfo.WorkingDirectory = NewSolutionFolder
            prc.StartInfo.RedirectStandardOutput = true

            lambda receiveProcessMessage(sender,eargs)
            begin
                if (!String.IsNullOrWhiteSpace(eargs.Data))
                begin
                    AddToolOutputSafe(new LogEntry(eargs.Data))
                end
            end

            prc.OutputDataReceived += new DataReceivedEventHandler(receiveProcessMessage)

            ;;Get us off the UI thread
            await System.Threading.Tasks.TaskScheduler.Default

            ;;Start the process
            prc.Start()
            prc.BeginOutputReadLine()
            prc.WaitForExit()   ; <---- PROBLEM HERE????????
            prc.Close()
            prc.Dispose()

            ;;Get back onto the UI thread
            await HarmonyCoreGenerator.App.JTF.SwitchToMainThreadAsync()

            if (File.Exists(solutionFile)) then
            begin
                ;;Build the solution
                prc = new Process()
                prc.StartInfo.FileName = "dotnet"
                prc.StartInfo.Arguments = "build"
                prc.StartInfo.CreateNoWindow = true
                prc.StartInfo.UseShellExecute = false
                prc.StartInfo.EnvironmentVariables.Add("SolutionDir",solutionDir)
                prc.StartInfo.WorkingDirectory = Path.Combine(solutionDir,"Services.Host")
                prc.StartInfo.RedirectStandardOutput = true

                prc.OutputDataReceived += new DataReceivedEventHandler(receiveProcessMessage)

                ;;Get us off the UI thread
                await System.Threading.Tasks.TaskScheduler.Default

                ;;Start the process
                prc.Start()
                prc.BeginOutputReadLine()
                prc.WaitForExit()

                ;;Get back onto the UI thread
                await HarmonyCoreGenerator.App.JTF.SwitchToMainThreadAsync()

                data exitCode = prc.ExitCode

                prc.Close()
                prc.Dispose()

                if (exitCode == 0) then
                begin
                    doOpenSolution(solutionFile)
                end
                else
                begin
                    MessageBox.Show("Failed to build new solution","Build Failed",MessageBoxButton.OK,MessageBoxImage.Error)
                    cancelCreateSolution(^null)
                end
            end
            else
            begin
                MessageBox.Show("Failed to create solution","Create Failed",MessageBoxButton.OK,MessageBoxImage.Error)
                cancelCreateSolution(^null)
            end

        endmethod

.endregion

.region "CancelCreateSolutionCommand"

        private _CancelCreateSolutionCommand, @ICommand

        public property CancelCreateSolutionCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    cancelCreateSolution(param)
                end
                if (_CancelCreateSolutionCommand == ^null)
                    _CancelCreateSolutionCommand = new RelayCommand(execute)
                mreturn _CancelCreateSolutionCommand
            endmethod
        endproperty

        ;;; <summary>
        ;;; Create a new Visual Studio solution from the "harmonycore" project template.
        ;;; </summary>
        private method cancelCreateSolution, void
            param, @Object
        proc
            NewSolutionFolder = String.Empty
            NewSolutionName = String.Empty
            CreateTabVisible = false
        endmethod

.endregion

.region "NewSolutionFolderCommand"

        private _NewSolutionFolderCommand, @ICommand

        public property NewSolutionFolderCommand, @ICommand
            method get
            proc
                lambda execute(param)
                begin
                    disposable data dlg = new FolderBrowserDialog()
                    if (dlg.ShowDialog()==DialogResult.OK)
                    begin
                        NewSolutionFolder = dlg.SelectedPath
                    end
                end
                if (_NewSolutionFolderCommand == ^null)
                    _NewSolutionFolderCommand = new RelayCommand(execute)
                mreturn _NewSolutionFolderCommand
            endmethod
        endproperty

.endregion

    endclass

endnamespace
