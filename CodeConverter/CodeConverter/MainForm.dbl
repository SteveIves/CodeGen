import System
import System.Collections.Generic
import System.ComponentModel
import System.Data
import System.Drawing
import System.IO
import System.Windows.Forms
import CodeConverterInterface
import System.Reflection

namespace CodeConverter
	
	public partial class MainForm extends Form

		private const heading, string, "Code Converter"
		private filesToProcess, @List<String>, new List<String>()
		private helpFilePath, string

		public method MainForm
		proc
			this.InitializeComponent()
		endmethod
		
		private method MainForm_Shown, void
			sender, @object 
			e, @System.EventArgs 
		proc
			this.Text = heading

			helpFilePath = Path.Combine(Path.GetDirectoryName(Assembly.GetEntryAssembly().Location),"CodeConverter.chm")
			helpFilePath = File.Exists(helpFilePath) ? helpFilePath : String.Empty

			validateSavedSettings()
			loadTools()
			
			lblSearchResultMessage.Text = String.Empty
			lblConvertResultMessage.Text = String.Empty
			activityLabel.Text = String.Empty

			calculateMatchingFiles()

		endmethod
		
		private method validateSavedSettings, void
		proc
			data settingsChanged = false

			if (Properties.Settings.Default.AppSettings.SourceFolders.Count > 0)
			begin
				data ix = 0
				for ix from Properties.Settings.Default.AppSettings.SourceFolders.Count thru 1 by -1
				begin
					data folder = Properties.Settings.Default.AppSettings.SourceFolders[ix-1]
					if (!Directory.Exists(folder.FolderName))
					begin
						Properties.Settings.Default.AppSettings.SourceFolders.Remove(folder)
						settingsChanged = true
					end
				end
			end

			if (Properties.Settings.Default.AppSettings.ToolAssemblies.Count > 0)
			begin
				data ix = 0
				for ix from Properties.Settings.Default.AppSettings.ToolAssemblies.Count thru 1 by -1
				begin
					data toolAssembly = Properties.Settings.Default.AppSettings.ToolAssemblies[ix-1]
					if (!File.Exists(toolAssembly))
					begin
						Properties.Settings.Default.AppSettings.ToolAssemblies.Remove(toolAssembly)
						settingsChanged = true
					end
				end
			end

			if (settingsChanged)
			begin
				MessageBox.Show("One or more saved source code folders or tool assemblies was not found and has been removed.","Settings Updated",MessageBoxButtons.OK,MessageBoxIcon.Information)
				Properties.Settings.Default.Save()
			end

		endmethod

		private method loadTools, void
		proc
			this.Cursor = Cursors.WaitCursor

			activityLabel.Text = "Loading external tools..."
			this.Refresh()

			searchToolsBindingSource.Clear()
			searchToolsBindingSource.DataSource = new List<ISearchTool>()

			conversionToolsBindingSource.Clear()
			conversionToolsBindingSource.DataSource = new List<IConversionTool>()

			loadBuiltinTools()

			data fileSpec, string
			foreach fileSpec in Properties.Settings.Default.AppSettings.ToolAssemblies
			begin
				data candidateAssembly = new ToolsAssembly(fileSpec)

				if (candidateAssembly.SearchTools.Count > 0)
				begin
					data tool, @ISearchTool
					foreach tool in candidateAssembly.SearchTools
						searchToolsBindingSource.Add(tool)
				end

				if (candidateAssembly.ConversionTools.Count > 0)
				begin
					data tool, @IConversionTool
					foreach tool in candidateAssembly.ConversionTools
						conversionToolsBindingSource.Add(tool)
				end
			end

			this.Cursor = Cursors.Default

		endmethod
		
		private method loadBuiltinTools, void
		proc
			this.Cursor = Cursors.WaitCursor

			if (Properties.Settings.Default.AppSettings.LoadBuiltinSearchTools || Properties.Settings.Default.AppSettings.LoadBuiltinConversionTools)
			begin
				data runningAssembly = new ToolsAssembly()

				if (Properties.Settings.Default.AppSettings.LoadBuiltinSearchTools)
				begin
					if (runningAssembly.SearchTools.Count > 0)
					begin
						data tool, @ISearchTool
						foreach tool in runningAssembly.SearchTools
							searchToolsBindingSource.Add(tool)
					end
				end

				if (Properties.Settings.Default.AppSettings.LoadBuiltinConversionTools)
				begin
					if (runningAssembly.ConversionTools.Count > 0)
					begin
						data tool, @IConversionTool
						foreach tool in runningAssembly.ConversionTools
							conversionToolsBindingSource.Add(tool)
					end
				end
			end

			this.Cursor = Cursors.Default

		endmethod

		private method calculateMatchingFiles, void
		proc
			this.Cursor = Cursors.WaitCursor

			activityLabel.Text = "Counting matching files..."

			this.Refresh()

			if ((Properties.Settings.Default.AppSettings.SourceFolders.Count > 0) && (Properties.Settings.Default.AppSettings.SourceExtensions.Count > 0)) then
			begin
				filesToProcess.Clear()
				data folder, @SourceFolder
				foreach folder in Properties.Settings.Default.AppSettings.SourceFolders
				begin
					data fileExtension, String
					foreach fileExtension in Properties.Settings.Default.AppSettings.SourceExtensions
					begin
						data searchMode, SearchOption, (folder.IncludeSubFolders) ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly
						try
						begin
							filesToProcess.AddRange(Directory.GetFiles(folder.FolderName,fileExtension,searchMode))
						end
						catch (e, @UnauthorizedAccessException)
						begin
							nop
						end
						endtry
					end
				end
				this.Text = String.Format("{0} [{1} source files selected].",heading,filesToProcess.Count)
			end
			else
				this.Text = String.Format("{0} [No source files selected].",heading,filesToProcess.Count)

			grpSearchOptions.Enabled = (filesToProcess.Count>0)
			grpConvertOptions.Enabled = (filesToProcess.Count>0)

			activityLabel.Text = String.Empty

			this.Cursor = Cursors.Default

		endmethod
		
		private method lstSearchTools_SelectedIndexChanged, void
			sender, @object 
			e, @System.EventArgs 
		proc
			btnSearch.Enabled = lstSearchTools.SelectedIndex != -1
			searchResultBindingSource.Clear()
			lblSearchResultMessage.Text = String.Empty
		endmethod
		
		private method lstConvertOptions_SelectedIndexChanged, void
			sender, @object 
			e, @System.EventArgs 
		proc
			btnConvert.Enabled = lstConvertOptions.SelectedIndex != -1
			operationResultBindingSource.Clear()
			lblConvertResultMessage.Text = String.Empty
		endmethod
		
		private method btnSearch_Click, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			this.Cursor = Cursors.WaitCursor

			searchResultBindingSource.Clear()

			data tool = ^as(searchToolsBindingSource.Current, @ISearchTool)
			data allResults = new List<SearchResult>()
			data filename, string

			lblSearchResultMessage.Text = String.Format("Executing {0} in {1} files ...",tool.Description,filesToProcess.Count)
			this.Refresh()

			progressBar.Maximum = filesToProcess.Count
			progressBar.Value = 0

			foreach filename in filesToProcess
			begin
				progressBar.Value += 1

				;;Read the file into a string
				data allFileData = File.ReadAllText(filename)

				;;Read the file into a collection of records
				data sourcelines, @List<String>, new List<String>(File.ReadAllLines(filename))

				;;Call the search tool
				try
				begin
					data results = tool.DoSearch(filename,allFileData,sourcelines)
					allResults.AddRange(results)
				end
				catch (ex, @Exception)
				begin
					allResults.Add(new SearchResult() { File=filename, Token=String.Format("Search tool crashed with error: {0}", ex.Message)})
				end
				endtry
			end

			progressBar.Value = 0

			using allResults.Count select
			(0),
				lblSearchResultMessage.Text = "No matches"
			(1),
				lblSearchResultMessage.Text = "1 match"
			(),
				lblSearchResultMessage.Text = String.Format("{0} matches",allResults.Count)	
			endusing
			
			this.Refresh()

			searchResultBindingSource.DataSource = allResults

			lblConvertResultMessage.Text = String.Format("Processed {0} files, found {1} matches.", filesToProcess.Count, allResults.Count)
			
			this.Cursor = Cursors.Default

		endmethod
		
		private method btnConvert_Click, void
			sender, @object 
			e, @System.EventArgs 
		proc

			if (!chkTestMode.Checked && !Properties.Settings.Default.AppSettings.SaveCopiesWhenConverting)
				if (MessageBox.Show("You are NOT IN TEST MODE and you have chosen NOT TO COPY the original source code. Your source code WILL BE CHANGED! Are you sure you want to continue?","Confirmation Required",MessageBoxButtons.YesNo,MessageBoxIcon.Question,MessageBoxDefaultButton.Button2)==DialogResult.No)
					mreturn
			
			this.Cursor = Cursors.WaitCursor

			operationResultBindingSource.Clear()

			data tool = ^as(conversionToolsBindingSource.Current, @IConversionTool)
			data results = new List<OperationResult>()

			data successCount = 0
			data failureCount = 0
			data totalChangesCount = 0

			data filename, string

			lblConvertResultMessage.Text = String.Format("Executing {0} in {1} files ...",tool.Description,filesToProcess.Count)
			this.Refresh()
			
			progressBar.Maximum = filesToProcess.Count
			progressBar.Value = 0

			foreach filename in filesToProcess
			begin
				progressBar.Value += 1

				;;Read the file into a string
				data allFileData = File.ReadAllText(filename)

				;;Read the file into a collection of records
				data sourcelines, @List<String>, new List<String>(File.ReadAllLines(filename))

				data changes = 0

				;;Call the conversion tool for the current file
				data result, ConversionResult 
				data resultData = new OperationResult() {FileSpec=filename}

				try
				begin
					result = tool.DoConvert(filename,allFileData,sourcelines,changes)
					resultData.Changes = changes
					using result select
					(ConversionResult.AllFileContentModified, ConversionResult.SourceLinesModified),
					begin
						if (chkTestMode.Checked) then
						begin
							;;We're in test mode
							if (Properties.Settings.Default.AppSettings.CreateFilesInTestMode)
							begin
								;;Create a "test" output file
								data testFile = Path.Combine(Path.GetDirectoryName(filename),Path.GetFileName(filename)+".TEST")
								if (result == ConversionResult.AllFileContentModified) then
									File.WriteAllText(testFile,allFileData)
								else
									File.WriteAllLines(testFile,sourcelines)						
							end
						end
						else
						begin
							;;We're doing this for real - should we first save the original file?
							if (Properties.Settings.Default.AppSettings.SaveCopiesWhenConverting)
							begin
								data saveFile = Path.Combine(Path.GetDirectoryName(filename),Path.GetFileName(filename)+".SAVE")
								File.Copy(filename,saveFile)
							end
							;;Overwrite the source file
							if (result == ConversionResult.AllFileContentModified) then
								File.WriteAllText(filename,allFileData)
							else
								File.WriteAllLines(filename,sourcelines)						
						end

						resultData.Message = "File changed."

						successCount += 1
						totalChangesCount += changes
					end
					(ConversionResult.NoChanges),
					begin
						resultData.Message = "No changes."
						successCount += 1
					end
					(ConversionResult.Failure),
					begin
						resultData.Message = "Failed."
						failureCount += 1
					end
					endusing
				end
				catch (ex, @Exception)
				begin
					resultData.Message = "Conversion tool crashed with error " + ex.Message
					failureCount += 1
				end
				endtry

				results.Add(resultData)
			end

			progressBar.Value = 0

			lblConvertResultMessage.Text = String.Format("Processed {0} files, {1} success, {2} failures, {3} total changes.", filesToProcess.Count, successCount, failureCount, totalChangesCount)

			operationResultBindingSource.DataSource = results
			
			this.Cursor = Cursors.Default

		endmethod
		
		private method editCurrentRowFile, void
			sender, @object 
			ea, @System.Windows.Forms.DataGridViewCellEventArgs 
		proc
			;;Make sure there is a selected item
			if (operationResultBindingSource.Current == ^null)
				mreturn
			
			;;Get the result associated with the selected item
			data result = ^as(operationResultBindingSource.Current, OperationResult)
			
			;;Make sure we have a file spec
			if (string.IsNullOrWhiteSpace(result.FileSpec))
			begin
				MessageBox.Show("The selected result does not specify a file spec to edit!","No File Spec",MessageBoxButtons.OK,MessageBoxIcon.Exclamation)
				mreturn
			end
			
			;;Do we have Workbench?
			data editorPath, String
			if (Environment.Is64BitOperatingSystem) then
				editorPath = "C:\Program Files (x86)\Synergex\SynergyDE\Workbench\win\vs.exe"
			else
				editorPath = "C:\Program Files\Synergex\SynergyDE\Workbench\win\vs.exe"
			if (!File.Exists(editorPath))
			begin
				MessageBox.Show("Can't edit file because Workbench is not available!","No Workbench",MessageBoxButtons.OK,MessageBoxIcon.Exclamation)
				mreturn
			end
			
			;;Configure a process to start Workbench
			data prc = new System.Diagnostics.Process()
			prc.StartInfo.FileName = editorPath
			prc.StartInfo.Arguments = string.Format('"{0}"',result.FileSpec)
			
			;;Launch Workbench			
			try
			begin
				prc.Start()				
			end
			catch (e, @Exception)
			begin
				MessageBox.Show("Failed to launch Workbench!","Error",MessageBoxButtons.OK,MessageBoxIcon.Error)
			end
			endtry

		endmethod

		private method optionsToolStripMenuItem_Click, void
			sender, @object 
			e, @System.EventArgs 
		proc
			disposable data dlg = new OptionsForm()
			dlg.ShowDialog(this)
			loadTools()
			calculateMatchingFiles()
		endmethod

		private method exitToolStripMenuItem_Click, void
			sender, @object 
			e, @System.EventArgs 
		proc
			Application.Exit()
		endmethod
		
		private method viewSourceFilesToolStripMenuItem_Click, void
			sender, @object 
			e, @System.EventArgs 
		proc
			disposable data dlg = new ViewSourceFilesListForm(filesToProcess)
			dlg.ShowDialog()
		endmethod
		
		private method grdSearchResults_CellDoubleClick, void
			sender, @object 
			ea, @System.Windows.Forms.DataGridViewCellEventArgs 
		proc
			;;Make sure there is a selected item
			if (searchResultBindingSource.Current == ^null)
				mreturn
			
			;;Get the result associated with the selected item
			data result = ^as(searchResultBindingSource.Current, SearchResult)
			
			;;Make sure we have a file spec
			if (String.IsNullOrWhiteSpace(result.File))
			begin
				MessageBox.Show("The selected result does not specify a file spec to edit!","No File Spec",MessageBoxButtons.OK,MessageBoxIcon.Exclamation)
				mreturn
			end
			
			;;Do we have Workbench?
			data editorPath, String
			if (Environment.Is64BitOperatingSystem) then
				editorPath = "C:\Program Files (x86)\Synergex\SynergyDE\Workbench\win\vs.exe"
			else
				editorPath = "C:\Program Files\Synergex\SynergyDE\Workbench\win\vs.exe"
			if (!File.Exists(editorPath))
			begin
				MessageBox.Show("Can't edit file because Workbench is not available!","No Workbench",MessageBoxButtons.OK,MessageBoxIcon.Exclamation)
				mreturn
			end
			
			;;Configure a process to start Workbench
			data prc = new System.Diagnostics.Process()
			prc.StartInfo.FileName = editorPath

			;;Add the file specification
			if (result.Line==0) then
				prc.StartInfo.Arguments = String.Format('"{0}"',result.File)
			else
			begin
				if (result.Position==0) then
					prc.StartInfo.Arguments = String.Format('"{0}" -#{1}',result.File,result.Line)
				else
					prc.StartInfo.Arguments = String.Format('"{0}" -#{1} "-#goto-col {2}"',result.File,result.Line,result.Position)
			end
	
			;;Launch Workbench			
			try
			begin
				prc.Start()				
			end
			catch (e, @Exception)
			begin
				MessageBox.Show("Failed to launch Workbench!","Error",MessageBoxButtons.OK,MessageBoxIcon.Error)
			end
			endtry
			
		endmethod
		
		private method contentsToolStripMenuItem_Click, void
			sender, @object 
			e, @System.EventArgs 
			endparams
		proc
			if (String.IsNullOrWhiteSpace(helpFilePath)) then
				MessageBox.Show("No help file was found!","Help Unavailable",MessageBoxButtons.OK,MessageBoxIcon.Exclamation)
			else
				Help.ShowHelpIndex(this,helpFilePath)
		endmethod
		
	endclass
	
endnamespace
