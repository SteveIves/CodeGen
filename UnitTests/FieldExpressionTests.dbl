;;*****************************************************************************
;;
;; Title:       FieldExpressionTests.dbl
;;
;; Type:        Unit test class
;;
;; Description: Unit tests for CodeGenEngine.ProcessFieldExpression()
;;
;; Date:        29th November 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.VisualStudio.TestTools.UnitTesting
import System
import System.Collections

namespace CodeGen.UnitTests
	
	{TestClass}
	public class FieldExpressionTests
		
		private mStr			,@CodeGen.RepositoryAPI.RpsStructure
		private mFieldOne		,@CodeGen.RepositoryAPI.RpsField
		private mFieldTwo		,@CodeGen.RepositoryAPI.RpsField
		private mFieldThree		,@CodeGen.RepositoryAPI.RpsField
		private mFieldFour		,@CodeGen.RepositoryAPI.RpsField
		private mFieldFive		,@CodeGen.RepositoryAPI.RpsField
		private mFieldSix		,@CodeGen.RepositoryAPI.RpsField
		private mFieldSeven		,@CodeGen.RepositoryAPI.RpsField
		private mMsg			,String
		
		{TestInitialize}
		public method Initialize, void
			endparams
		proc
			;;Make sure we don't try to display anything to the screen
			CodeGen.Engine.Env.SuppressLogging = true
			
			;;Load the UNIT_TEST repository structure
			mStr = new CodeGen.RepositoryAPI.RpsStructure("UNIT_TEST")
			
			;;Run the structure through CheckStructure() because it sets up
			;;some stuff that is needed in order to successfully process some tokens
			if (!CodeGen.Engine.CheckStructure(mStr))
				throw new Exception("CodeGen.Engine.CheckStructure failed to validate structure UNIT_TEST")
				
			;;Get handles on the fields we'll use during our tests
			mFieldOne   = mStr.Fields[0]	;A1
			mFieldTwo   = mStr.Fields[1]	;D1 enumerated with selections
			mFieldThree = mStr.Fields[2]	;D2.1 with max min range
			mFieldFour  = mStr.Fields[3]	;D8 date
			mFieldFive  = mStr.Fields[4]	;D5.2 with a display format
			mFieldSix   = mStr.Fields[5]	;A1 with a selection window
			mFieldSeven = mStr.Fields[6]	;A10 based on a tamplate TEMPLATE_ONE
			
			;;Configure CodeGen for repository processing
			CodeGen.Engine.Env.RpsInUse = true
			
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Alpha, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF ALPHA>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_AllowList, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF ALLOW_LIST>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_AlternateName, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF ALTERNATE_NAME>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Array, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF ARRAY>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Arrive, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF ARRIVE>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Binary, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF BINARY>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Bold, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF BOLD>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Boolean, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF BOOLEAN>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Bzero, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF BZERO>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Break, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF BREAK>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_BreakChange, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF BREAK_CHANGE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_BreakAlways, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF BREAK_ALWAYS>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_BreakReturn, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF BREAK_RETURN>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Change, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF CHANGE>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_CheckBox, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF CHECKBOX>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_CoerceBoolean, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF COERCEBOOLEAN>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_BomboBox, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF COMBOBOX>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Date, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateOrTime, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATEORTIME>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateToday, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATETODAY>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateJulian, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE_JULIAN>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateNotJulian, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE_NOT_JULIAN>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateNotPeriod, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE_NOT_PERIOD>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateNotYmd, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE_NOT_YMD>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateNotYyyyMmDd, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE_NOT_YYYYMMDD>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DatePeriod, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE_PERIOD>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateYmd, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE_YMD>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateYyMmDd, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE_YYMMDD>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateYyyyMmDd, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE_YYYYMMDD>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateYyJjj, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE_YYJJJ>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateYyyyJjj, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE_YYYYJJJ>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateYyPp, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE_YYPP>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DateYyyyPp, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DATE_YYYYPP>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Decimal, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DECIMAL>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Default, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DEFAULT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Description, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DESCRIPTION>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Disabled, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DISABLED>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Display, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DISPLAY>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_DisplayLength, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DISPLAY_LENGTH>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Drill, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF DRILL>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Echo, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF ECHO>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_EditFormat, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF EDITFORMAT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Enabled, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF ENABLED>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Enum, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF ENUM>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Enumerated, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF ENUMERATED>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_First, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF FIRST>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_FieldPosition, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF FIELD_POSITION>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Heading, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF HEADING>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Format, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF FORMAT>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_HelpId, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF HELPID>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Hyperlink, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF HYPERLINK>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_I1, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF I1>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_I2, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF I2>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_I4, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF I4>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_I8, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF I8>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_I124, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF I124>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_InfoLine, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF INFOLINE>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_InputCenter, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF INPUT_CENTER>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_InputLeft, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF INPUT_LEFT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_InputRight, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF INPUT_RIGHT>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Integer, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF INTEGER>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Language, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF LANGUAGE>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Leave, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF LEAVE>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_LongDesc, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF LONGDESC>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Mapped, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF MAPPED>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_MappedStr, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF MAPPEDSTR>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_More, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF MORE>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NegativeAllowed, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NEGATIVE_ALLOWED>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NegativeOrZero, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NEGATIVE_ORZERO>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NegativeRequired, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NEGATIVE_REQUIRED>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoAllowList, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOALLOW_LIST>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoAlternateName, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOALTERNATE_NAME>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoArrive, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOARRIVE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoBreak, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOBREAK>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoChange, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOCHANGE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoCheckBox, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOCHECKBOX>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoCoerceBoolean, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOCOERCEBOOLEAN>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoDefault, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NODEFAULT>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoDescription, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NODESCRIPTION>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoDisplay, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NODISPLAY>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoDisplayLength, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NODISPLAY_LENGTH>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoDrill, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NODRILL>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoEcho, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOECHO>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoEditFormat, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOEDITFORMAT>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoFormat, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOFORMAT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoHelpId, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOHELPID>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoHyperlink, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOHYPERLINK>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoInfoLine, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOINFOLINE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoLanguage, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOLANGUAGE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoLeave, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOLEAVE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoLOngDesc, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOLONGDESC>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoMore, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOMORE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Last, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF LAST>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoNegative, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NONEGATIVE>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoPaintChar, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOPAINTCHAR>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoPrecision, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOPRECISION>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoPrompt, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOPROMPT>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoRange, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NORANGE>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoReport, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOREPORT>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoSelections, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOSELECTIONS>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoSelWnd, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOSELWND>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotAlpha, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTALPHA>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotBinary, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTBINARY>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotBoolean, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTBOOLEAN>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotBzero, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTBZERO>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotDate, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTDATE>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotDateOrTime, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTDATEORTIME>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotDateToday, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTDATETODAY>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotDecimal, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTDECIMAL>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotEnum, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTENUM>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotEnumerated, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTENUMERATED>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoTimeout, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTIMEOUT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Notnteger, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTINTEGER>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotNumeric, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTNUMERIC>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotOverlay, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTOVERLAY>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotRadioButtons, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTRADIOBUTTONS>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotStructField, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTSTRUCTFIELD>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotTime, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTTIME>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoToolkit, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTOOLKIT>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotUpperCase, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTUPPERCASE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotUser, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTUSER>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoUserText, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOUSERTEXT>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoViewLength, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOVIEW_LENGTH>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NoWeb, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOWEB>",false),mMsg)
		endmethod

		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Numeric, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NUMERIC>",false),mMsg)
		endmethod

		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_OcNative, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF OCNATIVE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_OcObject, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF OCOBJECT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Optional, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF OPTIONAL>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Overlay, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF OVERLAY>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_PaintChar, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF PAINTCHAR>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_PkSegment, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF PKSEGMENT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotPkSegment, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTPKSEGMENT>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Precision, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF PRECISION>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Prompt, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF PROMPT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_PromptPosition, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF PROMPT_POSITION>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_RadioButtons, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF RADIOBUTTONS>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Range, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF RANGE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_ReadOnly, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF READONLY>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_ReadWrite, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF READWRITE>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Report, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF REPORT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_ReportCenter, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF REPORT_CENTER>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_ReportLeft, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF REPORT_LEFT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_ReportRight, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF REPORT_RIGHT>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Required, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF REQUIRED>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Reverse, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF REVERSE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Selections, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF SELECTIONS>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_SelWnd, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF SELWND>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_StructField, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF STRUCTFIELD>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_TextBox, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF TEXTBOX>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Time, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF TIME>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_TimeHhMm, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF TIME_HHMM>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_TimeHhMmSs, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF TIME_HHMMSS>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_TimeNow, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF TIMENOW>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Timeout, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF TIMEOUT>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Toolkit, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF TOOLKIT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Underline, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF UNDERLINE>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Uppercase, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF UPPERCASE>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_User, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF USER>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_UserText, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF USERTEXT>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_ViewLength, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF VIEW_LENGTH>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_Web, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF WEB>",true),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_UserTimeStamp, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF USERTIMESTAMP>",false),mMsg)
		endmethod
		
		{TestMethod}
		{TestCategory("Field Loop Expression Tests")}
		public method FieldExpression_NotUserTimeStamp, void
			endparams
		proc
			Assert.IsTrue(doTest(mFieldOne,1,"<IF NOTUSERTIMESTAMP>",true),mMsg)
		endmethod
		
.region "Support methods"
		
		private method doTest, Boolean
			required in fld			,@CodeGen.RepositoryAPI.RpsField
			required in fldNum		,int	;One based here, but 0-based in ProcessKeyExpression()
			required in expression	,String
			required in expectTrue	,Boolean
			endparams
		proc
			data ok				,Boolean
			data mainBuffer		,a128		,expression + "SUCCESS</IF>"
			data tokenStart		,int		,instr(1,mainBuffer,"<") 
			data tokenEnd		,int		,instr(tokenStart,mainBuffer,">")
			data errStatus		,int		,0
			data cMode			,@ArrayList	,new ArrayList()
			data cApplies		,@ArrayList	,new ArrayList()
			data outputOff		,Boolean	,false
			
			mMsg = "PROCESSING: " + expression + " for field " + fld.Name + "."
			
			if (!(ok=CodeGen.Engine.ProcessFieldExpression(mStr,fld,fldNum-1,tokenStart,tokenEnd,cMode,cApplies,outputOff,mainBuffer,errStatus))) then
				mMsg = mMsg + " Failed to process expression!"
			else
			begin
				;;If we get here then the token was processed, but we need to look at the result
				if (expectTrue) then
					if (!(ok = (mainBuffer.eqs."SUCCESS")))
						mMsg = mMsg + " EXPECTED: true ACTUAL: false"
				else
					if (!(ok = (mainBuffer.nes."SUCCESS")))
						mMsg = mMsg + " EXPECTED: false ACTUAL: true"
			end
			
			mreturn ok
			
		endmethod
		
.endregion
		
	endclass
	
endnamespace

