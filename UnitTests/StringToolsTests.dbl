;;*****************************************************************************
;;
;; Title:       StringToolsTests.dbl
;;
;; Type:        Unit test class
;;
;; Description: Unit tests for various CodeGenEngine routines in StringTools.dbl
;;				and other string utility routines.
;;
;; Date:        26th November 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.VisualStudio.TestTools.UnitTesting
import System

namespace CodeGen.UnitTests

	{TestClass}
	public class StringToolsTests

.region "Unit tests for CamelCase()"
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method CamelCase_Alpha1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.CamelCase((a)"123 A_mi-xed_CA$Se_strinG[123]:").eqs."aMiXedCaSeString[123]")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method CamelCase_Alpha2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.CamelCase((a)"").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method CamelCase_Alpha3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.CamelCase((a)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method CamelCase_String1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.CamelCase((String)"123 A_mi-xed_CA$Se_strinG[123]:").eqs."aMiXedCaSeString[123]")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method CamelCase_String2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.CamelCase((String)"").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method CamelCase_String3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.CamelCase((String)"     ").eqs."")
		endmethod
		
.endregion

.region "Unit tests for IsNumeric()"

		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsNumeric_Alpha1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.IsNumeric((a)"123"))
		endmethod

		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsNumeric_Alpha2, void
			endparams
		proc
			Assert.IsFalse(CodeGen.Engine.StringTools.IsNumeric((a)"1a3"))
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsNumeric_Alpha3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.IsNumeric((a)"000"))
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsNumeric_Alpha4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.IsNumeric((a)"   "))
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsNumeric_Alpha5, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.IsNumeric((a)""))
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsNumeric_String1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.IsNumeric((String)"123"))
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsNumeric_String2, void
			endparams
		proc
			Assert.IsFalse(CodeGen.Engine.StringTools.IsNumeric((String)"1a3"))
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsNumeric_String3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.IsNumeric((String)"000"))
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsNumeric_String4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.IsNumeric((String)"   "))
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsNumeric_String5, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.IsNumeric((String)""))
		endmethod
		
.endregion

.region "Unit tests for IsWhitespace()"
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsWhitespace_Alpha1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.IsWhitespace((a)"				  "))
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsWhitespace_Alpha2, void
			endparams
		proc
			Assert.IsFalse(CodeGen.Engine.StringTools.IsWhitespace((a)"	a			  "))
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsWhitespace_Alpha3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.IsWhitespace((a)""))
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsWhitespace_String1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.IsWhitespace((String)"				  "))
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsWhitespace_String2, void
			endparams
		proc
			Assert.IsFalse(CodeGen.Engine.StringTools.IsWhitespace((String)"	a			  "))
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method IsWhitespace_String3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.IsWhitespace((String)""))
		endmethod
		
.endregion

.region "Unit tests for LowerCase()"

		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method LowerCase_Alpha1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.LowerCase((a)" A mixed CASe strinG").eqs." a mixed case string")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method LowerCase_Alpha2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.LowerCase((a)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method LowerCase_Alpha3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.LowerCase((a)"").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method LowerCase_String1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.LowerCase((String)" A mixed CASe strinG").eqs." a mixed case string")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method LowerCase_String2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.LowerCase((String)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method LowerCase_String3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.LowerCase((String)"").eqs."")
		endmethod
		
.endregion

.region "Unit tests for MixedCase()"
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method MixedCase_Alpha1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.MixedCase((a)"a_mIxEd_cASe.stRinG").eqs."A_Mixed_Case.String")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method MixedCase_Alpha2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.MixedCase((a)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method MixedCase_Alpha3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.MixedCase((a)"").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method MixedCase_Alpha4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.MixedCase((a)"@SOME_stRIng").eqs."@Some_String")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method MixedCase_String1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.MixedCase((String)"a_mIxEd_cASe.stRinG").eqs."A_Mixed_Case.String")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method MixedCase_String2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.MixedCase((String)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method MixedCase_String3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.MixedCase((String)"").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method MixedCase_String4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.MixedCase((String)"@SOME_stRIng").eqs."@Some_String")
		endmethod
		
.endregion

.region "Unit tests for NumberFromParens()"
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method NumberFromParens_Alpha1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.NumberFromParens((a)"ABC(-123)")==-123)
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method NumberFromParens_Alpha2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.NumberFromParens((a)"ABC(123")==0)
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method NumberFromParens_Alpha3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.NumberFromParens((a)"ABC123)")==0)
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method NumberFromParens_Alpha4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.NumberFromParens((a)"     ")==0)
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method NumberFromParens_Alpha5, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.NumberFromParens((a)"")==0)
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method NumberFromParens_Alpha6, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.NumberFromParens((a)"ABC(DEF)GHI")==0)
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method NumberFromParens_String1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.NumberFromParens((String)"ABC(123)")==123)
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method NumberFromParens_String2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.NumberFromParens((String)"ABC(123")==0)
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method NumberFromParens_String3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.NumberFromParens((String)"ABC123)")==0)
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method NumberFromParens_String4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.NumberFromParens((String)"     ")==0)
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method NumberFromParens_String5, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.NumberFromParens((String)"")==0)
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method NumberFromParens_String6, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.NumberFromParens((String)"ABC(DEF)GHI")==0)
		endmethod
		
.endregion

.region "Unit tests for PascalCase()"
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method PascalCase_Alpha1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.PascalCase((a)" 1 a_mIxEd_cASe.stRinG[1]").eqs."AMixedCaseString[1]")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method PascalCase_Alpha2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.PascalCase((a)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method PascalCase_Alpha3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.PascalCase((a)"").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method PascalCase_Alpha4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.PascalCase((a)"@a_mIxEd_cASe.stRinG[1]").eqs."@AMixedCaseString[1]")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method PascalCase_String1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.PascalCase((String)" 1 a_mIxEd_cASe.stRinG[1]").eqs."AMixedCaseString[1]")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method PascalCase_String2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.PascalCase((String)"    ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method PascalCase_String3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.PascalCase((String)"").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method PascalCase_String4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.PascalCase((String)"@a_mIxEd_cASe.stRinG[1]").eqs."@AMixedCaseString[1]")
		endmethod
		
.endregion

.region "Unit tests for QuotedString()"
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method QuotedString_Alpha1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.QuotedString((a)"abc'The Quoted String'xyz").eqs."The Quoted String")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method QuotedString_Alpha2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.QuotedString((a)'abc"The Quoted String"xyz').eqs."The Quoted String")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method QuotedString_Alpha3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.QuotedString((a)"There is no quoted string here!").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method QuotedString_Alpha4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.QuotedString((a)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method QuotedString_Alpha5, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.QuotedString((a)"").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method QuotedString_String1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.QuotedString((String)"abc'The Quoted String'xyz").eqs."The Quoted String")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method QuotedString_String2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.QuotedString((String)'abc"The Quoted String"xyz').eqs."The Quoted String")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method QuotedString_String3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.QuotedString((String)"There is no quoted string here!").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method QuotedString_String4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.QuotedString((String)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method QuotedString_String5, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.QuotedString((String)"").eqs."")
		endmethod
		
.endregion

.region "Unit tests for RemoveLeading()"
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method RemoveLeading_Alpha1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.RemoveLeading((a)"    This text remains").eqs."This text remains")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method RemoveLeading_Alpha2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.RemoveLeading((a)"This text remains").eqs."This text remains")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method RemoveLeading_Alpha3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.RemoveLeading((a)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method RemoveLeading_Alpha4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.RemoveLeading((a)"").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method RemoveLeading_String1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.RemoveLeading((String)"    This text remains").eqs."This text remains")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method RemoveLeading_String2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.RemoveLeading((String)"This text remains").eqs."This text remains")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method RemoveLeading_String3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.RemoveLeading((String)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method RemoveLeading_String4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.RemoveLeading((String)"").eqs."")
		endmethod
		
.endregion

.region "Unit tests for StringFromParens()"
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method StringFromParens_Alpha1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.StringFromParens((a)"ABC(THE_STRING)").eqs."THE_STRING")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method StringFromParens_Alpha2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.StringFromParens((a)"(THE_STRING)").eqs."THE_STRING")
		endmethod

		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method StringFromParens_Alpha3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.StringFromParens((a)" (THE_STRING ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method StringFromParens_Alpha4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.StringFromParens((a)" THE_STRING) ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method StringFromParens_Alpha5, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.StringFromParens((a)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method StringFromParens_Alpha6, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.StringFromParens((a)"").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method StringFromParens_String1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.StringFromParens((String)"ABC(THE_STRING)").eqs."THE_STRING")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method StringFromParens_String2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.StringFromParens((String)"(THE_STRING)").eqs."THE_STRING")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method StringFromParens_String3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.StringFromParens((String)" (THE_STRING ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method StringFromParens_String4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.StringFromParens((String)" THE_STRING) ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method StringFromParens_String5, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.StringFromParens((String)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method StringFromParens_String6, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.StringFromParens((String)"").eqs."")
		endmethod
		
.endregion

.region "Unit tests for UpperCase()"
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method UpperCase_Alpha1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.UpperCase((a)" A mixed CASe strinG").eqs." A MIXED CASE STRING")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method UpperCase_Alpha2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.UpperCase((a)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method UpperCase_Alpha3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.UpperCase((a)"").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method UpperCase_String1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.UpperCase((String)" A mixed CASe strinG").eqs." A MIXED CASE STRING")
		endmethod

		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method UpperCase_String2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.UpperCase((String)"     ").eqs."")
		endmethod

		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method UpperCase_String3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.UpperCase((String)"").eqs."")
		endmethod
		
.endregion

.region "Unit tests for XfCase()"
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method XfCase_Alpha1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.XfCase((a)"a_mIxEd_cASe.stRinG").eqs."A_mixed_case.String")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method XfCase_Alpha2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.XfCase((a)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method XfCase_Alpha3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.XfCase((a)"").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method XfCase_Alpha4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.XfCase((a)"@a_mIxEd_cASe.stRinG").eqs."@A_mixed_case.String")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method XfCase_String1, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.XfCase((String)"a_mIxEd_cASe.stRinG").eqs."A_mixed_case.String")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method XfCase_String2, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.XfCase((String)"     ").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method XfCase_String3, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.XfCase((String)"").eqs."")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method XfCase_String4, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.StringTools.XfCase((String)"@a_mIxEd_cASe.stRinG").eqs."@A_mixed_case.String")
		endmethod
		
.endregion
		
.region "Unit tests for SqlName()"
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method SqlName01, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.SqlName("FIELD").eqs."FIELD")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method SqlName02, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.SqlName("FIELD[1]").eqs."FIELD1")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method SqlName03, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.SqlName("FIELD[1,2]").eqs."FIELD1_2")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method SqlName04, void
			endparams
		proc
			Assert.IsTrue(CodeGen.Engine.SqlName("FIELD[2,3,4,5].FIELD.FIELD[2,3]").eqs."FIELD2_3_4_5_FIELD_FIELD2_3")
		endmethod
		
.endregion

.region "Unit tests for ReplaceToken()"
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method ReplaceToken01, void
			endparams
		proc
			doReplaceToken("One, Two, <THREE>, Four","<THREE>","Three","One, Two, Three, Four")
		endmethod
		
		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method ReplaceToken02, void
			endparams
		proc
			doReplaceToken("<REPLACEME>","<REPLACEME>","Replaced with THIS","Replaced with THIS")
		endmethod

		{TestMethod}
		{TestCategory("String Utility Tests")}
		public method ReplaceToken03, void
			endparams
		proc
			doReplaceToken("<HTML><BODY><H1><HEADING></H1></BODY></HTML>","<HEADING>","This is the heading","<HTML><BODY><H1>This is the heading</H1></BODY></HTML>")
		endmethod
		
		private method doReplaceToken, void
			required in buff	,a
			required in token	,a
			required in rval	,a
			required in expect	,a
			endparams
		proc
			data workBuffer, a1024	,buff
			if ((!CodeGen.Engine.ReplaceToken(workBuffer,token,rval))||(workBuffer.nes.expect))
				Assert.Fail("EXPECTED: {0} ACTUAL: {1}",expect,workBuffer)
		endmethod

.endregion
		
		
	endclass

endnamespace