;;*****************************************************************************
;;
;; Title:       CheckCustomTokenTests.dbl
;;
;; Type:        Unit test class
;;
;; Description: Unit tests for CodeGenEngine.CheckCustomToken()
;;
;; Date:        27th Movember 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.VisualStudio.TestTools.UnitTesting
import System
import System.Collections

namespace UnitTests

	{TestClass}
	public class CheckCustomTokenTests

		{TestInitialize}
		public method Initialize, void
			endparams
		proc
			CodeGen.Engine.Env.CustomTokens.Add(new CustomToken1())
			CodeGen.Engine.Env.CustomFieldTokens.Add(new CustomFieldToken1())
			CodeGen.Engine.Env.CustomSelectionTokens.Add(new CustomSelectionToken1())
			CodeGen.Engine.Env.CustomKeyTokens.Add(new CustomKeyToken1())
			CodeGen.Engine.Env.CustomSegmentTokens.Add(new CustomSegmentToken1())
			CodeGen.Engine.Env.CustomRelationTokens.Add(new CustomRelationToken1())
			CodeGen.Engine.Env.CustomEnumTokens.Add(new CustomEnumToken1())
			CodeGen.Engine.Env.CustomEnumMemberTokens.Add(new CustomEnumMemberToken1())
			CodeGen.Engine.Env.CustomFileTokens.Add(new CustomFileToken1())
			CodeGen.Engine.Env.CustomButtonTokens.Add(new CustomButtonToken1())
			CodeGen.Engine.Env.SuppressLogging = true
		endmethod
		
		{TestCleanup}
		public method Cleanup, void
			endparams
		proc
			CodeGen.Engine.Env.CustomTokens.Clear()
			CodeGen.Engine.Env.CustomFieldTokens.Clear()
			CodeGen.Engine.Env.CustomSelectionTokens.Clear()
			CodeGen.Engine.Env.CustomKeyTokens.Clear()
			CodeGen.Engine.Env.CustomSegmentTokens.Clear()
			CodeGen.Engine.Env.CustomRelationTokens.Clear()
			CodeGen.Engine.Env.CustomEnumTokens.Clear()
			CodeGen.Engine.Env.CustomEnumMemberTokens.Clear()
			CodeGen.Engine.Env.CustomFileTokens.Clear()
			CodeGen.Engine.Env.CustomButtonTokens.Clear()
			CodeGen.Engine.Env.SuppressLogging = false
		endmethod
		
.region "Test with custom generic tokens"

		{TestMethod}
		public method CheckCustomToken01a, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_TOKEN>CUSTOM_TOKEN_1</REQUIRES_CUSTOM_TOKEN>"
			Assert.IsTrue(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod

		{TestMethod}
		public method CheckCustomToken01b, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_TOKEN>CUSTOM_TOKEN_2</REQUIRES_CUSTOM_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod

		{TestMethod}
		public method CheckCustomToken01c, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_TOKEN>CUSTOM_TOKEN_1"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken01d, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_TOKEN></REQUIRES_CUSTOM_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		
.endregion

.region "Test with custom field loop tokens"
		
		{TestMethod}
		public method CheckCustomToken02a, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_FIELD_TOKEN>CUSTOM_FIELD_TOKEN_1</REQUIRES_CUSTOM_FIELD_TOKEN>"
			Assert.IsTrue(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken02b, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_FIELD_TOKEN>CUSTOM_FIELD_TOKEN_2</REQUIRES_CUSTOM_FIELD_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken02c, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_FIELD_TOKEN>CUSTOM_FIELD_TOKEN_2"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken02d, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_FIELD_TOKEN></REQUIRES_CUSTOM_FIELD_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
.endregion
		
.region "Test with custom selection loop tokens"
		
		{TestMethod}
		public method CheckCustomToken03a, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_SELECTION_TOKEN>CUSTOM_SELECTION_TOKEN_1</REQUIRES_CUSTOM_SELECTION_TOKEN>"
			Assert.IsTrue(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken03b, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_SELECTION_TOKEN>CUSTOM_SELECTION_TOKEN_2</REQUIRES_CUSTOM_SELECTION_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken03c, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_SELECTION_TOKEN>CUSTOM_SELECTION_TOKEN_2"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken03d, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_SELECTION_TOKEN></REQUIRES_CUSTOM_SELECTION_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
.endregion

.region "Test with custom key loop tokens"
		
		{TestMethod}
		public method CheckCustomToken04a, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_KEY_TOKEN>CUSTOM_KEY_TOKEN_1</REQUIRES_CUSTOM_KEY_TOKEN>"
			Assert.IsTrue(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken04b, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_KEY_TOKEN>CUSTOM_KEY_TOKEN_2</REQUIRES_CUSTOM_KEY_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken04c, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_KEY_TOKEN>CUSTOM_KEY_TOKEN_2"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken04d, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_KEY_TOKEN></REQUIRES_CUSTOM_KEY_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
.endregion

.region "Test with custom key segment loop tokens"
		
		{TestMethod}
		public method CheckCustomToken05a, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_SEGMENT_TOKEN>CUSTOM_SEGMENT_TOKEN_1</REQUIRES_CUSTOM_SEGMENT_TOKEN>"
			Assert.IsTrue(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken05b, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_SEGMENT_TOKEN>CUSTOM_SEGMENT_TOKEN_2</REQUIRES_CUSTOM_SEGMENT_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken05c, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_SEGMENT_TOKEN>CUSTOM_SEGMENT_TOKEN_2"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken05d, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_SEGMENT_TOKEN></REQUIRES_CUSTOM_SEGMENT_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
.endregion
		
.region "Test with custom relation loop tokens"
		
		{TestMethod}
		public method CheckCustomToken06a, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_RELATION_TOKEN>CUSTOM_RELATION_TOKEN_1</REQUIRES_CUSTOM_RELATION_TOKEN>"
			Assert.IsTrue(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken06b, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_RELATION_TOKEN>CUSTOM_RELATION_TOKEN_2</REQUIRES_CUSTOM_RELATION_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken06c, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_RELATION_TOKEN>CUSTOM_RELATION_TOKEN_2"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken06d, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_RELATION_TOKEN></REQUIRES_CUSTOM_RELATION_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
.endregion
		
.region "Test with custom enum loop tokens"
		
		{TestMethod}
		public method CheckCustomToken07a, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_ENUM_TOKEN>CUSTOM_ENUM_TOKEN_1</REQUIRES_CUSTOM_ENUM_TOKEN>"
			Assert.IsTrue(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken07b, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_ENUM_TOKEN>CUSTOM_ENUM_TOKEN_2</REQUIRES_CUSTOM_ENUM_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken07c, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_ENUM_TOKEN>CUSTOM_ENUM_TOKEN_2"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken07d, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_ENUM_TOKEN></REQUIRES_CUSTOM_ENUM_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
.endregion

.region "Test with custom enum member loop tokens"
		
		{TestMethod}
		public method CheckCustomToken08a, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_ENUM_MEMBER_TOKEN>CUSTOM_ENUM_MEMBER_TOKEN_1</REQUIRES_CUSTOM_ENUM_MEMBER_TOKEN>"
			Assert.IsTrue(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken08b, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_ENUM_MEMBER_TOKEN>CUSTOM_ENUM_MEMBER_TOKEN_2</REQUIRES_CUSTOM_ENUM_MEMBER_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken08c, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_ENUM_MEMBER_TOKEN>CUSTOM_ENUM_TOKEN_2"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken08d, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_ENUM_MEMBER_TOKEN></REQUIRES_CUSTOM_ENUM_MEMBER_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
.endregion
		
.region "Test with custom file loop tokens"
		
		{TestMethod}
		public method CheckCustomToken09a, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_FILE_TOKEN>CUSTOM_FILE_TOKEN_1</REQUIRES_CUSTOM_FILE_TOKEN>"
			Assert.IsTrue(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken09b, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_FILE_TOKEN>CUSTOM_FILE_TOKEN_2</REQUIRES_CUSTOM_FILE_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken09c, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_FILE_TOKEN>CUSTOM_FILE_TOKEN_2"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken09d, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_FILE_TOKEN></REQUIRES_CUSTOM_FILE_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
.endregion
		
.region "Test with custom button loop tokens"
		
		{TestMethod}
		public method CheckCustomToken10a, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_BUTTON_TOKEN>CUSTOM_BUTTON_TOKEN_1</REQUIRES_CUSTOM_BUTTON_TOKEN>"
			Assert.IsTrue(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken10b, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_BUTTON_TOKEN>CUSTOM_BUTTON_TOKEN_2</REQUIRES_CUSTOM_BUTTON_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken10c, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_BUTTON_TOKEN>CUSTOM_BUTTON_TOKEN_1"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
		{TestMethod}
		public method CheckCustomToken10d, void
			endparams
		proc
			data buffer, a128
			buffer = "<REQUIRES_CUSTOM_BUTTON_TOKEN></REQUIRES_CUSTOM_BUTTON_TOKEN>"
			Assert.IsFalse(CodeGen.Engine.CheckCustomToken(buffer))
		endmethod
		
.endregion
		
	endclass

.region "Custom tokens used in the above tests"

	public class CustomToken1 extends CodeGen.Engine.CustomToken
		
		public override property Token, String
			method get
			proc
				mreturn "<CUSTOM_TOKEN_1>"
			endmethod
		endproperty
		
		public override method Replace      ,Boolean
			required in Str                 ,@CodeGen.RepositoryAPI.RpsStructure
			required in TokenStart          ,int
			required in TokenEnd            ,int
			required inout buffer           ,a
			required inout ErrStatus        ,int
			endparams
		proc
			mreturn CodeGen.Engine.ReplaceToken(buffer,this.Token,"Custom token 1")
		endmethod
		
	endclass
	
	public class CustomFieldToken1 extends CodeGen.Engine.CustomFieldToken
		
		public override property Token, String
			method get
			proc
				mreturn "<CUSTOM_FIELD_TOKEN_1>"
			endmethod
		endproperty
		
		public override method Replace         ,Boolean
			required in    Str                 ,@CodeGen.RepositoryAPI.RpsStructure
			required in    Fld                 ,@CodeGen.RepositoryAPI.RpsField
			required in    FldNbr              ,int
			required in    LogicalFieldNumber  ,int
			required in    TokenStart          ,int
			required in    TokenEnd            ,int
			required in    Loop1OutputOff      ,boolean
			required inout buffer              ,a
			required inout ErrStatus           ,int
			endparams
		proc
			mreturn CodeGen.Engine.ReplaceToken(buffer,this.Token,"Custom field token 1")
		endmethod
		
	endclass
	
	public class CustomSelectionToken1 extends CodeGen.Engine.CustomSelectionToken
		
		public override property Token, String
			method get
			proc
				mreturn "<CUSTOM_SELECTION_TOKEN_1>"
			endmethod
		endproperty
		
		public override method Replace      ,Boolean
			required in    Fld              ,@CodeGen.RepositoryAPI.RpsField
			required in    SelNbr           ,int
			required in    TokenStart       ,int
			required in    TokenEnd         ,int
			required inout buffer           ,a
			endparams
		proc
			mreturn CodeGen.Engine.ReplaceToken(buffer,this.Token,"Custom selection token 1")
		endmethod
		
	endclass

	public class CustomKeyToken1 extends CodeGen.Engine.CustomKeyToken
		
		public override property Token, String
			method get
			proc
				mreturn "<CUSTOM_KEY_TOKEN_1>"
			endmethod
		endproperty
		
		public override method Replace      ,Boolean
			required in Str                 ,@CodeGen.RepositoryAPI.RpsStructure
			required in Key                 ,@CodeGen.RepositoryAPI.RpsKey
			required in KeyNbr              ,int
			required in TokenStart          ,int
			required in TokenEnd            ,int
			required in PrimaryKeyOnly      ,boolean
			required inout buffer           ,a
			endparams
		proc
			mreturn CodeGen.Engine.ReplaceToken(buffer,this.Token,"Custom key token 1")
		endmethod
		
	endclass

	public class CustomSegmentToken1 extends CodeGen.Engine.CustomSegmentToken
		
		public override property Token, String
			method get
			proc
				mreturn "<CUSTOM_SEGMENT_TOKEN_1>"
			endmethod
		endproperty
		
		public override method Replace      ,Boolean
			required in    Segment          ,@CodeGen.RepositoryAPI.RpsKeySegment
			required in    SegNbr           ,int
			required in    Fld              ,@CodeGen.RepositoryAPI.RpsField
			required in    TokenStart       ,int
			required in    TokenEnd         ,int
			required in    LastSegment      ,int
			required inout buffer           ,a
			endparams
		proc
			mreturn CodeGen.Engine.ReplaceToken(buffer,this.Token,"Custom key segment token 1")
		endmethod
		
	endclass

	public class CustomRelationToken1 extends CodeGen.Engine.CustomRelationToken
		
		public override property Token, String
			method get
			proc
				mreturn "<CUSTOM_RELATION_TOKEN_1>"
			endmethod
		endproperty
		
		public override method Replace      ,Boolean
			required in    Str              ,@CodeGen.RepositoryAPI.RpsStructure
			required in    Relation         ,@CodeGen.RepositoryAPI.RpsRelation
			required in    RelNbr           ,int
			required in    TokenStart       ,int
			required in    TokenEnd         ,int
			required inout buffer           ,a
			endparams
		proc
			mreturn CodeGen.Engine.ReplaceToken(buffer,this.Token,"Custom relation token 1")
		endmethod
		
	endclass
	
	public class CustomEnumToken1 extends CodeGen.Engine.CustomEnumToken
		
		public override property Token, String
			method get
			proc
				mreturn "<CUSTOM_ENUM_TOKEN_1>"
			endmethod
		endproperty
		
		public override method Replace      ,Boolean
			required in    Enums            ,@CodeGen.RepositoryAPI.RpsEnumCollection
			required in    EnumNbr          ,int
			required in    TokenStart       ,int
			required in    TokenEnd         ,int
			required inout buffer           ,a
			endparams
		proc
			mreturn CodeGen.Engine.ReplaceToken(buffer,this.Token,"Custom enum token 1")
		endmethod
		
	endclass

	public class CustomEnumMemberToken1 extends CodeGen.Engine.CustomEnumMemberToken
		
		public override property Token, String
			method get
			proc
				mreturn "<CUSTOM_ENUM_MEMBER_TOKEN_1>"
			endmethod
		endproperty
		
		public override method Replace      ,Boolean
			required in    Enums            ,@CodeGen.RepositoryAPI.RpsEnumCollection
			required in    EnumNbr          ,int
			required in    EnumMemberNbr    ,int
			required in    TokenStart       ,int
			required in    TokenEnd         ,int
			required inout buffer           ,a
			endparams
		proc
			mreturn CodeGen.Engine.ReplaceToken(buffer,this.Token,"Custom enum member token 1")
		endmethod
		
	endclass

	public class CustomFileToken1 extends CodeGen.Engine.CustomFileToken
		
		public override property Token, String
			method get
			proc
				mreturn "<CUSTOM_FILE_TOKEN_1>"
			endmethod
		endproperty
		
		public override method Replace         ,Boolean
			required in    Str                 ,@CodeGen.RepositoryAPI.RpsStructure
			required in    File                ,@CodeGen.RepositoryAPI.RpsFile
			required in    FileNbr             ,int
			required in    TokenStart          ,int
			required in    TokenEnd            ,int
			required in    Loop1OutputOff      ,boolean
			required inout buffer              ,a
			required inout ErrStatus           ,int
			endparams
		proc
			mreturn CodeGen.Engine.ReplaceToken(buffer,this.Token,"Custom file token 1")
		endmethod
		
	endclass

	public class CustomButtonToken1 extends CodeGen.Engine.CustomButtonToken
		
		public override property Token, String
			method get
			proc
				mreturn "<CUSTOM_BUTTON_TOKEN_1>"
			endmethod
		endproperty
		
		public override method Replace      ,Boolean
			required    in BtnNbr           ,int            
			required    in TokenStart       ,int            
			required    in TokenEnd         ,int            
			required inout buffer           ,a              
			required    in Str              ,@CodeGen.RepositoryAPI.RpsStructure  
			endparams
		proc
			mreturn CodeGen.Engine.ReplaceToken(buffer,this.Token,"Custom button token 1")
		endmethod
		
	endclass

.endregion

endnamespace

