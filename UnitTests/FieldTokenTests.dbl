;;*****************************************************************************
;;
;; Title:       FieldTokenTests.dbl
;;
;; Type:        Unit test class
;;
;; Description: Unit tests for CodeGenEngine.ExpandFieldToken()
;;
;; Date:        27th Movember 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Microsoft.VisualStudio.TestTools.UnitTesting
import System

namespace UnitTests

	{TestClass}
	public class FieldTokenTests

		private str				,@CodeGen.RepositoryAPI.RpsStructure
		private fld				,@CodeGen.RepositoryAPI.RpsField
		private msg				,String

		{TestInitialize}
		public method Initialize, void
			endparams
		proc
			CodeGen.Engine.Env.SuppressLogging = true
			str = new CodeGen.RepositoryAPI.RpsStructure("UNIT_TEST")
			fld = str.Fields[0]
		endmethod
		
		{TestCleanup}
		public method Cleanup, void
			endparams
		proc
			CodeGen.Engine.Env.SuppressLogging = false
			clear str
		endmethod

		{TestMethod}
		public method FieldToken_FieldAltname, void
			endparams
		proc
			Assert.IsTrue(doTest("<FIELD_ALTNAME>","FIELD_1",msg),msg)
		endmethod
		
		{TestMethod}
		public method FieldToken_FieldDescription, void
			endparams
		proc
			Assert.IsTrue(doTest("<FIELD_DESC>","Field one is an A1",msg),msg)
		endmethod
		
		{TestMethod}
		public method FieldToken_FieldHeading, void
			endparams
		proc
			Assert.IsTrue(doTest("<FIELD_HEADING>","Field one report heading",msg),msg)
		endmethod
		
		{TestMethod}
		public method FieldToken_FieldHelpId, void
			endparams
		proc
			Assert.IsTrue(doTest("<FIELD_HELPID>","FIELD_ONE_HELP_ID",msg),msg)
		endmethod
		
		{TestMethod}
		public method FieldToken_FieldInfoLine, void
			endparams
		proc
			Assert.IsTrue(doTest("<FIELD_INFOLINE>","This is field one",msg),msg)
		endmethod
		
		{TestMethod}
		public method FieldToken_FieldName, void
			endparams
		proc
			Assert.IsTrue(doTest("<FIELD_NAME>","FIELD_ONE",msg),msg)
		endmethod
		
		{TestMethod}
		public method FieldToken_FieldPrompt, void
			endparams
		proc
			Assert.IsTrue(doTest("<FIELD_PROMPT>","Field one",msg),msg)
		endmethod
		
		{TestMethod}
		public method FieldToken_FieldUserText, void
			endparams
		proc
			Assert.IsTrue(doTest("<FIELD_UTEXT>","Field one user text",msg),msg)
		endmethod
		
.region "Support methods"

		private method doTest, Boolean
			required in  inBuffer	,String
			required in  expBuffer	,String
			required out message	,String
			endparams
		proc
			data ok, Boolean
			data mainBuffer		,a32768	,inBuffer
			data expectedResult	,a32768	,expBuffer
			data tokenStart		,int	,instr(1,mainBuffer,"<") 
			data tokenEnd		,int	,instr(tokenStart,mainBuffer,">")
			data errStatus		,int	,0

			message = "PROCESSING: " + atrim(mainBuffer) + " EXPECTED: " + atrim(expectedResult)

			if (ok=CodeGen.Engine.ExpandFieldToken(str,fld,1,1,tokenStart,tokenEnd,false,mainBuffer,errStatus))
				ok = (mainBuffer.eqs.expectedResult)

			if (!ok)
				message = message + " ACTUAL: " + atrim(mainBuffer)

			mreturn ok

		endmethod

.endregion

	endclass

endnamespace

