;;*****************************************************************************
;;
;; Title:       RpsTemplate.dbl
;;
;; Type:        Class
;;
;; Description: Represents a single Repository template definition
;;
;; Date:        19th October 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import CodeGen.RepositoryAPI
import System.Collections
import Newtonsoft.Json
import Newtonsoft.Json.Converters

namespace CodeGen.RepositoryAPI

    ;;; <summary>
    ;;; Represents a repository TEMPLATE definition
    ;;; </summary>
    public class RpsTemplate

        public override method ToString, String
            endparams
        proc
            mreturn String.Format("RpsTemplate: {0}",mTemplateName)
        endmethod

        ;;Template attribute data
        protected mt_info               ,t_info
        protected mTemplateName         ,a30
        protected mDescription          ,a40
        protected mLongDescription      ,a1800
        protected mUserFieldType        ,a30
        protected mReportHeading        ,a40
        protected mPrompt               ,a80
        protected mHelpIdentifier       ,a80
        protected mInfoLineText         ,a80
        protected mUserText             ,a80
        protected mAlternateName        ,a30
        protected mFieldFont            ,a30
        protected mPromptFont           ,a30
        protected mDefaultValue         ,a80
        protected mArriveMethod         ,a30
        protected mLeaveMethod          ,a30
        protected mDrillMethod          ,a30
        protected mHyperlinkMethod      ,a30
        protected mChangeMethod         ,a30
        protected mDisplayMethod        ,a30
        protected mEditFormatMethod     ,a30
        protected mArrayDimension       ,[#]int
        protected mfti_range            ,fti_range
        protected mfti_enum             ,fti_enum
        protected mAllowList            ,@ArrayList
        protected mSelectionList        ,@ArrayList
        protected mCorecedType          ,RpsFieldCoercedType

        ;;; <summary>
        ;;; Load a template
        ;;; </summary>
        ;;; <param name="TemplateName">Template name</param>
        public method RpsTemplate
            required in TemplateName, String
            endparams
        proc
            Repository.CheckIsOpen()
            LoadTemplate(TemplateName)
        endmethod

        ;; Destructor
        method ~RpsTemplate
        proc
            clear mAllowList, mSelectionList
        endmethod

        ;;Load the data for this template
        private method LoadTemplate, void
            required in TemplateName, String
            endparams
        proc
            ;;Save the template name
            mTemplateName = TemplateName.Trim().ToUpper()

            ;;Load the template information structure
            dd_template(Repository.RpsControl,DDT_INFO,TemplateName,mt_info)
            if (Repository.RpsControl.error)
                throw new RpsTemplateException("Failed to get information for repository template "+TemplateName)

            ;;Load extended data

            mArrayDimension = new int[4]
            mArrayDimension[1] = mt_info.ti_dim[1]
            mArrayDimension[2] = mt_info.ti_dim[2]
            mArrayDimension[3] = mt_info.ti_dim[3]
            mArrayDimension[4] = mt_info.ti_dim[4]

            ;;Load description (a40)
            if (mt_info.ti_desc)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_desc,mDescription)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get description for repository template "+TemplateName)
            end

            ;;Load long description (a1800)
            if (mt_info.ti_ldesc)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_ldesc,mLongDescription)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get long description for repository template "+TemplateName)
            end

            ;;Load user defined field type (a30)
            if (mt_info.ti_usrtyp)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_usrtyp,mUserFieldType)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get user defined type for repository template "+TemplateName)
            end

            ;;Load report heading (a40)
            if (mt_info.ti_heading)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_heading,mReportHeading)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get report heading for repository template "+TemplateName)
            end

            ;;Load prompt (a80)
            if (mt_info.ti_prompt)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_prompt,mPrompt)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get prompt for repository template "+TemplateName)
            end

            ;;Load help identifier (a80)
            if (mt_info.ti_help)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_help,mHelpIdentifier)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get help identifier for repository template "+TemplateName)
            end

            ;;Load information line text (a80)
            if (mt_info.ti_infoln)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_infoln,mInfoLineText)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get information line text for repository template "+TemplateName)
            end

            ;;Load user text string (a80)
            if (mt_info.ti_utext)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_utext,mUserText)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get user text for repository template "+TemplateName)
            end

            ;;Load alternate name (a30)
            if (mt_info.ti_altnm)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_altnm,mAlternateName)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get alternate name for repository template "+TemplateName)
            end

            ;;Load field font (a30)
            if (mt_info.ti_font)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_font,mFieldFont)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get field font for repository template "+TemplateName)
            end

            ;;Load prompt font (a30)
            if (mt_info.ti_prmptfont)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_prmptfont,mPromptFont)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get prompt font for repository template "+TemplateName)
            end

            ;;Load default value (a80)
            if (mt_info.ti_def)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_def,mDefaultValue)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get default value for repository template "+TemplateName)
            end

            ;;Load arrive method (a30)
            if (mt_info.ti_arrivemeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_arrivemeth,mArriveMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get arrive method for repository template "+TemplateName)
            end

            ;;Load leave method (a30)
            if (mt_info.ti_leavemeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_leavemeth,mLeaveMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get leave method for repository template "+TemplateName)
            end

            ;;Load drill method (a30)
            if (mt_info.ti_drillmeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_drillmeth,mDrillMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get drill method for repository template "+TemplateName)
            end

            ;;Load hyperlink method (a30)
            if (mt_info.ti_hypermeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_hypermeth,mHyperlinkMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get hyperlink method for repository template "+TemplateName)
            end

            ;;Load change method (a30)
            if (mt_info.ti_changemeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_changemeth,mChangeMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get change method for repository template "+TemplateName)
            end

            ;;Load display format method (a30)
            if (mt_info.ti_dispmeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_dispmeth,mDisplayMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get display method for repository template "+TemplateName)
            end

            ;;Load edit format method (a30)
            if (mt_info.ti_editfmtmeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_editfmtmeth,mEditFormatMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get edit format method for repository template "+TemplateName)
            end

            ;;Allowed values (@ArrayList)
            mAllowList = new ArrayList()
            if (mt_info.ti_alwlst&&mt_info.ti_alwct)
            begin
                data ListData, fti_entlst
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_alwlst,ListData)
                if (Repository.RpsControl.error) then
                    throw new RpsTemplateException("Failed to get allow list entries for repository template "+TemplateName)
                else
                begin
                    data idx, int
                    for idx from 1 thru mt_info.ti_alwct
                        mAllowList.Add((@a)ListData.fti_entlstary[idx])
                end
            end

            ;;Valid selections (@ArrayList)
            mSelectionList = new ArrayList()
            if (mt_info.ti_sellist&&mt_info.ti_selct)
            begin
                data ListData, fti_entlst
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_sellist,ListData)
                if (Repository.RpsControl.error) then
                    throw new RpsTemplateException("Failed to get selection list entries for repository template "+TemplateName)
                else
                begin
                    data idx, int
                    for idx from 1 thru mt_info.ti_selct
                        mSelectionList.Add((@a)ListData.fti_entlstary[idx])
                end
            end

            ;;Load numeric range values (fti_range)
            if (mt_info.ti_range)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_range,mfti_range)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get ranges for repository template "+TemplateName)
            end

            ;;Load enumeration data (fti_enum)
            if (mt_info.ti_enum)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,mt_info.ti_enum,mfti_enum)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get emumeration data for repository template "+TemplateName)
            end

            ;;Load the fields coerced type
            using mt_info.ti_type select
            (T_DEC),
            begin
                using mt_info.ti_class select
                (C_YYMMDD,C_YYYYMMDD,C_YYJJJ,C_YYYYJJJ,C_YYPP,C_YYYYPP,C_HHMMSS,C_HHMM),
                begin
                    using mt_info.ti_coertype select
                    (CT_DATETIME),
                        mCorecedType = RpsFieldCoercedType.CtNone
                    (CT_NULLDATETIME),
                        mCorecedType = RpsFieldCoercedType.CtNullDateTime
                    endusing
                end
                (),
                begin
                    if (mt_info.ti_prec) then
                    begin
                        using mt_info.ti_coertype select
                        (CT_DECIMAL),
                            mCorecedType = RpsFieldCoercedType.CtNone
                        (CT_DOUBLE),
                            mCorecedType = RpsFieldCoercedType.CtDouble
                        (CT_FLOAT),
                            mCorecedType = RpsFieldCoercedType.CtFloat
                        endusing
                    end
                    else
                    begin
                        using mt_info.ti_coertype select
                        (CT_DEFAULT),
                            mCorecedType = RpsFieldCoercedType.CtNone
                        (CT_BYTE),
                            mCorecedType = RpsFieldCoercedType.CtByte
                        (CT_SHORT),
                            mCorecedType = RpsFieldCoercedType.CtShort
                        (CT_INT),
                            mCorecedType = RpsFieldCoercedType.CtInt
                        (CT_LONG),
                            mCorecedType = RpsFieldCoercedType.CtLong
                        (CT_SBYTE),
                            mCorecedType = RpsFieldCoercedType.CtSbyte
                        (CT_USHORT),
                            mCorecedType = RpsFieldCoercedType.CtUshort
                        (CT_UINT),
                            mCorecedType = RpsFieldCoercedType.CtUint
                        (CT_ULONG),
                            mCorecedType = RpsFieldCoercedType.CtUlong
                        (CT_BOOLEAN),
                            mCorecedType = RpsFieldCoercedType.CtBoolean
                        endusing
                    end
                end
                endusing
            end
            (T_INT),
            begin
                using mt_info.ti_coertype select
                (CT_DEFAULT),
                    mCorecedType = RpsFieldCoercedType.CtNone
                (CT_BYTE),
                    mCorecedType = RpsFieldCoercedType.CtByte
                (CT_SHORT),
                    mCorecedType = RpsFieldCoercedType.CtShort
                (CT_INT),
                    mCorecedType = RpsFieldCoercedType.CtInt
                (CT_LONG),
                    mCorecedType = RpsFieldCoercedType.CtLong
                (CT_SBYTE),
                    mCorecedType = RpsFieldCoercedType.CtSbyte
                (CT_USHORT),
                    mCorecedType = RpsFieldCoercedType.CtUshort
                (CT_UINT),
                    mCorecedType = RpsFieldCoercedType.CtUint
                (CT_ULONG),
                    mCorecedType = RpsFieldCoercedType.CtUlong
                (CT_BOOLEAN),
                    mCorecedType = RpsFieldCoercedType.CtBoolean
                endusing
            end
            (),
                mCorecedType = RpsFieldCoercedType.CtNone
            endusing

        endmethod

        ;;---------------------------------------------------------------------
        ;;Public properties to expose template attributes

        ;;; <summary>
        ;;; Template name
        ;;; </summary>
        public property Name, string
            method get
            proc
                mreturn %atrim(mTemplateName)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Parent template name
        ;;; </summary>
        public property ParentTemplate, string
            method get
            proc
                mreturn %atrim(mt_info.ti_template)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Description
        ;;; </summary>
        public property Description, string
            method get
            proc
                mreturn %atrim(mDescription)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Long description
        ;;; </summary>
        public property LongDescription, string
            method get
            proc
                mreturn %atrim(mLongDescription)
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Data type
        ;;; </summary>
        public property DataType, RpsFieldDataType
            method get
                record
                    retval, RpsFieldDataType
                endrecord
            proc
                using mt_info.ti_type select
                ("A"), retval = RpsFieldDataType.Alpha
                ("D"), retval = RpsFieldDataType.Decimal
                ("I"), retval = RpsFieldDataType.Integer
                ("U"), retval = RpsFieldDataType.User
                endusing
                mreturn retval
            endmethod
        endproperty

        ;;; <summary>
        ;;; Data type code
        ;;; </summary>
        public property DataTypeCode, string
            method get
            proc
                mreturn mt_info.ti_type
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; DBL type subclass
        ;;; </summary>
        public property DataTypeSubclass, RpsFieldSubclass
            method get
                record
                    tmp_SubClass, RpsFieldSubclass
                endrecord
            proc
                tmp_SubClass = RpsFieldSubclass.None
                using mt_info.ti_type select
                (T_ALP),
                    using mt_info.ti_class select
                    (C_BINARY),
                        tmp_SubClass = RpsFieldSubclass.None
                    endusing
                (T_DEC),
                begin
                    using mt_info.ti_class select
                    (C_YYMMDD),
                        tmp_SubClass = RpsFieldSubclass.DateYYMMDD
                    (C_YYYYMMDD),
                        tmp_SubClass = RpsFieldSubclass.DateYYYYMMDD
                    (C_YYJJJ),
                        tmp_SubClass = RpsFieldSubclass.DateYYJJJ
                    (C_YYYYJJJ),
                        tmp_SubClass = RpsFieldSubclass.DateYYYYJJJ
                    (C_YYPP),
                        tmp_SubClass = RpsFieldSubclass.DateYYPP
                    (C_YYYYPP),
                        tmp_SubClass = RpsFieldSubclass.DateYYYYPP
                    (C_HHMMSS),
                        tmp_SubClass = RpsFieldSubclass.TimeHHMMSS
                    (C_BINARY),
                        tmp_SubClass = RpsFieldSubclass.TimeHHMM
                    endusing
                end
                (T_USR),
                begin
                    using mt_info.ti_class select
                    (C_ALPHA),
                        tmp_SubClass = RpsFieldSubclass.UserAlpha
                    (C_NUMERIC),
                        tmp_SubClass = RpsFieldSubclass.UserNumeric
                    (C_DATE),
                        tmp_SubClass = RpsFieldSubclass.UserDate
                    endusing
                end
                endusing
                mreturn tmp_SubClass
            endmethod
        endproperty

        ;;; <summary>
        ;;; User defined field type
        ;;; </summary>
        public property UserFieldType, string
            method get
            proc
                mreturn %atrim(mUserFieldType)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Field size
        ;;; </summary>
        public property Size, int
            method get
            proc
                mreturn mt_info.ti_size
            endmethod
        endproperty

        ;;; <summary>
        ;;; Digits to right of decimal point
        ;;; </summary>
        public property Precision, int
            method get
            proc
                mreturn mt_info.ti_prec
            endmethod
        endproperty

        ;;; <summary>
        ;;; Array dimensions
        ;;; </summary>
        public property ArrayDimension, [#]int
            method get
            proc
                mreturn mArrayDimension
            endmethod
        endproperty

        ;;; <summary>
        ;;; Native data size
        ;;; </summary>
        public property NativeSize, int
            method get
            proc
                mreturn mt_info.ti_ndsize
            endmethod
        endproperty

        ;;; <summary>
        ;;; Excluded by language
        ;;; </summary>
        public property ExcludedByLanguage, boolean
            method get
            proc
                mreturn mt_info.ti_dblvw
            endmethod
        endproperty

        ;;; <summary>
        ;;; Excluded by ReportWriter
        ;;; </summary>
        public property ExcludedByReportWriter, boolean
            method get
            proc
                mreturn mt_info.ti_rptvw
            endmethod
        endproperty

        ;;; <summary>
        ;;; Excluded by Toolkit
        ;;; </summary>
        public property ExcludedByToolkit, boolean
            method get
            proc
                mreturn mt_info.ti_scrptvw
            endmethod
        endproperty

        ;;; <summary>
        ;;; Excluded by Web
        ;;; </summary>
        public property ExcludedByWeb, boolean
            method get
            proc
                mreturn mt_info.ti_webvw
            endmethod
        endproperty

        ;;; <summary>
        ;;; Field name is the name link
        ;;; </summary>
        public property NoNameLink, boolean
            method get
            proc
                mreturn mt_info.ti_nolnk
            endmethod
        endproperty

        ;;; <summary>
        ;;; Report heading
        ;;; </summary>
        public property ReportHeading, string
            method get
            proc
                mreturn %atrim(mReportHeading)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Display format name
        ;;; </summary>
        public property FormatName, string
            method get
            proc
                mreturn %atrim(mt_info.ti_fmt)
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Report field justification
        ;;; </summary>
        public property ReportJustification, RpsJustification
            method get
            proc
                mreturn (RpsJustification)integer(mt_info.ti_rptjust)
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Input field justification
        ;;; </summary>
        public property InputJustification, RpsJustification
            method get
            proc
                mreturn (RpsJustification)integer(mt_info.ti_inpjust)
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Input field position mode
        ;;; </summary>
        public property FieldPositionMode, RpsPositionMode
            method get
            proc
                mreturn (RpsPositionMode)integer(mt_info.ti_fpostyp)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Input field row
        ;;; </summary>
        public property FieldRow, int
            method get
            proc
                mreturn mt_info.ti_finprow
            endmethod
        endproperty

        ;;; <summary>
        ;;; Input field column
        ;;; </summary>
        public property FieldColumn, int
            method get
            proc
                mreturn mt_info.ti_finpcol
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Prompt position type
        ;;; </summary>
        public property PromptPositionMode, RpsPositionMode
            method get
            proc
                mreturn (RpsPositionMode)integer(mt_info.ti_postyp)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Prompt row
        ;;; </summary>
        public property PromptRow, int
            method get
            proc
                mreturn mt_info.ti_inprow
            endmethod
        endproperty

        ;;; <summary>
        ;;; Prompt column
        ;;; </summary>
        public property PromptColumn, int
            method get
            proc
                mreturn mt_info.ti_inpcol
            endmethod
        endproperty

        ;;; <summary>
        ;;; Blank if zero
        ;;; </summary>
        public property BlankIfZero, boolean
            method get
            proc
                mreturn mt_info.ti_bzro
            endmethod
        endproperty

        ;;; <summary>
        ;;; Custom paint character specified
        ;;; </summary>
        public property PaintCharacterSpecified, boolean
            method get
            proc
                mreturn mt_info.ti_paint
            endmethod
        endproperty

        ;;; <summary>
        ;;; Custom paint character
        ;;; </summary>
        public property PaintCharacter, string
            method get
            proc
                mreturn mt_info.ti_pntchr
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; View field as
        ;;; </summary>
        public property ViewAs, RpsFieldViewAs
            method get
            proc
                mreturn (RpsFieldViewAs)integer(mt_info.ti_view)
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Color palette
        ;;; </summary>
        public property ColorPalette, RpsColorPalette
            method get
            proc
                mreturn (RpsColorPalette)integer(mt_info.ti_color)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Override the highlight attribute
        ;;; </summary>
        public property RenditionHighlight, boolean
            method get
            proc
                mreturn (mt_info.ti_attrib&&mt_info.ti_highlight)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Override the reverse attribute
        ;;; </summary>
        public property RenditionReverse, boolean
            method get
            proc
                mreturn (mt_info.ti_attrib&&mt_info.ti_reverse)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Override the blink attribute
        ;;; </summary>
        public property RenditionBlink, boolean
            method get
            proc
                mreturn (mt_info.ti_attrib&&mt_info.ti_blink)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Override the underline attribute
        ;;; </summary>
        public property RenditionUnderline, boolean
            method get
            proc
                mreturn (mt_info.ti_attrib&&mt_info.ti_underline)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Read-only
        ;;; </summary>
        public property ReadOnly, boolean
            method get
            proc
                mreturn mt_info.ti_readonly
            endmethod
        endproperty

        ;;; <summary>
        ;;; Disabled
        ;;; </summary>
        public property Disabled, boolean
            method get
            proc
                mreturn mt_info.ti_disabled
            endmethod
        endproperty

        ;;; <summary>
        ;;; Display length
        ;;; </summary>
        public property DisplayLength, int
            method get
            proc
                mreturn mt_info.ti_displen
            endmethod
        endproperty

        ;;; <summary>
        ;;; View length
        ;;; </summary>
        public property ViewLength, int
            method get
            proc
                mreturn mt_info.ti_viewlen
            endmethod
        endproperty

        ;;; <summary>
        ;;; Don't echo characters typed
        ;;; </summary>
        public property NoEcho, boolean
            method get
            proc
                mreturn mt_info.ti_noecho
            endmethod
        endproperty

        ;;; <summary>
        ;;; Echo character for characters typed
        ;;; </summary>
        public property NoEchoCharacter, string
            method get
            proc
                mreturn mt_info.ti_echochr
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Default action
        ;;; </summary>
        public property DefaultAction, RpsFieldDefaultAction
            method get
            proc
                mreturn (RpsFieldDefaultAction)integer(mt_info.ti_defact)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Automatic default action?
        ;;; </summary>
        public property DefaultAuotmatic, boolean
            method get
            proc
                mreturn mt_info.ti_auto
            endmethod
        endproperty

        ;;; <summary>
        ;;; Default date to current date?
        ;;; </summary>
        public property DateDefaultToday, boolean
            method get
            proc
                mreturn mt_info.ti_today
            endmethod
        endproperty

        ;;; <summary>
        ;;; Allow short date?
        ;;; </summary>
        public property AllowShortDate, boolean
            method get
            proc
                mreturn mt_info.ti_short
            endmethod
        endproperty

        ;;; <summary>
        ;;; Default time to current time?
        ;;; </summary>
        public property TimeDefaultNow, boolean
            method get
            proc
                mreturn mt_info.ti_now
            endmethod
        endproperty

        ;;; <summary>
        ;;; Display meridian indicator?
        ;;; </summary>
        public property TimeAmPm, boolean
            method get
            proc
                mreturn mt_info.ti_ampm
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Input timeout mode
        ;;; </summary>
        public property InputTimeoutMode, RpsFieldTimeout
            method get
            proc
                mreturn (RpsFieldTimeout)integer(mt_info.ti_wait)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Input timeout delay. Only used if InputTimeoutMode = RpsFieldTimeout.Time
        ;;; </summary>
        public property InputTimeout, int
            method get
            proc
                mreturn mt_info.ti_waittime
            endmethod
        endproperty

        ;;; <summary>
        ;;; Convert input to uppercase?
        ;;; </summary>
        public property Uppercase, boolean
            method get
            proc
                mreturn mt_info.ti_uc
            endmethod
        endproperty

        ;;; <summary>
        ;;; No decimal needs to be entered
        ;;; </summary>
        public property NoDecimalRequired, boolean
            method get
            proc
                mreturn mt_info.ti_nodec
            endmethod
        endproperty

        ;;; <summary>
        ;;; Field terminates automatically when filled
        ;;; </summary>
        public property NoTerminatorRequired, boolean
            method get
            proc
                mreturn mt_info.ti_noterm
            endmethod
        endproperty

        ;;; <summary>
        ;;; Cursor position is retained
        ;;; </summary>
        public property RetainPosition, boolean
            method get
            proc
                mreturn mt_info.ti_retpos
            endmethod
        endproperty

        ;;; <summary>
        ;;; Input length
        ;;; </summary>
        public property InputLength, int
            method get
            proc
                mreturn mt_info.ti_inplen
            endmethod
        endproperty

        ;;; <summary>
        ;;; Required field
        ;;; </summary>
        public property Required, boolean
            method get
            proc
                mreturn mt_info.ti_req
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Break field?
        ;;; </summary>
        public property BreakMode, RpsFieldBreak
            method get
            proc
                mreturn (RpsFieldBreak)integer(mt_info.ti_break)
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Negative allowed
        ;;; </summary>
        public property NegativeAllowed, RpsFieldNegatives
            method get
            proc
                mreturn (RpsFieldNegatives)integer(mt_info.ti_negalw)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Allowed values list
        ;;; </summary>
        public property AllowList, @ArrayList
            method get
            proc
                mreturn mAllowList
            endmethod
        endproperty

        ;;; <summary>
        ;;; Length of longest allow list entry
        ;;; </summary>
        public property AllowListMaxLength, int
            method get
            proc
                mreturn mt_info.ti_alwlen
            endmethod
        endproperty

        ;;; <summary>
        ;;; Case sensitive matches for allow list values
        ;;; </summary>
        public property AllowListMatchCase, boolean
            method get
            proc
                mreturn mt_info.ti_matchcs
            endmethod
        endproperty

        ;;; <summary>
        ;;; Exact matches for allow list values
        ;;; </summary>
        public property AllowListMatchExact, boolean
            method get
            proc
                mreturn mt_info.ti_matchex
            endmethod
        endproperty

        ;;; <summary>
        ;;; Selection List
        ;;; </summary>
        public property SelectionList, @ArrayList
            method get
            proc
                mreturn mSelectionList
            endmethod
        endproperty

        ;;; <summary>
        ;;; Length of longest selection list entry
        ;;; </summary>
        public property SelectionListMaxLength, int
            method get
            proc
                mreturn mt_info.ti_sellen
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Current selection type
        ;;; </summary>
        public property SelectionListType, RpsFieldSelectionType
            method get
            proc
                mreturn (RpsFieldSelectionType)integer(mt_info.ti_seltyp)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Selection window row
        ;;; </summary>
        public property SelectionWindowRow, int
            method get
            proc
                mreturn mt_info.ti_selrow
            endmethod
        endproperty

        ;;; <summary>
        ;;; Selection window column
        ;;; </summary>
        public property SelectionWindowColumn, int
            method get
            proc
                mreturn mt_info.ti_selcol
            endmethod
        endproperty

        ;;; <summary>
        ;;; Selection window name. Only used if SelectionListType = RpsFieldSelectionType.Window.
        ;;; </summary>
        public property SelectionWindowName, string
            method get
            proc
                mreturn %atrim(mt_info.ti_selwin)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Selection window height. Only used if SelectionListType = RpsFieldSelectionType.List
        ;;; </summary>
        public property SelectionWindowHeight, int
            method get
            proc
                mreturn mt_info.ti_selht
            endmethod
        endproperty

        ;;; <summary>
        ;;; Field prompt
        ;;; </summary>
        public property Prompt, string
            method get
            proc
                mreturn %atrim(mPrompt)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Help identifier
        ;;; </summary>
        public property HelpIdentifier, string
            method get
            proc
                mreturn %atrim(mHelpIdentifier)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Information line text
        ;;; </summary>
        public property InfoLineText, string
            method get
            proc
                mreturn %atrim(mInfoLineText)
            endmethod
        endproperty

        ;;; <summary>
        ;;; User text string
        ;;; </summary>
        public property UserText, string
            method get
            proc
                mreturn %atrim(mUserText)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Alternate name
        ;;; </summary>
        public property AlternateName, string
            method get
            proc
                mreturn %atrim(mAlternateName)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Field font palette name
        ;;; </summary>
        public property FieldFont, string
            method get
            proc
                mreturn %atrim(mFieldFont)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Prompt font palette name
        ;;; </summary>
        public property PromptFont, string
            method get
            proc
                mreturn %atrim(mPromptFont)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Default value
        ;;; </summary>
        public property DefaultValue, string
            method get
            proc
                mreturn %atrim(mDefaultValue)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Arrive method name
        ;;; </summary>
        public property ArriveMethod, string
            method get
            proc
                mreturn %atrim(mArriveMethod)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Leave method name
        ;;; </summary>
        public property LeaveMethod, string
            method get
            proc
                mreturn %atrim(mLeaveMethod)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Drill method name
        ;;; </summary>
        public property DrillMethod, string
            method get
            proc
                mreturn %atrim(mDrillMethod)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Hyperlink method name
        ;;; </summary>
        public property HyperlinkMethod, string
            method get
            proc
                mreturn %atrim(mHyperlinkMethod)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Change method name
        ;;; </summary>
        public property ChangeMethod, string
            method get
            proc
                mreturn %atrim(mChangeMethod)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Display method name
        ;;; </summary>
        public property DisplayMethod, string
            method get
            proc
                mreturn %atrim(mDisplayMethod)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Edit format method name
        ;;; </summary>
        public property EditFormatMethod, string
            method get
            proc
                mreturn %atrim(mEditFormatMethod)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Numeric range exists
        ;;; </summary>
        public property NumericRangeExists, int
            method get
            proc
                mreturn mt_info.ti_range
            endmethod
        endproperty

        ;;; <summary>
        ;;; Numeric field range minimum
        ;;; </summary>
        public property NumericRangeMinimum, decimal
            method get
            proc
                mreturn mfti_range.fti_rgmin
            endmethod
        endproperty

        ;;; <summary>
        ;;; Numeric field range maximum
        ;;; </summary>
        public property NumericRangeMaximum, decimal
            method get
            proc
                mreturn mfti_range.fti_rgmax
            endmethod
        endproperty

        ;;; <summary>
        ;;; Enumerated
        ;;; </summary>
        public property Enumerated, int
            method get
            proc
                mreturn mt_info.ti_enum
            endmethod
        endproperty

        ;;; <summary>
        ;;; Enumerated field display length
        ;;; </summary>
        public property EnumeratedDisplayLength, int
            method get
            proc
                mreturn mfti_enum.fti_enmlen
            endmethod
        endproperty

        ;;; <summary>
        ;;; Enumerated field base value
        ;;; </summary>
        public property EnumeratedBaseValue, int
            method get
            proc
                mreturn mfti_enum.fti_enmbase
            endmethod
        endproperty

        ;;; <summary>
        ;;; Enumerated field step value
        ;;; </summary>
        public property EnumeratedStepValue, int
            method get
            proc
                mreturn mfti_enum.fti_enmstep
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Coerced type
        ;;; </summary>
        public property CorecedType, RpsFieldCoercedType
            method get
            proc
                mreturn mCorecedType
            endmethod
            method set
            proc
                mCorecedType = value
            endmethod
        endproperty

    endclass

endnamespace

