;;*****************************************************************************
;;
;; Title:       RpsTemplateCustom.dbl
;;
;; Type:        Class
;;
;; Description: Adds custom attributes to the RpsTemplate class.
;;
;; Date:        1st April 2022
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2022, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.RepositoryAPI
import System.Collections
import Newtonsoft.Json
import Newtonsoft.Json.Converters
import System.ComponentModel

namespace CodeGen.RepositoryAPI

    public partial class RpsTemplate

        protected static mMappings, @DataMappings

        private method loadCodeGenData, void
            endparams
        proc

            ;;First time in, create a mappings object
            if (mMappings==^null)
                mMappings = new DataMappings()

            ;;Describe the current field to the DataMapping objects
            mMappings.SetFieldAttributes(this.Size,this.Precision)

            ;;Load the CodeGen specific attributes

            this.CsType  = getDataType(MappedType.CSharp)
            this.VbType  = getDataType(MappedType.VB)
            this.SqlType = getDataType(MappedType.SQL)
            this.OcType  = getDataType(MappedType.ObjectiveC)
            this.SnType  = getDataType(MappedType.SynergyDotNet)
            this.TsType  = getDataType(MappedType.TypeScript)

            using DataType select
            (RpsFieldDataType.Alpha),
            begin
                this.TypeCode = "A"
                using DataTypeSubclass select
                (RpsFieldSubclass.Binary),
                begin
                    this.TypeName = "BINARY"
                    this.CsNumericConvert = ""
                    this.CsDefault = '""'
                    this.VbDefault = '""'
                    this.OcDefault = '@""'
                    this.OcObject = true
                    this.SnDefault = '""'
                    this.TsDefault = '""'
                end
                (),
                begin
                    this.TypeName = "ALPHA"
                    this.CsNumericConvert = ""
                    this.CsDefault = '""'
                    this.VbDefault = '""'
                    this.OcDefault = '@""'
                    this.OcObject = true
                    this.SnDefault = '""'
                    this.TsDefault = '""'
                end
                endusing
            end
            (RpsFieldDataType.User),
            begin
                this.TypeCode = "A"
                using DataTypeSubclass select
                (RpsFieldSubclass.UserAlpha),
                begin
                    this.TypeName = "USER ALPHA"
                    this.CsNumericConvert = ""
                    this.CsDefault = '""'
                    this.VbDefault = '""'
                    this.OcDefault = '@""'
                    this.OcObject = true
                    this.SnDefault = '""'
                    this.TsDefault = '""'
                end
                (RpsFieldSubclass.UserNumeric),
                begin
                    this.TypeName = "USER NUMERIC"
                    this.CsNumericConvert = ""
                    this.CsDefault = '""'
                    this.VbDefault = '""'
                    this.OcDefault = '@""'
                    this.OcObject = true
                    this.SnDefault = '""'
                    this.TsDefault = '""'
                end
                (RpsFieldSubclass.UserDate),
                begin
                    this.TypeName = "USER DATE"
                    this.CsNumericConvert = ""
                    this.CsDefault = '""'
                    this.VbDefault = '""'
                    this.OcDefault = '@""'
                    this.OcObject = true
                    this.SnDefault = '""'
                    this.TsDefault = '""'
                end
                endusing
            end
            (RpsFieldDataType.Decimal),
            begin
                this.TypeCode = "D"
                using DataTypeSubclass select
                (RpsFieldSubclass.DateYYYYMMDD),
                begin
                    this.TypeName = "DATE"
                    this.CsNumericConvert = ""
                    this.CsDefault = "new DateTime()"
                    this.VbDefault = "New DateTime()"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "new DateTime()"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.DateYYMMDD),
                begin
                    this.TypeName = "DATE"
                    this.CsNumericConvert = ""
                    this.CsDefault = "new DateTime()"
                    this.VbDefault = "New DateTime()"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "new DateTime()"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.DateYYYYJJJ),
                begin
                    this.TypeName = "DATE"
                    this.CsNumericConvert = ""
                    this.CsDefault = "new DateTime()"
                    this.VbDefault = "New DateTime()"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "new DateTime()"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.DateYYJJJ),
                begin
                    this.TypeName = "DATE"
                    this.CsNumericConvert = ""
                    this.CsDefault = "new DateTime()"
                    this.VbDefault = "New DateTime()"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "new DateTime()"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.DateYYYYPP),
                begin
                    this.TypeName = "DATE"
                    this.CsNumericConvert = ""
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.DateYYPP),
                begin
                    this.TypeName = "DATE"
                    this.CsNumericConvert = ""
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.TimeHHMMSS),
                begin
                    this.TypeName = "TIME"
                    this.CsNumericConvert = ""
                    this.CsDefault = "new DateTime()"
                    this.VbDefault = "New DateTime()"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "new DateTime()"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.TimeHHMM),
                begin
                    this.TypeName = "TIME"
                    this.CsNumericConvert = ""
                    this.CsDefault = "new DateTime()"
                    this.VbDefault = "New DateTime()"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "new DateTime()"
                    this.TsDefault = 'new Date()'
                end
                (),
                begin
                    if (Precision) then
                    begin
                        this.TypeName = "IMPLIED"
                        this.CsNumericConvert = "decimal.TryParse"
                        this.CsDefault = "0"
                        this.VbDefault = "0"
                        this.OcDefault = "0.0"
                        this.OcObject = false
                        this.SnDefault = "0.0"
                        this.TsDefault = "0.0"
                    end
                    else
                    begin
                        if (Size<=9) then
                        begin
                            this.TypeName = "DECIMAL"
                            this.CsNumericConvert = "int.TryParse"
                            this.CsDefault = "0"
                            this.VbDefault = "0"
                            this.OcDefault = "0"
                            this.OcObject = false
                            this.SnDefault = "0"
                            this.TsDefault = "0"
                        end
                        else
                        begin
                            this.TypeName = "DECIMAL"
                            this.CsNumericConvert = "long.TryParse"
                            this.CsDefault = "0"
                            this.VbDefault = "0"
                            this.OcDefault = "0"
                            this.OcObject = false
                            this.SnDefault = "0"
                            this.TsDefault = "0"
                        end
                    end
                end
                endusing
            end
            (RpsFieldDataType.Integer),
            begin
                this.TypeCode = "I"
                using Size select
                (1,2),
                begin
                    this.TypeName = "INTEGER"
                    this.CsNumericConvert = "int.TryParse"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (4),
                begin
                    this.TypeName = "INTEGER"
                    this.CsNumericConvert = "int.TryParse"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (8),
                begin
                    this.TypeName = "INTEGER"
                    this.CsNumericConvert = "long.TryParse"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                endusing
            end
            (RpsFieldDatatype.Boolean),
            begin
                this.TypeCode = "BOOLEAN"
                this.TypeName = "BOOLEAN"
                this.CsNumericConvert = "bool.TryParse"
                this.CsDefault = "false"
                this.VbDefault = "False"
                this.OcDefault = "NO"
                this.OcObject = false
                this.SnDefault = "false"
                this.TsDefault = "false"
            end
            (RpsFieldDataType.Enum),    ;;Previously could not happen because of RepositoryTools.CheckStructure
            begin
                this.TypeCode = this.EnumName
                this.TypeName = "ENUM"
                this.CsNumericConvert = ""
                this.CsDefault = ""
                this.VbDefault = ""
                this.OcDefault = ""
                this.OcObject = false
                this.SnDefault = ""
                this.TsDefault = ""
            end
            (RpsFieldDataType.Binary),  ;;Previously could not happen because of RepositoryTools.CheckStructure
            begin
                this.TypeCode = "A"
                this.TypeName = "BINARY"
                this.CsNumericConvert = ""
                this.CsDefault = ""
                this.VbDefault = ""
                this.OcDefault = ""
                this.OcObject = false
                this.SnDefault = ""
                this.TsDefault = ""
            end
;            (RpsFieldDataType.Structfield), ;;Templates can't be struct fields!
;            begin
;                this.TypeCode = this.StructFieldStructure
;                this.TypeName = "STRUCT FIELD"
;                this.CsNumericConvert = ""
;                this.CsDefault = ""
;                this.VbDefault = ""
;                this.OcDefault = ""
;                this.OcObject = false
;                this.SnDefault = ""
;                this.TsDefault = ""
;            end
            (RpsFieldDataType.AutoSequence),
            begin
                this.TypeCode = "I"
                this.TypeName = "AUTO SEQUENCE"
                this.CsNumericConvert = "long.TryParse"
                this.CsDefault = "0"
                this.VbDefault = "0"
                this.OcDefault = "0"
                this.OcObject = false
                this.SnDefault = "0"
                this.TsDefault = "0"
            end
            (RpsFieldDataType.AutoTime),
            begin
                this.TypeCode = "I"
                this.TypeName = "AUTO TIMESTAMP"
                this.CsNumericConvert = "long.TryParse"
                this.CsDefault = "0"
                this.VbDefault = "0"
                this.OcDefault = "0"
                this.OcObject = false
                this.SnDefault = "0"
                this.TsDefault = "0"
            end
            endusing

            ;;If the field has an explicit coercion then use it
            if (CoercedType!=RpsFieldCoercedType.CtNone)
            begin
                using CoercedType select
                (RpsFieldCoercedType.CtByte),
                begin
                    this.TypeName = "BYTE"
                    this.CsNumericConvert = "byte.TryParse"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtShort),
                begin
                    this.TypeName = "SHORT"
                    this.CsNumericConvert = "short.TryParse"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtInt),
                begin
                    this.TypeName = "INTEGER"
                    this.CsNumericConvert = "int.TryParse"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtLong),
                begin
                    this.TypeName = "LONG"
                    this.CsNumericConvert = "long.TryParse"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtSbyte),
                begin
                    this.TypeName = "SBYTE"
                    this.CsNumericConvert = "sbyte.TryParse"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtUshort),
                begin
                    this.TypeName = "USHORT"
                    this.CsNumericConvert = "ushort.TryParse"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtUint),
                begin
                    this.TypeName = "UINTEGER"
                    this.CsNumericConvert = "uint.TryParse"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtUlong),
                begin
                    this.TypeName = "ULONG"
                    this.CsNumericConvert = "ulong.TryParse"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtBoolean),
                begin
                    this.TypeName = "BOOLEAN"
                    this.CsNumericConvert = "bool.TryParse"
                    this.CsDefault = "false"
                    this.VbDefault = "False"
                    this.OcDefault = "NO"
                    this.OcObject = false
                    this.SnDefault = "false"
                    this.TsDefault = "false"
                end
                (RpsFieldCoercedType.CtDouble),
                begin
                    this.TypeName = "DOUBLE"
                    this.CsNumericConvert = "double.TryParse"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0.0"
                    this.OcObject = false
                    this.SnDefault = "0.0"
                    this.TsDefault = "0.0"
                end
                (RpsFieldCoercedType.CtFloat),
                begin
                    this.TypeName = "FLOAT"
                    this.CsNumericConvert = "float.TryParse"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0.0"
                    this.OcObject = false
                    this.SnDefault = "0.0"
                    this.TsDefault = "0.0"
                end
                (RpsFieldCoercedType.CtNullDateTime),
                begin
                    this.TypeName = "NULLABLEDATETIME"
                    this.CsNumericConvert = ""
                    this.CsDefault = "null"
                    this.VbDefault = "Nothing"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "^null"
                    this.TsDefault = "null"
                end
                endusing
            end

;            ;;Mapped field
;            this.MappedField = RpsUtils.GetMappedField(this.StructureName,this.Name,this.UserText,this.LongDescription)
;
;            ;;Mapping conversion function
;            this.MappingFunction = RpsUtils.GetMappingFunction(this.StructureName,this.Name,this.UserText,this.LongDescription)
;
;            ;;Mapping unconversion function
;            this.UnmappingFunction = RpsUtils.GetUnMappingFunction(this.StructureName,this.Name,this.UserText,this.LongDescription)

            ;;Auto incrmenting field
            this.AutoIncrement = false
            begin
                data pos1, int
                if (pos1=instr(1,this.UserText.ToUpper(),"@AUTOINCREMENT;")) then
                    this.AutoIncrement = true
                else if (pos1=instr(1,this.LongDescription.ToUpper(),"@AUTOINCREMENT;"))
                    this.AutoIncrement = true
            end

            this.SqlName = this.Name
            this.OdbcName = this.Name

        endmethod

        private method getDataType, string
            required in ToType  ,MappedType
            endparams
        proc

            using DataType select
            (RpsFieldDataType.Alpha),
            begin
                using DataTypeSubclass select
                (RpsFieldSubclass.Binary),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetBinaryAlphaType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetBinaryAlphaType()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetBinaryAlphaType()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetBinaryAlphaType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetBinaryAlphaType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetBinaryAlphaType()
                    endusing
                end
                (),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetAlphaType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetAlphaType()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetAlphaType()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetAlphaType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetAlphaType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetAlphaType()
                    endusing
                end
                endusing
            end
            (RpsFieldDataType.User),
            begin
                using DataTypeSubclass select
                (RpsFieldSubclass.UserAlpha),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetUserAlphaType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetUserAlphaType()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetUserAlphaType()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetUserAlphaType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetUserAlphaType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetUserAlphaType()
                    endusing
                end
                (RpsFieldSubclass.UserNumeric),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetUserNumericType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetUserNumericType()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetUserNumericType()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetUserNumericType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetUserNumericType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetUserNumericType()
                    endusing
                end
                (RpsFieldSubclass.UserDate),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetUserDateType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetUserDateType()
                    (MappedType.SQL),
                    begin
                        using UserFieldType select
                        ("^CLASS^=YYYYMMDDHHMISSUUUUUU"),
                            mreturn mMappings.CsMappings.GetUserTimeStampType()
                        (),
                            mreturn mMappings.SqlMappings.GetUserDateType()
                        endusing
                    end
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetUserDateType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetUserDateType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetUserDateType()
                    endusing
                end
                endusing
            end
            (RpsFieldDataType.Decimal),
            begin
                using DataTypeSubclass select
                (RpsFieldSubclass.DateYYYYMMDD),
                begin
                    if (CoercedType == RpsFieldCoercedType.CtNullDateTime) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetNullableDateYYYYMMDDType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetNullableDateYYYYMMDDType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetNullableDateYYYYMMDDType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetNullableDateYYYYMMDDType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetNullableDateYYYYMMDDType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetNullableDateYYYYMMDDType()
                        endusing
                    end
                    else
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetDateYYYYMMDDType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetDateYYYYMMDDType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetDateYYYYMMDDType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetDateYYYYMMDDType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetDateYYYYMMDDType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetDateYYYYMMDDType()
                        endusing
                    end
                end
                (RpsFieldSubclass.DateYYMMDD),
                begin
                    if (CoercedType == RpsFieldCoercedType.CtNullDateTime) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetNullableDateYYMMDDType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetNullableDateYYMMDDType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetNullableDateYYMMDDType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetNullableDateYYMMDDType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetNullableDateYYMMDDType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetNullableDateYYMMDDType()
                        endusing
                    end
                    else
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetDateYYMMDDType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetDateYYMMDDType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetDateYYMMDDType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetDateYYMMDDType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetDateYYMMDDType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetDateYYMMDDType()
                        endusing
                    end
                end
                (RpsFieldSubclass.DateYYYYJJJ),
                begin
                    if (CoercedType == RpsFieldCoercedType.CtNullDateTime) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetNullableDateYYYYJJJType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetNullableDateYYYYJJJType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetNullableDateYYYYJJJType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetNullableDateYYYYJJJType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetNullableDateYYYYJJJType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetNullableDateYYYYJJJType()
                        endusing
                    end
                    else
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetDateYYYYJJJType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetDateYYYYJJJType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetDateYYYYJJJType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetDateYYYYJJJType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetDateYYYYJJJType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetDateYYYYJJJType()
                        endusing
                    end
                end
                (RpsFieldSubclass.DateYYJJJ),
                begin
                    if (CoercedType == RpsFieldCoercedType.CtNullDateTime) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetNullableDateYYJJJType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetNullableDateYYJJJType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetNullableDateYYJJJType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetNullableDateYYJJJType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetNullableDateYYJJJType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetNullableDateYYJJJType()
                        endusing
                    end
                    else
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetDateYYJJJType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetDateYYJJJType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetDateYYJJJType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetDateYYJJJType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetDateYYJJJType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetDateYYJJJType()
                        endusing
                    end
                end
                (RpsFieldSubclass.DateYYYYPP),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetDateYYYYPPType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetDateYYYYPPType()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetDateYYYYPPType()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetDateYYYYPPType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetDateYYYYPPType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetDateYYYYPPType()
                    endusing
                end
                (RpsFieldSubclass.DateYYPP),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetDateYYPPType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetDateYYPPType()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetDateYYPPType()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetDateYYPPType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetDateYYPPType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetDateYYPPType()
                    endusing
                end
                (RpsFieldSubclass.TimeHHMMSS),
                begin
                    if (CoercedType == RpsFieldCoercedType.CtNullDateTime) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetNullableTimeHHMMSSType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetNullableTimeHHMMSSType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetNullableTimeHHMMSSType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetNullableTimeHHMMSSType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetNullableTimeHHMMSSType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetNullableTimeHHMMSSType()
                        endusing
                    end
                    else
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetTimeHHMMSSType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetTimeHHMMSSType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetTimeHHMMSSType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetTimeHHMMSSType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetTimeHHMMSSType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetTimeHHMMSSType()
                        endusing
                    end
                end
                (RpsFieldSubclass.TimeHHMM),
                begin
                    if (CoercedType == RpsFieldCoercedType.CtNullDateTime) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetNullableTimeHHMMType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetNullableTimeHHMMType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetNullableTimeHHMMType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetNullableTimeHHMMType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetNullableTimeHHMMType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetNullableTimeHHMMType()
                        endusing
                    end
                    else
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetTimeHHMMType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetTimeHHMMType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetTimeHHMMType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetTimeHHMMType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetTimeHHMMType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetTimeHHMMType()
                        endusing
                    end
                end
                (),
                begin
                    if (Precision) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetImpliedDecimalType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetImpliedDecimalType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetImpliedDecimalType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetImpliedDecimalType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetImpliedDecimalType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetImpliedDecimalType()
                        endusing
                    end
                    else
                    begin
                        if (Size<=9) then
                        begin
                            using ToType select
                            (MappedType.CSharp),
                                mreturn mMappings.CsMappings.GetSmallDecimalType()
                            (MappedType.VB),
                                mreturn mMappings.VbMappings.GetSmallDecimalType()
                            (MappedType.SQL),
                                mreturn mMappings.SqlMappings.GetSmallDecimalType()
                            (MappedType.ObjectiveC),
                                mreturn mMappings.OcMappings.GetSmallDecimalType()
                            (MappedType.TypeScript),
                                mreturn mMappings.TsMappings.GetSmallDecimalType()
                            (MappedType.SynergyDotNet),
                                mreturn mMappings.SnMappings.GetSmallDecimalType()
                            endusing
                        end
                        else if (Size <= 18) then
                        begin
                            using ToType select
                            (MappedType.CSharp),
                                mreturn mMappings.CsMappings.GetLargeDecimalType()
                            (MappedType.VB),
                                mreturn mMappings.VbMappings.GetLargeDecimalType()
                            (MappedType.SQL),
                                mreturn mMappings.SqlMappings.GetLargeDecimalType()
                            (MappedType.ObjectiveC),
                                mreturn mMappings.OcMappings.GetLargeDecimalType()
                            (MappedType.TypeScript),
                                mreturn mMappings.TsMappings.GetLargeDecimalType()
                            (MappedType.SynergyDotNet),
                                mreturn mMappings.SnMappings.GetLargeDecimalType()
                            endusing
                        end
                        else
                        begin
                            using ToType select
                            (MappedType.CSharp),
                                mreturn mMappings.CsMappings.GetVeryLargeDecimalType()
                            (MappedType.VB),
                                mreturn mMappings.VbMappings.GetVeryLargeDecimalType()
                            (MappedType.SQL),
                                mreturn mMappings.SqlMappings.GetVeryLargeDecimalType()
                            (MappedType.ObjectiveC),
                                mreturn mMappings.OcMappings.GetVeryLargeDecimalType()
                            (MappedType.TypeScript),
                                mreturn mMappings.TsMappings.GetVeryLargeDecimalType()
                            (MappedType.SynergyDotNet),
                                mreturn mMappings.SnMappings.GetVeryLargeDecimalType()
                            endusing
                        end
                    end
                end
                endusing
            end
            (RpsFieldDataType.Integer),
            begin
                using Size select
                (1),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetInteger1Type()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetInteger1Type()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetInteger1Type()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetInteger1Type()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetInteger1Type()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetInteger1Type()
                    endusing
                end
                (2),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetInteger2Type()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetInteger2Type()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetInteger2Type()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetInteger2Type()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetInteger2Type()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetInteger2Type()
                    endusing
                end
                (4),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetInteger4Type()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetInteger4Type()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetInteger4Type()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetInteger4Type()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetInteger4Type()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetInteger4Type()
                    endusing
                end
                (8),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetInteger8Type()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetInteger8Type()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetInteger8Type()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetInteger8Type()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetInteger8Type()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetInteger8Type()
                    endusing
                end
                endusing
            end
            (RpsFieldDatatype.Boolean),
            begin
                using ToType select
                (MappedType.CSharp),
                    mreturn mMappings.CsMappings.GetBooleanType()
                (MappedType.VB),
                    mreturn mMappings.VbMappings.GetBooleanType()
                (MappedType.SQL),
                    mreturn mMappings.SqlMappings.GetBooleanType()
                (MappedType.ObjectiveC),
                    mreturn mMappings.OcMappings.GetBooleanType()
                (MappedType.TypeScript),
                    mreturn mMappings.TsMappings.GetBooleanType()
                (MappedType.SynergyDotNet),
                    mreturn mMappings.SnMappings.GetBooleanType()
                endusing
            end
            (RpsFieldDataType.Enum),    ;Can't currently happen because of %CheckStructure
            begin
                using ToType select
                (MappedType.CSharp),
                    mreturn mMappings.CsMappings.GetEnumType()
                (MappedType.VB),
                    mreturn mMappings.VbMappings.GetEnumType()
                (MappedType.SQL),
                    mreturn mMappings.SqlMappings.GetEnumType()
                (MappedType.ObjectiveC),
                    mreturn mMappings.OcMappings.GetEnumType()
                (MappedType.TypeScript),
                    mreturn mMappings.TsMappings.GetEnumType()
                (MappedType.SynergyDotNet),
                    mreturn mMappings.SnMappings.GetEnumType()
                endusing
            end
            (RpsFieldDataType.Binary),  ;Can't currently happen because of %CheckStructure
            begin
                using ToType select
                (MappedType.CSharp),
                    mreturn mMappings.CsMappings.GetBinaryType()
                (MappedType.VB),
                    mreturn mMappings.VbMappings.GetBinaryType()
                (MappedType.SQL),
                    mreturn mMappings.SqlMappings.GetBinaryType()
                (MappedType.ObjectiveC),
                    mreturn mMappings.OcMappings.GetBinaryType()
                (MappedType.TypeScript),
                    mreturn mMappings.TsMappings.GetBinaryType()
                (MappedType.SynergyDotNet),
                    mreturn mMappings.SnMappings.GetBinaryType()
                endusing
            end
            (RpsFieldDataType.Structfield), ;Can't currently happen because of %CheckStructure
            begin
                using ToType select
                (MappedType.CSharp),
                    mreturn mMappings.CsMappings.GetStructFieldType()
                (MappedType.VB),
                    mreturn mMappings.VbMappings.GetStructFieldType()
                (MappedType.SQL),
                    mreturn mMappings.SqlMappings.GetStructFieldType()
                (MappedType.ObjectiveC),
                    mreturn mMappings.OcMappings.GetStructFieldType()
                (MappedType.TypeScript),
                    mreturn mMappings.TsMappings.GetStructFieldType()
                (MappedType.SynergyDotNet),
                    mreturn mMappings.SnMappings.GetStructFieldType()
                endusing
            end
            (RpsFieldDataType.AutoSequence),
            begin
                using ToType select
                (MappedType.CSharp),
                    mreturn mMappings.CsMappings.GetAutoSequenceType()
                (MappedType.VB),
                    mreturn mMappings.VbMappings.GetAutoSequenceType()
                (MappedType.SQL),
                    mreturn mMappings.SqlMappings.GetAutoSequenceType()
                (MappedType.ObjectiveC),
                    mreturn mMappings.OcMappings.GetAutoSequenceType()
                (MappedType.TypeScript),
                    mreturn mMappings.TsMappings.GetAutoSequenceType()
                (MappedType.SynergyDotNet),
                    mreturn mMappings.SnMappings.GetAutoSequenceType()
                endusing
            end
            (RpsFieldDataType.AutoTime),
            begin
                using ToType select
                (MappedType.CSharp),
                    mreturn mMappings.CsMappings.GetAutoTimeType()
                (MappedType.VB),
                    mreturn mMappings.VbMappings.GetAutoTimeType()
                (MappedType.SQL),
                    mreturn mMappings.SqlMappings.GetAutoTimeType()
                (MappedType.ObjectiveC),
                    mreturn mMappings.OcMappings.GetAutoTimeType()
                (MappedType.TypeScript),
                    mreturn mMappings.TsMappings.GetAutoTimeType()
                (MappedType.SynergyDotNet),
                    mreturn mMappings.SnMappings.GetAutoTimeType()
                endusing
            end
            endusing

            ;If the field has an explicit coercion then use it
            if (CoercedType!=RpsFieldCoercedType.CtNone)
            begin
                using CoercedType select
                (RpsFieldCoercedType.CtByte),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "byte"
                    (MappedType.VB),
                        mreturn "Byte"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "short int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "byte"
                    endusing
                end
                (RpsFieldCoercedType.CtShort),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "short"
                    (MappedType.VB),
                        mreturn "Short"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "short int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "short"
                    endusing
                end
                (RpsFieldCoercedType.CtInt),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "int"
                    (MappedType.VB),
                        mreturn "Integer"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "int"
                    endusing
                end
                (RpsFieldCoercedType.CtLong),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "long"
                    (MappedType.VB),
                        mreturn "Long"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "long int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "long"
                    endusing
                end
                (RpsFieldCoercedType.CtSbyte),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "sbyte"
                    (MappedType.VB),
                        mreturn "System.SByte"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "unsigned short int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "System.SByte"
                    endusing
                end
                (RpsFieldCoercedType.CtUshort),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "ushort"
                    (MappedType.VB),
                        mreturn "System.UInt16"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "unsigned short int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "System.UInt16"
                    endusing
                end
                (RpsFieldCoercedType.CtUint),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "uint"
                    (MappedType.VB),
                        mreturn "System.UInt32"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "unsigned int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "System.UInt32"
                    endusing
                end
                (RpsFieldCoercedType.CtUlong),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "ulong"
                    (MappedType.VB),
                        mreturn "System.UInt64"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "unsigned long int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "System.UInt64"
                    endusing
                end
                (RpsFieldCoercedType.CtBoolean),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "bool"
                    (MappedType.VB),
                        mreturn "Boolean"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "BOOL"
                    (MappedType.TypeScript),
                        mreturn "boolean"
                    (MappedType.SynergyDotNet),
                        mreturn "boolean"
                    endusing
                end
                (RpsFieldCoercedType.CtDouble),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "double"
                    (MappedType.VB),
                        mreturn "System.Double"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "double"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "double"
                    endusing
                end
                (RpsFieldCoercedType.CtFloat),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "float"
                    (MappedType.VB),
                        mreturn "System.Single"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "float"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "float"
                    endusing
                end
                (RpsFieldCoercedType.CtNullDateTime),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "Nullable<System.DateTime>"
                    (MappedType.VB),
                        mreturn "Nullable(Of System.DateTime)"
                    (MappedType.SQL),
                        mreturn ""
                    (MappedType.ObjectiveC),
                        mreturn "NSDate"
                    (MappedType.TypeScript),
                        mreturn "Date"
                    (MappedType.SynergyDotNet),
                        mreturn "Nullable<System.DateTime>"
                    endusing
                end
                endusing
            end

            mreturn ""

        endmethod

        ;;---------------------------------------------------------------------
        ;; These properties are present because of my specific requirements for
        ;; using this class in CodeGen. In most other scenarios these properties
        ;; should be removed.

        {Category("CodeGen Extensions")}
        {Description("")}
        {ReadOnly(true)}
        ;;; <summary>
        ;;; The base name of the field.
        ;;; Array dimensions are not included in the base name.
        ;;; </summary>
        public readwrite property BaseName, String, String.Empty

        ;;; <summary>
        ;;; The original name of the field, before any renaming by CodeGen.
        ;;; </summary>
        public readwrite property OriginalName, String, String.Empty
        
        ;;; <summary>
        ;;; The original name of the field, before any renaming by CodeGen.
        ;;; This name may include array dimensions.
        ;;; </summary>
        public readwrite property OriginalNameModified, String, String.Empty
        
        ;;; <summary>
        ;;; Synergy data type code
        ;;; </summary>
        public readwrite property TypeCode, string, String.Empty

        ;;; <summary>
        ;;; A descriptive name of the data type (ALPHA, DECIMAL, INTEGER, etc.)
        ;;; </summary>
        public readwrite property TypeName, string, String.Empty

        ;;; <summary>
        ;;; C# data type
        ;;; </summary>
        public readwrite property CsType, string, String.Empty

        ;;; <summary>
        ;;; C# numeric conversion function
        ;;; </summary>
        public readwrite property CsNumericConvert, string, String.Empty

        ;;; <summary>
        ;;; VB data type
        ;;; </summary>
        public readwrite property VbType, string, String.Empty

        ;;; <summary>
        ;;; Synergy .NET data type
        ;;; </summary>
        public readwrite property SnType, string, String.Empty

        ;;; <summary>
        ;;; C# default value (based on data type)
        ;;; </summary>
        public readwrite property CsDefault, string, String.Empty

        ;;; <summary>
        ;;; VB default value (based on data type) 
        ;;; </summary>
        public readwrite property VbDefault, string, String.Empty

        ;;; <summary>
        ;;; Synergy .NET default value (based on data type) 
        ;;; </summary>
        public readwrite property SnDefault, string, String.Empty

        ;;; <summary>
        ;;; SQL data type
        ;;; </summary>
        public readwrite property SqlType, string, String.Empty

        ;;; <summary>
        ;;; TypeScript data type
        ;;; </summary>
        public readwrite property TsType, string, String.Empty

        ;;; <summary>
        ;;; TypeScript default value
        ;;; </summary>
        public readwrite property TsDefault, string, String.Empty

        ;;; <summary>
        ;;; Mapped field name
        ;;; </summary>
        public readwrite property MappedField, string, String.Empty

        ;;; <summary>
        ;;; Mapping conversion function
        ;;; </summary>
        public readwrite property MappingFunction, string, String.Empty

        ;;; <summary>
        ;;; Mapping unconversion function
        ;;; </summary>
        public readwrite property UnmappingFunction, string, String.Empty

        ;;; <summary>
        ;;; Auto incrmenting numeric field
        ;;; </summary>
        public readwrite property AutoIncrement, boolean, false

        ;;; <summary>
        ;;; Objective-C data type
        ;;; </summary>
        public readwrite property OcType, string, String.Empty

        ;;; <summary>
        ;;; Objective-C default value type
        ;;; </summary>
        public readwrite property OcDefault, string, String.Empty

        ;;; <summary>
        ;;; Objective-C data type is an object
        ;;; </summary>
        public readwrite property OcObject, boolean, false

        ;;; <summary>
        ;;; (CodeGen Specific)
        ;;; A name for the field which is compatible with xfODBC column names.
        ;;; </summary>
        public readwrite property OdbcName, string, String.Empty

        ;;; <summary>
        ;;; (CodeGen Specific)
        ;;; A name for the field which is compatible with SQL databases,
        ;;; and other environments where path names and array dimensions
        ;;; are not allowed.
        ;;; </summary>
        public readwrite property SqlName, string, String.Empty

    endclass

endnamespace
