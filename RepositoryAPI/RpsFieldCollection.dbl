;;*****************************************************************************
;;
;; Title:       RpsFieldCollection.dbl
;;
;; Type:        Class
;;
;; Description: Represents a collection of fields for a Repository structure
;;
;; Date:        19th October 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import System.Collections.Generic

namespace CodeGen.RepositoryAPI

    public enum RpsFieldCollectionMode
        Structure
        Group
    endenum

    public class RpsFieldCollection extends List<RpsField>

        protected mRepository, @Repository

        ;;Stack of structure names used with nested implicit groups
        private previousStructures, @Stack<string>, new Stack<string>()

        ;;Constructor (don't load any fields)
        public method RpsFieldCollection
            required in aRepository, @Repository
        proc
            mRepository = aRepository
        endmethod

        ;;Constructor (load fields for a structure or group)
        public method RpsFieldCollection
            required in aRepository, @Repository
            required in LoadMode, RpsFieldCollectionMode
            required in StructureOrGroup, string
            default  in UseAlternateName, Boolean, false
            record
                str, String
            endrecord
        proc
            ;TODO: Need to not re-process all the time!!!

            str = StructureOrGroup.Trim()

            mRepository = aRepository
            mRepository.CheckIsOpen()

            using LoadMode select
            (RpsFieldCollectionMode.Structure),
            begin
                ;;Preserve the name of the current (parent) structure
                previousStructures.Push(%atrimtostring(mRepository.RpsControl.sname))

                ;;Load the structure that defines the group
                LoadStructureFields(str,UseAlternateName)
                            
                ;;Reset to the parent structure
                if (previousStructures.Count > 0)
                begin
                    data ms_info, s_info
                    str = previousStructures.Pop()
                    dd_struct(mRepository.RpsControl,DDS_INFO,str,ms_info)
                    if (mRepository.RpsControl.error)
                        throw new RpsStructureException("Failed to reset context to original structure  " + str)
                end
            end
            (RpsFieldCollectionMode.Group),
                LoadGroupFields(str,UseAlternateName)
            endusing

        endmethod

        ;;Load structure fields
        private method LoadStructureFields, void
            required in StructureName, string
            default  in UseAlternateName, Boolean, false
            record local_data
                MemHandle, int
                ix, int
            endrecord
            record
                str, string
            endrecord
        proc
            init local_data
            str = %atrim(StructureName)
            try
            begin
                data ms_info, s_info

                ;;Set the current structure and get structure information
                dd_struct(mRepository.RpsControl,DDS_INFO,str,ms_info)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get information for repository structure "+str)
                ;;Do we have any fields to load?
                if (ms_info.si_childct)
                begin
                    ;;Size the field names array and get field names
                    MemHandle = %mem_proc(DM_ALLOC,^size(strIdentifier)*ms_info.si_childct)
                    dd_field(mRepository.RpsControl,DDF_SLIST,ms_info.si_childct,^m(strIdentifier,MemHandle))
                    if (mRepository.RpsControl.error)
                        throw new RpsFieldException("Failed to get field names for repository structure "+str)
                    ;;Add fields to the collection
                    for ix from 1 thru ms_info.si_childct
                        this.Add(new RpsField(mRepository,StructureName,^m(strIdentifier[ix],MemHandle),UseAlternateName))
                end
            end
            finally
            begin
                ;;Free field names array
                if (MemHandle)
                    MemHandle = %mem_proc(DM_FREE,MemHandle)
            end
            endtry
        endmethod

        ;;Load group fields
        private method LoadGroupFields, void
            required in GroupName, String
            default  in UseAlternateName, Boolean, false
            record local_data
                MemHandle   ,int
                ix          ,int
            endrecord
        proc
            init local_data
            try
            begin
                data mf_info, f_info

                ;;Get field information for group field
                dd_field(mRepository.RpsControl,DDF_INFO,GroupName,^a(mf_info))
                if (mRepository.RpsControl.error)
                    throw new RpsGroupException("Failed to get information for explicit group field "+GroupName)

                ;;Make sure this really is an explicit group
                if (!mf_info.fi_group||mf_info.fi_struct)
                    throw new RpsGroupException("Repository field "+GroupName+" is not an explicit group!")

                ;;Do we have any fields to load?
                if (mf_info.fi_mbrct)
                begin
                    ;;Set context to the requested group field
                    dd_field(mRepository.RpsControl,DDF_GROUP,GroupName)
                    if (mRepository.RpsControl.error)
                        throw new RpsGroupException("Failed to set field context to group "+GroupName)

                    ;;Size the field names array and get field names
                    MemHandle = %mem_proc(DM_ALLOC,^size(strIdentifier)*mf_info.fi_mbrct)
                    dd_field(mRepository.RpsControl,DDF_SLIST,mf_info.fi_mbrct,^m(strIdentifier,MemHandle))
                    if (mRepository.RpsControl.error)
                        throw new RpsGroupException("Failed to get field names for group "+GroupName)

                    ;;Add fields to the collection
                    for ix from 1 thru mf_info.fi_mbrct
                        this.Add(new RpsField(mRepository,^m(strIdentifier[ix],MemHandle),UseAlternateName))

                    ;;Reset field context
                    dd_field(mRepository.RpsControl,DDF_ENDGROUP)
                    if (mRepository.RpsControl.error)
                        throw new RpsGroupException("Failed to reset field context from group "+GroupName)
                end
            end
            finally
            begin
                ;;Free field names array
                if (MemHandle)
                    MemHandle = %mem_proc(DM_FREE,MemHandle)
            end
            endtry
        endmethod

        ;;---------------------------------------------------------------------
        ;;Public methods and properties

        ;;Remove overlay fields from the collection
        public method RemoveOverlays, void
        proc
            data index, int, 0
            repeat
            begin
                if (index<=(this.Count-1)) then
                begin
                    if (this[index].OverlaysField) then
                        this.RemoveAt(index)
                    else
                        index+=1
                end
                else
                    exitloop
            end
        endmethod

        ;;Remove fields marked as "Excluded by Language" from the collection
        public method RemoveExcludedByLanguage, void
        proc
            data index, int, 0
            repeat
            begin
                if (index<=(this.Count-1)) then
                begin
                    if (this[index].ExcludedByLanguage) then
                        this.RemoveAt(index)
                    else
                        index+=1
                end
                else
                    exitloop
            end
        endmethod

        ;;Remove fields marked as "Excluded by Toolkit" from the collection
        public method RemoveExcludedByToolkit, void
        proc
            data index, int, 0
            repeat
            begin
                if (index<=(this.Count-1)) then
                begin
                    if (this[index].ExcludedByToolkit) then
                        this.RemoveAt(index)
                    else
                        index+=1
                end
                else
                    exitloop
            end
        endmethod

        ;;Remove fields marked as "Excluded by ReportWriter" from the collection
        public method RemoveExcludedByReportWriter, void
        proc
            data index, int, 0
            repeat
            begin
                if (index<=(this.Count-1)) then
                begin
                    if (this[index].ExcludedByReportWriter) then
                        this.RemoveAt(index)
                    else
                        index+=1
                end
                else
                    exitloop
            end
        endmethod

        ;;Remove fields marked as "Excluded by Web" from the collection
        public method RemoveExcludedByWeb, void
        proc
            data index, int, 0
            repeat
            begin
                if (index<=(this.Count-1)) then
                begin
                    if (this[index].ExcludedByWeb) then
                        this.RemoveAt(index)
                    else
                        index+=1
                end
                else
                    exitloop
            end
        endmethod

    endclass

endnamespace
