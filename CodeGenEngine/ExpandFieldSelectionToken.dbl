;;*****************************************************************************
;;
;; Title:       ExpandFieldSelectionToken.dbl
;;
;; Type:        Function
;;
;; Description: Expands field selection loop tokens
;;
;; Date:        5th November 2009
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

    function ExpandFieldSelectionToken  ,boolean
        required in    Fld              ,@RpsField  ;;Current field
        required in    SelNbr           ,int        ;;Current selection number
		required in    TokenStart       ,int        ;;Start position of token in buffer
		required in    TokenEnd         ,int        ;;End position of token in buffer
		required in    OutputOff		,boolean	;;Is output currently suppressed?
		required inout buffer           ,a          ;;Buffer containing token to be replaced
        endparams

        stack record
            ReplacedToken   ,boolean
        endrecord

    proc

        ReplacedToken = false

        using buffer(TokenStart,TokenEnd) select

        ("<,>"),
        begin
            if (SelNbr<Fld.SelectionList.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<,>",",")
            else
                ReplacedToken = ReplaceToken(buffer,"<,>","")
        end

        ("<+>"),
        begin
            if (SelNbr<Fld.SelectionList.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<+>","+")
            else
                ReplacedToken = ReplaceToken(buffer,"<+>","")
        end

        ("<:>"),
        begin
            if (SelNbr<Fld.SelectionList.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<:>",":")
            else
                ReplacedToken = ReplaceToken(buffer,"<:>","")
        end

        ("<&&>"),
        begin
            if (SelNbr<Fld.SelectionList.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<&&>","&&")
            else
                ReplacedToken = ReplaceToken(buffer,"<&&>","")
        end

        ("<.AND.>"),
        begin
            if (SelNbr<Fld.SelectionList.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<.AND.>",".AND.")
            else
                ReplacedToken = ReplaceToken(buffer,"<.AND.>","")
        end

        ("<AND>"),
        begin
            if (SelNbr<Fld.SelectionList.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<AND>","AND")
            else
                ReplacedToken = ReplaceToken(buffer,"<AND>","")
        end

        ("<||>"),
        begin
            if (SelNbr<Fld.SelectionList.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<||>","||")
            else
                ReplacedToken = ReplaceToken(buffer,"<||>","")
        end

        ("<.OR.>"),
        begin
            if (SelNbr<Fld.SelectionList.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<.OR.>",".OR.")
            else
                ReplacedToken = ReplaceToken(buffer,"<.OR.>","")
        end

        ("<OR>"),
        begin
            if (SelNbr<Fld.SelectionList.Count-1) then
                ReplacedToken = ReplaceToken(buffer,"<OR>","OR")
            else
                ReplacedToken = ReplaceToken(buffer,"<OR>","")
        end

        ("<SELECTION_NUMBER>"),
            ReplacedToken = ReplaceToken(buffer,"<SELECTION_NUMBER>",string(SelNbr+1))

        ("<SELECTION_COUNT>"),
            ReplacedToken = ReplaceToken(buffer,"<SELECTION_COUNT>",string(Fld.SelectionList.Count))

        ("<SELECTION_TEXT>"),
            ReplacedToken = ReplaceToken(buffer,"<SELECTION_TEXT>",(a)Fld.SelectionList[SelNbr])

        ("<SELECTION_VALUE>"),
        begin
            data selText, a80
            data selValue, a80
            selText = (a)Fld.SelectionList[SelNbr]

            using Fld.DataType select
            (RpsFieldDataType.Alpha,RpsFieldDataType.User),
                selValue = selText(1:Fld.Size)
            (RpsFieldDataType.Decimal,RpsFieldDataType.Integer),
            begin
                if (Fld.Enumerated) then
                    selValue = string(Fld.EnUmeratedBaseValue + (Fld.EnumeratedStepValue * SelNbr))
                else
                    selValue = string(1 + (1*SelNbr))
            end
            endusing
            ReplacedToken = ReplaceToken(buffer,"<SELECTION_VALUE>",selValue)
        end
		
		("<COUNTER_"),
			ReplacedToken = ProcessCounters(buffer(TokenStart,TokenEnd),buffer,OutputOff)
		
		(),
		begin
			;;If we didn't match anything so far then lets see if we have any custom field selection loop token processors
			if (Env.CustomSelectionTokens.Count>0)
			begin
				;;We do have custom processors, look for a match
				data customToken, @CustomSelectionToken
				foreach customToken in Env.CustomSelectionTokens
				begin
					if (customToken.Token==buffer(TokenStart,TokenEnd))
					begin
						;;Found a match, expand the custom token
						ReplacedToken = customToken.Replace(Fld,SelNbr,TokenStart,TokenEnd,buffer)
						exitloop
					end
				end
			end
		end
		
        endusing

		if (ReplacedToken&&!buffer)
			buffer="~~~ REMOVE THIS RECORD ~~~"
		
		freturn ReplacedToken

    endfunction

endnamespace
