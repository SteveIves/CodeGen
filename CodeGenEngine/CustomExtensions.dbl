;;*****************************************************************************
;;
;; Title:       CustomExtensions.dbl
;;
;; Type:        Abstract classes
;;
;; Description: Abstract classes which can be extended in order to implement
;;              custom tokens and expressions.
;;
;; Date:        12th November 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

    ;;; <summary>
    ;;; Defines the requirements for a custom generic replacement token.
    ;;; </summary>
    public abstract class CustomToken

        public abstract property Token, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform token replacement.
        ;;; </summary>
        ;;; <param name="Str">Current structure (could be ^null)</param>
        ;;; <param name="TokenStart">Start positiom pf token in buffer</param>
        ;;; <param name="TokenEnd">End positopm pf token in buffer</param>
        ;;; <param name="buffer">Buffer containing token to be replaced</param>
        ;;; <param name="ErrStatus">Error status, return true to abort processing</param>
        ;;; <returns>Returns true if the token was successfully replaced, otherwise false.</returns>
        public abstract method Replace,	Boolean
            required in    Str,			@RpsStructure
            required in    TokenStart,	int
            required in    TokenEnd,	int
            required inout buffer,		a
            required inout ErrStatus,	boolean
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom field loop replacement token.
    ;;; </summary>
    public abstract class CustomFieldToken

        public abstract property Token, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform token replacement.
        ;;; </summary>
        ;;; <param name="Str">Structure being processed</param>
        ;;; <param name="Fld">Field being processed</param>
        ;;; <param name="FldNbr">Field number</param>
        ;;; <param name="LogicalFieldNumber">Logical field number (arrays expanded)</param>
        ;;; <param name="TokenStart">Start position of token in buffer</param>
        ;;; <param name="TokenEnd">End position of token in buffer</param>
        ;;; <param name="Loop1OutputOff">Is output suppressed because of an expression</param>
        ;;; <param name="buffer">Buffer containing the token to be expanded</param>
        ;;; <param name="ErrStatus">Error status (set to true to abort processing)</param>
        ;;; <returns>Returns true if the token was successfully replaced, otherwise false.</returns>
        public abstract method Replace,         Boolean
            required in    Str,                 @RpsStructure
            required in    Fld,                 @RpsField
            required in    FldNbr,              int
            required in    LogicalFieldNumber,  int
            required in    TokenStart,          int
            required in    TokenEnd,            int
            required in    Loop1OutputOff,      boolean
            required inout buffer,              a
            required inout ErrStatus,           boolean
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom field loop expression token.
    ;;; </summary>
    public abstract class CustomFieldExpression

        public abstract property Expression, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform expression evaluation.
        ;;; </summary>
        ;;; <param name="Str">Structure being processed</param>
        ;;; <param name="Fld">Field being processed</param>
        ;;; <param name="FldNbr">Field number</param>
        ;;; <returns>Returns the result of the evaluation of the custom expression</returns>
        public abstract method Evaluate,    Boolean
            required in    Str,             @RpsStructure
            required in    Fld,             @RpsField
            required in    FldNbr,          int
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom field selection loop replacement token.
    ;;; </summary>
    public abstract class CustomSelectionToken

        public abstract property Token, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform token replacement.
        ;;; </summary>
        ;;; <param name="Fld">Field being processed</param>
        ;;; <param name="SelNbr">Current selection number</param>
        ;;; <param name="TokenStart">Start position of token in buffer</param>
        ;;; <param name="TokenEnd">End position of token in buffer</param>
        ;;; <param name="buffer">Buffer containing token to be replaced</param>
        ;;; <returns>Returns true if the token was successfully replaced, otherwise false.</returns>
        public abstract method Replace, Boolean
            required in    Fld,         @RpsField
            required in    SelNbr,      int
            required in    TokenStart,  int
            required in    TokenEnd,    int
            required inout buffer,      a
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom field selection loop expression token.
    ;;; </summary>
    public abstract class CustomSelectionExpression

        public abstract property Expression, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform expression evaluation.
        ;;; </summary>
        ;;; <param name="Fld">Field being processed</param>
        ;;; <param name="SelNbr">Selection number</param>
        ;;; <returns>Returns the result of the evaluation of the custom expression</returns>
        public abstract method Evaluate,    Boolean
            required in Fld,                @RpsField
            required in SelNbr,             int
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom key loop replacement token.
    ;;; </summary>
    public abstract class CustomKeyToken

        public abstract property Token, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform token replacement.
        ;;; </summary>
        ;;; <param name="Str">Structure being processed</param>
        ;;; <param name="Key">Key being processed</param>
        ;;; <param name="KeyNbr">Key number</param>
        ;;; <param name="TokenStart">Start position of token in buffer</param>
        ;;; <param name="TokenEnd">End position of token in buffer</param>
        ;;; <param name="PrimaryKeyOnly"></param>
        ;;; <param name="buffer">Buffer containing token to be replaced</param>
        ;;; <returns>Returns true if the token was successfully replaced, otherwise false.</returns>
        public abstract method Replace,     Boolean
            required in Str,                @RpsStructure
            required in Key,                @RpsKey
            required in KeyNbr,             int
            required in TokenStart,         int
            required in TokenEnd,           int
            required in PrimaryKeyOnly,     boolean
            required inout buffer,          a
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom key loop expression token.
    ;;; </summary>
    public abstract class CustomKeyExpression

        public abstract property Expression, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform expression evaluation.
        ;;; </summary>
        ;;; <param name="Str">Structure being processed</param>
        ;;; <param name="Key">Key being processed</param>
        ;;; <param name="KeyNbr">Key number</param>
        ;;; <returns>Returns the result of the evaluation of the custom expression</returns>
        public abstract method Evaluate,    Boolean
            required in Str ,               @RpsStructure
            required in Key,                @RpsKey
            required in KeyNbr,             int
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom key segment loop replacement token.
    ;;; </summary>
    public abstract class CustomSegmentToken

        public abstract property Token, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform token replacement.
        ;;; </summary>
        ;;; <param name="Segment">Segment being processed</param>
        ;;; <param name="SegNbr">Segment number</param>
        ;;; <param name="Fld">Associated field</param>
        ;;; <param name="TokenStart">Start position of token in buffer</param>
        ;;; <param name="TokenEnd">End position of token in buffer</param>
        ;;; <param name="LastSegment"></param>
        ;;; <param name="buffer">Buffer containing token to be replaced</param>
        ;;; <returns>Returns true if the token was successfully replaced, otherwise false.</returns>
        public abstract method Replace,     Boolean
            required in    Segment,         @RpsKeySegment
            required in    SegNbr,          int
            required in    Fld,             @RpsField
            required in    TokenStart,      int
            required in    TokenEnd,        int
            required in    LastSegment,     int
            required inout buffer,          a
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom key segment loop expression token.
    ;;; </summary>
    public abstract class CustomSegmentExpression

        public abstract property Expression, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform expression evaluation.
        ;;; </summary>
        ;;; <param name="Segment">Key segment being processed</param>
        ;;; <param name="Fld">Associated field</param>
        ;;; <returns>Returns the result of the evaluation of the custom expression</returns>
        public abstract method Evaluate,    Boolean
            required in Segment,            @RpsKeySegment
            required in Fld,                @RpsField
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom enumeration loop replacement token.
    ;;; </summary>
    public abstract class CustomEnumToken

        public abstract property Token, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform token replacement.
        ;;; </summary>
        ;;; <param name="Enums">Collection of all enumerations</param>
        ;;; <param name="EnumNbr">Enumeration number being processed</param>
        ;;; <param name="TokenStart">Start position of token in buffer</param>
        ;;; <param name="TokenEnd">End position of token in buffer</param>
        ;;; <param name="buffer">Buffer containing token to be replaced</param>
        ;;; <returns>Returns true if the token was successfully replaced, otherwise false.</returns>
        public abstract method Replace,     Boolean
            required in    Enums,           @RpsEnumCollection
            required in    EnumNbr,         int
            required in    TokenStart,      int
            required in    TokenEnd,        int
            required inout buffer,          a
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom enumeration loop expression token.
    ;;; </summary>
    public abstract class CustomEnumExpression

        public abstract property Expression, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform expression evaluation.
        ;;; </summary>
        ;;; <param name="currentEnum">Enumeration being processed</param>
        ;;; <returns>Returns the result of the evaluation of the custom expression</returns>
        public abstract method Evaluate	,Boolean
            required in currentEnum, @RpsEnum
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom enumeration member loop replacement token.
    ;;; </summary>
    public abstract class CustomEnumMemberToken

        public abstract property Token, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform token replacement.
        ;;; </summary>
        ;;; <param name="Enums">Collection of all enumerations</param>
        ;;; <param name="EnumNbr">Enumeration number being processed</param>
        ;;; <param name="EnumMemberNbr">Member number being processed</param>
        ;;; <param name="TokenStart">Start position of token in buffer</param>
        ;;; <param name="TokenEnd">End position of token in buffer</param>
        ;;; <param name="buffer">Buffer containing token to be replaced</param>
        ;;; <returns>Returns true if the token was successfully replaced, otherwise false.</returns>
        public abstract method Replace,     Boolean
            required in    Enums,           @RpsEnumCollection
            required in    EnumNbr,         int
            required in    EnumMemberNbr,   int
            required in    TokenStart,      int
            required in    TokenEnd,        int
            required inout buffer,          a
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom enumeration member loop expression token.
    ;;; </summary>
    public abstract class CustomEnumMemberExpression

        public abstract property Expression, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform expression evaluation.
        ;;; </summary>
        ;;; <param name="enumMember">Enumeration member being processed</param>
        ;;; <returns>Returns the result of the evaluation of the custom expression</returns>
        public abstract method Evaluate	,Boolean
            required in enumMember, @RpsEnumMember
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom relation loop replacement token.
    ;;; </summary>
    public abstract class CustomRelationToken

        public abstract property Token, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform token replacement.
        ;;; </summary>
        ;;; <param name="Str">Structure being processed</param>
        ;;; <param name="Relation">Relation being processed</param>
        ;;; <param name="RelNbr">Relation number</param>
        ;;; <param name="TokenStart">Start position of token in buffer</param>
        ;;; <param name="TokenEnd">End position of token in buffer</param>
        ;;; <param name="buffer">Buffer containing token to be replaced</param>
        ;;; <returns>Returns true if the token was successfully replaced, otherwise false.</returns>
        public abstract method Replace,     Boolean
            required in    Str,             @RpsStructure
            required in    Relation,        @RpsRelation
            required in    RelNbr,          int
            required in    TokenStart,      int
            required in    TokenEnd,        int
            required inout buffer,          a
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom file loop replacement token.
    ;;; </summary>
    public abstract class CustomFileToken

        public abstract property Token, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform token replacement.
        ;;; </summary>
        ;;; <param name="Str">Structure being processed</param>
        ;;; <param name="File">File being processed</param>
        ;;; <param name="FldNbr">File number</param>
        ;;; <param name="TokenStart">Start position of token in buffer</param>
        ;;; <param name="TokenEnd">End position of token in buffer</param>
        ;;; <param name="Loop1OutputOff"></param>
        ;;; <param name="buffer">Buffer containing token to be replaced</param>
        ;;; <param name="ErrStatus">Error status (set to true to abort processing)</param>
        ;;; <returns>Returns true if the token was successfully replaced, otherwise false.</returns>
        public abstract method Replace,         Boolean
            required in    Str,                 @RpsStructure
            required in    File,                @RpsFile
            required in    FldNbr,              int
            required in    TokenStart,          int
            required in    TokenEnd,            int
            required in    Loop1OutputOff,      boolean
            required inout buffer,              a
            required inout ErrStatus,           boolean
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom file loop expression token.
    ;;; </summary>
    public abstract class CustomFileExpression

        public abstract property Expression, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform expression evaluation.
        ;;; </summary>
        ;;; <param name="Str">Structure being processed</param>
        ;;; <param name="File">File being processed</param>
        ;;; <param name="FileNbr">File number</param>
        ;;; <returns>Returns the result of the evaluation of the custom expression</returns>
        public abstract method Evaluate,    Boolean
            required in Str,                @RpsStructure
            required in File,               @RpsFile
            required in FileNbr,            int
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom tag loop replacement token.
    ;;; </summary>
    public abstract class CustomTagToken

        public abstract property Token, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform token replacement.
        ;;; </summary>
        ;;; <param name="Str">Structure being processed</param>
        ;;; <param name="Tag">Tag being processed</param>
        ;;; <param name="TagNbr">Tag number</param>
        ;;; <param name="TokenStart">Start position of token in buffer</param>
        ;;; <param name="TokenEnd">End position of token in buffer</param>
        ;;; <param name="Loop1OutputOff"></param>
        ;;; <param name="buffer">Buffer containing token to be replaced</param>
        ;;; <param name="ErrStatus">Error status (set to true to abort processing)</param>
        ;;; <returns>Returns true if the token was successfully replaced, otherwise false.</returns>
        public abstract method Replace,         Boolean
            required in    Str,                 @RpsStructure
            required in    Tag,                 @RpsTag
            required in    TagNbr,              int
            required in    TokenStart,          int
            required in    TokenEnd,            int
            required in    Loop1OutputOff,      boolean
            required inout buffer,              a
            required inout ErrStatus,           boolean
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom tag loop expression token.
    ;;; </summary>
    public abstract class CustomTagExpression

        public abstract property Expression, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform expression evaluation.
        ;;; </summary>
        ;;; <param name="Str">Structure being processed</param>
        ;;; <param name="Tag">Tag being processed</param>
        ;;; <param name="TagNbr">Tag number</param>
        ;;; <returns>Returns the result of the evaluation of the custom expression</returns>
        public abstract method Evaluate,    Boolean
            required in Str,                @RpsStructure
            required in Tag,                @RpsTag
            required in TagNbr,             int
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom button loop replacement token.
    ;;; </summary>
    public abstract class CustomButtonToken

        public abstract property Token, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform token replacement.
        ;;; </summary>
        ;;; <param name="BtnNbr">Current button number</param>
        ;;; <param name="TokenStart">Start position of token in buffer</param>
        ;;; <param name="TokenEnd">End position of token in buffer</param>
        ;;; <param name="buffer">Buffer containing token to be replaced</param>
        ;;; <param name="Str">Structure being processed (could be ^null)</param>
        ;;; <returns>Returns true if the token was successfully replaced, otherwise false.</returns>
        public abstract method Replace, Boolean
            required    in BtnNbr,      int
            required    in TokenStart,  int
            required    in TokenEnd,    int
            required inout buffer,      a
            required    in Str,         @RpsStructure
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Defines the requirements for a custom button loop expression token.
    ;;; </summary>
    public abstract class CustomButtonExpression

        public abstract property Expression, String
            method get
            proc
            endmethod
        endproperty

        ;;; <summary>
        ;;; The method that will be called to perform expression evaluation.
        ;;; </summary>
        ;;; <param name="Button">Button being processed</param>
        ;;; <returns>Returns the result of the evaluation of the custom expression</returns>
        public abstract method Evaluate	,Boolean
            required in Button, @WscButton
        proc

        endmethod

    endclass

endnamespace
