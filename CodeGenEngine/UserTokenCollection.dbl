;;*****************************************************************************
;;
;; Title:       UserTokenCollection.dbl
;;
;; Type:        Class
;;
;; Description: Represents a collection of user-defined tokens
;;
;; Date:        9th November 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System.Collections.Generic
import System.Collections.ObjectModel
import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

    public static sealed class UserTokenCollection

        ;;; <summary>
        ;;;	This method loads user defined tokens in a token file into the context.UserTokens collection.
        ;;; </summary>
        public static method LoadTokensFromFile, boolean
            required in context, @CodeGenContext
            endparams
        proc

            data errStatus, boolean, false
            data tmpch,     int

            context.CurrentTask.VerboseLog("Loading user defined tokens from " + context.CurrentTask.UserTokenFile,true,false)				

            try
            begin
                open(tmpch=0,i:s,context.CurrentTask.UserTokenFile)
            end
            catch (ex)
            begin
                errStatus = context.CurrentTask.ErrorLog("Failed to open user defined token file " + context.CurrentTask.UserTokenFile)
            end
            endtry

            if (!errStatus)
            begin
                data tmpa, a32768
                data tmps = String.Empty
                data recCount = 0
                repeat
                begin
                    begin
                        reads(tmpch,tmpa,eout)
                        exit
                eout,   if (!%rsize(tmpch))
                            exitloop
                    end

                    ;;We got some data
                    recCount += 1

                    ;;Ignore blank lines
                    if (!tmpa)
                        nextloop

                    ;;Get the data into a string
                    tmps = ((string)tmpa).trim()

                    ;;Ignore comment lines
                    if (tmps.StartsWith(";"))
                        nextloop

                    ;;Make sure the string starts with a token and ends with a matching closing token
                    data parts = tmps.Split(new string[#] {"<",">"}, StringSplitOptions.RemoveEmptyEntries)

                    data opener = parts[1]
                    data closer = parts[parts.Length]

                    if ((parts.Length < 3) || closer != String.Format("/{0}",opener))
                    begin
                        errStatus = context.CurrentTask.ErrorLog(String.Format("Record {0} in user token file {1} does not contain matching opening and closing tokens!", recCount, context.CurrentTask.UserTokenFile))
                        exitloop
                    end

                    data replacementValue = (string)((a)tmps - String.Format("<{0}>",opener) - String.Format("<{0}>",closer))

                    ;;Store details of this user token
                    context.UserTokens.Add(new UserToken(opener,replacementValue))
                end
            end

            if (tmpch && %chopen(tmpch))
                close tmpch

            mreturn errStatus

        endmethod

        ;;; <summary>
        ;;; This method adds user defined tokens passed in via a papameter to the tokens already present in context.UserTokens.
        ;;; If a named token already exists then its value is replaced.
        ;;; </summary>
        public static method AddTokens, void
            required in tokens, @ObservableCollection<UserToken>
            required in task, @CodeGenTask
            required in context, @CodeGenContext
            endparams
        proc
            data token, @UserToken
            foreach token in tokens
            begin
                ;;Make sure names are always upper case
                token.Name = token.Name.ToUpper()

                ;;Does the token already exist?
                data existingToken, @UserToken
                data existingTokenUpdated, Boolean, false
                foreach existingToken in context.UserTokens
                begin
                    if existingToken.Name.Equals(token.Name)
                    begin
                        ;;Yes, update it's value
                        existingToken.value = token.value
                        existingTokenUpdated = true
                        exitloop
                    end
                end
                ;;No, add the new token
                if (!existingTokenUpdated)
                    context.UserTokens.Add(token)
            end

        endmethod

    endclass

endnamespace
