;;*****************************************************************************
;;
;; Title:       CodeGenTask.dbl
;;
;; Type:        Partial Class (see also CodeCenTaskStatus.dbl)
;;
;; Description: Represents the part of a task that a consuming application
;;				would interact with in order to specify and process tasks.
;;
;; Date:        31st August 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.IO
import System.Collections.ObjectModel
import System.ComponentModel
import CodeGen.RepositoryAPI
import Newtonsoft.Json

namespace CodeGen.Engine

    ;;; <summary>
    ;;; Represents a single code generation task.
    ;;; </summary>
    public partial class CodeGenTask

.region "Constructors"

        public method CodeGenTask
        proc
        endmethod

        ;;; <summary>
        ;;; Constructs a CodeGenTask for a specified template and structure combination.
        ;;; </summary>
        ;;; <param name="aTemplate">Template file to generate from.</param>
        ;;; <param name="aStructure">Repository structure to provide metadata.</param>
        public method CodeGenTask
            required in aTemplate, String
            required in aStructure, String
        proc
            this.Templates.Add(aTemplate)
            this.Structures.Add(aStructure)
        endmethod

.endregion

.region "Task configuration properties - serialized"

        ;;; <summary>
        ;;; Structure aliases. The number of aliases should be less than or equal to the number of structures being processed.
        ;;; Adding alias names to this collection is equivalent to using the -a command line option.
        ;;; Note that structure aliasing may not be used in conjunction with using alternate structure names (-as).
        ;;; </summary>
        public readwrite  property Aliases, @ObservableCollection<String>, new ObservableCollection<String>()

        ;;; <summary>
        ;;; Allow template files to specify an output sub-folder. If this property
        ;;; is false then any <CODEGEN_FOLDER> tokens will be ignored.
        ;;; Setting this property to true is the equivalent to using the -tf command line option.
        ;;; </summary>
        public readwrite property AllowTemplateFolder, Boolean

        ;;; <summary>
        ;;; Always use the default buttons defined in DefaultButtons.xml.
        ;;; Setting this property to true is equivalent to using the -b a command line option.
        ;;; </summary>
        public readwrite property AlwaysLoadDefaultButtons, Boolean

        ;;; <summary>
        ;;; The height of a character (or row) in pixels. The default height is 25 pixels.
        ;;; Setting this property is equivalent to using the -ch command line option.
        ;;; </summary>
        public readwrite property CharacterHeight, int, DefaultValues.DefaultCharacterHeight

        ;;; <summary>
        ;;; The width of a character in pixels. The default width is 12 pixels.
        ;;; Setting this property is equivalent to using the -cw command line option.
        ;;; </summary>
        public readwrite property CharacterWidth, int, DefaultValues.DefaultCharacterWidth

        ;;; <summary>
        ;;; Description of the task.
        ;;; </summary>
        public readwrite  property Description, String, String.Empty

        ;;; <summary>
        ;;; When using a template defined folder name, that name is usually appended to the end of
        ;;; any namespace that is used. This option prevents that from hapenning.
        ;;; Setting this property to true is the equivalent to using the -nf command line option.
        ;;; </summary>
        public readwrite property DontAppendFolderToNamespace, Boolean

        ;;; <summary>
        ;;; Don't expand explicit groups to individual fields.
        ;;; Setting this property to true is equivalent to using the -g e command line option.
        ;;; </summary>
        public readwrite property ExplicitGroupNoExpand, Boolean

        private mFieldPrefix, String, String.Empty
        ;;; <summary>
        ;;; Optional prefix to apply to field names when the <FIELD_NAME> token is used.
        ;;; Setting this property is equivalent to using the -prefix command line option.
        ;;; </summary>
        public property FieldPrefix, String
            method get
            proc
                mreturn mFieldPrefix
            endmethod
            method set
            proc
                mFieldPrefix = value?.Trim()
            endmethod
        endproperty

        ;;; <summary>
        ;;; File Overrides. This option allows you to specify which repository file definition is
        ;;; used for each structure that you are processing. This option is useful if the structure
        ;;; that you are using is assigned to multiple files, because CodeGen will by default will
        ;;; always select the first assigned file. The number of file overrides must be less than
        ;;; or equal to the number of structures being processed.
        ;;; Adding repository file definition names to this collection is equivalent to using the -fo command line option.
        ;;; </summary>
        public readwrite  property FileOverrides, @ObservableCollection<String>, new ObservableCollection<String>()

        ;;; <summary>
        ;;; Don't prefix group fields with group name.
        ;;; Setting this property to true is equivalent to using the -g f command line option.
        ;;; </summary>
        public readwrite property GroupFieldNoGroupPrefix, Boolean

        ;;; <summary>
        ;;; Don't use repository group field prefix.
        ;;; Setting this property to true is equivalent to using the -g r command line option.
        ;;; </summary>
        public readwrite property GroupFieldNoRpsPrefix, Boolean

        ;;; <summary>
        ;;; Don't expand implicit groups to individual fields.
        ;;; Setting this property to true is equivalent to using the -g i command line option.
        ;;; </summary>
        public readwrite property ImplicitGroupNoExpand, Boolean

        ;;; <summary>
        ;;; Exclude fields which are 'Excluded by ReportWriter'.
        ;;; Setting this property to true is equivalent to using the -f r command line option.
        ;;; </summary>
        public readwrite property HonorExcludeReportWriter, Boolean

        ;;; <summary>
        ;;; Exclude fields which are 'Excluded by Toolkit'.
        ;;; Setting this property to true is equivalent to using the -f t command line option.
        ;;; </summary>
        public readwrite property HonorExcludeToolkit, Boolean

        ;;; <summary>
        ;;; Exclude fields which are 'Excluded by Web'.
        ;;; Setting this property to true is equivalent to using the -f w command line option.
        ;;; </summary>
        public readwrite property HonorExcludeWeb, Boolean

        ;;; <summary>
        ;;; Include overlay fields.
        ;;; Setting this property to true is equivalent to using the -f o command line option.
        ;;; </summary>
        public readwrite property IncludeOverlayFields, Boolean

        ;;; <summary>
        ;;; Include fields which are 'Excluded by Language'.
        ;;; Setting this property to true is equivalent to using the -f l command line option.
        ;;; </summary>
        public readwrite property IgnoreExcludeLanguage, Boolean

        ;;; <summary>
        ;;; When processing input from a UI Toolkit Window script file this option prevents script
        ;;; file input window field attributes from being used to override repository field attributes.
        ;;; This allows you to generate code based on only the fields listed in an input window, but
        ;;; using only the repository field definitions.
        ;;; Setting this property to true is equivalent to using the -wn command line option.
        ;;; </summary>
        public readwrite property IgnoreScriptFieldAttributes, Boolean

        ;;; <summary>
        ;;; The name of the method catalog interface to process.
        ;;; </summary>
        public readwrite property Interface, String, String.Empty

        ;;; <summary>
        ;;; Multiple Structures. Specifies that the structures specified via the Structures
        ;;; property should all be available to templates being processed at the same time.
        ;;; Setting this property to true is equivalent to using the -ms command line option.
        ;;; </summary>
        public readwrite property MultipleStructures, Boolean

        ;;; <summary>
        ;;; If multiple files with the same output file name are generared by the task
        ;;; the defailt bahavior is to not write the second and subsequent files to disk,
        ;;; so the first file generated will remain. This option allows you to specify
        ;;; that all generations of the file are written to disk, meaning the last
        ;;; generated file will remain.
        ;;; Setting this property to true is equivalent to using the -mw command line option.
        ;;; </summary>
        public readwrite property MultiWriteFiles, Boolean

        ;;; <summary>
        ;;; Namespace to be used if the <NAMESPACE> token is used. If not specified
        ;;; then the namespace defined by the environment variable SYNDEFNS is used.
        ;;; Setting this property is equivalent to using the -n command line option.
        ;;; </summary>
        public readwrite property Namespace, String, String.Empty

        ;;; <summary>
        ;;; Never load any buttons (DefaultButtons.xml or window script).
        ;;; Setting this property to true is equivalent to using the -b n command line option.
        ;;; </summary>
        public readwrite property NeverLoadAnyButtons, Boolean

        ;;; <summary>
        ;;; Never use the default buttons defined in DefaultButtons.xml.
        ;;; Setting this property to true is equivalent to using the -b d command line option.
        ;;; </summary>
        public readwrite property NeverLoadDefaultButtons, Boolean

        ;;; <summary>
        ;;; Suppresses the features of the <STRUCTURE_PLURAL> and <STRUCTURE_NOPLURAL> tokens,
        ;;; making them behave the same as <STRUCTURE_NAME>.
        ;;; </summary>
        public readwrite property NoCustomPluralization, Boolean

        private mOutputFolder, String, String.Empty
        ;;; <summary>
        ;;; Output folder. If not specified then the folder defined by the environment variable
        ;;; CODEGEN_OUTDIR is used. If that is not defined then the current folder is used.
        ;;; Setting this property is equivalent to using the -o command line option.
        ;;; </summary>
        public property OutputFolder, String
            method get
            proc
                mreturn mOutputFolder
            endmethod
            method set
            proc
                mOutputFolder = value.trim()
                if (!String.IsNullOrWhiteSpace(mOutputFolder) && !mOutputFolder.EndsWith(":") && !mOutputFolder.EndsWith(Path.DirectorySeparatorChar.ToString()))
                    mOutputFolder += Path.DirectorySeparatorChar
            endmethod
        endproperty

        ;;; <summary>
        ;;; Should we treat user-defined tokens as pre-processor tokens.
        ;;; If this property is set to true then user-defined tokens will be expanded out
        ;;; to other tokens during tokenization, thus making it possible for the value of
        ;;; user defined tokens to contain other tokens.
        ;;; Setting this property to true is equivalent to using the -utpp command line option.
        ;;; </summary>
        public readwrite property PreProcessUserTokens, Boolean

        ;;; <summary>
        ;;; Should array fields be preserved instead of expanded to multiple fields.
        ;;; Setting this property is equivalent to using the -pa command line option.
        ;;; </summary>
        public readwrite property PreserveArrays, Boolean

        ;;; <summary>
        ;;; The key number that should be treated as the primary key when using a primary key block.
        ;;; Setting this property is equivalent to using the -opk command line option.
        ;;; </summary>
        public readwrite property PrimaryKeyNumber, int, 0

        ;;; <summary>
        ;;; Process input from a BusinessCraft Proforma file.
        ;;; Setting this property is equivalent to using the -proforma command line option.
        ;;; </summary>
        public readwrite property ProformaFile, String, String.Empty

        ;;; <summary>
        ;;; 
        ;;; 
        ;;; </summary>
        public readwrite property ProformaStructures, @RpsStructureCollection

        ;;; <summary>
        ;;; Replace existing files. Default is to not replace existing files.
        ;;; Setting this property to true is equivalent to using the -r command line option.
        ;;; </summary>
        public readwrite property ReplaceFiles, Boolean

        ;;; <summary>
        ;;; Repository file name to process. Setting this property makes all of the structures
        ;;; associated with the file definition to be available during code generation, as if
        ;;; you had specified those structures via the Structures property and also set the
        ;;; MultipleStructures property to true.
        ;;; Setting this property is equivalent to using the -file command line option.
        ;;; </summary>
        public readwrite property RepositoryFile, String, String.Empty

        ;;; <summary>
        ;;; Repository main file to use.
        ;;; </summary>
        public readwrite property RepositoryMainFile, String, String.Empty

        ;;; <summary>
        ;;; Repository text file to use.
        ;;; </summary>
        public readwrite property RepositoryTextFile, String, String.Empty

        ;;; <summary>
        ;;; Repository text file to use.
        ;;; </summary>
        public readwrite property RepositoryOverrideFile, String, String.Empty

        ;;; <summary>
        ;;; Window script selection list processing. When this option is used CodeGen will examine
        ;;; any fields which have selection windows specified and will attempt to populate the field
        ;;; selections property based on the selection items defined in the named selection window.
        ;;; Setting this property is equivalent to using the -ws command line option.
        ;;; </summary>
        public readwrite property SelectionWindowScript, String, String.Empty

        ;;; <summary>
        ;;; Strcutures to process. To process all structures add an * as the first structure name.
        ;;; Adding structure names to this collection is equivalent to using the -s command line option.
        ;;; </summary>
        public readwrite property Structures, @ObservableCollection<String>, new ObservableCollection<String>()

        private mSubset, String, String.Empty
        ;;; <summary>
        ;;; Subset of fields to use. Specify subsets in field user text strings with @SUB=name;
        ;;; syntax. This option is only valid when processing a single repository structure.
        ;;; Setting this property is equivalent to using the -subset command line option.
        ;;; </summary>
        public property Subset, String
            method get
            proc
                mreturn mSubset
            endmethod
            method set
            proc
                mSubset = value?.ToUpper()
            endmethod
        endproperty

        ;;; <summary>
        ;;; Subset fields. This option allows you to specify which repository fields from the current
        ;;; structure or structures will be used to create a subset.
        ;;; Adding structure and field name pairs to this collection is equivalent to using the -fields command line option.
        ;;; </summary>
        public readwrite property SubsetFields, @ObservableCollection<Tuple<String, String>>, new ObservableCollection<Tuple<String, String>>()

        private mTemplateFolder, String, String.Empty
        ;;; <summary>
        ;;; Template folder. If not specified then the folder defined by the environment variable
        ;;; CODEGEN_TPLDIR is used. If that is not defined then the current folder is used.
        ;;; Setting this property is equivalent to using the -i command line option.
        ;;; </summary>
        public property TemplateFolder, String
            method get
            proc
                mreturn mTemplateFolder
            endmethod
            method set
            proc
                mTemplateFolder = value?.Trim()
                if (!String.IsNullOrWhiteSpace(mTemplateFolder) && !mTemplateFolder.EndsWith(":") && !mTemplateFolder.EndsWith(Path.DirectorySeparatorChar.ToString()))
                    mTemplateFolder += Path.DirectorySeparatorChar
            endmethod
        endproperty

        ;;; <summary>
        ;;; Templates to process.
        ;;; Adding template names to this collection is mandatory for all operations
        ;;; and is is equivalent to using the -t command line option.
        ;;; </summary>
        public readwrite property Templates, @ObservableCollection<String>, new ObservableCollection<String>()

        ;;; <summary>
        ;;; Tweaks to apply
        ;;; This is a named collection of special "tweaks" to be applied when generating code
        ;;; </summary>
        public readwrite property Tweaks, @ObservableCollection<String>, new ObservableCollection<String>()

        ;;; <summary>
        ;;; Should alternate field names be used?
        ;;; </summary>
        public readwrite property UseAlternateFieldNames, Boolean

        ;;; <summary>
        ;;; Should alternate structure names be used?
        ;;; This option may not be combined with structure aliasing (-a).
        ;;; </summary>
        public readwrite property UseAlternateStructureNames, Boolean

        ;;; <summary>
        ;;; User defined token file. Optionally specify the path to a file which contains user
        ;;; defined token definitions.
        ;;; Setting this property is equivalent to using the -u command line option.
        ;;; </summary>
        public readwrite property UserTokenFile, String, String.Empty

        ;;; <summary>
        ;;; User defined tokens.
        ;;; Adding UserTokens to this collection is equivalent to using the -ut command line option.
        ;;; </summary>
        public readwrite property UserTokens, @ObservableCollection<UserToken>, new ObservableCollection<UserToken>()

        ;;; <summary>
        ;;; Process input from a UI Toolkit Window script file.  By default the fields and
        ;;; buttons collection will be based on the first input window found in the script file,
        ;;; but this can be overridden by specifying the name of number or name of the window to
        ;;; use following a # character after the script file name.
        ;;; Setting this property is equivalent to using the -w command line option.
        ;;; </summary>
        public readwrite property WindowScript, String, String.Empty

.endregion

.region "Status properties - not serialized"

        private mComplete, Boolean, false
        ;;; <summary>
        ;;; Did the task complete without any errors
        ;;; </summary>
        {JsonIgnore}
        public property Complete, Boolean
            method get
            proc
                mreturn mComplete
            endmethod
            internal method set
            proc
                mComplete = value
            endmethod
        endproperty

        private mErrors, int
        ;;; <summary>
        ;;; The number of errors reported during the processing of the task.
        ;;; </summary>
        {JsonIgnore}
        public property Errors, int
            method get
            proc
                mreturn mErrors
            endmethod
            internal method set
            proc
                mErrors = value
            endmethod
        endproperty

        private mWarnings, int

        ;;; <summary>
        ;;; The number of errors reported during the processing of the task.
        ;;; </summary>
        {JsonIgnore}
        public property Warnings, int
            method get
            proc
                mreturn mWarnings
            endmethod
            internal method set
            proc
                mWarnings = value
            endmethod
        endproperty

        private mLastErrorMessage, String, String.Empty
        ;;; <summary>
        ;;; Did the task complete without errors
        ;;; </summary>
        {JsonIgnore}
        public property LastErrorMessage, String
            method get
            proc
                mreturn mLastErrorMessage
            endmethod
            internal method set
            proc
                mLastErrorMessage = value
            endmethod
        endproperty

        private mFilesGenerated, @ObservableCollection<String>, new ObservableCollection<String>()
        ;;; <summary>
        ;;; List of files that were generated by this task.
        ;;; </summary>
        {JsonIgnore}
        public property FilesGenerated, @ObservableCollection<String>
            method get
            proc
                mreturn mFilesGenerated
            endmethod
            method set
            proc
                mFilesGenerated = value
            endmethod
        endproperty

        private mFilesProvided, @ObservableCollection<String>, new ObservableCollection<String>()
        ;;; <summary>
        ;;; List of additoinal files that provided by this task.
        ;;; </summary>
        {JsonIgnore}
        public property FilesProvided, @ObservableCollection<String>
            method get
            proc
                mreturn mFilesProvided
            endmethod
            method set
            proc
                mFilesProvided = value
            endmethod
        endproperty

        private mFilesFailed, int, 0
        ;;; <summary>
        ;;; Number of files that failed, either because of errors, not overwriting
        ;;; existing files, or not writing files multiple times.
        ;;; </summary>
        {JsonIgnore}
        public property FilesFailed, int
            method get
            proc
                mreturn mFilesFailed
            endmethod
            method set
            proc
                mFilesFailed = value
            endmethod
        endproperty

        private mMessages, @ObservableCollection<LogEntry>, new ObservableCollection<LogEntry>()
        {JsonIgnore}
        public property Messages, @ObservableCollection<LogEntry>
            method get
            proc
                mreturn mMessages
            endmethod
        endproperty  

        private mTaskSet, @CodeGenTaskSet
        ;;Internal because it is only ever used by the task set
        internal property TaskSet, @CodeGenTaskSet
            method get
            proc
                mreturn mTaskSet
            endmethod
            method set
            proc
                mTaskSet = value
            endmethod
        endproperty

.endregion

.region "Public methods"

        internal method Log, void
            required in text, String
        proc
            ;;Log the message to this task
            Messages.Add(new LogEntry(text))

            ;;And raise the TaskMessage event
            RaiseTaskMessage(text)

            ;;And also to the task set
            TaskSet.Log(text)

        endmethod

        internal method Log, void
            required in text, String
            required in blankLineBefore, boolean
            required in blankLineAfter, boolean
        proc
            ;;Log the message to this task
            if (blankLineBefore)
                Messages.Add(new LogEntry(""))
            Messages.Add(new LogEntry(text))
            if (blankLineAfter)
                Messages.Add(new LogEntry(""))

            ;;And raise the TaskMessage event
            data eventMessage = String.Empty
            if (blankLineBefore)
                eventMessage = Environment.NewLine
            eventMessage += text
            if (blankLineAfter)
                eventMessage += Environment.NewLine
            RaiseTaskMessage(eventMessage)

            ;;And also to the task set
            TaskSet.Log(text,blankLineBefore,blankLineAfter)

        endmethod

        internal method VerboseLog, void
            required in text, String
            required in blankLineBefore, boolean
            required in blankLineAfter, boolean
        proc
            if ((int)(TaskSet.LoggingLevel)>=(int)LoggingLevel.Verbose)
            begin

                ;;Log the message to this task
                if (blankLineBefore)
                    Messages.Add(new LogEntry(""))
                Messages.Add(new LogEntry(text))
                if (blankLineAfter)
                    Messages.Add(new LogEntry(""))

                ;;And raise the TaskMessage event
                data eventMessage = String.Empty
                if (blankLineBefore)
                    eventMessage = Environment.NewLine
                eventMessage += text
                if (blankLineAfter)
                    eventMessage += Environment.NewLine
                RaiseTaskMessage(eventMessage)

                ;;And also to the task set
                TaskSet.VerboseLog(text,blankLineBefore,blankLineAfter)
            end
        endmethod

        internal method VerboseLog, void
            required in text, String
        proc
            if ((int)(TaskSet.LoggingLevel)>=(int)LoggingLevel.Verbose)
            begin
                ;;Log the message to this task
                Messages.Add(new LogEntry(text))

                ;;And raise the TaskMessage event
                RaiseTaskMessage(text)

                ;;And also to the task set
                TaskSet.VerboseLog(text)
            end
        endmethod

        internal method ErrorLog, boolean
            required in text, String
        proc
            ;;Format the message
            data errorMessage = String.Format("ERROR:   {0}",text)

            ;;Log the message to this task
            Messages.Add(new LogEntry(errorMessage))
            LastErrorMessage = text
            Errors += 1

            ;;And raise the TaskMessage event
            RaiseTaskMessage(errorMessage)

            ;;And also to the task set
            TaskSet.ErrorLog(text)

            mreturn true

        endmethod

        internal method Warning, void
            required in text, String
        proc
            ;;Format the message
            data warningMessage = String.Format("WARNING: {0}",text)

            ;;Log the message to this task
            Messages.Add(new LogEntry(warningMessage))
            Warnings += 1

            ;;And raise the TaskMessage event
            RaiseTaskMessage(warningMessage)

            ;;And also to the task set
            TaskSet.Warning(text)
        endmethod

        internal method DebugLog, void
            required in text, String
            required in blankLineBefore, boolean
            required in blankLineAfter, boolean
        proc
            if ((int)(TaskSet.LoggingLevel)>=(int)LoggingLevel.Debug)
            begin
                ;;Log the message to this task
                if (blankLineBefore)
                    Messages.Add(new LogEntry(""))
                Messages.Add(new LogEntry(text))
                if (blankLineAfter)
                    Messages.Add(new LogEntry(""))

                ;;And raise the TaskMessage event
                data eventMessage = String.Empty
                if (blankLineBefore)
                    eventMessage = Environment.NewLine
                eventMessage += text
                if (blankLineAfter)
                    eventMessage += Environment.NewLine
                RaiseTaskMessage(eventMessage)

                ;;And also to the task set
                TaskSet.DebugLog(text,blankLineBefore,blankLineAfter)
            end
        endmethod

        internal method DebugLog, void
            required in text, String
        proc
            if ((int)(TaskSet.LoggingLevel)>=(int)LoggingLevel.Debug)
            begin
                ;;Log the message to this task
                Messages.Add(new LogEntry(text))

                ;;And raise the TaskMessage event
                RaiseTaskMessage(text)

                ;;And also to the task set
                TaskSet.DebugLog(text)
            end
        endmethod

        internal method DevDebugLog, void
            required in text, String
        proc
            if (TaskSet.LoggingLevel==LoggingLevel.DeveloperDebug)
            begin
                ;;Log the message to this task
                Messages.Add(new LogEntry(String.Format("DEVDBG: {0}",text)))

                ;;And raise the TaskMessage event
                RaiseTaskMessage(text)

                ;;And also to the task set
                TaskSet.DevDebugLog(text)
            end
        endmethod

        internal method echoCommand, void
        proc
            data commandToReport = Environment.CommandLine

            if (commandToReport.ToLower().EndsWith(".exe") || (commandToReport.ToLower().Contains("harmonycoregenerator.exe")) || (commandToReport.ToLower().Contains(" -input ")) ) then
            begin
                commandToReport = "Executing task '" + this.Description + "'"
            end
            else
            begin
                while (commandToReport.Contains("  "))
                    commandToReport = commandToReport.Replace("  "," ")
            end

            Log(commandToReport,true,false)

        endmethod

.endregion

.region "Events"

        public delegate StartingTaskEventHandler, void
            task, @CodeGenTask
        enddelegate

        public delegate TaskMessageEventHandler, void
            message, @String
        enddelegate

        public delegate TaskCompleteEventHandler, void
            task, @CodeGenTask
        enddelegate

        public event StartingTask, @StartingTaskEventHandler

        public event TaskMessage, @TaskMessageEventHandler

        public event TaskComplete, @TaskCompleteEventHandler

        internal method RaiseStartingTask, void
        proc
            if (StartingTask!=^null)
                raiseevent(StartingTask,this)
        endmethod

        internal method RaiseTaskMessage, void
            required in aMessage, string
        proc
            if (TaskMessage!=^null)
                raiseevent(TaskMessage,aMessage)
        endmethod

        internal method RaiseTaskComplete, void
        proc
            if (TaskComplete!=^null)
                raiseevent(TaskComplete,this)
        endmethod

.endregion

    endclass

endnamespace

