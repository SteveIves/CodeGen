;;*****************************************************************************
;;
;; Title:       TokenMeta.dbl
;;
;; Type:        Class
;;
;; Description: Represents metadata associated with a token.
;;
;; Date:        10th December 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text

namespace CodeGen.Engine

    public enum TokenType
        FileHeader
        PreProcessor
        Generic
        StructureInfo
        FieldLoop
        FieldSelectionLoop
        KeyLoop
        KeySegmentLoop
        EnumLoop
        EnumMemberLoop
        RelationLoop
        RelationSegmentLoop
        ButtonLoop
        FileLoop
        TagLoop
        Window
        Counter
        CounterInstruction
        Text
        Control
        Expression
        User
        Loop
        LoopUtility
        NotInLoop
        StructureLoop
        InterfaceLoop
        MethodLoop
        ParameterLoop
    endenum

    {Flags}
    public enum TokenValidity
        FieldLoop,                  1
        FieldSelectionLoop,         2
        KeyLoop,                    4
        KeySegmentLoop,             8
        EnumLoop,                   16
        EnumMemberLoop,             32
        RelationLoop,               64
        ButtonLoop,                 128
        FileLoop,                   256
        TagLoop,                    512
        StructureLoop,              1024
        AnyLoop,                    2048
        NotInLoop,                  4096
        Anywhere,                   8192
        InterfaceLoop,              16384
        MethodLoop,                 32768
        ParameterLoop,              65536
        RelationSegmentLoop,        131072
    endenum

    public class TokenMeta

        public IsPaired,            boolean, false
        public Name,                string
        public TypeOfToken,         TokenType
        public Modifiers,           @Dictionary<string, TokenModifier>, new Dictionary<string, TokenModifier>()
        public SeperatedValidity,   @List<TokenValidity>
        public RequiresRepository,  boolean, false
        public RequiresNamespace,   boolean, false

        public property Validity,   TokenValidity
            method set
            proc
                data expressionTypes, @List<TokenValidity>, new List<TokenValidity>()
                begin
                    data enumValue, Enum
                    foreach enumValue in Enum.GetValues(^typeof(TokenValidity))
                        if (value.HasFlag(enumValue))
                            expressionTypes.Add((TokenValidity)enumValue)
                end
                SeperatedValidity = expressionTypes
            endmethod
        endproperty

    endclass

endnamespace
