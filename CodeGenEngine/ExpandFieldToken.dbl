;;*****************************************************************************
;;
;; Title:       ExpandFieldToken.dbl
;;
;; Type:        Function
;;
;; Description: Expands field loop tokens
;;
;; Date:        5th November 2009
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

    function ExpandFieldToken           ,boolean

        required in Str                 ,@RpsStructure
        required in Fld                 ,@RpsField
        required in FldNbr              ,int
        required in LogicalFieldNumber  ,int
        required in TokenStart          ,int
        required in TokenEnd            ,int
        required in Loop1OutputOff      ,boolean
        required inout buffer           ,a
        required inout ErrStatus        ,int
        endparams

        .include "CODEGEN_SRC:codegen.def"

        stack record local_data
            ReplacedToken   ,boolean
        endrecord

    proc

        init local_data

        using buffer(TokenStart,TokenEnd) select

        ("<,>"),
        begin
            data tmpTxt, a1," "
            if (FldNbr<Str.Fields.Count-1)
                tmpTxt=","
            ReplacedToken=ReplaceToken(buffer,"<,>",tmpTxt)
        end

        ("<+>"),
        begin
            data tmpTxt, a1," "
            if (FldNbr<Str.Fields.Count-1)
                tmpTxt="+"
            ReplacedToken=ReplaceToken(buffer,"<+>",tmpTxt)
        end

        ("<:>"),
        begin
            data tmpTxt, a1," "
            if (FldNbr<Str.Fields.Count-1)
                tmpTxt=":"
            ReplacedToken=ReplaceToken(buffer,"<:>",tmpTxt)
        end

        ("<&&>"),
        begin
            data tmpTxt, a2,"  "
            if (FldNbr<Str.Fields.Count-1)
                tmpTxt="&&"
            ReplacedToken=ReplaceToken(buffer,"<&&>",tmpTxt)
        end

        ("<.AND.>"),
        begin
            data tmpTxt, a5,"     "
            if (FldNbr<Str.Fields.Count-1)
                tmpTxt=".AND."
            ReplacedToken=ReplaceToken(buffer,"<.AND.>",tmpTxt)
        end

        ("<AND>"),
        begin
            data tmpTxt, a3,"   "
            if (FldNbr<Str.Fields.Count-1)
                tmpTxt="AND"
            ReplacedToken=ReplaceToken(buffer,"<AND>",tmpTxt)
        end

        ("<||>"),
        begin
            data tmpTxt, a2,"  "
            if (FldNbr<Str.Fields.Count-1)
                tmpTxt="||"
            ReplacedToken=ReplaceToken(buffer,"<||>",tmpTxt)
        end

        ("<.OR.>"),
        begin
            data tmpTxt, a4,"    "
            if (FldNbr<Str.Fields.Count-1)
                tmpTxt=".OR."
            ReplacedToken=ReplaceToken(buffer,"<.OR.>",tmpTxt)
        end

        ("<OR>"),
        begin
            data tmpTxt, a2,"  "
            if (FldNbr<Str.Fields.Count-1)
                tmpTxt="OR"
            ReplacedToken=ReplaceToken(buffer,"<OR>",tmpTxt)
        end

        ("<FIELD_ALTNAME>","<field_altname>","<Field_Altname>","<Field_altname>","<FieldAltname>","<fieldAltname>"),
        begin
            data FieldAltnameToken, a15
            data tmpname, string
            FieldAltnameToken=buffer(TokenStart,TokenEnd)
            using FieldAltnameToken select
            ("<FIELD_ALTNAME>"),
                tmpname = Fld.AlternateName
            ("<field_altname>"),
                tmpname = LowerCase(Fld.AlternateName)
            ("<Field_Altname>"),
                tmpname = MixedCase(Fld.AlternateName)
            ("<Field_altname>"),
                tmpname = XfCase(Fld.AlternateName)
            ("<FieldAltname>"),
                tmpname = PascalCase(Fld.AlternateName)
            ("<fieldAltname>"),
                tmpname = CamelCase(Fld.AlternateName)
            endusing
            ReplacedToken=ReplaceToken(buffer,FieldAltnameToken,tmpname)
        end

        ("<FIELD_ARRAYDIMP>"),
        begin
            if (Fld.ArrayDimension[1]) then
                ReplacedToken = ReplaceToken(buffer,"<FIELD_ARRAYDIMP>",string(Fld.ArrayDimension[1]))
            else
                ReplacedToken = ReplaceToken(buffer,"<FIELD_ARRAYDIMP>","")
        end

        ("<FIELD_ARRAYDIMP0>"),
        begin
            if (Fld.ArrayDimension[1]) then
                ReplacedToken = ReplaceToken(buffer,"<FIELD_ARRAYDIMP>",string(Fld.ArrayDimension[1]))
            else
                ReplacedToken = ReplaceToken(buffer,"<FIELD_ARRAYDIMP>","0")
        end

        ("<FIELD_ARRAYDIMR>"),
        begin
            if (Fld.ArrayDimension[1]) then
                ReplacedToken=ReplaceToken(buffer,"<FIELD_ARRAYDIMR>","["+string(Fld.ArrayDimension[1])+"]")
            else
                ReplacedToken=ReplaceToken(buffer,"<FIELD_ARRAYDIMR>","")
        end

        ("<FIELD_ARRIVEM>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_ARRIVEM>",Fld.ArriveMethod)

        ("<FIELD_BASENAME>","<field_basename>","<Field_Basename>","<Field_basename>","<FieldBaseName>","<fieldBaseName>"),
        begin
            data FieldBasenameToken, a16
            data tmpname, string
            FieldBasenameToken=buffer(TokenStart,TokenEnd)
            using FieldBasenameToken select
            ("<FIELD_BASENAME>"),
                tmpname=Fld.BaseName
            ("<field_basename>"),
                tmpname=LowerCase(Fld.BaseName)
            ("<Field_Basename>"),
                tmpname=MixedCase(Fld.BaseName)
            ("<Field_basename>"),
                tmpname=XfCase(Fld.BaseName)
            ("<FieldBaseName>"),
                tmpname=PascalCase(Fld.BaseName)
            ("<fieldBaseName>"),
                tmpname=CamelCase(Fld.BaseName)
            endusing
            ReplacedToken=ReplaceToken(buffer,FieldBasenameToken,tmpname)
        end

        ("<FIELD_CHANGEM>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_CHANGEM>",Fld.ChangeMethod)

        ("<FIELD_CSDEFAULT>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_CSDEFAULT>",Fld.CsDefault)

        ("<FIELD_CSTYPE>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_CSTYPE>",Fld.CsType)

        ("<FIELD_CSCONVERT>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_CSCONVERT>",Fld.CsNumericConvert)

        ("<FIELD_DEFAULT>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_DEFAULT>",Fld.DefaultValue)

        ("<FIELD_DESC>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_DESC>",Fld.Description)

        ("<FIELD_DRILLM>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_DRILLM>",Fld.DrillMethod)

        ("<FIELD_ELEMENT>"),
        begin
            data tmpelem, string
            if (Fld.OriginalElement[1]&&Fld.OriginalElement[2]&&Fld.OriginalElement[3]&&Fld.OriginalElement[4]) then
                tmpelem=string(Fld.OriginalElement[1])+","+string(Fld.OriginalElement[2])+","+string(Fld.OriginalElement[3])+","+string(Fld.OriginalElement[4])
            else if (Fld.OriginalElement[1]&&Fld.OriginalElement[2]&&Fld.OriginalElement[3]) then
                tmpelem=string(Fld.OriginalElement[1])+","+string(Fld.OriginalElement[2])+","+string(Fld.OriginalElement[3])
            else if (Fld.OriginalElement[1]&&Fld.OriginalElement[2]) then
                tmpelem=string(Fld.OriginalElement[1])+","+string(Fld.OriginalElement[2])
            else if (Fld.OriginalElement[1]) then
                tmpelem=string(Fld.OriginalElement[1])
            else
                tmpelem=""
            ReplacedToken=ReplaceToken(buffer,"<FIELD_ELEMENT>",tmpelem)
        end

        ("<FIELD_ELEMENT0>"),
        begin
            data tmpelem, string
            if (Fld.OriginalElement[1]&&Fld.OriginalElement[2]&&Fld.OriginalElement[3]&&Fld.OriginalElement[4]) then
                tmpelem=string(Fld.OriginalElement[1])+","+string(Fld.OriginalElement[2])+","+string(Fld.OriginalElement[3])+","+string(Fld.OriginalElement[4])
            else if (Fld.OriginalElement[1]&&Fld.OriginalElement[2]&&Fld.OriginalElement[3]) then
                tmpelem=string(Fld.OriginalElement[1])+","+string(Fld.OriginalElement[2])+","+string(Fld.OriginalElement[3])
            else if (Fld.OriginalElement[1]&&Fld.OriginalElement[2]) then
                tmpelem=string(Fld.OriginalElement[1])+","+string(Fld.OriginalElement[2])
            else if (Fld.OriginalElement[1]) then
                tmpelem=string(Fld.OriginalElement[1])
            else
                tmpelem="0"
            ReplacedToken=ReplaceToken(buffer,"<FIELD_ELEMENT0>",tmpelem)
        end

        ("<FIELD_ENUMLENGTH>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_ENUMLENGTH>",string(Fld.EnumeratedDisplayLength))

        ("<FIELD_FORMATNAME>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_FORMATNAME>",Fld.FormatName)

        ("<FIELD_HEADING>"),
        begin
            data tmpname, a80
            if (Fld.ReportHeading) then
                tmpname=Fld.ReportHeading
            else if (Fld.Prompt) then
                tmpname=Fld.Prompt
            else
                tmpname=Fld.Name
            ReplacedToken = ReplaceToken(buffer,"<FIELD_HEADING>",tmpname)
        end

        ("<FIELD_HELPID>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_HELPID>",Fld.HelpIdentifier)

        ("<FIELD_HYPERMM>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_HYPERM>",Fld.HyperlinkMethod)

        ("<FIELD_INFOLINE>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_INFOLINE>",Fld.InfoLineText)

        ("<FIELD_LDESC>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_LDESC>",Fld.LongDescription)

        ("<FIELD_LEAVEM>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_LEAVEM>",Fld.LeaveMethod)

        ("<FIELD_MAXVALUE>"),
        begin
            data tmpMaxVal, a30, " "
            ;;If the field has a range specified then use it
            if (Fld.NumericRangeMaximum) then
                tmpMaxVal = Fld.NumericRangeMaximum [LEFT]
            else
            begin
                ;;Make sure the field is numeric
                using Fld.DataType select
                (RpsFieldDataType.Decimal),
                begin
                    if (Fld.ViewAs==RpsFieldViewAs.CheckBox) then
                        tmpMaxVal="1"
                    else if (Fld.Enumerated) then
                    begin
                        if (Fld.EnumeratedStepValue>0) then
                            tmpMaxVal = (Fld.EnumeratedBaseValue + (Fld.EnumeratedStepValue * (Fld.SelectionList.Count-1))) [LEFT]
                        else
                            tmpMaxVal = Fld.EnumeratedBaseValue
                    end
                    else if (Fld.Precision) then
                    begin
                        fill("9",tmpMaxVal(1:Fld.Size-Fld.Precision))
                        tmpMaxVal = atrim(tmpMaxVal) + "."
                        fill("9",tmpMaxVal(Fld.Size-Fld.Precision+2:Fld.Precision))
                    end
                    else
                        fill("9",tmpMaxVal(1:Fld.Size))
                end
                (RpsFieldDataType.Integer),
                begin
                    if (Fld.ViewAs==RpsFieldViewAs.CheckBox) then
                        tmpMaxVal="1"
                    else if (Fld.Enumerated) then
                    begin
                        if (Fld.EnumeratedBaseValue>0) then
                            tmpMaxVal = (Fld.EnumeratedBaseValue + (Fld.EnumeratedStepValue * (Fld.SelectionList.Count-1))) [LEFT]
                        else
                            tmpMaxVal = Fld.EnumeratedBaseValue
                    end
                    else
                    begin
                        using Fld.Size select
                        (1),    tmpMaxVal = 127 [LEFT]
                        (2),    tmpMaxVal = 32767 [LEFT]
                        (4),    tmpMaxVal = 2147483647 [LEFT]
                        (8),    tmpMaxVal = 9223372036854775807 [LEFT]
                        endusing
                    end
                end
                (),
                begin
                    if (!Loop1OutputOff)
                    begin
                        ;;Not numeric, throw an error
                        NumericFieldRequired("<FIELD_MAXVALUE>")
                        ErrStatus=1
                    end
                end
                endusing
            end
            ;;Replace the token
            if (!ErrStatus)
                ReplacedToken = ReplaceToken(buffer,"<FIELD_MAXVALUE>",TmpMaxVal)
        end

        ("<FIELD_MINVALUE>"),
        begin
            data tmpMinVal, a30, " "
            ;;If the field has a range specified then use it
            if (Fld.NumericRangeMinimum) then
                tmpMinVal = Fld.NumericRangeMinimum [LEFT]
            else
            begin
                ;;Make sure the field is numeric
                using Fld.DataType select
                (RpsFieldDataType.Decimal),
                begin
                    if (Fld.ViewAs==RpsFieldViewAs.CheckBox) then
                        tmpMinVal="0"
                    else if (Fld.Enumerated) then
                    begin
                        if (Fld.EnumeratedStepValue > 0) then
                            tmpMinVal = Fld.EnumeratedBaseValue [LEFT]
                        else
                            tmpMinVal = (Fld.EnumeratedBaseValue + (Fld.EnumeratedStepValue * (Fld.SelectionList.Count-1))) [LEFT]
                    end
                    else if (Fld.Precision) then
                    begin
                        if (Fld.NegativeAllowed == RpsFieldNegatives.Allowed) then
                        begin
                            tmpMinVal = "-"
                            fill("9",tmpMinVal(2:Fld.Size-Fld.Precision))
                            tmpMinVal = atrim(tmpMinVal) + "."
                            fill("9",tmpMinVal(Fld.Size-Fld.Precision+3:Fld.Precision))
                        end
                        else
                            tmpMinVal = "0"
                    end
                    else
                    begin
                        if (Fld.NegativeAllowed == RpsFieldNegatives.Allowed) then
                        begin
                            tmpMinVal = "-"
                            fill("9",tmpMinVal(2:Fld.Size))
                        end
                        else
                            tmpMinVal = "0"
                    end
                end
                (RpsFieldDataType.Integer),
                begin
                    if (Fld.ViewAs==RpsFieldViewAs.CheckBox) then
                        tmpMinVal="0"
                    else if (Fld.Enumerated) then
                    begin
                        if (Fld.EnumeratedStepValue > 0) then
                            tmpMinVal = Fld.EnumeratedBaseValue [LEFT]
                        else
                            tmpMinVal = (Fld.EnumeratedBaseValue + (Fld.EnumeratedStepValue * (Fld.SelectionList.Count-1))) [LEFT]
                    end
                    else if (Fld.NegativeAllowed == RpsFieldNegatives.None) then
                        tmpMinVal = "0"
                    else
                    begin
                        using Fld.Size select
                        (1),    tmpMinVal = -128 [LEFT]
                        (2),    tmpMinVal = -32768 [LEFT]
                        (4),    tmpMinVal = -2147483648 [LEFT]
                        (8),    tmpMinVal = -9223372036854775808 [LEFT]
                        endusing
                    end
                end
                (),
                begin
                    if (!Loop1OutputOff)
                    begin
                        ;;Not numeric, throw an error
                        NumericFieldRequired("<FIELD_MINVALUE>")
                        ErrStatus=1
                    end
                end
                endusing
            end
            ;;Replace the token
            if (!ErrStatus)
                ReplacedToken = ReplaceToken(buffer,"<FIELD_MINVALUE>",TmpMinVal)
        end

        ("<FIELD_NAME>","<field_name>","<Field_Name>","<Field_name>","<FieldName>","<fieldName>"),
        begin
            data FieldNameToken, string
            data tmpname, string
            FieldNameToken=buffer(TokenStart,TokenEnd)
            using FieldNameToken select
            ("<FIELD_NAME>"),
                tmpname=Fld.Name
            ("<field_name>"),
                tmpname=LowerCase(Fld.Name)
            ("<Field_Name>"),
                tmpname=MixedCase(Fld.Name)
            ("<Field_name>"),
                tmpname=XfCase(Fld.Name)
            ("<FieldName>"),
                tmpname=PascalCase(Fld.Name)
            ("<fieldName>"),
                tmpname=CamelCase(Fld.Name)
            endusing
            if (Env.ClDoFieldPrefix)
            begin
                data pos, i4
                tmpName = Env.ClFieldPrefix + tmpName
                if (pos=instr(1,tmpName,"."))
                    tmpName = tmpName(1,pos) + Env.ClFieldPrefix + tmpName(pos+1,trim(tmpName))
            end
            ReplacedToken = ReplaceToken(buffer,FieldNameToken,tmpname)
        end

        ("<FIELD_OCDEFAULT>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_OCDEFAULT>",Fld.OcDefault)

        ("<FIELD_OCTYPE>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_OCTYPE>",Fld.OcType)

        ("<FIELD_ORIGINAL_NAME>","<field_original_name>","<Field_Original_Name>","<Field_original_name>","<FieldOriginalName>","<fieldOriginalName>"),
        begin
            data FieldNameToken, a21
            data tmpname, string
            FieldNameToken=buffer(TokenStart,TokenEnd)
            using FieldNameToken select
            ("<FIELD_ORIGINAL_NAME>"),
                tmpname=Fld.OriginalName
            ("<field_original_name>"),
                tmpname=LowerCase(Fld.OriginalName)
            ("<Field_Original_Name>"),
                tmpname=MixedCase(Fld.OriginalName)
            ("<Field_original_name>"),
                tmpname=XfCase(Fld.OriginalName)
            ("<FieldOriginalName>"),
                tmpname=PascalCase(Fld.OriginalName)
            ("<fieldOriginalName>"),
                tmpname=CamelCase(Fld.OriginalName)
            endusing
            ReplacedToken = ReplaceToken(buffer,FieldNameToken,tmpname)
        end

        ("<FIELD_PATH>","<field_path>","<Field_Path>","<Field_path>","<FieldPath>","<fieldPath>"),
        begin
            data FieldPathToken, a12
            data tmppath, a68
            FieldPathToken=buffer(TokenStart,TokenEnd)
            tmppath=Str.Alias+"."+Fld.Name
            using FieldPathToken select
            ("<field_path>"),
                locase tmppath
            ("<Field_Path>"),
                tmppath = MixedCase(tmppath)
            ("<Field_path>"),
                tmppath = XfCase(tmppath)
            ("<FieldPath>"),
                tmppath = PascalCase(tmppath)
            ("<fieldPath>"),
                tmppath = CamelCase(tmppath)
            endusing
            ReplacedToken = ReplaceToken(buffer,FieldPathToken,tmppath)
        end

        ("<FIELD_PATH_CONV>","<field_path_conv>"),
        begin
            data FieldPathConvertToken, a17
            data tmppath, a120
            data tmpfunc, a30
            FieldPathConvertToken=buffer(TokenStart,TokenEnd)
            ;;Set the path
            tmppath=Str.Alias+"."+Fld.Name
            ;;Do we have conversion function?
            if (tmpfunc=Fld.UnmappingFunction)
                tmppath="%"+atrim(tmpfunc)+"("+atrim(tmppath)+")"
            ;;Lowercase if necessary
            if (FieldPathConvertToken=="<field_path_conv>")
                locase tmppath
            ReplacedToken = ReplaceToken(buffer,FieldPathConvertToken,tmppath)
        end

        ("<FIELD_PIXEL_COL>"),
        begin
            if (Fld.FieldColumn) then
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PIXEL_COL>",string((Fld.FieldColumn*Env.CharacterWidth)-(Env.CharacterWidth-1)))
            else
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PIXEL_COL>",string((15*Env.CharacterWidth)-(Env.CharacterWidth-1)))
        end

        ("<FIELD_PIXEL_ROW>"),
        begin
            if (Fld.FieldRow) then
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PIXEL_ROW>",string(((Fld.FieldRow+Fld.ArrayDimension[1]-1)*Env.CharacterHeight)-(Env.CharacterHeight-1)))
            else
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PIXEL_ROW>",string((LogicalFieldNumber*Env.CharacterHeight)-(Env.CharacterHeight-1)))
        end

        ("<FIELD_PIXEL_WIDTH>"),
        begin
            data FieldPixWidth, int
            if (Fld.SelectionList.Count) then
                FieldPixWidth = Fld.SelectionListMaxLength * Env.CharacterWidth
            else if (Fld.Enumerated) then
                FieldPixWidth = Fld.EnumeratedDisplayLength * Env.CharacterWidth
            else
                FieldPixWidth = Fld.Size * Env.CharacterWidth
            ReplacedToken = ReplaceToken(buffer,"<FIELD_PIXEL_WIDTH>",string(FieldPixWidth))
        end

        ("<FIELD_DRILL_PIXEL_COL>"),
        begin
            data FieldPixWidth, int
            data DrillPixCol, int
            if (Fld.SelectionList.Count) then
                FieldPixWidth = Fld.SelectionListMaxLength * Env.CharacterWidth
            else if (Fld.Enumerated) then
                FieldPixWidth = Fld.EnumeratedDisplayLength * Env.CharacterWidth
            else
                FieldPixWidth = Fld.Size * Env.CharacterWidth
            if (Fld.FieldColumn) then
                DrillPixCol = (Fld.FieldColumn*Env.CharacterWidth)+(FieldPixWidth)-Env.CharacterWidth
            else
                DrillPixCol = (15*Env.CharacterWidth)+(FieldPixWidth)-Env.CharacterWidth
            ReplacedToken = ReplaceToken(buffer,"<FIELD_DRILL_PIXEL_COL>",string(DrillPixCol))
        end

        ("<FIELD_INPUT_LENGTH>"),
        begin
            data FieldInputLength, int
            using Fld.DataType select
            (RpsFieldDataType.Alpha),
            begin
                FieldInputLength = Fld.Size
            end
            (RpsFieldDataType.Decimal),
            begin
                FieldInputLength = Fld.Size
                if (Fld.NegativeAllowed)
                    FieldInputLength+=1
                if (Fld.Precision)
                    FieldInputLength+=1
            end
            (RpsFieldDataType.Integer),
            begin
                using Fld.Size select
                (1),
                    FieldInputLength = 3
                (2),
                    FieldInputLength = 5
                (4),
                    FieldInputLength = 10
                (8),
                    FieldInputLength = 19
                endusing
                if (Fld.NegativeAllowed)
                    FieldInputLength+=1
            end
            (),
                FieldInputLength = Fld.Size
            endusing
            ReplacedToken = ReplaceToken(buffer,"<FIELD_INPUT_LENGTH>",string(FieldInputLength))
        end

        ("<FIELD_ODBCNAME>","<field_odbcname>","<Field_Odbcname>","<Field_odbcname>","<FieldOdbcName>","<fieldOdbcName>"),
        begin
            data FieldOdbcNameToken, a16
            data tmpname, string
            FieldOdbcNameToken=buffer(TokenStart,TokenEnd)
            using FieldOdbcNameToken select
            ("<FIELD_ODBCNAME>"),
                tmpname=Fld.OdbcName
            ("<field_odbcname>"),
                tmpname=LowerCase(Fld.OdbcName)
            ("<Field_Odbcname>"),
                tmpname=MixedCase(Fld.OdbcName)
            ("<Field_odbcname>"),
                tmpname=XfCase(Fld.OdbcName)
            ("<FieldOdbcName>"),
                tmpname=PascalCase(Fld.OdbcName)
            ("<fieldOdbcName>"),
                tmpname=CamelCase(Fld.OdbcName)
            endusing
            ReplacedToken = ReplaceToken(buffer,FieldOdbcNameToken,tmpname)
        end

        ("<FIELD_POSITION>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_POSITION>",string(Fld.StartPosition))

        ("<FIELD_POSITION_ZERO>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_POSITION_ZERO>",string(Fld.StartPosition-1))

        ("<FIELD_PRECISION>"),
            if (Fld.Precision) then
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PRECISION>",string(Fld.Precision))
            else
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PRECISION>","")

        ("<FIELD_PRECISION2>"),
            if (Fld.Precision) then
                ReplacedToken = ReplaceToken(buffer,"<FIELD_PRECISION2>","."+string(Fld.Precision))
            else
                ReplacedToken=ReplaceToken(buffer,"<FIELD_PRECISION2>","")

        ("<FIELD_PROMPT>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_PROMPT>",Fld.Prompt)

        ("<FIELD_RANGE_MAX>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_RANGE_MAX>",string(Fld.NumericRangeMaximum))

        ("<FIELD_RANGE_MIN>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_RANGE_MIN>",string(Fld.NumericRangeMinimum))

        ("<FIELD_REGEX>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_REGEX>",%FieldRegex(Fld))

        ("<FIELD_SELECTIONS>"),
        begin
            if (Fld.SelectionList.Count) then
            begin
                data idx, int
                data selections, a4096, ""
                for idx from 0 thru Fld.SelectionList.Count-1
                begin
                    selections = atrim(selections)+'"'+atrim((a)Fld.SelectionList[idx])+'"'
                    if (idx<Fld.SelectionList.Count-1)
                        selections = atrim(selections)+","
                end
                ReplacedToken = ReplaceToken(buffer,"<FIELD_SELECTIONS>",selections)
            end
            else
                ReplacedToken = ReplaceToken(buffer,"<FIELD_SELECTIONS>",'""')
        end

        ("<FIELD_SELECTIONS1>"),
        begin
            if (Fld.SelectionList.Count) then
            begin
                data idx, int
                data selections, a4096, '"'
                for idx from 0 thru Fld.SelectionList.Count-1
                begin
                    selections = atrim(selections)+atrim((a)Fld.SelectionList[idx])
                    if (idx<Fld.SelectionList.Count-1)
                        selections = atrim(selections)+"|"
                end
                selections = atrim(selections)+'"'
                ReplacedToken = ReplaceToken(buffer,"<FIELD_SELECTIONS1>",selections)
            end
            else
                ReplacedToken = ReplaceToken(buffer,"<FIELD_SELECTIONS1>",'""')
        end

        ("<FIELD_SELLENGTH>"),
            ReplacedToken=ReplaceToken(buffer,"<FIELD_SELLENGTH>",string(Fld.SelectionListMaxLength))

        ("<FIELD_SIZE>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_SIZE>",string(Fld.Size))

        ("<FIELD_SPEC>","<field_spec>","<Field_Spec>","<Field_spec>","<FieldSpec>","<fieldSpec>"),
        begin
            data tmpToken, a12
            data tmpSpec, a31, ""
            tmpToken = buffer(TokenStart,TokenEnd)

            if (Fld.IsGroup&&Fld.GroupStructure.Length>0&&Env.DontExpandImplicitGroups) then
            begin
                ;;We've got an implicit structure which has not been expanded
                tmpSpec = Fld.TypeCode
            end
            else
            begin
                using Fld.DataType select
                (RpsFieldDataType.Boolean),
                    tmpSpec = "BOOLEAN"
                (RpsFieldDataType.Binary),      ;;Can't currently happen because of %CheckStructure
                    nop
                (RpsFieldDataType.StructField), ;;Can't currently happen because of %CheckStructure
                    tmpSpec = Fld.UserFieldType
                (RpsFieldDataType.Enum),        ;;Can't currently happen because of %CheckStructure
                    tmpSpec = Fld.UserFieldType
                (),
                begin
                    tmpSpec=Fld.TypeCode+string(Fld.Size)
                    if (Fld.Precision)
                        tmpSpec = atrim(tmpSpec)+"."+string(Fld.Precision)
                end
                endusing
            end
            using tmpToken select
            ("<FIELD_SPEC>"),
                nop
            ("<field_spec>"),
                locase tmpSpec
            ("<Field_Spec>"),
                tmpSpec=MixedCase(tmpSpec)
            ("<Field_spec>"),
                tmpSpec=XfCase(tmpSpec)
            ("<FieldSpec>"),
                tmpSpec=PascalCase(tmpSpec)
            ("<fieldSpec>"),
                tmpSpec=CamelCase(tmpSpec)
            endusing
            ReplacedToken = ReplaceToken(buffer,tmpToken,tmpSpec)
        end

        ("<FIELD_SQLNAME>","<field_sqlname>","<Field_Sqlname>","<Field_sqlname>","<FieldSqlName>","<fieldSqlName>"),
        begin
            data FieldSqlNameToken, a15
            data tmpname, string
            FieldSqlNameToken=buffer(TokenStart,TokenEnd)
            using FieldSqlNameToken select
            ("<FIELD_SQLNAME>"),
                tmpname = Fld.SqlName
            ("<field_sqlname>"),
                tmpname=LowerCase(Fld.SqlName)
            ("<Field_Sqlname>"),
                tmpname=MixedCase(Fld.SqlName)
            ("<Field_sqlname>"),
                tmpname=XfCase(Fld.SqlName)
            ("<FieldSqlName>"),
                tmpname=PascalCase(Fld.SqlName)
            ("<fieldSqlName>"),
                tmpname=CamelCase(Fld.SqlName)
            endusing
            ReplacedToken = ReplaceToken(buffer,FieldSqlNameToken,tmpname)
        end

        ("<FIELD_SQLTYPE>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_SQLTYPE>",Fld.SqlType)

        ("<FIELD_TEMPLATE>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_TEMPLATE>",Fld.Template)

        ("<FIELD_TKSCRIPT>"),
        begin
            data replacementText, a CODEGEN_BUFSZ, " "
            if (Fld.PromptRow&&Fld.PromptColumn&&Fld.FieldRow&&Fld.FieldColumn) then
                s_bld(replacementText,,".field %a, pos(%d,%d), fpos(%d,%d)",Fld.Name,Fld.PromptRow,Fld.PromptColumn,Fld.FieldRow,Fld.FieldColumn)
            else
                s_bld(replacementText,,".field %a, pos(%d,%d)",Fld.Name,FldNbr+1,1)
            ReplacedToken = ReplaceToken(buffer,"<FIELD_TKSCRIPT>",replacementText)
        end

        ("<FIELD_TYPE>","<field_type>","<Field_Type>","<Field_type>","<FieldType>","<fieldType>"),
        begin
            data FieldTypeToken, a12
            data tmpVal, string
            FieldTypeToken=buffer(TokenStart,TokenEnd)
            using FieldTypeToken select
            ("<FIELD_TYPE>"),
                tmpVal = Fld.TypeCode
            ("<field_type>"),
                tmpVal = LowerCase(Fld.TypeCode)
            ("<Field_Type>"),
                tmpVal = MixedCase(Fld.TypeCode)
            ("<Field_type>"),
                tmpVal = XfCase(Fld.TypeCode)
            ("<FieldType>"),
                tmpVal = PascalCase(Fld.TypeCode)
            ("<fieldType>"),
                tmpVal = CamelCase(Fld.TypeCode)
            endusing
            ReplacedToken = ReplaceToken(buffer,FieldTypeToken,tmpVal)
        end

        ("<FIELD_TYPE_NAME>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_TYPE_NAME>",Fld.TypeName)

        ("<FIELD_UTEXT>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_UTEXT>",Fld.UserText)

        ("<FIELD_VBDEFAULT>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_VBDEFAULT>",Fld.VbDefault)

        ("<FIELD_VBTYPE>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD_VBTYPE>",Fld.VbType)

        ("<FIELD#>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD#>",string(FldNbr+1))

        ("<FIELD#_ZERO>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD#_ZERO>",string(FldNbr))

        ("<FIELD#LOGICAL>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD#LOGICAL>",string(LogicalFieldNumber))

        ("<FIELD#LOGICAL_ZERO>"),
            ReplacedToken = ReplaceToken(buffer,"<FIELD#LOGICAL_ZERO>",string(LogicalFieldNumber-1))

        ("<MAPPED_FIELD>","<mapped_field>","<Mapped_Field>","<Mapped_field>","<MappedField>","<mappedField>"),
        begin
            data MappedFieldToken, a14
            data tmpfield, a36
            MappedFieldToken=buffer(TokenStart,TokenEnd)
            tmpfield=Fld.MappedField
            if (!tmpfield)
            begin
                using Fld.TypeCode select
                ("A","U"),
                    tmpfield='""'
                ("D","I"),
                    tmpfield="0"
                ("@"),
                    tmpField="new "+Fld.TypeCode+"()"
                endusing
            end
            using MappedFieldToken select
            ("<mapped_field>"),
                locase tmpfield
            ("<Mapped_Field>"),
                tmpfield = MixedCase(tmpfield)
            ("<Mapped_field>"),
                tmpfield = XfCase(tmpfield)
            ("<MappedField>"),
                tmpfield = PascalCase(tmpfield)
            ("<mappedField>"),
                tmpfield = CamelCase(tmpfield)
            endusing
            ReplacedToken = ReplaceToken(buffer,MappedFieldToken,atrim(tmpfield))
        end

        ("<MAPPED_PATH>","<mapped_path>"),
        begin
            data MappedPathToken, a13
            MappedPathToken=buffer(TokenStart,TokenEnd)
            if (Str.MappedStructure) then
            begin
                data tmppath, a70
                tmppath=Fld.MappedField
                upcase tmppath
                if (tmppath) then
                begin
                    tmppath=Str.MappedStructure+"."+tmppath
                    if (MappedPathToken=="<mapped_path>")
                        locase tmppath
                end
                else
                begin
                    using Fld.TypeCode select
                    ("A"),
                        tmppath='""'
                    ("D","I"),
                        tmppath="0"
                    ("@"),
                        tmppath="new "+Fld.TypeCode+"()"
                    endusing
                end
                ReplacedToken = ReplaceToken(buffer,MappedPathToken,tmppath)
            end
            else
            begin
                RpsStrMapRequired(MappedPathToken)
                ErrStatus=1
            end
        end

        ("<MAPPED_PATH_CONV>","<mapped_path_conv>"),
        begin
            data MappedPathConvertToken, a18
            MappedPathConvertToken=buffer(TokenStart,TokenEnd)
            if (Str.MappedStructure) then
            begin
                data tmppath, a120
                data tmpfunc, a30
                tmppath=Fld.MappedField
                upcase tmppath
                if (tmppath) then
                begin
                    tmppath=Str.MappedStructure+"."+tmppath
                    if (MappedPathConvertToken=="<mapped_path_conv>")
                        locase tmppath
                end
                else
                begin
                    using Fld.TypeCode select
                    ("A"),
                        tmppath='""'
                    ("D","I"),
                        tmppath="0"
                    ("@"),
                        tmppath="new "+Fld.TypeCode+"()"
                    endusing
                end
                if (tmpfunc=Fld.MappingFunction)
                begin
                    if (MappedPathConvertToken=="<mapped_path_conv>")
                        locase tmpfunc
                    tmppath = "%"+atrim(tmpfunc)+"("+atrim(tmppath)+")"
                end
                ReplacedToken = ReplaceToken(buffer,MappedPathConvertToken,tmppath)
            end
            else
            begin
                RpsStrMapRequired(MappedPathConvertToken)
                ErrStatus=1
            end
        end

        ("<PROMPT_PIXEL_COL>"),
        begin
            if (Fld.PromptColumn) then
                ReplacedToken = ReplaceToken(buffer,"<PROMPT_PIXEL_COL>",string((Fld.PromptColumn*Env.CharacterWidth)-(Env.CharacterWidth-1)))
            else
                ReplacedToken = ReplaceToken(buffer,"<PROMPT_PIXEL_COL>",string((1*Env.CharacterWidth)-(Env.CharacterWidth-1)))
        end

        ("<PROMPT_PIXEL_ROW>"),
        begin
            if (Fld.PromptRow) then
                ReplacedToken = ReplaceToken(buffer,"<PROMPT_PIXEL_ROW>",string(((Fld.PromptRow+Fld.ArrayDimension[1]-1)*Env.CharacterHeight)-(Env.CharacterHeight-1)))
            else
                ReplacedToken = ReplaceToken(buffer,"<PROMPT_PIXEL_ROW>",string((LogicalFieldNumber*Env.CharacterHeight)-(Env.CharacterHeight-1)))
        end

        ("<PROMPT_PIXEL_WIDTH>"),
            ReplacedToken = ReplaceToken(buffer,"<PROMPT_PIXEL_WIDTH>",string(trim(Fld.Prompt)*Env.CharacterWidth))

		(),
		begin
			;;If we didn't match anything so far then lets see if we have any custom field loop token processors
			if (Env.CustomFieldTokens.Count>0)
			begin
				;;We do have custom processors, look for a match
				data customToken, @CustomFieldTokenProcessor
				foreach customToken in Env.CustomFieldTokens
				begin
					if (customToken.Token==buffer(TokenStart,TokenEnd))
					begin
						;;Found a match, expand the custom token
						ReplacedToken = customToken.Replace(Str,Fld,FldNbr,LogicalFieldNumber,TokenStart,TokenEnd,Loop1OutputOff,buffer,ErrStatus)
						exitloop
					end
				end
			end
		end

        endusing

        freturn ReplacedToken

    endfunction

endnamespace
