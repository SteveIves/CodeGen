
import System
.ifdef DBLNET
import System.Collections.ObjectModel
import System.ComponentModel
import System.IO
import System.Text
import System.Xml
import System.Xml.Serialization
.endc

import CodeGen.Engine

namespace CodeGen.Engine

.ifndef DBLNET
	
	public class CodeGenTaskSet
		
		public method CodeGenTaskSet
			endparams
		proc
			throw new Exception("The CodeGenTaskSet class is only available in Synergy .NET!")
		endmethod
		
	endclass
	
.else
	
	public class CodeGenTaskSet implements INotifyPropertyChanged

		private mDescription,			String,								String.Empty

		private mRepositoryMainFile,	String,								String.Empty
		private mRepositoryTextFile,	String,								String.Empty

		private mDefaultTemplateFolder,	String,								String.Empty
		private mDefaultOutputFolder,	String,								String.Empty

		private mLoggingLevel,			LoggingLevel,						LoggingLevel.Normal				;; -v -d, etc.
		private mListGeneratedFiles,	Boolean,							false							;;-lf

		private mTasks,					@ObservableCollection<CodeGenTask>

		public method CodeGenTaskSet
			endparams
		proc
			Description = "New Task Set"
			LoggingLevel = LoggingLevel.Normal
			Tasks = new ObservableCollection<CodeGenTask>()
		endmethod

		{Category("Task Set Options")}
		{Description("Task Set Description")}
		public property Description, String
			method get
			proc
				mreturn mDescription
			endmethod
			method set
			proc
				mDescription = value
				NotifyPropertyChanged("Description")
			endmethod
		endproperty

		{Category("Task Set Options")}
		{Description("Default Repository Main File")}
		public property RepositoryMainFile, String
			method get
			proc
				mreturn mRepositoryMainFile
			endmethod
			method set
			proc
				mRepositoryMainFile = value
				NotifyPropertyChanged("RepositoryMainFile")
			endmethod
		endproperty
		
		{Category("Task Set Options")}
		{Description("Default Repository Text File")}
		public property RepositoryTextFile, String
			method get
			proc
				mreturn mRepositoryTextFile
			endmethod
			method set
			proc
				mRepositoryTextFile = value
				NotifyPropertyChanged("RepositoryTextFile")
			endmethod
		endproperty

		{Category("Task Set Options")}
		{Description("Default Template Folder")}
		public property DefaultTemplateFolder, String
			method get
			proc
				mreturn mDefaultTemplateFolder
			endmethod
			method set
			proc
				mDefaultTemplateFolder = value
				NotifyPropertyChanged("DefaultTemplateFolder")
			endmethod
		endproperty

		{Category("Task Set Options")}
		{Description("Default Output Folder")}
		public property DefaultOutputFolder, String
			method get
			proc
				mreturn mDefaultOutputFolder
			endmethod
			method set
			proc
				mDefaultOutputFolder = value
				NotifyPropertyChanged("DefaultOutputFolder")
			endmethod
		endproperty
		
		{Category("Task Set Options")}
		{Description("Logging Level")}
		public property LoggingLevel, LoggingLevel
			method get
			proc
				mreturn mLoggingLevel
			endmethod
			method set
			proc
				mLoggingLevel = value
				NotifyPropertyChanged("LoggingLevel")
			endmethod
		endproperty
		
		{Category("Task Set Options")}
		{Description("List Generated Files")}
		public property ListGeneratedFiles, Boolean
			method get
			proc
				mreturn mListGeneratedFiles
			endmethod
			method set
			proc
				mListGeneratedFiles = value
				NotifyPropertyChanged("ListGeneratedFiles")
			endmethod
		endproperty
		
		{Category("Task Set Options")}
		{Description("Code Generation Tasks")}
		public property Tasks, @ObservableCollection<CodeGenTask>
			method get
			proc
				mreturn mTasks
			endmethod
			method set
			proc
				mTasks = value
			endmethod
		endproperty

.region "Serialization"

		public method SaveToFile, boolean
			required in fileSpec, String
			endparams
		proc
			data ok, boolean, true
			try
			begin
				disposable data stm, @StreamWriter, File.CreateText(fileSpec)
				if(stm!=^null)
				begin
					data xs, @XmlSerializer, new XmlSerializer(this.GetType())
					xs.Serialize(stm,this)
					stm.Close()
				end
			end
			catch (e, @Exception)
			begin
				ok = false
			end
			endtry
			mreturn ok
		endmethod
		
		public static method LoadFromFile, boolean
			required in fileSpec, String
			required out taskSet, @CodeGenTaskSet
			endparams
		proc
			data ok, boolean, true
			disposable data stm, @StreamReader
			try
			begin
				stm = File.OpenText(fileSpec)
				if (stm!=^null)
				begin
					data xs, @XmlSerializer, new XmlSerializer(^typeof(CodeGenTaskSet))
					data xr, @XmlReader, new XmlTextReader(stm)
					taskSet = (CodeGenTaskSet)xs.Deserialize(xr)
					stm.Close()
				end
			end
			catch (ex, @Exception)
			begin
				ok = false
			end
			endtry
			mreturn ok
		endmethod
.endregion


.region "INotifyPropertyChanged"
		
		public event PropertyChanged, @PropertyChangedEventHandler
		
		private method NotifyPropertyChanged, void
			required in propertyName, String
			endparams
		proc
			if (PropertyChanged!=^null)
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName))
		endmethod
		
.endregion
		
	endclass

.endc

endnamespace

