
import System
.ifdef DBLNET
import System.Collections.ObjectModel
import System.ComponentModel
import System.Text
.endc

import CodeGen.Engine

namespace CodeGen.Engine

.ifndef DBLNET
	
	public class CodeGenTaskSet
		
		public method CodeGenTaskSet
			endparams
		proc
			throw new Exception("The CodeGenTaskSet class is only available in Synergy .NET!")
		endmethod
		
	endclass
	
.else
	
	public class CodeGenTaskSet implements INotifyPropertyChanged

		private mDescription, String	
		private mLoggingLevel, LoggingLevel
		private mTasks, @ObservableCollection<CodeGenTask>

		public method CodeGenTaskSet
			endparams
		proc
			Description = "New Task Set"
			LoggingLevel = LoggingLevel.Normal
			Tasks = new ObservableCollection<CodeGenTask>()
		endmethod

		public property Description, String
			method get
			proc
				mreturn mDescription
			endmethod
			method set
			proc
				mDescription = value
				NotifyPropertyChanged("Description")
			endmethod
		endproperty

		public property LoggingLevel, LoggingLevel
			method get
			proc
				mreturn mLoggingLevel
			endmethod
			method set
			proc
				mLoggingLevel = value
				NotifyPropertyChanged("LoggingLevel")
			endmethod
		endproperty
		
		public property Tasks, @ObservableCollection<CodeGenTask>
			method get
			proc
				mreturn mTasks
			endmethod
			method set
			proc
				mTasks = value
			endmethod
		endproperty

.region "INotifyPropertyChanged"
		
		public event PropertyChanged, @PropertyChangedEventHandler
		
		private method NotifyPropertyChanged, void
			required in propertyName, String
			endparams
		proc
			if (PropertyChanged!=^null)
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName))
		endmethod
		
.endregion
		
	endclass

.endc

endnamespace

