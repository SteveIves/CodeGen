;;*****************************************************************************
;;
;; Title:       CodeGenTaskSet.dbl
;;
;; Type:        Class
;;
;; Description: Represents a collection of code generation tasks.
;;
;; Date:        31st August 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.ObjectModel
import System.Collections.Specialized
import System.IO
import CodeGen.MethodCatalogAPI
import Newtonsoft.Json
import MvvmTools

.array 0

namespace CodeGen.Engine

    public enum LoggingLevel
        Normal,             1
        Verbose,            2
        Debug,              3
        DeveloperDebug,     4
    endenum

    public enum SqlDatabaseType
        SQLServer,          1
        MySQL,              2
        PostgreSQL,         3
    endenum

    public class CodeGenTaskSet

.region "Constructors"

        public method CodeGenTaskSet
        proc
            mMessages = new ObservableCollection<LogEntry>()

            ;;Whenever a new task is added, set it's logging level to the task set logging level
            this.Tasks.CollectionChanged += tasksChanged

        endmethod

.endregion

.region "Public properties"

.region "Configuration properties - serialized"

        ;;; <summary>
        ;;; Continue processing even after an error.
        ;;; Setting this property to true is equivalent to using the -c command line option.
        ;;; </summary>
        public readwrite property ContinueAfterError, Boolean

        ;;; <summary>
        ;;; Database to target (with the SQL_ field loop replacement tokens).
        ;;; Setting this property is equivalent to using the -database command line option.
        ;;; The default database targeted is Microsoft SQL Server.
        ;;; </summary>
        public readwrite property DatabaseType, SqlDatabaseType, SqlDatabaseType.SQLServer

        ;;;	<summary>
        ;;;	The name of a custom data mappings file to be used.
        ;;; Setting this property is equivalent to using the -cdm command line option.
        ;;;	</summary>
        public readwrite property DataMappingsFile, String, String.Empty

        ;;; <summary>
        ;;;	Defined identifiers.
        ;;; Adding values to this collection is equivalent to using the -define command line option.
        ;;; </summary>
        public readwrite property Defines, @ObservableCollection<String>, new ObservableCollection<String>()

        ;;;	<summary>
        ;;;	Description of the task set.
        ;;;	</summary>
        public readwrite property Description, String, String.Empty

        ;;; <summary>
        ;;; Echo the command line to the output log.
        ;;; Setting this property to true is equivalent to using the -e command line option.
        ;;; </summary>
        public readwrite property EchoCommands, Boolean

        ;;;	<summary>
        ;;;	List the names of the output files generated.
        ;;; Setting this property to true is equivalent to using the -lf command line option.
        ;;;	</summary>
        public readwrite property ListGeneratedFiles, Boolean

        ;;;	<summary>
        ;;;	The logging level to use during processing.
        ;;; Setting this property is equivalent to using command line options -v or -d.
        ;;;	</summary>
        public readwrite property LoggingLevel, LoggingLevel, LoggingLevel.Normal

        ;;; <summary>
        ;;; Write the results of tokenization to a log file.
        ;;; Setting this property to true is equivalent to using the -dt command line option.
        ;;; </summary>
        public readwrite property LogTokenizerResults, Boolean

        ;;; <summary>
        ;;; The method catalog instance on which code generation is currently based.
        ;;; </summary>
        public readwrite property MethodCatalog, @Smc

        private mOutputFolder, String, String.Empty

        ;;;	<summary>
        ;;;	The folder where output files should be created (optional).
        ;;; Setting this property is equivalent to using the -o command line option.
        ;;; If not set then the location specified by the environment variable CODEGEN_OUTDIR will be used.
        ;;;	</summary>
        public property OutputFolder, String
            method get
            proc
                mreturn mOutputFolder
            endmethod
            method set
            proc
                mOutputFolder = value?.Trim()
                if (!String.IsNullOrWhiteSpace(mOutputFolder) && !mOutputFolder.EndsWith(":") && !mOutputFolder.EndsWith(Path.DirectorySeparatorChar.ToString()))
                    mOutputFolder += Path.DirectorySeparatorChar
            endmethod
        endproperty

        ;;;	<summary>
        ;;;	The repository main file to use (optional).
        ;;;	</summary>
        public readwrite property RepositoryMainFile, String, String.Empty

        ;;;	<summary>
        ;;;	The repository text file to use (optional).
        ;;;	</summary>
        public readwrite property RepositoryTextFile, String, String.Empty

        private mTemplateFolder, String, String.Empty

        ;;;	<summary>
        ;;;	The folder containing template files (optional).
        ;;; Setting this property is equivalent to using the -i command line option.
        ;;; If not set then the location specified by the environment variable CODEGEN_TPLDIR will be used.
        ;;; </summary>
        public property TemplateFolder, String
            method get
            proc
                mreturn mTemplateFolder
            endmethod
            method set
            proc
                mTemplateFolder = value.Trim()
                if (!String.IsNullOrWhiteSpace(mTemplateFolder) && !mTemplateFolder.EndsWith(":") && !mTemplateFolder.EndsWith(Path.DirectorySeparatorChar.ToString()))
                    mTemplateFolder += Path.DirectorySeparatorChar
            endmethod
        endproperty

        ;;; <summary>
        ;;; Should some errors be re-thrown to a assist with debugginh
        ;;; </summary>
        public readwrite property ThrowOnError, boolean

        ;;;	<summary>
        ;;;	The tasks to be processed by the task set.
        ;;;	</summary>
        public readonly property Tasks, @ObservableCollection<CodeGenTask>, new ObservableCollection<CodeGenTask>()

.endregion

.region "Status properties - not serialized"

        private mMessages, @ObservableCollection<LogEntry>

        {JsonIgnore}
        public property Messages, @ObservableCollection<LogEntry>
            method get
            proc
                mreturn mMessages
            endmethod
        endproperty

        private mComplete, Boolean, false

        {JsonIgnore}
        public property Complete, Boolean
            method get
            proc
                mreturn mComplete
            endmethod
            internal method set
            proc
                mComplete = value
            endmethod
        endproperty

        private mLastErrorMessage, String, String.Empty

        {JsonIgnore}
        public property LastErrorMessage, String
            method get
            proc
                mreturn mLastErrorMessage
            endmethod
            method set
            proc
                mLastErrorMessage = value
            endmethod
        endproperty

.endregion

.endregion

.region "Events"

        public delegate StartingTaskSetEventHandler, void
            taskset, @CodeGenTaskSet
        enddelegate

        public delegate TaskSetCompleteEventHandler, void
            taskset, @CodeGenTaskSet
        enddelegate

        public event StartingTaskSet, @StartingTaskSetEventHandler
        public event TaskSetComplete, @TaskSetCompleteEventHandler

        internal method RaiseStartingTaskSet, void
        proc
            if (StartingTaskSet!=^null)
                raiseevent(StartingTaskSet,this)
        endmethod

        internal method RaiseTaskSetComplete, void
        proc
            if (TaskSetComplete!=^null)
                raiseevent(TaskSetComplete,this)
        endmethod

.endregion

.region "Private methods"

        private method tasksChanged, void
            sender, @Object
            e, @NotifyCollectionChangedEventArgs 
        proc
            ;;Tell the task who it's "parent" task set is
            if (e.Action==NotifyCollectionChangedAction.Add)
            begin
                data newTask, @CodeGenTask
                foreach newTask in e.NewItems
                    newTask.TaskSet = this
            end
        endmethod

.endregion

.region "Internal methods"

        internal method Log, void
            required in text, String
        proc
            Messages.Add(new LogEntry(text))
        endmethod

        internal method Log, void
            required in text, String
            required in blankLineBefore, boolean
            required in blankLineAfter, boolean
        proc
            if (blankLineBefore)
                Messages.Add(new LogEntry(""))
            Messages.Add(new LogEntry(text))
            if (blankLineAfter)
                Messages.Add(new LogEntry(""))
        endmethod

        internal method VerboseLog, void
            required in text, String
            required in blankLineBefore, boolean
            required in blankLineAfter, boolean
        proc
            if ((int)this.LoggingLevel>=(int)LoggingLevel.Verbose)
            begin
                if (blankLineBefore)
                    Messages.Add(new LogEntry(""))
                Messages.Add(new LogEntry(text))
                if (blankLineAfter)
                    Messages.Add(new LogEntry(""))
            end
        endmethod

        internal method VerboseLog	, void
            required in text, String
        proc
            if ((int)this.LoggingLevel>=(int)LoggingLevel.Verbose)
                Messages.Add(new LogEntry(text))
        endmethod

        internal method ErrorLog, boolean
            required in text, String
        proc
            Messages.Add(new LogEntry(String.Format("ERROR: {0}",text)))
            LastErrorMessage = text
            mreturn true
        endmethod

        internal method Warning, void
            required in text, String
        proc
            Messages.Add(new LogEntry(String.Format("WARNING: {0}",text)))
        endmethod

        internal method DebugLog, void
            required in text, String
            required in blankLineBefore, boolean
            required in blankLineAfter, boolean
        proc
            if ((int)this.LoggingLevel>=(int)LoggingLevel.Debug)
            begin
                if (blankLineBefore)
                    Messages.Add(new LogEntry(""))
                Messages.Add(new LogEntry(text))
                if (blankLineAfter)
                    Messages.Add(new LogEntry(""))
            end
        endmethod

        internal method DebugLog, void
            required in text, String
        proc
            if ((int)this.LoggingLevel>=(int)LoggingLevel.Debug)
                Messages.Add(new LogEntry(text))
        endmethod

        internal method DevDebugLog, void
            required in text, String
        proc
            if (this.LoggingLevel==LoggingLevel.DeveloperDebug)
                Messages.Add(new LogEntry(String.Format("DEVDBG: {0}",text)))
        endmethod

.endregion

.region "Public methods"

        public method SaveToFile, boolean
            required in fileSpec, String
        proc
            try
            begin
                data jsonData = JsonConvert.SerializeObject
                &    (
                &       this,
                &       Formatting.Indented,
                &       new JsonSerializerSettings() {DefaultValueHandling = DefaultValueHandling.Include}
                &    )
                File.WriteAllText(fileSpec, jsonData)
                mreturn true
            end
            catch (e, @Exception)
            begin
                mreturn false
            end
            endtry
        endmethod

        public static method LoadFromFile, boolean
            required in fileSpec, String
            required out taskSet, @CodeGenTaskSet
        proc
            data ok = true
            try
            begin
                data jsonData = File.ReadAllText(fileSpec)
                taskSet = JsonConvert.DeserializeObject<CodeGenTaskSet>(
                &    jsonData,
                &    new JsonSerializerSettings() {DefaultValueHandling = DefaultValueHandling.Populate}
                &    )
                mreturn true
            end
            catch (ex, @Exception)
            begin
                ;;Just return a fail status
            end
            endtry
            mreturn false
        endmethod

.endregion

    endclass

endnamespace
