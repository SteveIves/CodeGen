;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluatorParameterLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates parameter loop expression nodes
;; 
;;  Date:        21st March 2018
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2018, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI
import System.IO
import CodeGen.MethodCatalogAPI

namespace CodeGen.Engine

    public partial class ExpressionEvaluator

        private parameterLoopExpressionEvaluators, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>

        private method registerParameterLoopExpressions, void
        proc
            parameterLoopExpressionEvaluators = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>()
            parameterLoopExpressionEvaluators.Add("COMMENT", evaluateParameterComment)
            parameterLoopExpressionEvaluators.Add("DATATABLE", evaluateParameterDataTable)

            parameterLoopExpressionEvaluators.Add("DATE", evaluateParameterDate)
            parameterLoopExpressionEvaluators.Add("DATE_YYYYMMDD", evaluateParameterDateType)
            parameterLoopExpressionEvaluators.Add("DATE_YYMMDD", evaluateParameterDateType)
            parameterLoopExpressionEvaluators.Add("DATE_YYJJJ", evaluateParameterDateType)
            parameterLoopExpressionEvaluators.Add("DATE_YYYYJJJ", evaluateParameterDateType)
            parameterLoopExpressionEvaluators.Add("DATE_YYYYMMDDHHMMSS", evaluateParameterDateType)

            parameterLoopExpressionEvaluators.Add("TIME", evaluateParameterTime)
            parameterLoopExpressionEvaluators.Add("TIME_HHMM", evaluateParameterTimeType)
            parameterLoopExpressionEvaluators.Add("TIME_HHMMSS", evaluateParameterTimeType)

            parameterLoopExpressionEvaluators.Add("DATEORTIME", evaluateParameterDateOrTime)

            ;;Parameter required
            parameterLoopExpressionEvaluators.Add("REQUIRED", evaluateParameterRequired)
            parameterLoopExpressionEvaluators.Add("OPTIONAL", evaluateParameterRequired)

            ;;Parameter direction
            parameterLoopExpressionEvaluators.Add("IN", evaluateParameterDirection)
            parameterLoopExpressionEvaluators.Add("INOUT", evaluateParameterDirection)
            parameterLoopExpressionEvaluators.Add("IN_OR_INOUT", evaluateParameterDirection)
            parameterLoopExpressionEvaluators.Add("OUT", evaluateParameterDirection)
            parameterLoopExpressionEvaluators.Add("OUT_OR_INOUT", evaluateParameterDirection)

            ;;Parameter quantity
            parameterLoopExpressionEvaluators.Add("MORE_IN_OR_INOUT", evaluateParameterQuantity)
            parameterLoopExpressionEvaluators.Add("MORE_OUT_OR_INOUT", evaluateParameterQuantity)

            ;;Parameter passing mechanism
            parameterLoopExpressionEvaluators.Add("DESCRIPTOR", evaluateParameterPassedBy)
            parameterLoopExpressionEvaluators.Add("REFERENCE", evaluateParameterPassedBy)
            parameterLoopExpressionEvaluators.Add("VALUE", evaluateParameterPassedBy)

            ;;Parameter type
            parameterLoopExpressionEvaluators.Add("ALPHA", evaluateParameterType)
            parameterLoopExpressionEvaluators.Add("BINARY_HANDLE", evaluateParameterType)
            parameterLoopExpressionEvaluators.Add("DECIMAL", evaluateParameterType)
            parameterLoopExpressionEvaluators.Add("ENUM", evaluateParameterType)
            parameterLoopExpressionEvaluators.Add("HANDLE", evaluateParameterType)
            parameterLoopExpressionEvaluators.Add("IMPLIED", evaluateParameterType)
            parameterLoopExpressionEvaluators.Add("INTEGER", evaluateParameterType)
            parameterLoopExpressionEvaluators.Add("STRING", evaluateParameterType)
            parameterLoopExpressionEvaluators.Add("STRUCTURE", evaluateParameterType)

            ;;Parameter type coercion
            parameterLoopExpressionEvaluators.Add("COERCE", evaluateParameterCoerce)
            parameterLoopExpressionEvaluators.Add("COERCE_BOOLEAN", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_BYTE", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_DATETIME", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_DATETIME_NULLABLE", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_DECIMAL", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_DECIMAL_NULLABLE", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_DOUBLE", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_FLOAT", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_INT", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_LONG", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_SBYTE", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_SHORT", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_UINT", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_ULONG", evaluateParameterCoerceType)
            parameterLoopExpressionEvaluators.Add("COERCE_USHORT", evaluateParameterCoerceType)

            ;;Parameter collection types
            parameterLoopExpressionEvaluators.Add("COLLECTION", evaluateParameterCollection)
            parameterLoopExpressionEvaluators.Add("COLLECTION_ARRAY", evaluateParameterCollection)
            parameterLoopExpressionEvaluators.Add("COLLECTION_HANDLE", evaluateParameterCollection)
            parameterLoopExpressionEvaluators.Add("COLLECTION_ARRAYLIST", evaluateParameterCollection)

            ;;Special processing tokens
            parameterLoopExpressionEvaluators.Add("FIRST_INSTANCE_OF_ENUM", evaluateParameterFirstInstanceOfEnum)
            parameterLoopExpressionEvaluators.Add("FIRST_INSTANCE_OF_STRUCTURE", evaluateParameterFirstInstanceOfStructure)
            parameterLoopExpressionEvaluators.Add("FIRST_INSTANCE_OF_STRUCTURE2", evaluateParameterFirstInstanceOfStructure2)
        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="tkn"></param>
        ;;; <param name="template"></param>
        ;;; <param name="loops"></param>
        ;;; <param name="specific"></param>
        ;;; <returns></returns>
        public static method EvaluateParameterLoopExpression, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<SmcInterface, SmcMethod, SmcParameter, int, boolean> 
        proc
            lambda isParameterLoop(node) (node .is. ParameterLoopNode)
            data loop, @ParameterLoopNode, ^as(loops.First(isParameterLoop), ParameterLoopNode)
            mreturn specific(loop.CurrentInterface, loop.CurrentMethod, loop.CurrentParameter, loop.CurrentIndex)
        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------

        private static method evaluateParameterComment, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, param, index) (!String.IsNullOrWhiteSpace(param.Comment))
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterDataTable, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, param, index) (param.DataTable == true)
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterDate, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, param, index) (param.DateFormat == DateFormat.YYJJJ || param.DateFormat == DateFormat.YYMMDD || param.DateFormat == DateFormat.YYYYJJJ || param.DateFormat == DateFormat.YYYYMMDD || param.DateFormat == DateFormat.YYYYMMDDHHMISS)
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterDateType, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            data searchForType, DateFormat
            using tkn.Value select
            ("DATE_YYYYMMDD"),
                searchForType = DateFormat.YYYYMMDD
            ("DATE_YYMMDD"),
                searchForType = DateFormat.YYMMDD
            ("DATE_YYJJJ"),
                searchForType = DateFormat.YYJJJ
            ("DATE_YYYYJJJ"),
                searchForType = DateFormat.YYYYJJJ
            ("DATE_YYYYMMDDHHMMSS"),
                searchForType = DateFormat.YYYYMMDDHHMISS
            endusing
            lambda doEvaluate(iface, meth, param, index) (param.DateFormat == searchForType)
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterTime, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, param, index) (param.DateFormat == DateFormat.HHMM || param.DateFormat == DateFormat.HHMMSS)
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterTimeType, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            data searchForType, DateFormat
            using tkn.Value select
            ("TIME_HHMM"),
                searchForType = DateFormat.HHMM
            ("TIME_HHMMSS"),
                searchForType = DateFormat.HHMMSS
            endusing
            lambda doEvaluate(iface, meth, param, index) (param.DateFormat == searchForType)
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterDateOrTime, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, param, index) (param.DateFormat == DateFormat.YYJJJ || param.DateFormat == DateFormat.YYMMDD || param.DateFormat == DateFormat.YYYYJJJ || param.DateFormat == DateFormat.YYYYMMDD || param.DateFormat == DateFormat.YYYYMMDDHHMISS || param.DateFormat == DateFormat.HHMM || param.DateFormat == DateFormat.HHMMSS)
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterRequired, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            data searchForType, boolean
            using tkn.Value select
            ("REQUIRED"),
                searchForType = true
            ("OPTIONAL"),
                searchForType = false
            endusing
            lambda doEvaluate(iface, meth, param, index) (param.Required == searchForType)
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterDirection, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, param, index)
            begin
                using tkn.Value select
                ("IN_OR_INOUT"),
                    mreturn param.Direction == ParameterDirection.In || param.Direction == ParameterDirection.InOut
                ("INOUT"),
                    mreturn param.Direction == ParameterDirection.InOut
                ("IN"),
                    mreturn param.Direction == ParameterDirection.In
                ("OUT_OR_INOUT"),
                    mreturn param.Direction == ParameterDirection.Out || param.Direction == ParameterDirection.InOut
                ("OUT"),
                    mreturn param.Direction == ParameterDirection.Out
                endusing
            end
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterQuantity, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, param, index)
            begin
                using tkn.Value select
                ("MORE_IN_OR_INOUT"),
                begin
                    if (index + 1 < meth.Parameters.Count)
                    begin
                        data ix, int
                        for ix from index + 1 thru meth.Parameters.Count -1
                        begin
                            if (meth.Parameters[ix].Direction == ParameterDirection.In || meth.Parameters[ix].Direction == ParameterDirection.InOut)
                            begin
                                mreturn true
                            end
                        end
                    end
                    mreturn false
                end
                ("MORE_OUT_OR_INOUT"),
                begin
                    if (index + 1 < meth.Parameters.Count)
                    begin
                        data ix, int
                        for ix from index + 1 thru meth.Parameters.Count -1
                        begin
                            if (meth.Parameters[ix].Direction == ParameterDirection.Out || meth.Parameters[ix].Direction == ParameterDirection.InOut)
                            begin
                                mreturn true
                            end
                        end
                    end
                    mreturn false
                end
                endusing
            end
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterPassedBy, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            data searchForType, ParameterPassBy
            using tkn.Value select
            ("DESCRIPTOR"),
                searchForType = ParameterPassBy.Descriptor
            ("REFERENCE"),
                searchForType = ParameterPassBy.Reference
            ("VALUE"),
                searchForType = ParameterPassBy.Value
            endusing
            lambda doEvaluate(iface, meth, param, index) (param.PassBy == searchForType)
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------

        private static method evaluateParameterType, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, param, index)
            begin
                using tkn.Value select
                ("ALPHA"),
                    mreturn param.Type == ParameterType.Alpha
                ("BINARY_HANDLE"),
                    mreturn param.Type == ParameterType.BinaryHandle
                ("DECIMAL"),
                    mreturn param.Type == ParameterType.Decimal && param.DateFormat == DateFormat.None
                ("ENUM"),
                    mreturn param.Type == ParameterType.Enumeration
                ("HANDLE"),
                    mreturn param.Type == ParameterType.Handle
                ("IMPLIED"),
                    mreturn param.Type == ParameterType.ImpliedDecimal
                ("INTEGER"),
                    mreturn param.Type == ParameterType.Integer
                ("STRING"),
                    mreturn param.Type == ParameterType.String
                ("STRUCTURE"),
                    mreturn param.Type == ParameterType.Structure
                endusing
            end
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterCoerce, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, param, index) (param.CoerceType != CoerceType.None)
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterCoerceType, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            data searchForType, CoerceType
            using tkn.Value select
            ("COERCE_BOOLEAN"),
                searchForType = CoerceType.Boolean
            ("COERCE_BYTE"),
                searchForType = CoerceType.Byte
            ("COERCE_DATETIME"),
                searchForType = CoerceType.DateTime
            ("COERCE_DATETIME_NULLABLE"),
                searchForType = CoerceType.DateTimeNullable
            ("COERCE_DECIMAL"),
                searchForType = CoerceType.Decimal
            ("COERCE_DECIMAL_NULLABLE"),
                searchForType = CoerceType.DecimalNullable
            ("COERCE_DOUBLE"),
                searchForType = CoerceType.Double
            ("COERCE_FLOAT"),
                searchForType = CoerceType.Float
            ("COERCE_INT"),
                searchForType = CoerceType.Int
            ("COERCE_LONG"),
                searchForType = CoerceType.Long
            ("COERCE_SBYTE"),
                searchForType = CoerceType.Sbyte
            ("COERCE_SHORT"),
                searchForType = CoerceType.Short
            ("COERCE_UINT"),
                searchForType = CoerceType.Uint
            ("COERCE_ULONG"),
                searchForType = CoerceType.Ulong
            ("COERCE_USHORT"),
                searchForType = CoerceType.Ushort
            endusing
            lambda doEvaluate(iface, meth, param, index) (param.CoerceType == searchForType)
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterCollection, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, param, index)
            begin
                using tkn.Value select
                ("COLLECTION_ARRAY"),
                    mreturn param.CollectionType == ParameterCollectionType.Array
                ("COLLECTION_HANDLE"),
                    mreturn param.CollectionType == ParameterCollectionType.MemoryHandle
                ("COLLECTION_ARRAYLIST"),
                    mreturn param.CollectionType == ParameterCollectionType.ArrayList
                ("COLLECTION"),
                    mreturn param.CollectionType != ParameterCollectionType.None
                endusing
            end
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterFirstInstanceOfStructure, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, param, index)
            begin
                lambda isParameterLoop(node) (node .is. ParameterLoopNode)
                data loop, @ParameterLoopNode, ^as(loops.First(isParameterLoop), ParameterLoopNode)
                mreturn loop.FirstStructureInstanceInMethod
            end
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterFirstInstanceOfStructure2, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, param, index)
            begin
                lambda isParameterLoop(node) (node .is. ParameterLoopNode)
                data loop, @ParameterLoopNode, ^as(loops.First(isParameterLoop), ParameterLoopNode)
                mreturn loop.FirstStructureInstanceInInterface
            end
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateParameterFirstInstanceOfEnum, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, param, index)
            begin
                lambda isParameterLoop(node) (node .is. ParameterLoopNode)
                data loop, @ParameterLoopNode, ^as(loops.First(isParameterLoop), ParameterLoopNode)
                mreturn loop.FirstEnumInstance
            end
            mreturn EvaluateParameterLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

    endclass

endnamespace
