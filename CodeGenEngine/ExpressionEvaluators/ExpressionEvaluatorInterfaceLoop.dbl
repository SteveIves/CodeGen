;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluatorInterfaceLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates interface loop expression nodes
;; 
;;  Date:        21st March 2018
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2018, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI
import System.IO
import CodeGen.MethodCatalogAPI

.array 0

namespace CodeGen.Engine

    public partial class ExpressionEvaluator

        private interfaceLoopExpressionEvaluators, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>

        private method registerInterfaceLoopExpressions, void
        proc
            interfaceLoopExpressionEvaluators = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>()
;           interfaceLoopExpressionEvaluators.Add("METHOD_COMMENT", evaluateInterface???)
        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="tkn"></param>
        ;;; <param name="template"></param>
        ;;; <param name="loops"></param>
        ;;; <param name="specific"></param>
        ;;; <returns></returns>
        public static method EvaluateInterfaceLoopExpression, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<SmcInterface, int, boolean> 
        proc
            lambda isInterfaceLoop(node) (node .is. InterfaceLoopNode)
            data loop, @InterfaceLoopNode, ^as(loops.First(isInterfaceLoop), InterfaceLoopNode)
            mreturn specific(loop.CurrentInterface, loop.CurrentIndex)
        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------

;       private static method evaluateInterfaceComment, boolean
;           tkn, @Token
;           template, @FileNode 
;           loops, @IEnumerable<LoopNode> 
;       proc
;           lambda doEvaluate(iface, index) (iface.???))
;           mreturn EvaluateInterfaceLoopExpression(tkn, template, loops, doEvaluate)
;   endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------
        ;; Custom interface loop expressions

        private static method evaluateInterfaceCustom, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc

            lambda doEvaluate(iface, index)
            begin
                ;;Does this interface have any custom expressions?
                if (iface.CustomExpressionTokens != ^null)
                begin
                    ;; Extract the search text from the token
                    data searchText, string, tkn.Value.ToUpper().Replace("CUSTOM_INTERFACE_", "")

                    ;; Make sure we have search text
                    if (String.IsNullOrWhiteSpace(searchText))
                        throw new ApplicationException(String.Format("Invalid custom interface loop expression token {0} at line {1} in template {2}", tkn.Value, tkn.StartLineNumber, template.Context.CurrentTemplateBaseName))

                    ;; Is it there?
                    mreturn (iface.CustomExpressionTokens.IndexOf(searchText) != -1)
                end

                mreturn false
            end

            ;; We get here for any custom interface loop expression <IF CUSTOM_INTERFACE_token> and we are looking for token
            ;to be present or not in the current interfaces CustomTokens array.
            mreturn EvaluateInterfaceLoopExpression(tkn, template, loops, doEvaluate)

        endmethod

    endclass

endnamespace
