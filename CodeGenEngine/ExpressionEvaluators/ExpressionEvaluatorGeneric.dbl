;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluatorGeneric.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates generic expression nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import CodeGen.RepositoryAPI
import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks

.array 0

namespace CodeGen.Engine

    public partial class ExpressionEvaluator

        genericExpressionEvaluators, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>

        private method registerGenericExpressions, void

        proc

            genericExpressionEvaluators = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>()

            ;;Greneric Expressions

            genericExpressionEvaluators.Add("COUNTER_1", evaluateCounter1)
            genericExpressionEvaluators.Add("COUNTER_2", evaluateCounter2)
            genericExpressionEvaluators.Add("DATABASE_MYSQL", evaluateDatabase)
            genericExpressionEvaluators.Add("DATABASE_POSTGRESQL", evaluateDatabase)
            genericExpressionEvaluators.Add("DATABASE_SQLSERVER", evaluateDatabase)
            genericExpressionEvaluators.Add("DEBUG_LOGGING", evaluateVerboseLogging)
            genericExpressionEvaluators.Add("ENUMS", evaluateEnums)
            genericExpressionEvaluators.Add("FIELD_PREFIX", evaluateFieldPrefix)
            genericExpressionEvaluators.Add("FIELD_SUBSET", evaluateFieldSubset)
            genericExpressionEvaluators.Add("MULTIPLE_STRUCTURES", evaluateMultipleStructures)
            genericExpressionEvaluators.Add("NAMESPACE", evaluateNamespace)
            genericExpressionEvaluators.Add("NOT_COUNTER_1", evaluateNotCounter1)
            genericExpressionEvaluators.Add("NOT_COUNTER_2", evaluateNotCounter2)
            genericExpressionEvaluators.Add("VERBOSE_LOGGING", evaluateVerboseLogging)

            ;;Structure expressions

            genericExpressionEvaluators.Add("STRUCTURE_ASCII", evaluateStructureAscii)
            genericExpressionEvaluators.Add("STRUCTURE_FILES", evaluateStructureFiles)
            genericExpressionEvaluators.Add("STRUCTURE_HAS_UNIQUE_KEY", evaluateStructureHasUniqueKey)
            genericExpressionEvaluators.Add("STRUCTURE_HAS_UNIQUE_PK", evaluateStructureHasUniquePk)
            genericExpressionEvaluators.Add("STRUCTURE_ISAM", evaluateStructureIsam)
            genericExpressionEvaluators.Add("STRUCTURE_KEYS", evaluateStructureKeys)
            genericExpressionEvaluators.Add("STRUCTURE_LDESC", evaluateStructureLongDesc)
            genericExpressionEvaluators.Add("STRUCTURE_MAPPED", evaluateStructureMapped)
            genericExpressionEvaluators.Add("STRUCTURE_MULTIPLE_TAGS", evaluateStructureMultipleTags)
            genericExpressionEvaluators.Add("STRUCTURE_PII_FIELDS", evaluateStructurePiiFields)
            genericExpressionEvaluators.Add("STRUCTURE_RELATIONS", evaluateStructureRelations)
            genericExpressionEvaluators.Add("STRUCTURE_RELATIVE", evaluateStructureRelative)
            genericExpressionEvaluators.Add("STRUCTURE_TAGS", evaluateStructureTags)
            genericExpressionEvaluators.Add("STRUCTURE_SINGLE_TAG", evaluateStructureSingleTag)
            genericExpressionEvaluators.Add("STRUCTURE_USER>DEFINED", evaluateStructureUserDefined)
            genericExpressionEvaluators.Add("STRUCTURE_UTEXT", evaluateStructureUserText)

        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------
        ;; Counter expressions

        private static method evaluateCounter1, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn (template.Context.Counter1 != 0)
        endmethod

        private static method evaluateCounter2, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn (template.Context.Counter2 != 0)
        endmethod

        private static method evaluateCounterValue, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            data tokenText = tkn.Value
            data tokenValue = 0
            data counterValue = 0

            if (tokenText.StartsWith("COUNTER_1_")) then
            begin
                tokenText = tokenText.Replace("COUNTER_1_","")
                counterValue = template.Context.Counter1
            end
            else if (tokenText.StartsWith("COUNTER_2_")) then
            begin
                tokenText = tokenText.Replace("COUNTER_2_","")
                counterValue = template.Context.Counter2
            end
            else
                throw new ApplicationException("Invalid counter expression " + tkn.Value)

            using (tokenText.Substring(0,3)) select
            ("EQ_"),
            begin
                if (int.TryParse(tokenText.Replace("EQ_",""),tokenValue))
                    mreturn (counterValue == tokenValue)
            end
            ("NE_"),
            begin
                if (int.TryParse(tokenText.Replace("NE_",""),tokenValue))
                    mreturn (counterValue != tokenValue)
            end
            ("GT_"),
            begin
                if (int.TryParse(tokenText.Replace("GT_",""),tokenValue))
                    mreturn (counterValue > tokenValue)
            end
            ("LT_"),
            begin
                if (int.TryParse(tokenText.Replace("LT_",""),tokenValue))
                    mreturn (counterValue < tokenValue)
            end
            ("GE_"),
            begin
                if (int.TryParse(tokenText.Replace("GE_",""),tokenValue))
                    mreturn (counterValue >= tokenValue)
            end
            ("LE_"),
            begin
                if (int.TryParse(tokenText.Replace("LE_",""),tokenValue))
                    mreturn (counterValue <= tokenValue)
            end
            ("DB_"),
            begin
                if (int.TryParse(tokenText.Replace("DB_",""),tokenValue))
                    mreturn ((counterValue .mod. tokenValue) == 0)
            end
            endusing

            throw new ApplicationException("Invalid counter expression " + tkn.Value)

        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------

        private static method evaluateDatabase, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            using tkn.Value select
            ("DATABASE_MYSQL"),
                mreturn (template.Context.Taskset.DatabaseType == SqlDatabaseType.MySQL)
            ("DATABASE_POSTGRESQL"),
                mreturn (template.Context.Taskset.DatabaseType == SqlDatabaseType.PostgreSQL)
            ("DATABASE_SQLSERVER"),
                mreturn (template.Context.Taskset.DatabaseType == SqlDatabaseType.SQLServer)
            endusing
            mreturn false
        endmethod

        private static method evaluateDebugLogging, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn (template.Context.DebugLoggingEnabled)
        endmethod

        private static method evaluateFieldPrefix, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn (!string.IsNullOrWhiteSpace(template.Context.CurrentTask.FieldPrefix))
        endmethod

        private static method evaluateFieldSubset, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn (!string.IsNullOrWhiteSpace(template.Context.CurrentTask.Subset) || (template.Context.CurrentTask.SubsetFields.Count > 0))
        endmethod

        private static method evaluateMultipleStructures, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn (template.Context.MultiStructureMode)
        endmethod

        private static method evaluateNamespace, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn (!String.IsNullOrWhiteSpace(template.Context.Namespace))
        endmethod

        private static method evaluateNotCounter1, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn (template.Context.Counter1 == 0)
        endmethod

        private static method evaluateNotCounter2, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn (template.Context.Counter2 == 0)
        endmethod

        private static method evaluateVerboseLogging, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn (template.Context.VerboseLoggingEnabled)
        endmethod

        private static method evaluateEnums, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            mreturn (template.Context.Repository != ^null ? (template.Context.Repository.Enumerations.Count > 0) : false)
        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------
        ;; Structure expressions

        private static method evaluateStructureAscii, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str) (str.FileType=="ASCII")
            mreturn evaluateStructureExpression(tkn, template, loops, doEvaluate)
        endmethod
        private static method evaluateStructureFiles, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str) (str.Files.Count > 0)
            mreturn evaluateStructureExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateStructureHasUniqueKey, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str) (str.Keys.Any(lambda (k) {k.Duplicates == RpsKeyDuplicates.NoDuplicates}))
            mreturn evaluateStructureExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateStructureHasUniquePk, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str) ((str.Keys.Count > 0) && (str.Keys[0].Duplicates == RpsKeyDuplicates.NoDuplicates))
            mreturn evaluateStructureExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateStructureIsam, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str) (str.FileType=="DBL ISAM")
            mreturn evaluateStructureExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateStructureRelations, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str) (str.Relations.Count > 0)
            mreturn evaluateStructureExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateStructureRelative, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str) (str.FileType=="RELATIVE")
            mreturn evaluateStructureExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateStructureTags, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str) (str.Tags.Count > 0)
            mreturn evaluateStructureExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateStructureMultipleTags, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str) (str.Tags.Count > 1)
            mreturn evaluateStructureExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateStructurePiiFields, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str)
            begin
                data results = 0
                data fld, @RpsField
                foreach fld in str.Fields
                begin
                    if (fld.LongDescription.Contains("PII_TYPE=")) then
                    begin
                        data startPos = fld.LongDescription.IndexOf("PII_TYPE=")
                        data semiPos = -1
                        if (startPos!=-1)
                            semiPos = fld.LongDescription.IndexOf(";",startPos)
                        if ((startPos!=-1) && (semiPos!=-1) && (semiPos>(startPos+9)))
                            results += 1
                    end
                    else if (fld.UserText.Contains("PII_TYPE="))
                    begin
                        data startPos = fld.UserText.IndexOf("PII_TYPE=")
                        data semiPos = -1
                        if (startPos!=-1)
                            semiPos = fld.UserText.IndexOf(";",startPos)
                        if ((startPos!=-1) && (semiPos!=-1) && (semiPos>(startPos+9)))
                            results += 1
                    end
                end
                mreturn (results > 0)
            end
            mreturn evaluateStructureExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateStructureSingleTag, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str) (str.Tags.Count == 1)
            mreturn evaluateStructureExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateStructureUserDefined, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str) (str.FileType=="USER DEFINED")
            mreturn evaluateStructureExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateStructureUserText, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(str) (!String.IsNullOrWhiteSpace(str.UserText))
            mreturn evaluateStructureExpression(tkn, template, loops, doEvaluate)
        endmethod

    endclass

endnamespace
