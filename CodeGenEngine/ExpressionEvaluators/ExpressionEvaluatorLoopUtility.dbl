;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluatorLoopUtility.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates loop utility expression nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI
import System.IO

.array 0

namespace CodeGen.Engine

    public partial class ExpressionEvaluator

        loopUtilityExpressionEvaluators, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>

        private method registerLoopUtilityExpressions, void
            endparams
        proc

            loopUtilityExpressionEvaluators = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>()

            loopUtilityExpressionEvaluators.Add("FIRST", evaluateFirst)
            loopUtilityExpressionEvaluators.Add("LAST", evaluateLast)
            loopUtilityExpressionEvaluators.Add("MORE", evaluateMore)
            loopUtilityExpressionEvaluators.Add("NOMORE", evaluateNoMore)

        endmethod

        ;; *********************************************************************

        private static method evaluateFirst, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node) (node .is. LoopNode)
            data loop, @LoopNode, loops.Last(isLoopNode)
            mreturn (loop.CurrentIndex == 0)
        endmethod

        private static method evaluateLast, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node) (node .is. LoopNode)
            data loop, @LoopNode, loops.Last(isLoopNode)
            ;; Always return true if it's a <PRIMARY_KEY> block
            if (loop.OpenToken.Value == "PRIMARY_KEY") then
                mreturn true
            else
                mreturn (loop.CurrentIndex == loop.MaxIndex)
        endmethod

        private static method evaluateMore, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node) (node .is. LoopNode)
            data loop, @LoopNode, loops.Last(isLoopNode)
            ;; TODO: Should always return false if it's a primary key loop
            mreturn (loop.CurrentIndex < loop.MaxIndex)
        endmethod

        private static method evaluateNoMore, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node) (node .is. LoopNode)
            data loop, @LoopNode, loops.Last(isLoopNode)
            ;; TODO: Should always return true if it's a primary key loop
            mreturn (loop.CurrentIndex == loop.MaxIndex)
        endmethod

        ;; *********************************************************************

        private static method evaluateLoopProgress, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            ;This method will be called to evaluate the following expressions:
            ;
            ;<IF PROCESSED_EXCLUSIVE_operator_value>
            ;<IF PROCESSED_INCLUSIVE_operator_value>
            ;<IF REMAINING_EXCLUSIVE_operator_value>
            ;<IF REMAINING_INCLUSIVE_operator_value>
            ;
            ;Where operator can be one of EQ, NE, LT, GT, LE, GE and DB
            ;And where value is a numeric literal

            lambda isLoopNode(node) (node .is. LoopNode)
            data loop, @LoopNode, loops.Last(isLoopNode)

            data tokenText = tkn.Value
            data tokenValue = 0
            data progressValue = 0

            if (tokenText.StartsWith("PROCESSED_EXCLUSIVE_")) then
            begin
                tokenText = tokenText.Replace("PROCESSED_EXCLUSIVE_","")
                progressValue = loop.CurrentIndex
            end
            else if (tokenText.StartsWith("PROCESSED_INCLUSIVE_")) then
            begin
                tokenText = tokenText.Replace("PROCESSED_INCLUSIVE_","")
                progressValue = loop.CurrentIndex + 1
            end
            else if (tokenText.StartsWith("REMAINING_EXCLUSIVE_")) then
            begin
                tokenText = tokenText.Replace("REMAINING_EXCLUSIVE_","")
                progressValue = loop.MaxIndex - loop.CurrentIndex
            end
            else if (tokenText.StartsWith("REMAINING_INCLUSIVE_")) then
            begin
                tokenText = tokenText.Replace("REMAINING_INCLUSIVE_","")
                progressValue = loop.MaxIndex - loop.CurrentIndex + 1
            end
            else
                throw new ApplicationException("Invalid loop utility expression " + tkn.Value)

            using (tokenText.Substring(0,3)) select
            ("EQ_"),
            begin
                if (int.TryParse(tokenText.Replace("EQ_",""),tokenValue))
                    mreturn (progressValue == tokenValue)
            end
            ("NE_"),
            begin
                if (int.TryParse(tokenText.Replace("NE_",""),tokenValue))
                    mreturn (progressValue != tokenValue)
            end
            ("GT_"),
            begin
                if (int.TryParse(tokenText.Replace("GT_",""),tokenValue))
                    mreturn (progressValue > tokenValue)
            end
            ("LT_"),
            begin
                if (int.TryParse(tokenText.Replace("LT_",""),tokenValue))
                    mreturn (progressValue < tokenValue)
            end
            ("GE_"),
            begin
                if (int.TryParse(tokenText.Replace("GE_",""),tokenValue))
                    mreturn (progressValue >= tokenValue)
            end
            ("LE_"),
            begin
                if (int.TryParse(tokenText.Replace("LE_",""),tokenValue))
                    mreturn (progressValue <= tokenValue)
            end
            ("DB_"),
            begin
                if (int.TryParse(tokenText.Replace("DB_",""),tokenValue))
                    mreturn ((progressValue .mod. tokenValue) == 0)
            end
            endusing

            throw new ApplicationException("Invalid loop utility expression " + tkn.Value)

        endmethod

        private static method evaluateLoopTotalItems, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda isLoopNode(node) (node .is. LoopNode)
            data loop, @LoopNode, loops.Last(isLoopNode)

            ;This method will be called to evaluate <IF TOTAL_ITEMS_operator_value>
            ;Operator can be one of EQ, NE, LT, GT, LE and GE
            ;Value is a numeric literal

            data tokenText = tkn.Value.Replace("TOTAL_ITEMS_","")
            data tokenValue = 0
            data totalItems = loop.MaxIndex + 1

            using (tokenText.Substring(0,3)) select
            ("EQ_"),
            begin
                if (int.TryParse(tokenText.Replace("EQ_",""),tokenValue))
                    mreturn (totalItems == tokenValue)
            end
            ("NE_"),
            begin
                if (int.TryParse(tokenText.Replace("NE_",""),tokenValue))
                    mreturn (totalItems != tokenValue)
            end
            ("GT_"),
            begin
                if (int.TryParse(tokenText.Replace("GT_",""),tokenValue))
                    mreturn (totalItems > tokenValue)
            end
            ("LT_"),
            begin
                if (int.TryParse(tokenText.Replace("LT_",""),tokenValue))
                    mreturn (totalItems < tokenValue)
            end
            ("GE_"),
            begin
                if (int.TryParse(tokenText.Replace("GE_",""),tokenValue))
                    mreturn (totalItems >= tokenValue)
            end
            ("LE_"),
            begin
                if (int.TryParse(tokenText.Replace("LE_",""),tokenValue))
                    mreturn (totalItems <= tokenValue)
            end
            ("DB_"),
            begin
                if (int.TryParse(tokenText.Replace("DB_",""),tokenValue))
                    mreturn ((totalItems .mod. tokenValue) == 0)
            end
            endusing

            throw new ApplicationException("Invalid loop utility expression " + tkn.Value)

        endmethod

    endclass

endnamespace
