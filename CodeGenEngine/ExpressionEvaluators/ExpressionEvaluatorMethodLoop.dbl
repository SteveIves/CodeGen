;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluatorMethodLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates method loop expression nodes
;; 
;;  Date:        21st March 2018
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2018, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI
import System.IO
import CodeGen.MethodCatalogAPI

.array 0

namespace CodeGen.Engine

    public partial class ExpressionEvaluator

        private methodLoopExpressionEvaluators, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>

        private method registerMethodLoopExpressions, void
        proc
            methodLoopExpressionEvaluators = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>()
            methodLoopExpressionEvaluators.Add("COMMENT", evaluateMethodComment)
            methodLoopExpressionEvaluators.Add("ENCRYPT", evaluateMethodEncrypt)
            methodLoopExpressionEvaluators.Add("FUNCTION", evaluateMethodFunction)
            methodLoopExpressionEvaluators.Add("PARAMETERS", evaluateMethodParameters)
            methodLoopExpressionEvaluators.Add("SUBROUTINE", evaluateMethodSubroutine)
            methodLoopExpressionEvaluators.Add("VOID_SUBROUTINE",evaluateMethodVoidSubroutine)

            ;;Method return type
            methodLoopExpressionEvaluators.Add("ALPHA", evaluateMethodReturnType)
            methodLoopExpressionEvaluators.Add("DECIMAL", evaluateMethodReturnType)
            methodLoopExpressionEvaluators.Add("IMPLIED", evaluateMethodReturnType)
            methodLoopExpressionEvaluators.Add("INTEGER", evaluateMethodReturnType)
            methodLoopExpressionEvaluators.Add("HATVAL", evaluateMethodReturnType)
            methodLoopExpressionEvaluators.Add("STRING", evaluateMethodReturnType)
            methodLoopExpressionEvaluators.Add("ENUM", evaluateMethodReturnType)

            ;;Return type coercion
            methodLoopExpressionEvaluators.Add("COERCE", evaluateMethodReturnCoerced)
            methodLoopExpressionEvaluators.Add("COERCE_BOOLEAN", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_BYTE", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_DATETIME", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_DATETIME_NULLABLE", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_DECIMAL", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_DECIMAL_NULLABLE", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_DOUBLE", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_FLOAT", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_INT", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_LONG", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_SBYTE", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_SHORT", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_UINT", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_ULONG", evaluateMethodReturnCorecedType)
            methodLoopExpressionEvaluators.Add("COERCE_USHORT", evaluateMethodReturnCorecedType)

            ;;Parameter types
            methodLoopExpressionEvaluators.Add("IN", evaluateMethodParametersIn)
            methodLoopExpressionEvaluators.Add("INOUT", evaluateMethodParametersInOut)
            methodLoopExpressionEvaluators.Add("IN_OR_INOUT", evaluateMethodParametersInOrInOut)
            methodLoopExpressionEvaluators.Add("OUT", evaluateMethodParametersOut)
            methodLoopExpressionEvaluators.Add("OUT_OR_INOUT", evaluateMethodParametersOutOrInOut)
            methodLoopExpressionEvaluators.Add("RETURNS_DATA", evaluateMethodReturnsData)
            methodLoopExpressionEvaluators.Add("STRUCTURE_PARAMETERS", evaluateMethodStructureParameters)

        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="tkn"></param>
        ;;; <param name="template"></param>
        ;;; <param name="loops"></param>
        ;;; <param name="specific"></param>
        ;;; <returns></returns>
        public static method EvaluateMethodLoopExpression, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<SmcInterface, SmcMethod, int, boolean> 
        proc
            lambda isMethodLoop(node) (node .is. MethodLoopNode)
            data loop, @MethodLoopNode, ^as(loops.First(isMethodLoop), MethodLoopNode)
            mreturn specific(loop.CurrentInterface, loop.CurrentMethod, loop.CurrentIndex)
        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------

        private static method evaluateMethodComment, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index) (!String.IsNullOrWhiteSpace(meth.Comment))
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodEncrypt, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index) (meth.Encrypt)
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodFunction, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index) (meth.MethodType == MethodType.Function)
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodParameters, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index) (meth.Parameters.Count > 0)
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodSubroutine, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index) (meth.MethodType == MethodType.Subroutine)
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodVoidSubroutine, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index) (meth.MethodType == MethodType.Subroutine && meth.Parameters.Count == 0)
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodReturnType, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            data searchForType, ReturnType 
            using tkn.Value select
            ("ALPHA"),
                searchForType = ReturnType.Alpha
            ("DECIMAL"),
                searchForType = ReturnType.Decimal
            ("ENUM"),
                searchForType = ReturnType.Enumeration
            ("HATVAL"),
                searchForType = ReturnType.HatVal
            ("IMPLIED"),
                searchForType = ReturnType.ImpliedDecimal
            ("INTEGER"),
                searchForType = ReturnType.Integer
            ("STRING"),
                searchForType = ReturnType.String
            endusing
            lambda doEvaluate(iface, meth, index) (meth.ReturnValue.Type == searchForType)
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodReturnCoerced, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index) (meth.ReturnValue.CoerceType != CoerceType.None)
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodReturnCorecedType, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            data searchForType, CoerceType
            using tkn.Value select
            ("COERCE_BOOLEAN"),
                searchForType = CoerceType.Boolean
            ("COERCE_BYTE"),
                searchForType = CoerceType.Byte
            ("COERCE_DATETIME"),
                searchForType = CoerceType.DateTime
            ("COERCE_DATETIME_NULLABLE"),
                searchForType = CoerceType.DateTimeNullable
            ("COERCE_DECIMAL"),
                searchForType = CoerceType.Decimal
            ("COERCE_DECIMAL_NULLABLE"),
                searchForType = CoerceType.DecimalNullable
            ("COERCE_DOUBLE"),
                searchForType = CoerceType.Double
            ("COERCE_FLOAT"),
                searchForType = CoerceType.Float
            ("COERCE_INT"),
                searchForType = CoerceType.Int
            ("COERCE_LONG"),
                searchForType = CoerceType.Long
            ("COERCE_SBYTE"),
                searchForType = CoerceType.Sbyte
            ("COERCE_SHORT"),
                searchForType = CoerceType.Short
            ("COERCE_UINT"),
                searchForType = CoerceType.Uint
            ("COERCE_ULONG"),
                searchForType = CoerceType.Ulong
            ("COERCE_USHORT"),
                searchForType = CoerceType.Ushort
            endusing
            lambda doEvaluate(iface, meth, index) (meth.ReturnValue.CoerceType == searchForType)
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodParametersIn, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index)
            begin
                data param, @SmcParameter
                foreach param in meth.Parameters
                begin
                    if (param.Direction == ParameterDirection.In)
                    begin
                        mreturn true
                    end
                end
                mreturn false
            end
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodParametersInOut, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index)
            begin
                data param, @SmcParameter
                foreach param in meth.Parameters
                begin
                    if (param.Direction == ParameterDirection.InOut)
                    begin
                        mreturn true
                    end
                end
                mreturn false
            end
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodParametersInOrInOut, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index)
            begin
                data param, @SmcParameter
                foreach param in meth.Parameters
                begin
                    if (param.Direction == ParameterDirection.In || param.Direction == ParameterDirection.InOut)
                    begin
                        mreturn true
                    end
                end
                mreturn false
            end
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodParametersOut, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index)
            begin
                data param, @SmcParameter
                foreach param in meth.Parameters
                begin
                    if (param.Direction == ParameterDirection.Out)
                    begin
                        mreturn true
                    end
                end
                mreturn false
            end
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodParametersOutOrInout, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index)
            begin
                data param, @SmcParameter
                foreach param in meth.Parameters
                begin
                    if (param.Direction == ParameterDirection.Out || param.Direction == ParameterDirection.InOut)
                    begin
                        mreturn true
                    end
                end
                mreturn false
            end
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodReturnsData, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index)
            begin
                ;;If it's a function then we have our answer
                if (meth.MethodType == MethodType.Function)
                    mreturn true
                ;;Otherwise go looking for any OUT or INOUT parameter
                data param, @SmcParameter
                foreach param in meth.Parameters
                begin
                    if (param.Direction == ParameterDirection.Out || param.Direction == ParameterDirection.InOut)
                    begin
                        mreturn true
                    end
                end
                mreturn false
            end
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        private static method evaluateMethodStructureParameters, boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doEvaluate(iface, meth, index)
            begin
                ;;If it's a function then we have our answer
                if (meth.Parameters.Count==0)
                    mreturn false
                ;;Otherwise go looking for any structure parameter
                data param, @SmcParameter
                foreach param in meth.Parameters
                begin
                    if (param.Type == ParameterType.Structure)
                    begin
                        mreturn true
                    end
                end
                mreturn false
            end
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------
        ;; Custom method loop expressions

        private static method evaluateMethodCustom, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc

            lambda doEvaluate(iface, meth, index)
            begin
                ;;Does this method have any custom expressions?
                if (meth.CustomExpressionTokens != ^null)
                begin
                    ;; Extract the search text from the token
                    data searchText, string, tkn.Value.ToUpper().Replace("CUSTOM_METHOD_", "")

                    ;; Make sure we have search text
                    if (String.IsNullOrWhiteSpace(searchText))
                        throw new ApplicationException(String.Format("Invalid custom method loop expression token {0} at line {1} in template {2}", tkn.Value, tkn.StartLineNumber, template.Context.CurrentTemplateBaseName))

                    ;; Do we have a match?
                    mreturn (meth.CustomExpressionTokens.IndexOf(searchText) != -1)
                end
                
                mreturn false

            end

            ;; We get here for any custom method loop expression <IF CUSTOM_METHOD_token> and we are looking for token
            ;to be present or not in the current methjods CustomTokens array.
            mreturn EvaluateMethodLoopExpression(tkn, template, loops, doEvaluate)

        endmethod

    endclass

endnamespace
