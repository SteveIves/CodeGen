;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluatorRelationLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates relation loop expressions.
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI
import System.IO

.array 0

namespace CodeGen.Engine

    public partial class ExpressionEvaluator

        relationLoopExpressionEvaluators, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>

        private method registerRelationLoopExpressions, void
            endparams
        proc
			
			relationLoopExpressionEvaluators = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>()
		
			relationLoopExpressionEvaluators.Add("FROM_ACCESS", evaluateRelationFromKeyType)
			relationLoopExpressionEvaluators.Add("FROM_FOREIGN", evaluateRelationFromKeyType)

			relationLoopExpressionEvaluators.Add("ONE_TO_MANY", evaluateRelationType)
			relationLoopExpressionEvaluators.Add("ONE_TO_ONE", evaluateRelationType)
			relationLoopExpressionEvaluators.Add("ONE_TO_MANY_TO_ONE", evaluateRelationType)
			relationLoopExpressionEvaluators.Add("ONE_TO_ONE_TO_ONE", evaluateRelationType)
			relationLoopExpressionEvaluators.Add("MANY_TO_ONE_TO_MANY", evaluateRelationType)

			relationLoopExpressionEvaluators.Add("TO_LONGER", evaluateRelationCompareSize)
			relationLoopExpressionEvaluators.Add("TO_SAME_SIZE", evaluateRelationCompareSize)
			relationLoopExpressionEvaluators.Add("TO_SHORTER", evaluateRelationCompareSize)

			relationLoopExpressionEvaluators.Add("FROM_ASCENDING", evaluateRelationFromAscending)
			relationLoopExpressionEvaluators.Add("FROM_AUTO_SEQUENCE", evaluateRelationFromAutoSequence)
			relationLoopExpressionEvaluators.Add("FROM_AUTO_TIMESTAMP", evaluateRelationFromAutoTimestamp)
			relationLoopExpressionEvaluators.Add("FROM_AUTO_TIMESTAMP_CREATED", evaluateRelationFromAutoTimestampCreated)
			relationLoopExpressionEvaluators.Add("FROM_AUTO_TIMESTAMP_UPDATED", evaluateRelationFromAutoTimestampUpdated)
			relationLoopExpressionEvaluators.Add("FROM_CHANGES", evaluateRelationFromChanges)
			relationLoopExpressionEvaluators.Add("FROM_DESCENDING", evaluateRelationFromDescending)
			relationLoopExpressionEvaluators.Add("FROM_DUPLICATES", evaluateRelationFromDups)
			relationLoopExpressionEvaluators.Add("FROM_DUPLICATESATEND", evaluateRelationFromDupsAtEnd)
			relationLoopExpressionEvaluators.Add("FROM_DUPLICATESATFRONT", evaluateRelationFromDupsAtFront)
			relationLoopExpressionEvaluators.Add("FROM_FIRST_SEG_NOCASE", evaluateRelationFromFirstSegNoCase)
			relationLoopExpressionEvaluators.Add("FROM_MULTIPLE_SEGMENTS", evaluateRelationFromMultipleSegs)
			relationLoopExpressionEvaluators.Add("FROM_NOCHANGES", evaluateRelationFromNoChanges)
			relationLoopExpressionEvaluators.Add("FROM_NODUPLICATES", evaluateRelationFromNoDups)
			relationLoopExpressionEvaluators.Add("FROM_NULLKEY", evaluateRelationFromNullKey)
			relationLoopExpressionEvaluators.Add("FROM_NULLVALUE", evaluateRelationFromNullValue)
			relationLoopExpressionEvaluators.Add("FROM_SINGLE_SEGMENT", evaluateRelationFromSingleSegment)

			relationLoopExpressionEvaluators.Add("TO_ASCENDING", evaluateRelationToAscending)
			relationLoopExpressionEvaluators.Add("TO_AUTO_SEQUENCE", evaluateRelationToAutoSequence)
			relationLoopExpressionEvaluators.Add("TO_AUTO_TIMESTAMP", evaluateRelationToAutoTimestamp)
			relationLoopExpressionEvaluators.Add("TO_AUTO_TIMESTAMP_CREATED", evaluateRelationToAutoTimestampCreated)
			relationLoopExpressionEvaluators.Add("TO_AUTO_TIMESTAMP_UPDATED", evaluateRelationToAutoTimestampUpdated)
			relationLoopExpressionEvaluators.Add("TO_CHANGES", evaluateRelationToChanges)
			relationLoopExpressionEvaluators.Add("TO_DESCENDING", evaluateRelationToDescending)
			relationLoopExpressionEvaluators.Add("TO_DUPLICATES", evaluateRelationToDups)
			relationLoopExpressionEvaluators.Add("TO_DUPLICATESATEND", evaluateRelationToDupsAtEnd)
			relationLoopExpressionEvaluators.Add("TO_DUPLICATESATFRONT", evaluateRelationToDupsAtFront)
			relationLoopExpressionEvaluators.Add("TO_FIRST_SEG_NOCASE", evaluateRelationToFirstSegNoCase)
			relationLoopExpressionEvaluators.Add("TO_MULTIPLE_SEGMENTS", evaluateRelationToMultipleSegs)
			relationLoopExpressionEvaluators.Add("TO_NOCHANGES", evaluateRelationToNoChanges)
			relationLoopExpressionEvaluators.Add("TO_NODUPLICATES", evaluateRelationToNoDups)
			relationLoopExpressionEvaluators.Add("TO_NULLKEY", evaluateRelationToNullKey)
			relationLoopExpressionEvaluators.Add("TO_NULLVALUE", evaluateRelationToNullValue)
			relationLoopExpressionEvaluators.Add("TO_SINGLE_SEGMENT", evaluateRelationToSingleSegment)

            relationLoopExpressionEvaluators.Add("TO_STRUCTURE_INCLUDED", evaluateRelationToStructurePresence)
            relationLoopExpressionEvaluators.Add("TO_STRUCTURE_NOT_INCLUDED", evaluateRelationToStructurePresence)

		endmethod
	
		;; -------------------------------------------------------------------------------------------------------------------------------
		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="tkn"></param>
		;;; <param name="template"></param>
		;;; <param name="loops"></param>
		;;; <param name="specific"></param>
		;;; <returns></returns>
		public static method EvaluateRelationLoopExpression, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			specific, @Func<CodeGenContext, RpsStructure, RpsRelation, int, RpsKey, RpsStructure, RpsKey, boolean> 
			endparams
		proc
			lambda isRelationLoop(node) node .is. RelationLoopNode
			data loop, @RelationLoopNode, ^as(loops.First(isRelationLoop), RelationLoopNode)
            mreturn specific(template.Context, template.Context.CurrentStructure, loop.CurrentRelation, loop.CurrentIndex, loop.FromKey, loop.ToStructure, loop.ToKey)
		endmethod
		
		;; -------------------------------------------------------------------------------------------------------------------------------

		private static method evaluateRelationFromKeyType, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
			lambda doEvaluate(context, str, relation, index, fromkey, tostr, tokey)
			begin
				using tkn.Value select
				("FROM_ACCESS"),
					mreturn fromkey.KeyType == RpsKeyType.Access
				("FROM_FOREIGN"),
					mreturn fromkey.KeyType == RpsKeyType.Foreign
				endusing
				;;Should never get here!
				throw new ApplicationException(String.Format("Invalid expression token {0} encountered in evaluateRelationFromKeyType()",tkn.Value))
				mreturn false
			end
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationCompareSize, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey)
			begin
				using tkn.Value select
				("TO_LONGER"),
					mreturn tokey.Size > fromkey.Size
				("TO_SAME_SIZE"),
					mreturn tokey.Size == fromkey.Size
				("TO_SHORTER"),
					mreturn tokey.Size < fromkey.Size
				endusing
				;;Should never get here!
				throw new ApplicationException(String.Format("Invalid expression token {0} encountered in evaluateRelationCompareSize()",tkn.Value))
			end
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationType, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams 
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey)
            begin
                data fkCleanFromKey, @RpsKey, fromkey
                if(fromkey.Name.StartsWith("FK_"))
                begin
                    ;;Remove the FK_ from the from the key name
                    data fkCleanName = fromkey.Name.Substring(3)
                    data fkDescr = fromkey.Description
                    ;;Locate the matching access key
                    data fromStructureKey, @RpsKey
                    foreach fromStructureKey in fromStructure.Keys
                    begin
                        if (fromStructureKey.Name == fkCleanName || string.Compare(fromStructureKey.Name, fkDescr, true))
                        begin
                            fkCleanFromKey = fromStructureKey
                            exitloop
                        end
                    end
                end

                ;I suspect the issue is here, fkCleanFromKey allows DUPS but our relation is many to one?

                data isOneToOneToOne = (tokey.Size == fkCleanFromKey.Size && fkCleanFromKey.Duplicates == RpsKeyDuplicates.NoDuplicates && tokey.Duplicates == RpsKeyDuplicates.NoDuplicates)
                data isOneToOne = ((tokey.Size < fkCleanFromKey.Size) || (tokey.Size == fkCleanFromKey.Size && tokey.Duplicates == RpsKeyDuplicates.NoDuplicates))

;                lambda getBackRelation(relation)
;                begin
;                    if(relation.ToStructure == fromStructure.Name)
;                    begin
;                        if(relation.ToKey.StartsWith("FK_") && relation.ToKey.Substring(3) == fromkey.Name)
;                            mreturn true
;
;                        if(relation.ToKey == fromkey.Name)
;                            mreturn true
;                    end
;
;                    mreturn false
;                end
                ;;TODO: compiler bug here
                ;;data isBackRelation = tostr.Relations.FirstOrDefault(getBackRelation)
                ;;data isBackRelation, @RpsRelation, tostr.Relations.FirstOrDefault(getBackRelation)
                ;;data hasBackRelation = (isBackRelation != ^null)
                data toRelation, @RpsRelation
                data hasBackRelation = false
                foreach toRelation in tostr.Relations
                begin
                    if(toRelation.ToStructure == fromStructure.Name)
                    begin
                        if(toRelation.ToKey == fkCleanFromKey.Name)
                            hasBackRelation = true
                    end
                end

				using tkn.Value select
				("ONE_TO_ONE"),
					mreturn (isOneToOne && !hasBackRelation)
				("ONE_TO_MANY"),
					mreturn (!isOneToOne && !hasBackRelation)
				("ONE_TO_MANY_TO_ONE"),
					mreturn (!isOneToOne && hasBackRelation)
				("ONE_TO_ONE_TO_ONE"),
					mreturn (isOneToOneToOne && hasBackRelation)
				("MANY_TO_ONE_TO_MANY"),
					mreturn (isOneToOne && !isOneToOneToOne && hasBackRelation)
				endusing
				;;Should never get here!
				throw new ApplicationException(String.Format("Invalid expression token {0} encountered in evaluateRelationType()",tkn.Value))
			end
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		;;From key expressions

		private static method evaluateRelationFromAscending, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.SortOrder == RpsKeyOrder.Ascending
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromAutoSequence, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.Segments[0].DataType == RpsKeySegmentDataType.AutoSequence
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromAutoTimestamp, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.Segments[0].DataType == RpsKeySegmentDataType.AutoTimestampCreated || fromkey.Segments[0].DataType == RpsKeySegmentDataType.AutoTimestampUpdated
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromAutoTimestampCreated, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.Segments[0].DataType == RpsKeySegmentDataType.AutoTimestampCreated
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromAutoTimestampUpdated, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.Segments[0].DataType == RpsKeySegmentDataType.AutoTimestampUpdated
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromChanges, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.Modifiable
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromDescending, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.SortOrder == RpsKeyOrder.Descending
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromDups, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.Duplicates == RpsKeyDuplicates.Duplicates
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromDupsAtEnd, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.InsertDuplicates == RpsKeyInsertDups.AtEnd
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromDupsAtFront, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.InsertDuplicates == RpsKeyInsertDups.AtFront
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromFirstSegNoCase, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) (fromkey.Segments[0].SegmentType == RpsKeySegmentType.Field) && (fromkey.Segments[0].DataType == RpsKeySegmentDataType.NoCaseAlpha)
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromMultipleSegs, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.Segments.Count > 1
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromNoChanges, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.Modifiable == false
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromNoDups, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.Duplicates == RpsKeyDuplicates.NoDuplicates
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromNullKey, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.NullKey != RpsKeyNullType.None
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromNullValue, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) !String.IsNullOrWhiteSpace(fromkey.NullKeyValue)
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationFromSingleSegment, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) fromkey.Segments.Count == 1
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		;;To key expressions

		private static method evaluateRelationToAscending, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.SortOrder == RpsKeyOrder.Ascending
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToAutoSequence, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.Segments[0].DataType == RpsKeySegmentDataType.AutoSequence
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToAutoTimestamp, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.Segments[0].DataType == RpsKeySegmentDataType.AutoTimestampCreated || tokey.Segments[0].DataType == RpsKeySegmentDataType.AutoTimestampUpdated
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToAutoTimestampCreated, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.Segments[0].DataType == RpsKeySegmentDataType.AutoTimestampCreated
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToAutoTimestampUpdated, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.Segments[0].DataType == RpsKeySegmentDataType.AutoTimestampUpdated
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToChanges, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.Modifiable
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToDescending, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.SortOrder == RpsKeyOrder.Descending
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToDups, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.Duplicates == RpsKeyDuplicates.Duplicates
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToDupsAtEnd, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.InsertDuplicates == RpsKeyInsertDups.AtEnd
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToDupsAtFront, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.InsertDuplicates == RpsKeyInsertDups.AtFront
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToFirstSegNoCase, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) (tokey.Segments[0].SegmentType == RpsKeySegmentType.Field) && (tokey.Segments[0].DataType == RpsKeySegmentDataType.NoCaseAlpha)
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToMultipleSegs, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.Segments.Count > 1
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToNoChanges, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.Modifiable == false
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToNoDups, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.Duplicates == RpsKeyDuplicates.NoDuplicates
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToNullKey, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.NullKey != RpsKeyNullType.None
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToNullValue, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) !String.IsNullOrWhiteSpace(tokey.NullKeyValue)
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

		private static method evaluateRelationToSingleSegment, boolean
			tkn, @Token 
			template, @FileNode 
			loops, @IEnumerable<LoopNode> 
			endparams
		proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey) tokey.Segments.Count == 1
			mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
		endmethod

        private static method evaluateRelationToStructurePresence, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doEvaluate(context, fromStructure, relation, index, fromkey, tostr, tokey)
            begin
                lambda isNamedStructure(str) (str.Name == tostr.Name)
                data matchingStructure, @RpsStructure, context.Structures.FirstOrDefault(isNamedStructure)
                using tkn.Value select
                ("TO_STRUCTURE_INCLUDED"),
                    mreturn matchingStructure != ^null
                ("TO_STRUCTURE_NOT_INCLUDED"),
                    mreturn matchingStructure == ^null
                endusing
                ;;Should never get here!
                throw new ApplicationException(String.Format("Invalid expression token {0} encountered in evaluateRelationToStructurePresence()",tkn.Value))
            end
            mreturn EvaluateRelationLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

	endclass

endnamespace

