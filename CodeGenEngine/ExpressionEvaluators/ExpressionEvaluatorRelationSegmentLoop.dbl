;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluatorRelationSegmentLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates relation key segment loop expression nodes
;; 
;;  Date:        20th July 2018
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2018, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import CodeGen.RepositoryAPI
import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks

.array 0

namespace CodeGen.Engine

    public partial class ExpressionEvaluator

        relationSegmentLoopExpressionEvaluators, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>

        private method registerRelationSegmentLoopExpressions, void
            endparams
        proc

            relationSegmentLoopExpressionEvaluators = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>()

            ;Define expression evaluators

            ;relationSegmentLoopExpressionEvaluators.Add("SOME_EXPRESSION", evaluateRelationSegmentSomeExpression)
            ;relationSegmentLoopExpressionEvaluators.Add("OTHER_EXPRESSION", evaluateRelationSegmentOtherExpression)

        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------
        ;; Relation segment loop expressions

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="tkn"></param>
        ;;; <param name="template"></param>
        ;;; <param name="loops"></param>
        ;;; <param name="specific"></param>
        ;;; <returns></returns>
        public static method EvaluateRelationSegmentLoopExpression, boolean
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<RpsStructure, RpsRelation, RpsKey, RpsKeySegment, int, boolean> 
            endparams
        proc
            ;;Find the nearest key segment loop
            lambda isRelationSegmentLoop(node) node .is. RelationSegmentLoopNode
            data loop, @RelationSegmentLoopNode, ^as(loops.First(isRelationSegmentLoop), RelationSegmentLoopNode)
            mreturn specific(template.Context.CurrentStructure, loop.CurrentRelation, loop.CurrentKey, loop.CurrentSegment, loop.CurrentIndex)
        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------

;private static method evaluateRelationSegmentSomeExpression, boolean
;tkn, @Token 
;template, @FileNode 
;loops, @IEnumerable<LoopNode> 
;endparams
;proc
;lambda doEvaluate(currentStructure, currentRelation, currentKey, currentSegment, currentSegmentIndex) (some_boolean_expression)
;mreturn EvaluateSegmentLoopExpression(tkn, template, loops, doEvaluate)
;endmethod
;
;private static method evaluateRelationSegmentOtherExpression, boolean
;tkn, @Token 
;template, @FileNode 
;loops, @IEnumerable<LoopNode> 
;endparams
;proc
;lambda doEvaluate(currentStructure, currentRelation, currentKey, currentSegment, currentSegmentIndex) (some_boolean_expression)
;mreturn EvaluateSegmentLoopExpression(tkn, template, loops, doEvaluate)
;endmethod

    endclass

endnamespace
