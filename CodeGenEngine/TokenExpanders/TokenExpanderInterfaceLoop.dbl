;; *****************************************************************************
;; 
;;  Title:       TokenExpanderInterfaceLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands interface loop token nodes
;; 
;;  Date:        20th March 2018
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2018, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.Engine
import CodeGen.MethodCatalogAPI
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        interfaceLoopTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerInterfaceLoopTokens, void
            endparams
        proc
            interfaceLoopTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()
            interfaceLoopTokenExpanders.Add("INTERFACE_METHODS", expandInterfaceMethods)
            interfaceLoopTokenExpanders.Add("INTERFACE_NAME", expandInterfaceName)
        endmethod

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="tkn"></param>
        ;;; <param name="template"></param>
        ;;; <param name="loops"></param>
        ;;; <param name="specific"></param>
        ;;; <returns></returns>
        public static method ExpandInterfaceLoopToken, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<Smc, SmcInterface, string> 
            endparams
        proc
            data context = template.Context

            if (context.MethodCatalog == ^null)
            begin
                throw new ApplicationException(String.Format("Attempting to use token <{0}> without method catalog meta-data!",tkn.Value))
            end

            data taskset = context.Taskset
            data task = context.CurrentTask
            data loop, @InterfaceLoopNode
            data currentInterface, @SmcInterface

            data result = loops.FirstOrDefault(lambda (loopnode) {loopnode .is. InterfaceLoopNode})
            if (result != ^null) then
            begin
                loop = ^as(result, InterfaceLoopNode)
                currentInterface = loop.CurrentInterface
            end
            else
            begin
                currentInterface = context.MethodCatalog.Interfaces.FirstOrDefault(lambda(iface) {iface.Name.Equals(task.MethodCatalogInterface)})
            end
            mreturn specific(context.MethodCatalog,currentInterface)
        endmethod

        private static method expandInterfaceMethods, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            ;;Loops might be empty if we're not using <INTERFACE_LOOP>
            lambda doExpand(catalog,currentInterface) currentInterface.Methods.Count.ToString()
            mreturn ExpandInterfaceLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandInterfaceName, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            ;;Loops might be empty if we're not using <INTERFACE_LOOP>
            lambda doExpand(catalog,currentInterface) currentInterface.Name
            mreturn ExpandInterfaceLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandInterfaceCustom, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            ;;Loops might be empty if we're not using <INTERFACE_LOOP>
            lambda doExpand(catalog,currentInterface)
            begin
                if (currentInterface.CustomExpansionTokens == ^null)
                    mreturn ""
                data customTokenName = tkn.Value.Replace("CUSTOM_INTERFACE_","")
                data customToken, @ExpansionToken, currentInterface.CustomExpansionTokens.FirstOrDefault(lambda(et) { et.Name == customTokenName } )
                mreturn (customToken == ^null) ? "" : customToken.Value
            end
            mreturn ExpandInterfaceLoopToken(tkn, template, loops, doExpand)
        endmethod

    endclass

endnamespace
