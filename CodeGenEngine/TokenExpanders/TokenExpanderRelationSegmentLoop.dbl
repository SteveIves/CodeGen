;; *****************************************************************************
;; 
;;  Title:       TokenExpanderRelationSegmentLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands relation segment loop token nodes
;; 
;;  Date:        19th July 2018
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2018, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        relationSegmentLoopTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerRelationSegmentLoopTokens, void
            endparams
        proc
            relationSegmentLoopTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()

            relationSegmentLoopTokenExpanders.Add("LITERAL_SEGMENT_CSTYPE", expandRelationLiteralSegmentCsType)
            relationSegmentLoopTokenExpanders.Add("LITERAL_SEGMENT_SNTYPE", expandRelationLiteralSegmentSnType)
            relationSegmentLoopTokenExpanders.Add("LITERAL_SEGMENT_VALUE", expandRelationLiteralSegmentValue)

        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------
        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="tkn"></param>
        ;;; <param name="template"></param>
        ;;; <param name="loops"></param>
        ;;; <param name="specific"></param>
        ;;; <returns></returns>
        public static method ExpandRelationSegmentLoopToken, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<RpsStructure, RpsRelation, RpsKey, RpsKeySegment, int, RpsStructure, RpsKey, string> 
            endparams
        proc
            lambda isRelationSegmentLoop(node) node .is. RelationSegmentLoopNode
            data loop, @RelationSegmentLoopNode, ^as(loops.First(isRelationSegmentLoop), RelationSegmentLoopNode)
            mreturn specific(template.Context.GetCurrentStructure(), loop.CurrentRelation, loop.CurrentKey, loop.CurrentSegment, loop.CurrentIndex, loop.ToStructure, loop.ToKey)
        endmethod

        ;; -------------------------------------------------------------------------------------------------------------------------------

        private static method expandRelationLiteralSegmentCsType, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            ;;This token should only be used when processing in a <RELATION_LOOP>, in a <FROM_KEY_SEGMENT_LOOP>, and when the
            ;;current segment is a literal value (<IF SEG_TYPE_LITERAL>). Otherwise it WILL fail.
            lambda doExpand(currentStructure, currentRelation, currentKey, currentSegment, currentSegmentIndex, toStructure, toKey)
            begin
                data toKeySegmentFieldName, string
                try
                begin
                    toKeySegmentFieldName = toKey.Segments[currentSegmentIndex].Field
                    data toKeySegmentField, @RpsField, toStructure.Fields.First(lambda (field) {field.OriginalName==toKeySegmentFieldName})
                    mreturn toKeySegmentField.CsType
                end
                catch (e, @Exception)
                begin
                    throw new ApplicationException(String.Format("Inappropriate use of token {0}. Special restrictions apply, refer to the documentation.",tkn.Value))
                end
                endtry
            end
            mreturn ExpandRelationSegmentLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationLiteralSegmentSnType, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            ;;This token should only be used when processing in a <RELATION_LOOP>, in a <FROM_KEY_SEGMENT_LOOP>, and when the
            ;;current segment is a literal value (<IF SEG_TYPE_LITERAL>). Otherwise it WILL fail.
            lambda doExpand(currentStructure, currentRelation, currentKey, currentSegment, currentSegmentIndex, toStructure, toKey)
            begin
                data toKeySegmentFieldName, string
                try
                begin
                    toKeySegmentFieldName = toKey.Segments[currentSegmentIndex].Field
                    data toKeySegmentField, @RpsField, toStructure.Fields.First(lambda (field) {field.OriginalName==toKeySegmentFieldName})
                    mreturn toKeySegmentField.SnType
                end
                catch (e, @Exception)
                begin
                    throw new ApplicationException(String.Format("Inappropriate use of token {0}. Special restrictions apply, refer to the documentation.",tkn.Value))
                end
                endtry
            end
            mreturn ExpandRelationSegmentLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationLiteralSegmentValue, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(currentStructure, currentRelation, currentKey, currentSegment, currentSegmentIndex, toStructure, toKey)
            begin
                data toKeySegmentFieldName, string
                try
                begin
                    toKeySegmentFieldName = toKey.Segments[currentSegmentIndex].Field
                    data toKeySegmentField, @RpsField, toStructure.Fields.First(lambda (field) {field.OriginalName==toKeySegmentFieldName})
                    using toKeySegmentField.TypeCode select
                    ("D","I"),
                        mreturn currentSegment.LiteralValue
                    (),
                    begin
                        mreturn String.Format('"{0}"',currentSegment.LiteralValue)
                    end
                    endusing
                end
                catch (e, @Exception)
                begin
                    throw new ApplicationException(String.Format("Inappropriate use of token {0}. Special restrictions apply, refer to the documentation.",tkn.Value))
                end
                endtry
            end
            mreturn ExpandRelationSegmentLoopToken(tkn, template, loops, doExpand)
        endmethod

    endclass

endnamespace
