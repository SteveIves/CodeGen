;; *****************************************************************************
;; 
;;  Title:       TokenExpanderLoopUtility.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands loop utility token nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        loopUtilityTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerLoopUtilityTokens, void
            endparams
        proc

            loopUtilityTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()

            loopUtilityTokenExpanders.Add(",", expandLoopUtilComma)
            loopUtilityTokenExpanders.Add(",AND", expandLoopUtilCommaAnd)
            loopUtilityTokenExpanders.Add(",OR", expandLoopUtilCommaOr)
            loopUtilityTokenExpanders.Add("+", expandLoopUtilPlus)
            loopUtilityTokenExpanders.Add(":", expandLoopUtilColon)
            loopUtilityTokenExpanders.Add("&&", expandLoopUtilAndCs)
            loopUtilityTokenExpanders.Add(".AND.", expandLoopUtilAndDbl)
            loopUtilityTokenExpanders.Add("AND", expandLoopUtilAndEnglish)
            loopUtilityTokenExpanders.Add("|", expandLoopUtilPipe)
            loopUtilityTokenExpanders.Add("||", expandLoopUtilOrCs)
            loopUtilityTokenExpanders.Add(".OR.", expandLoopUtilOrDbl)
            loopUtilityTokenExpanders.Add("OR", expandLoopUtilOrEnglish)
            loopUtilityTokenExpanders.Add("BSLASH", expandLoopUtilBackSlash)
            loopUtilityTokenExpanders.Add("FSLASH", expandLoopUtilForwardSlash)
            loopUtilityTokenExpanders.Add("PROCESSED_INCLUSIVE", expandLoopUtilProcessedInclusive)
            loopUtilityTokenExpanders.Add("PROCESSED_EXCLUSIVE", expandLoopUtilProcessedExclusive)
            loopUtilityTokenExpanders.Add("REMAINING_INCLUSIVE", expandLoopUtilRemainingInclusive)
            loopUtilityTokenExpanders.Add("REMAINING_EXCLUSIVE", expandLoopUtilRemainingExclusive)
            loopUtilityTokenExpanders.Add("TOTAL_ITEMS", expandLoopUtilTotalItems)
        endmethod

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="tkn"></param>
        ;;; <param name="template"></param>
        ;;; <param name="loops"></param>
        ;;; <param name="specific"></param>
        ;;; <returns></returns>
        public static method ExpandLoopUtilityToken, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<LoopNode, string> 
            endparams
        proc
            lambda isLoop(node) node .is. LoopNode
            data loop, @LoopNode, ^as(loops.Last(isLoop), LoopNode)
            mreturn specific(loop)
        endmethod

        private static method expandLoopUtilComma, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) (loop.CurrentIndex < loop.MaxIndex) ? "," : String.Empty
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilCommaAnd, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop)
            begin
                using (loop.MaxIndex - loop.CurrentIndex) select
                (0),
                    mreturn ""
                (1),
                    mreturn " AND "
                (),
                    mreturn ", "
                endusing
            end
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilCommaOr, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop)
            begin
                using (loop.MaxIndex - loop.CurrentIndex) select
                (0),
                    mreturn ""
                (1),
                    mreturn " OR "
                (),
                    mreturn ", "
                endusing
            end
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilPlus, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) (loop.CurrentIndex < loop.MaxIndex) ? "+" : String.Empty
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilColon, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) (loop.CurrentIndex < loop.MaxIndex) ? ":" : String.Empty
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilAndCs, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) (loop.CurrentIndex < loop.MaxIndex) ? "&&" : String.Empty
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilAndDbl, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) (loop.CurrentIndex < loop.MaxIndex) ? ".AND." : String.Empty
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilAndEnglish, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) (loop.CurrentIndex < loop.MaxIndex) ? "AND" : String.Empty
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilPipe, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) (loop.CurrentIndex < loop.MaxIndex) ? "|" : String.Empty
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilOrCs, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) (loop.CurrentIndex < loop.MaxIndex) ? "||" : String.Empty
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilOrDbl, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) (loop.CurrentIndex < loop.MaxIndex) ? ".OR." : String.Empty
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilOrEnglish, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) (loop.CurrentIndex < loop.MaxIndex) ? "OR" : String.Empty
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilBackSlash, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) (loop.CurrentIndex < loop.MaxIndex) ? "\" : String.Empty
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilForwardSlash, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) (loop.CurrentIndex < loop.MaxIndex) ? "/" : String.Empty
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilProcessedExclusive, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) String.Format("{0}",loop.CurrentIndex)
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilProcessedInclusive, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) String.Format("{0}",loop.CurrentIndex + 1)
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilRemainingExclusive, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) String.Format("{0}",loop.MaxIndex - loop.CurrentIndex)
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilRemainingInclusive, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) String.Format("{0}",loop.MaxIndex - loop.CurrentIndex + 1)
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandLoopUtilRemainingMax, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            ;This method will be called to expand the following tokens:
            ;
            ;<REMAINING_EXCLUSIVE_MAX_value>
            ;<REMAINING_INCLUSIVE_MAX_value>
            ;
            ;Where value is a numeric literal

            lambda isLoopNode(node) (node .is. LoopNode)
            data loop, @LoopNode, loops.Last(isLoopNode)

            data tokenText = tkn.Value
            data maxValue = 0
            data remainingValue = 0

            if (tokenText.StartsWith("REMAINING_EXCLUSIVE_MAX_")) then
            begin
                tokenText = tokenText.Replace("REMAINING_EXCLUSIVE_MAX_","")
                remainingValue = loop.MaxIndex - loop.CurrentIndex
            end
            else if (tokenText.StartsWith("REMAINING_INCLUSIVE_MAX_"))
            begin
                tokenText = tokenText.Replace("REMAINING_INCLUSIVE_MAX_","")
                remainingValue = loop.MaxIndex - loop.CurrentIndex + 1
            end

            if (int.TryParse(tokenText,maxValue))
            begin
                lambda doExpand(loop) String.Format("{0}", (remainingValue < maxValue) ? remainingValue : maxValue )
                mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
            end

            throw new ApplicationException("Invalid loop utility token " + tkn.Value)

        endmethod

        private static method replicationExpandLoopUtilRemainingMax, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            ;This method will be called to expand the following tokens:
            ;
            ;<REPLICATION_REMAINING_EXCLUSIVE_MAX_value>
            ;<REPLICATION_REMAINING_INCLUSIVE_MAX_value>
            ;
            ;Where value is a numeric literal
            ;
            ;The bahavior is identical to that of expandLoopUtilRemainingMax (above)
            ;except that the loops MaxIndex is reduced by the number of fields being
            ;excluded via the special token REPLICATOR_EXCLUDE in field user text or
            ;long descripotions.

            lambda isLoopNode(node) (node .is. LoopNode)
            data loop, @LoopNode, loops.Last(isLoopNode)

            data tokenText = tkn.Value
            data maxValue = 0
            data remainingValue = 0

            ;;Figure out how many fields have been excluded

            data fld, @RpsField
            data excludedFieldCount = 0

            foreach fld in template.Context.GetCurrentStructure().Fields
            begin
                if (fld.HasProperty(template, "REPLICATOR_EXCLUDE"))
                begin
                    excludedFieldCount += 1
                end
            end

            if (tokenText.StartsWith("REPLICATION_REMAINING_EXCLUSIVE_MAX_")) then
            begin
                tokenText = tokenText.Replace("REPLICATION_REMAINING_EXCLUSIVE_MAX_","")
                remainingValue = loop.MaxIndex - excludedFieldCount - loop.CurrentIndex
            end
            else if (tokenText.StartsWith("REPLICATION_REMAINING_INCLUSIVE_MAX_"))
            begin
                tokenText = tokenText.Replace("REPLICATION_REMAINING_INCLUSIVE_MAX_","")
                remainingValue = loop.MaxIndex - excludedFieldCount - loop.CurrentIndex + 1
            end

            if (int.TryParse(tokenText,maxValue))
            begin
                lambda doExpand(loop) String.Format("{0}", (remainingValue < maxValue) ? remainingValue : maxValue )
                mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
            end

            throw new ApplicationException("Invalid loop utility token " + tkn.Value)

        endmethod

        private static method expandLoopUtilTotalItems, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(loop) String.Format("{0}",loop.MaxIndex + 1)
            mreturn ExpandLoopUtilityToken(tkn, template, loops, doExpand)
        endmethod

    endclass

endnamespace
