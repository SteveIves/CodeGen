;; *****************************************************************************
;; 
;;  Title:       TokenExpanderRelationLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands relation loop token nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        relationLoopTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerRelationLoopTokens, void
            endparams
        proc

            relationLoopTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()

            relationLoopTokenExpanders.Add("RELATION_FROMKEY", expandRelationFromKey)
            relationLoopTokenExpanders.Add("RELATION_NAME", expandRelationName)
            relationLoopTokenExpanders.Add("RELATION_NUMBER", expandRelationNumber)
            relationLoopTokenExpanders.Add("RELATION_TOKEY", expandRelationToKey)
            relationLoopTokenExpanders.Add("RELATION_TOSTRUCTURE", expandRelationToStructure)
            relationLoopTokenExpanders.Add("RELATION_TOSTRUCTURE_DISPLAY_FIELD",expandRelationToStructureDisplayField)
            relationLoopTokenExpanders.Add("RELATION_TOSTRUCTURE_PLURAL", expandRelationToStructurePlural)
            relationLoopTokenExpanders.Add("RELATION_TOSTRUCTURE_NOPLURAL", expandRelationToStructureNoPlural)

            relationLoopTokenExpanders.Add("FROM_KEY_CHANGES", expandRelationFromKeyChanges)
            relationLoopTokenExpanders.Add("FROM_KEY_DENSITY", expandRelationFromKeyDensity)
            relationLoopTokenExpanders.Add("FROM_KEY_DESCRIPTION", expandRelationFromKeyDescription)
            relationLoopTokenExpanders.Add("FROM_KEY_DUPLICATES", expandRelationFromKeyDuplicates)
            relationLoopTokenExpanders.Add("FROM_KEY_DUPLICATES_AT", expandRelationFromKeyDuplicatesAt)
            relationLoopTokenExpanders.Add("FROM_KEY_LENGTH", expandRelationFromKeyLength)
            relationLoopTokenExpanders.Add("FROM_KEY_NULLTYPE", expandRelationFromKeyNullType)
            relationLoopTokenExpanders.Add("FROM_KEY_NULLVALUE", expandRelationFromKeyNullValue)
            relationLoopTokenExpanders.Add("FROM_KEY_NUMBER", expandRelationFromKeyNumber)
            relationLoopTokenExpanders.Add("FROM_KEY_ORDER", expandRelationFromKeyOrder)
            relationLoopTokenExpanders.Add("FROM_KEY_SEGMENTS", expandRelationFromKeySegments)
            relationLoopTokenExpanders.Add("FROM_KEY_UNIQUE", expandRelationFromKeyUnique)

            relationLoopTokenExpanders.Add("TO_KEY_CHANGES", expandRelationToKeyChanges)
            relationLoopTokenExpanders.Add("TO_KEY_DENSITY", expandRelationToKeyDensity)
            relationLoopTokenExpanders.Add("TO_KEY_DESCRIPTION", expandRelationToKeyDescription)
            relationLoopTokenExpanders.Add("TO_KEY_DUPLICATES", expandRelationToKeyDuplicates)
            relationLoopTokenExpanders.Add("TO_KEY_DUPLICATES_AT", expandRelationToKeyDuplicatesAt)
            relationLoopTokenExpanders.Add("TO_KEY_LENGTH", expandRelationToKeyLength)
            relationLoopTokenExpanders.Add("TO_KEY_NULLTYPE", expandRelationToKeyNullType)
            relationLoopTokenExpanders.Add("TO_KEY_NULLVALUE", expandRelationToKeyNullValue)
            relationLoopTokenExpanders.Add("TO_KEY_NUMBER", expandRelationToKeyNumber)
            relationLoopTokenExpanders.Add("TO_KEY_ORDER", expandRelationToKeyOrder)
            relationLoopTokenExpanders.Add("TO_KEY_SEGMENTS", expandRelationToKeySegments)
            relationLoopTokenExpanders.Add("TO_KEY_UNIQUE", expandRelationToKeyUnique)
        endmethod

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="tkn"></param>
        ;;; <param name="template"></param>
        ;;; <param name="loops"></param>
        ;;; <param name="specific"></param>
        ;;; <returns></returns>
        public static method ExpandRelationLoopToken, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<RpsStructure, RpsRelation, int, RpsKey, RpsStructure, RpsKey, string> 
        proc
            lambda isRelationLoop(node) node .is. RelationLoopNode
            data loop, @RelationLoopNode, ^as(loops.First(isRelationLoop), RelationLoopNode)
            mreturn specific(template.Context.GetCurrentStructure(), loop.CurrentRelation, loop.CurrentIndex, loop.FromKey, loop.ToStructure, loop.ToKey)
        endmethod

        private static method expandRelationFromKey, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) relation.FromKey
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationName, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) relation.Name
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationNumber, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) Convert.ToString(index + 1)
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToKey, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) relation.ToKey
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToStructure, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) tostr.Alias
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToStructureDisplayField, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey)
            begin
                mreturn tostr.DisplayField
            end
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToStructurePlural, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            if (template.Context.CurrentTask.NoCustomPluralization) then
            begin
                lambda doExpand(str, relation, index, fromkey, tostr, tokey)
                begin
                    mreturn tostr.Alias
                end
                mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
            end
            else
            begin
                lambda doExpand(str, relation, index, fromkey, tostr, tokey) 
                begin
                    mreturn tostr.Alias.EndsWith("S") ? tostr.Alias : String.Format("{0}S",tostr.Alias)
                end
                mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
            end
;            lambda doExpand(str, relation, index, fromkey, tostr, tokey)
;            begin
;                mreturn tostr.Alias.EndsWith("S") ? tostr.Alias : String.Format("{0}S",tostr.Alias)
;            end
;            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToStructureNoPlural, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            if (template.Context.CurrentTask.NoCustomPluralization) then
            begin
                lambda doExpand(str, relation, index, fromkey, tostr, tokey)
                begin
                    mreturn tostr.Alias
                end
                mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
            end
            else
            begin
                lambda doExpand(str, relation, index, fromkey, tostr, tokey)
                begin
                    mreturn tostr.Alias.EndsWith("S") ? tostr.Alias.Substring(0,tostr.Alias.Length-1) : tostr.Alias
                end
                mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
            end
;            lambda doExpand(str, relation, index, fromkey, tostr, tokey)
;            begin
;                mreturn tostr.Alias.EndsWith("S") ? tostr.Alias.Substring(0,tostr.Alias.Length-1) : tostr.Alias
;            end
;            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationFromKeyChanges, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) fromkey.Modifiable ? "CHANGES" : "NOCHANGES"
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationFromKeyDensity, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) fromkey.Density.ToString()
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationFromKeyDescription, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) fromkey.Description
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationFromKeyDuplicates, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) fromkey.Duplicates == RpsKeyDuplicates.Duplicates ? "DUPLICATES" : "UNIQUE"
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationFromKeyDuplicatesAt, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) fromkey.InsertDuplicates == RpsKeyInsertDups.AtFront ? "FRONT" : "END"
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationFromKeyLength, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) fromkey.Size.ToString()
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationFromKeyNullType, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey)
            begin
                using (fromkey.NullKey) select
                (RpsKeyNullType.None),
                    mreturn "NONE"
                (RpsKeyNullType.Replicating),
                    mreturn "REPLICATE"
                (RpsKeyNullType.NonReplicating),
                    mreturn "NOREPLICATE"
                (RpsKeyNullType.Short),
                    mreturn "SHORT"
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationFromKeyNullValue, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) fromkey.NullKeyValue
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationFromKeyNumber, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) fromkey.KeyOfReference.ToString()
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationFromKeyOrder, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) fromkey.SortOrder == RpsKeyOrder.Ascending ? "ASC" : "DESC"
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationFromKeySegments, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) fromkey.Segments.Count.ToString()
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationFromKeyUnique, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) fromkey.Duplicates == RpsKeyDuplicates.NoDuplicates ? "UNIQUE" : String.Empty
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod





        private static method expandRelationToKeyChanges, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) tokey.Modifiable ? "CHANGES" : "NOCHANGES"
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToKeyDensity, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) tokey.Density.ToString()
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToKeyDescription, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) tokey.Description
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToKeyDuplicates, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) tokey.Duplicates == RpsKeyDuplicates.Duplicates ? "DUPLICATES" : "UNIQUE"
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToKeyDuplicatesAt, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) tokey.InsertDuplicates == RpsKeyInsertDups.AtFront ? "FRONT" : "END"
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToKeyLength, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) tokey.Size.ToString()
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToKeyNullType, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey)
            begin
                using (tokey.NullKey) select
                (RpsKeyNullType.None),
                    mreturn "NONE"
                (RpsKeyNullType.Replicating),
                    mreturn "REPLICATE"
                (RpsKeyNullType.NonReplicating),
                    mreturn "NOREPLICATE"
                (RpsKeyNullType.Short),
                    mreturn "SHORT"
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToKeyNullValue, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) tokey.NullKeyValue
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToKeyNumber, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) tokey.KeyOfReference.ToString()
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToKeyOrder, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) tokey.SortOrder == RpsKeyOrder.Ascending ? "ASC" : "DESC"
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToKeySegments, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) tokey.Segments.Count.ToString()
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandRelationToKeyUnique, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, relation, index, fromkey, tostr, tokey) tokey.Duplicates == RpsKeyDuplicates.NoDuplicates ? "UNIQUE" : String.Empty
            mreturn ExpandRelationLoopToken(tkn, template, loops, doExpand)
        endmethod

    endclass

endnamespace
