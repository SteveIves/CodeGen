;; *****************************************************************************
;; 
;;  Title:       TokenExpanderMethodLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands method loop token nodes
;; 
;;  Date:        20th March 2018
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2018, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.Engine
import CodeGen.MethodCatalogAPI
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        methodLoopTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerMethodLoopTokens, void
            endparams
        proc
            methodLoopTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()
            methodLoopTokenExpanders.Add("METHOD_ATTRIBUTE", expandMethodAttribute)
            methodLoopTokenExpanders.Add("METHOD_COMMENT", expandMethodComment)
            methodLoopTokenExpanders.Add("METHOD_ENCRYPT", expandMethodEncrypt)
            methodLoopTokenExpanders.Add("METHOD_ELB", expandMethodElb)
            methodLoopTokenExpanders.Add("METHOD_ID", expandMethodId)
            methodLoopTokenExpanders.Add("METHOD_NAME", expandMethodName)
            methodLoopTokenExpanders.Add("METHOD_PARAMETERS", expandMethodParameters)
            methodLoopTokenExpanders.Add("METHOD_ROUTINE", expandMethodRoutine)
            methodLoopTokenExpanders.Add("METHOD_TYPE", expandMethodType)

            methodLoopTokenExpanders.Add("METHOD_RETURN_COERCE_TYPE", expandMethodReturnCoerceType)
            methodLoopTokenExpanders.Add("METHOD_RETURN_COMMENT", expandMethodReturnComment)
            methodLoopTokenExpanders.Add("METHOD_RETURN_CSTYPE_XF", expandMethodReturnCsTypeXf)
            methodLoopTokenExpanders.Add("METHOD_RETURN_DATE_FORMAT", expandMethodReturnDateFormat)
            methodLoopTokenExpanders.Add("METHOD_RETURN_ENUM", expandMethodReturnEnum)
            methodLoopTokenExpanders.Add("METHOD_RETURN_PRECISION", expandMethodReturnPrecision)
            methodLoopTokenExpanders.Add("METHOD_RETURN_SAMPLE_DATA", expandMethodReturnSampleData)
            methodLoopTokenExpanders.Add("METHOD_RETURN_SIZE", expandMethodReturnSize)
            methodLoopTokenExpanders.Add("METHOD_RETURN_TYPE", expandMethodReturnType)
            methodLoopTokenExpanders.Add("METHOD_RETURN_TSTYPE", expandMethodReturnTsType)

        endmethod

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="tkn"></param>
        ;;; <param name="template"></param>
        ;;; <param name="loops"></param>
        ;;; <param name="specific"></param>
        ;;; <returns></returns>
        public static method ExpandMethodLoopToken, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<Smc, SmcInterface, SmcMethod, string> 
            endparams
        proc
            lambda isMethodLoop(node) node .is. MethodLoopNode
            data loop, @MethodLoopNode, ^as(loops.First(isMethodLoop), MethodLoopNode)
            mreturn specific(template.Context.MethodCatalog,loop.CurrentInterface, loop.CurrentMethod)
        endmethod

        private static method expandMethodAttribute, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth)
            begin
                data coerced = ""
                data nullable = ""
                data format = ""
                data encrypt = ""

                if (meth.MethodType==MethodType.Function && meth.ReturnValue.CoerceType!=CoerceType.None)
                begin
                    using meth.ReturnValue.CoerceType select
                    (CoerceType.Boolean),
                        coerced = ",cType=xfType.Boolean"
                    (CoerceType.Byte),
                        coerced = ",cType=xfType.byte"
                    (CoerceType.DateTime),
                        coerced = ",cType=xfType.DateTime"
                    (CoerceType.DateTimeNullable),
                    begin
                        coerced = ",cType=xfType.DateTime"
                        nullable = ",nullable=true"
                    end
                    (CoerceType.Decimal),
                        coerced = ",cType=xfType.decimal"
                    (CoerceType.DecimalNullable),
                    begin
                        coerced = "cType=xfType.decimal"
                        nullable = ",nullable=true"
                    end
                    (CoerceType.Double),
                        coerced = ",cType=xfType.double"
                    (CoerceType.Float),
                        coerced = ",cType=xfType.float"
                    (CoerceType.Int),
                        coerced = ",cType=xfType.int"
                    (CoerceType.Long),
                        coerced = ",cType=xfType.long"
                    (CoerceType.Sbyte),
                        coerced = ",cType=xfType.sbyte"
                    (CoerceType.Short),
                        coerced = ",cType=xfType.short"
                    (CoerceType.Uint),
                        coerced = ",cType=xfType.uint"
                    (CoerceType.Ulong),
                        coerced = ",cType=xfType.ulong"
                    (CoerceType.Ushort),
                        coerced = ",cType=xfType.ushort"
                    endusing
                end

                if (meth.MethodType==MethodType.Function && meth.ReturnValue.DateFormat!=DateFormat.None)
                begin
                    using meth.ReturnValue.DateFormat select
                    (DateFormat.YYYYMMDD),
                        format = ",format=xfFormat.YYYYMMDD"
                    (DateFormat.YYMMDD),
                        format = ",format=xfFormat.YYMMDD"
                    (DateFormat.YYYYJJJ),
                        format = ",format=xfFormat.YYYYJJJ"
                    (DateFormat.YYJJJ),
                        format = ",format=xfFormat.YYJJJ"
                    (DateFormat.HHMMSS),
                        format = ",format=xfFormat.HHMMSS"
                    (DateFormat.HHMM),
                        format = ",format=xfFormat.HHMM"
                    (DateFormat.YYYYMMDDHHMISS),
                        format = ",format=xfFormat.YYYYMMDDHHMISS"
                    (DateFormat.YYYYMMDDHHMISSUUUUUU),
                        format = ",format=xfFormat.YYYYMMDDHHMISSUUUUUU"
                    endusing
                end

                if (meth.Encrypt)
                begin
                    encrypt = ",encrypt=true"
                end

                mreturn String.Format('{0}xfMethod(name="{1}",id="{2}",interface="{3}",elb="{4}"{5}{6}{7}{8}){9}',"{",meth.Name,meth.Id,iface.Name,meth.Elb,coerced,nullable,format,encrypt,"}")
            end
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodComment, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.Comment
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodEncrypt, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.Encrypt.ToString()
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodElb, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.Elb
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodId, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.Id
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodName, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth)
            begin
                if ((tkn.Value) == "METHOD_NAME" 
                &    && tkn.Modifier == TokenModifier.None
                &    && template.Context.CurrentTask.Tweaks.Contains("SMC_CAMEL_CASE")) then
                begin
                    tkn.Modifier = TokenModifier.CamelCase
                    mreturn meth.Name.ToUpper()
                end
                else if ((tkn.Value) == "METHOD_NAME" 
                &    && tkn.Modifier == TokenModifier.None
                &    && template.Context.CurrentTask.Tweaks.Contains("SMC_PASCAL_CASE")) then
                begin
                    tkn.Modifier = TokenModifier.PascalCase
                    mreturn meth.Name.ToUpper()
                end
                else
                    mreturn meth.Name
            end
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodParameters, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.Parameters.Count.ToString()
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodRoutine, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.Routine
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodType, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.MethodType.ToString()
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        ;---------------------------------------------------------------------------------

        private static method expandMethodReturnCoerceType, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.ReturnValue.CoerceType.ToString()
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnComment, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.ReturnValue.Comment
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnCsTypeXf, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth)
            begin
                if meth.ReturnValue.CoerceType == CoerceType.None
                then
                begin
                    ;; Non-coerced return type
                    using meth.ReturnValue.Type select
                    (ReturnType.Alpha),
                    begin
                        mreturn "string"
                    end
                    (ReturnType.Decimal),
                    begin
                        if (meth.ReturnValue.Size <= 9) then
                            mreturn "int"
                        else if (meth.ReturnValue.Size <= 18) then
                            mreturn "long"
                        else
                            mreturn "decimal"
                    end
                    (ReturnType.ImpliedDecimal),
                    begin
                        mreturn "decimal"
                    end
                    (ReturnType.Integer),
                    begin
                        using meth.ReturnValue.Size select
                        (1),
                            mreturn "byte"
                        (2),
                            mreturn "short"
                        (4),
                            mreturn "int"
                        (8),
                            mreturn "long"
                        endusing
                    end
                    (ReturnType.HatVal),
                    begin
                        mreturn "int"
                    end
                    (ReturnType.Enumeration),
                    begin
                        mreturn "int"
                    end
                    (ReturnType.String),
                    begin
                        mreturn "string"
                    end
                    (ReturnType.None),
                    begin
                        mreturn "void"
                    end
                    endusing
                end
                else
                begin
                    ;; Coerced return type
                    using meth.ReturnValue.CoerceType select
                    (CoerceType.Double),
                        mreturn "double"
                    (CoerceType.DateTimeNullable),
                        mreturn "DateTime?"
                    (CoerceType.DecimalNullable),
                        mreturn "decimal?"
                    (CoerceType.Uint),
                        mreturn "uint"
                    (CoerceType.Boolean),
                        mreturn "bool"
                    (CoerceType.Ushort),
                        mreturn "ushort"
                    (CoerceType.Ulong),
                        mreturn "ulong"
                    (CoerceType.Sbyte),
                        mreturn "sbyte"
                    (CoerceType.Int),
                        mreturn "int"
                    (CoerceType.DateTime),
                        mreturn "DateTime"
                    (CoerceType.Decimal),
                        mreturn "decimal"
                    (CoerceType.Short),
                        mreturn "short"
                    (CoerceType.Long),
                        mreturn "long"
                    (CoerceType.Byte),
                        mreturn "byte"
                    (CoerceType.Float),
                        mreturn "float"
                    endusing
                end
            end

            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)

        endmethod

        private static method expandMethodReturnDateFormat, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.ReturnValue.DateFormat.ToString()
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnEnum, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.ReturnValue.EnumName
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnPrecision, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.ReturnValue.Precision > 0 ? meth.ReturnValue.Precision.ToString() : String.Empty
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnSize, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.ReturnValue.Size > 0 ? meth.ReturnValue.Size.ToString() : String.Empty
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnSampleData, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth)
            begin
                using meth.ReturnValue.Type select
                (ReturnType.Alpha),
                    mreturn '""'
                (ReturnType.Decimal),
                    mreturn '0'
                (ReturnType.Enumeration),
                    mreturn '0'
                (ReturnType.HatVal),
                    mreturn '0'
                (ReturnType.ImpliedDecimal),
                    mreturn '0.0'
                (ReturnType.Integer),
                    mreturn '0'
                (ReturnType.None),
                    mreturn ''
                (ReturnType.String),
                    mreturn '""'
                endusing
            end
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnType, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth)
            begin
                using meth.ReturnValue.Type select
                (ReturnType.Alpha),
                    mreturn String.Format("A{0}",meth.ReturnValue.Size)
                (ReturnType.Decimal),
                    mreturn String.Format("D{0}",meth.ReturnValue.Size)
                (ReturnType.Enumeration),
                    mreturn meth.ReturnValue.EnumName
                (ReturnType.HatVal),
                    mreturn "^VAL"
                (ReturnType.ImpliedDecimal),
                    mreturn String.Format("D{0}.{1}",meth.ReturnValue.Size,meth.ReturnValue.Precision)
                (ReturnType.Integer),
                    mreturn String.Format("I{0}",meth.ReturnValue.Size)
                (ReturnType.None),
                    mreturn ""
                (ReturnType.String),
                    mreturn "STRING"
                endusing
            end
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnTsType, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth)
            begin
                using meth.ReturnValue.Type select
                (ReturnType.Alpha),
                    mreturn "string"
                (ReturnType.Decimal),
                begin
                    if (meth.ReturnValue.Type == ReturnType.Decimal && meth.ReturnValue.CoerceType == CoerceType.DateTime) then
                        mreturn "Date"
                    else if (meth.ReturnValue.Type == ReturnType.Decimal && meth.ReturnValue.CoerceType == CoerceType.DateTimeNullable) then
                        mreturn "Nullable<Date>"
                    else if (meth.ReturnValue.CoerceType == CoerceType.Boolean) then
                        mreturn "boolean"
                    else
                        mreturn "number"
                end
                (ReturnType.Enumeration),
                    mreturn "number"
                (ReturnType.HatVal),
                    mreturn "number"
                (ReturnType.ImpliedDecimal),
                    mreturn "number"
                (ReturnType.Integer),
                begin
                    if (meth.ReturnValue.CoerceType == CoerceType.Boolean) then
                        mreturn "boolean"
                    else
                        mreturn "number"
                end
                (ReturnType.None),
                    mreturn ""
                (ReturnType.String),
                    mreturn "string"
                endusing
                meth.ReturnValue.Type.ToString()
            end
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodCustom, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth)
            begin
                 if (meth.CustomExpansionTokens == ^null)
                    mreturn ""
                data customTokenName = tkn.Value.Replace("CUSTOM_METHOD_","")
                data customToken, @ExpansionToken, meth.CustomExpansionTokens.FirstOrDefault(lambda(et) { et.Name == customTokenName } )
                mreturn (customToken == ^null) ? "" : customToken.Value
            end
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

    endclass

endnamespace
