;; *****************************************************************************
;; 
;;  Title:       TokenExpanderMethodLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands method loop token nodes
;; 
;;  Date:        20th March 2018
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2018, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.Engine
import CodeGen.MethodCatalogAPI
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        methodLoopTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerMethodLoopTokens, void
            endparams
        proc
            methodLoopTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()
            methodLoopTokenExpanders.Add("METHOD_COMMENT", expandMethodComment)
            methodLoopTokenExpanders.Add("METHOD_ENCRYPT", expandMethodEncrypt)
            methodLoopTokenExpanders.Add("METHOD_ELB", expandMethodElb)
            methodLoopTokenExpanders.Add("METHOD_ID", expandMethodId)
            methodLoopTokenExpanders.Add("METHOD_NAME", expandMethodName)
            methodLoopTokenExpanders.Add("METHOD_PARAMETERS", expandMethodParameters)
            methodLoopTokenExpanders.Add("METHOD_ROUTINE", expandMethodRoutine)
            methodLoopTokenExpanders.Add("METHOD_TYPE", expandMethodType)

            methodLoopTokenExpanders.Add("METHOD_RETURN_COERCE_TYPE", expandMethodReturnCoerceType)
            methodLoopTokenExpanders.Add("METHOD_RETURN_COMMENT", expandMethodReturnComment)
            methodLoopTokenExpanders.Add("METHOD_RETURN_DATE_FORMAT", expandMethodReturnDateFormat)
            methodLoopTokenExpanders.Add("METHOD_RETURN_ENUM", expandMethodReturnEnum)
            methodLoopTokenExpanders.Add("METHOD_RETURN_PRECISION", expandMethodReturnPrecision)
            methodLoopTokenExpanders.Add("METHOD_RETURN_SIZE", expandMethodReturnSize)
            methodLoopTokenExpanders.Add("METHOD_RETURN_TYPE", expandMethodReturnType)

        endmethod

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="tkn"></param>
        ;;; <param name="template"></param>
        ;;; <param name="loops"></param>
        ;;; <param name="specific"></param>
        ;;; <returns></returns>
        public static method ExpandMethodLoopToken, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<Smc, SmcInterface, SmcMethod, string> 
            endparams
        proc
            lambda isMethodLoop(node) node .is. MethodLoopNode
            data loop, @MethodLoopNode, ^as(loops.First(isMethodLoop), MethodLoopNode)
            mreturn specific(template.Context.Taskset.MethodCatalog,loop.CurrentInterface, loop.CurrentMethod)
        endmethod

        private static method expandMethodComment, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.Comment
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodEncrypt, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.Encrypt.ToString()
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodElb, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.Elb
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodId, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.Id
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodName, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.Name
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodParameters, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.Parameters.Count.ToString()
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodRoutine, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.Routine
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodType, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.MethodType.ToString()
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        ;---------------------------------------------------------------------------------

        private static method expandMethodReturnCoerceType, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.ReturnValue.CoerceType.ToString()
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnComment, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.ReturnValue.Comment
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnDateFormat, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.ReturnValue.DateFormat.ToString()
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnEnum, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.ReturnValue.EnumName
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnPrecision, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.ReturnValue.Precision > 0 ? meth.ReturnValue.Precision.ToString() : String.Empty
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnSize, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth) meth.ReturnValue.Size > 0 ? meth.ReturnValue.Size.ToString() : String.Empty
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandMethodReturnType, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(catalog,iface,meth)
            begin
                using meth.ReturnValue.Type select
                (ReturnType.Alpha),
                    mreturn String.Format("A{0}",meth.ReturnValue.Size)
                (ReturnType.Decimal),
                    mreturn String.Format("D{0}",meth.ReturnValue.Size)
                (ReturnType.Enumeration),
                    mreturn meth.ReturnValue.EnumName
                (ReturnType.HatVal),
                    mreturn "^VAL"
                (ReturnType.ImpliedDecimal),
                    mreturn String.Format("D{0}.{1}",meth.ReturnValue.Size,meth.ReturnValue.Precision)
                (ReturnType.Integer),
                    mreturn String.Format("I{0}",meth.ReturnValue.Size)
                (ReturnType.None),
                    mreturn ""
                (ReturnType.String),
                    mreturn "STRING"
                endusing
                meth.ReturnValue.Type.ToString()
            end
            mreturn ExpandMethodLoopToken(tkn, template, loops, doExpand)
        endmethod

    endclass

endnamespace
