;; *****************************************************************************
;; 
;;  Title:       TokenExpanderKeyLoop.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Expands key loop token nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks
import CodeGen.RepositoryAPI

.array 0

namespace CodeGen.Engine

    public partial class TokenExpander

        keyLoopTokenExpanders, @Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>

        private method registerKeyLoopTokens, void
            endparams
		proc

            keyLoopTokenExpanders = new Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, string>>()
			
			keyLoopTokenExpanders.Add("KEY_CHANGES", expandKeyChanges)
            keyLoopTokenExpanders.Add("KEY_DENSITY", expandKeyDensity)
            keyLoopTokenExpanders.Add("KEY_DESCRIPTION", expandKeyDescription)
            keyLoopTokenExpanders.Add("KEY_DUPLICATES", expandKeyDuplicates)
            keyLoopTokenExpanders.Add("KEY_DUPLICATES_AT", expandKeyDuplicatesAt)
            keyLoopTokenExpanders.Add("KEY_ISAMC_SPEC", expandKeyIsamcSpec)
            keyLoopTokenExpanders.Add("KEY_LENGTH", expandKeyLength)
            keyLoopTokenExpanders.Add("KEY_NAME", expandKeyName)
            keyLoopTokenExpanders.Add("KEY_NULLTYPE", expandKeyNullType)
            keyLoopTokenExpanders.Add("KEY_NULLVALUE", expandKeyNullValue)
            keyLoopTokenExpanders.Add("KEY_NUMBER", expandKeyNumber)
            keyLoopTokenExpanders.Add("KEY_ORDER", expandKeyOrder)
            keyLoopTokenExpanders.Add("KEY_SEGMENTS", expandKeySegments)
			keyLoopTokenExpanders.Add("KEY_UNIQUE", expandKeyUnique)

        endmethod

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="tkn"></param>
        ;;; <param name="template"></param>
        ;;; <param name="loops"></param>
        ;;; <param name="specific"></param>
        ;;; <returns></returns>
        public static method ExpandKeyLoopToken, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            specific, @Func<RpsStructure, RpsKey, int, string> 
            endparams
        proc
            lambda isKeyLoop(node) node .is. KeyLoopNode
			data loop, @KeyLoopNode, ^as(loops.First(isKeyLoop), KeyLoopNode)
            mreturn specific(template.Context.CurrentStructure, loop.CurrentKey, loop.CurrentIndex)
        endmethod

        private static method expandKeyChanges, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index) ky.Modifiable ? "CHANGES" : "NOCHANGES"
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandKeyDensity, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index) ky.Density.ToString()
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandKeyDescription, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index) ky.Description
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandKeyDuplicates, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                using (ky.Duplicates) select
                (RpsKeyDuplicates.Duplicates),
                    mreturn "DUPLICATES"
                (RpsKeyDuplicates.NoDuplicates),
                    mreturn "UNIQUE"
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandKeyDuplicatesAt, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                using (ky.InsertDuplicates) select
                (RpsKeyInsertDups.AtFront),
                    mreturn "FRONT"
                (RpsKeyInsertDups.AtEnd),
                    mreturn "END"
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandKeyIsamcSpec, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                ;;Build the ISAMC key specification string
                data sb = new StringBuilder()
                data k, @RpsKey, ky
                data seg, @RpsKeySegment
                data firstOne, boolean
				
                ;;Segment start positions
                sb.Append("START=")
                firstOne = true
                foreach seg in k.Segments
                begin
                    if (!firstOne)
                        sb.Append(":")
                    sb.Append(seg.Position)
                    firstOne=false
                end
				
                ;;Segment lengths
                sb.Append(",LENGTH=")
                firstOne = true
                foreach seg in k.Segments
                begin
                    if (!firstOne)
                        sb.Append(":")
                    sb.Append(seg.Length)
                    firstOne=false
                end
				
                ;;Key name
                sb.Append(",NAME="+k.Name)

                ;;Segment types (optional)
                if (k.Segments[0].DataType != RpsKeySegmentDataType.Unspecified)
                begin
                    sb.Append(",TYPE=")

                    ;;Do all segments have a data type specified?
                    data allSegmentsHaveType = true
                    foreach seg in k.Segments
                    begin
                        if (seg.DataType == RpsKeySegmentDataType.Unspecified)
                        begin
                            allSegmentsHaveType = false
                            exitloop
                        end
                    end

                    ;;Insert one or all segment data types
                    firstOne = true
                    foreach seg in k.Segments
                    begin
                        if (!firstOne)
                            sb.Append(":")

                        using seg.DataType select
                        (RpsKeySegmentDataType.Alpha),
                            sb.Append("ALPHA")
                        (RpsKeySegmentDataType.NoCaseAlpha),
                            sb.Append("NOCASE")
                        (RpsKeySegmentDataType.Decimal),
                            sb.Append("DECIMAL")
                        (RpsKeySegmentDataType.SignedInteger),
                            sb.Append("INTEGER")
                        (RpsKeySegmentDataType.UnsignedInteger),
                            sb.Append("UNSIGNED")
                        (RpsKeySegmentDataType.AutoSequence),
                            sb.Append("SEQUENCE")
                        (RpsKeySegmentDataType.AutoTimestampUpdated),
                            sb.Append("TIMESTAMP")
                        (RpsKeySegmentDataType.AutoTimestampCreated),
                            sb.Append("CTIMESTAMP")
                        endusing

                        if (firstOne && !allSegmentsHaveType)
                            exitloop

                        firstOne=false
                    end
                end
				
                ;;Segment sequences

                ;;To specify segment ordering ALL segments must have a sequence specified

                data allSegmentsHaveOrder = true
                foreach seg in k.Segments
                begin
                    if (seg.Order == RpsKeySegmentOrder.Unspecified)
                    begin
                        allSegmentsHaveOrder = false
                        exitloop
                    end
                end

                if (allSegmentsHaveOrder) then
                begin
                    sb.Append(",ORDER=")
                    firstOne = true
                    foreach seg in k.Segments
                    begin
                        if (!firstOne)
                            sb.Append(":")
                        sb.Append(seg.Order==RpsKeySegmentOrder.Ascending ? "A" : "D")
                        firstOne=false
                    end
                end
                else
                begin
                    ;;No segment ordering is being used, so we'll use key ordering instead
                    ;;Order
                    using k.SortOrder select
                    (RpsKeyOrder.Ascending),
                        sb.Append(",ASCEND")
                    (RpsKeyOrder.Descending),
                        sb.Append(",NOASCEND")
                    endusing
                end

                ;;Key density
                sb.Append(",DENSITY=")
                if (k.Density<50) then
                    sb.Append("50")
                else
                    sb.Append(k.Density.ToString())

                ;;Duplicates?
                using k.Duplicates select
                (RpsKeyDuplicates.NoDuplicates),
                begin
                    sb.Append(",DUPS")
                    ;TODO: This needs suppressing if we're generating this for OpenVMS
                    using k.InsertDuplicates select
                    (RpsKeyInsertDups.AtFront),
                        sb.Append(",NOATEND")
                    (RpsKeyInsertDups.AtEnd),
                        sb.Append(",ATEND")
                    endusing
                end
                (RpsKeyDuplicates.Duplicates),
                    sb.Append(",NODUPS")
                endusing

                ;;Changes?
                if (k.Modifiable) then
                    sb.Append(",MODIFY")
                else
                    sb.Append(",NOMODIFY")
				
                ;;Compression
                if (k.CompressIndex||k.CompressData||k.CompressKey)
                begin
                    ;;All options?
                    if (k.CompressIndex&&k.CompressData&&k.CompressKey) then
                        sb.Append(",COMPRESS=ALL")
                    else
                    begin
                        if (k.CompressIndex)
                            sb.Append(",COMPRESS=INDEX")
                        if (k.CompressData)
                            sb.Append(",COMPRESS=RECORD")
                        if (k.CompressKey)
                            sb.Append(",COMPRESS=KEY")
                    end
                end
				
                ;;Null key?
                using k.NullKey select
                (RpsKeyNullType.None),
                    nop
                (RpsKeyNullType.Replicating),
                    sb.Append(",NULL=REPLICATE")
                (RpsKeyNullType.NonReplicating),
                    sb.Append(",NULL=NOREPLICATE")
                (RpsKeyNullType.Short),
                    sb.Append(",NULL=SHORT")
                endusing
				
                ;;Null key value
                if (!String.IsNullOrWhiteSpace(k.NullKeyValue))
                    sb.Append(",VALUE_NULL="+k.NullKeyValue)

                mreturn sb.ToString()
            end
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandKeyLength, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index) ky.Size.ToString()
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandKeyName, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index) ky.Name
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandKeyNullType, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                using (ky.NullKey) select
                (RpsKeyNullType.None),
                    mreturn "NONE"
                (RpsKeyNullType.Replicating),
                    mreturn "REPLICATE"
                (RpsKeyNullType.NonReplicating),
                    mreturn "NOREPLICATE"
                (RpsKeyNullType.Short),
                    mreturn "SHORT"
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandKeyNullValue, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index) ky.NullKeyValue
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandKeyNumber, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index) index.ToString()
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandKeyOrder, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                using (ky.SortOrder) select
                (RpsKeyOrder.Ascending),
                    mreturn "ASC"
                (RpsKeyOrder.Descending),
                    mreturn "DESC"
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandKeySegments, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index) ky.Segments.Count.ToString()
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
        endmethod

        private static method expandKeyUnique, string
            tkn, @Token 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            lambda doExpand(str, ky, index)
            begin
                using (ky.Duplicates) select
                (RpsKeyDuplicates.NoDuplicates),
                    mreturn "UNIQUE"
                (RpsKeyDuplicates.Duplicates),
                    mreturn ""
                (),
                    mreturn ""
                endusing
            end
            mreturn ExpandKeyLoopToken(tkn, template, loops, doExpand)
		endmethod

	endclass

endnamespace