;;*****************************************************************************
;;
;; Title:       ParseWindowScript.dbl
;;
;; Type:        Function
;;
;; Description: Parse a UI Toolkit window script file
;;
;; Date:        9th November 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

    function ParseWindowScript, ^val
        required inout WscFile, a
        required out Structures, @RpsStructureCollection
        required out aErrorMessage, string
        endparams

        record local_data
            WscFields   ,@WscFieldCollection    ;;Collection of input window fields
            ErrStatus   ,int                    ;;Error status
            WindowNum   ,int                    ;;Input window number to process
            WindowCnt   ,int                    ;;Input windows found so far
            WscChn      ,int                    ;;Window script file channel
            GotWindow   ,int                    ;;We have an input window to process
            WndHeight   ,int                    ;;Height of input window
            WndWidth    ,int                    ;;Width of input window
            InWindow    ,int                    ;;We are processing an input window
            wscrec1     ,a2048                  ;;Temp I/O buffer
            wscrec2     ,a2048                  ;;Temp I/O buffer
            InpWnd      ,a15                    ;;Input window being processed
            InpWndStr   ,a30                    ;;Input window repository structure
            FirstStr    ,a30                    ;;First repository structure we encountered in the window
        endrecord

    proc

        init local_data
        aErrorMessage = ""

        ;;Is there a window number specified?
        begin
            data pos1, int
            if (pos1=instr(1,WscFile,"#"))
            begin
                ;;Make sure there is data after the # and it is numeric
                if ((pos1==trim(WscFile)) || (!IsNumeric(WscFile(pos1+1,trim(WscFile)))))
                begin
                    data mtx, a132
                    s_bld(mtx,,"Can't open window script %a!",WscFile)
                    ErrorLog(mtx)
                    ErrStatus=54
                    aErrorMessage = atrim(mtx)
                    freturn ErrStatus
                end
                ;;Extract the window number
                WindowNum = integer(WscFile(pos1+1,trim(WscFile)))
                ;;Remove the window number from the script file name
                WscFile = WscFile(1:pos1-1)
            end
        end

        ;;Add default file extension if needed
        if (!instr(1,WscFile,"."))
            WscFile=atrim(WscFile)+".wsc"

        DebugLog("Parsing window script "+UpperCase(WscFile),true,false)

        ;;If no window number specified, go for the first one
        if (!WindowNum)
            WindowNum=1

        DebugLog(" - Searching for input window #" + string(WindowNum),false,false)

        ;;Open the file, fail if can't
        try
            open(WscChn=0,i:s,WscFile)
        catch (ex)
        begin
            data mtx, a132
            s_bld(mtx,,"Can't open window script %a!",WscFile)
            ErrorLog(mtx)
            aErrorMessage = atrim(mtx)
            ErrStatus=54
            freturn ErrStatus
        end
        endtry

        WscFields = new WscFieldCollection()

        clear InWindow
        repeat
        begin

            ;;Read a record
            reads(WscChn,wscrec1,eowsc)

            ;;Ignore blank lines
            if (!wscrec1)
                nextloop

            ;;Ignore comments
            if (wscrec1==";")
                nextloop

            ;;Check for continuation lines
            repeat
            begin
                data ix, int
                data pos1, int, 1
                if (wscrec1(trim(wscrec1):1)!="-")
                    exitloop
                ;;Strip off the continuation
                wscrec1 = wscrec1(1:trim(wscrec1)-1)
                ;;Read the next record
                reads(WscChn,wscrec2,eowsc)
                ;;Find the first non-whitespace character in the additional line
                for ix from 1 thru trim(wscrec2)
                begin
                    if (wscrec2(ix:1))
                    begin
                        pos1 = ix
                        if (pos1>1)
                            pos1-=1
                        exitloop
                    end
                end
                ;;Add this line to the previous one
                wscrec1 = atrim(wscrec1) + wscrec2(pos1,trim(wscrec2))
            end

            ;;If we're processing an input window and we find a .end then we're
            ;;done, otherwise ignore it
            if (LowerCase(wscrec1)==".end")
            begin
                if (InWindow) then
                begin
                    DebugLog(" - Found end of input window #" + string(WindowCnt),false,false)
                    GotWindow=1
                    exitloop
                end
                else
                    nextloop
            end

            ;;Look for the start of an input window
            if (LowerCase(wscrec1)==".input")
            begin
                data pos1, int
                ;;Is this the one we were looking for?
                if ((WindowCnt+=1) != WindowNum)
                begin
                    DebugLog(" - Skipping input window #" + string(WindowCnt),false,false)
                    nextloop
                end
                ;;Yes
                InWindow=1
                ;;Remove the .input
                locase wscrec1(1:6)
                wscrec1 = wscrec1 - ".input "
                ;;Find the , for the end of the window name and extract the name
                pos1=instr(1,wscrec1,",")
                InpWnd = wscrec1(1:pos1-1)
                wscrec1 = wscrec1(pos1+1,trim(wscrec1))
                wscrec1 = RemoveLeading(wscrec1)
                ;;Find the , for the end of the height
                pos1=instr(1,wscrec1,",")
                WndHeight = integer(atrim(wscrec1(1:pos1-1)))
                wscrec1 = wscrec1(pos1+1,trim(wscrec1))
                wscrec1 = RemoveLeading(wscrec1)
                ;;All that is left should be the width
                WndWidth = integer(atrim(wscrec1))
                DebugLog(" - Found start of input window #" + string(WindowCnt) + " " + UpperCase(InpWnd),false,false)
                nextloop
            end

            if (InWindow&&LowerCase(wscrec1)==".repository_structure")
            begin
                data pos1, int

                ;;Are we already processing a structure?
                if (InpWndStr)
                begin
                    if (!Env.MultipleStructures)
                    begin
                        ErrorLog("Input window references multiple repository structures!!")
                        ErrStatus=1
                        aErrorMessage = "Input window references multiple repositoryu structures!!"
                        exitloop
                    end
                end

                upcase wscrec1
                wscrec1 = wscrec1 - ".REPOSITORY_STRUCTURE "
                ;;Look for a , which would indicate the presence of repository file specs
                if (pos1=instr(1,wscrec1,","))
                    wscrec1 = wscrec1(1:pos1-1)
                ;;What remains should be the structure name
                InpWndStr = UpperCase(wscrec1)

                if (!FirstStr)
                    FirstStr = InpWndStr

                DebugLog(" - Repository structure is " + atrim(InpWndStr),false,false)
                nextloop
            end

            if (InWindow&&LowerCase(wscrec1)==".field")
            begin
                data pos1, int
                data WscField, @WscField

                ;;Remove the .field
                locase wscrec1(1:6)
                wscrec1 = wscrec1 - ".field "

                ;;Find the , at the end of the field name
                pos1=instr(1,wscrec1,",")

                ;;Add the field to the fields collection
                WscField = new WscField(InpWndStr, wscrec1(1:pos1-1),CleanScriptField(wscrec1(pos1+1,trim(wscrec1))))
                WscFields.Add(WscField)

                DebugLog(" - Found field "+WscField.Name+" params "+WscField.Attributes,false,false)
                nextloop
            end

            ;;If we find local fields then give up
            if (LowerCase(wscrec1)==".local")
            begin
                data mtx, a132
                s_bld(mtx,,"Unsupported local fields found in window script %a!",WscFile)
                ErrorLog(mtx)
                ErrStatus=55
                aErrorMessage = atrim(mtx)
                exitloop
            end

            ;;If we find a local structure then give up
            if (LowerCase(wscrec1)==".structure")
            begin
                data mtx, a132
                s_bld(mtx,,"Unsupported local structure found in window script %a!",WscFile)
                ErrorLog(mtx)
                ErrStatus=56
                aErrorMessage = atrim(mtx)
                exitloop
            end

            ;;Ignore .blank
            if (LowerCase(wscrec1)==".blank")
                nextloop

            ;;Ignore .border
            if (LowerCase(wscrec1)==".border")
                nextloop

            ;;Ignore .box
            if (LowerCase(wscrec1)==".box")
                nextloop

            ;;If we find a .button then add it to the Env.Buttons collection
            if (LowerCase(wscrec1)==".button ")
                Env.Buttons.Add(WscButton.ParseScript(wscrec1))

            ;;Ignore .button_set
            if (LowerCase(wscrec1)==".button_set")
                nextloop

            ;;Ignore .column
            if (LowerCase(wscrec1)==".column")
                nextloop

            ;;Ignore .data
            if (LowerCase(wscrec1)==".data")
                nextloop

            ;;Ignore .date_generated
            if (LowerCase(wscrec1)==".date_generated")
                nextloop

            ;;Ignore .display_area
            if (LowerCase(wscrec1)==".display_area")
                nextloop

            ;;Ignore .entry
            if (LowerCase(wscrec1)==".entry")
                nextloop

            ;;Ignore .fill
            if (LowerCase(wscrec1)==".fill")
                nextloop

            ;;Ignore .font
            if (LowerCase(wscrec1)==".font")
                nextloop

            ;;Ignore .item
            if (LowerCase(wscrec1)==".item")
                nextloop

            ;;Ignore .line
            if (LowerCase(wscrec1)==".line")
                nextloop

            ;;Ignore .list
            if (LowerCase(wscrec1)==".list")
                nextloop

            ;;Ignore .listclass
            if (LowerCase(wscrec1)==".listclass")
                nextloop

            ;;Ignore .paint
            if (LowerCase(wscrec1)==".paint")
                nextloop

            ;;Ignore .placement
            if (LowerCase(wscrec1)==".placement")
                nextloop

            ;;Ignore .script
            if (LowerCase(wscrec1)==".script")
                nextloop

            ;;Ignore .script
            if (LowerCase(wscrec1)==".select")
                nextloop

            ;;Ignore .set - for the time being at least.  Later we can try to support
            ;;sets by generating methods to enable and disable set fields?
            if (LowerCase(wscrec1)==".set")
                nextloop

            ;;Ignore .text
            if (LowerCase(wscrec1)==".text")
                nextloop

            ;;Ignore .title - for the time being at least.  Later we should try to
            ;;propagate this so it can be used to set generated form titles.
            if (LowerCase(wscrec1)==".title")
                nextloop

            ;;Ignore .trim
            if (LowerCase(wscrec1)==".trim")
                nextloop

            ;;Ignore .user_define
            if (LowerCase(wscrec1)==".user_define")
                nextloop

            ;;Ignore .version
            if (LowerCase(wscrec1)==".version")
                nextloop

            ;;Ignore .wfield
            if (LowerCase(wscrec1)==".wfield")
                nextloop

            ;;Ignore .wfield
            if (LowerCase(wscrec1)==".window")
                nextloop

        end

eowsc,  close WscChn

        ;;Did we find an input window
        if ((!errstatus)&&(!GotWindow))
        begin
            data mtx, a132
            s_bld(mtx,,"No input windows found in window script %a!",WscFile)
            ErrorLog(mtx)
            ErrStatus=57
            aErrorMessage = atrim(mtx)
            clear WscFields
        end

        ;;Did it have any fields
        if ((!ErrStatus)&&(!WscFields.Count))
        begin
            data mtx, a132
            s_bld(mtx,,"Input window %a in script file %a contains no fields!",InpWnd,WscFile)
            ErrorLog(mtx)
            ErrStatus=58
            aErrorMessage = atrim(mtx)
            clear WscFields
        end

        if (!ErrStatus)
        begin
            ;;We have a structure to process
            data Fields     ,@RpsFieldCollection
            data WscField   ,@WscField
            data Struct     ,@RpsStructure
            data ix, int

            ;;Create an collection of repository fields containing only the
            ;;fields from the input window

            Fields = new RpsFieldCollection()
            foreach WscField in WscFields.GetEnumerator()
            begin
                data Field, @RpsField
                ;;Create a new field containing the repository data
                try
                begin
                    ;;This code is a bit of a cludge.  Basically script files
                    ;;can now contain array elements, so we need to suppress
                    ;;that and treat them like individual fields
                    data Bracket1Pos, int
                    Bracket1Pos = instr(1,WscField.Name,"[")
                    if (Bracket1Pos) then
                    begin
                        data Bracket2Pos, int
                        data TmpArrayDim, [#]int
                        Field = new RpsField(WscField.Structure,WscField.Name(1,Bracket1Pos-1))
                        ;;Suffix the field name with the old array element #
                        Bracket2Pos = instr(Bracket1Pos,WscField.Name,"]")
                        Field.Name = Field.Name + WscField.Name(Bracket1Pos+1,Bracket2Pos-1)
                        ;;Now stop the field being treated as an array by CodeGen
                        TmpArrayDim = new int[4]
                        TmpArrayDim[1] = 1
                        TmpArrayDim[2] = 0
                        TmpArrayDim[3] = 0
                        TmpArrayDim[4] = 0
                        Field.ArrayDimension = TmpArrayDim
                    end
                    else
                        Field = new RpsField(WscField.Structure,WscField.Name)
                end
                catch (ex)
                begin
                    ErrorLog(ex.ToString())
                    ErrStatus=1
                    aErrorMessage = ex.ToString()
                    exitloop
                end
                endtry
                ;;Apply script file customizations to the field
                if (ErrStatus = ParseScriptField(Field,WscField.Attributes))
                begin
                    aErrorMessage = "Failed to apply script file customizations to repository field."
                    exitloop
                end
                ;;Add the field to the fields collection
                Fields.Add(Field)
            end

            if (!ErrStatus)
            begin
                ;;If we're using multiple structures then report the structure name as the FIRST one that we encountered


                ;;Now create a structure containing the fields from the input window
                try
                    Struct = new RpsStructure(FirstStr,Fields)
                catch (ex)
                begin
                    data mtx, a132
                    s_bld(mtx,,"Structure %a not found!",Env.CurrentStructure.Name)
                    ErrorLog(mtx)
                    ErrStatus=33
                    aErrorMessage = atrim(mtx)
                end
                endtry

                ;;Load the structure into a structure collection and return it
                if (!ErrStatus)
                begin
                    Structures = new RpsStructureCollection(RpsLoadMode.NoLoad)
                    Structures.Add(Struct)
                end
            end
        end

        if (!ErrStatus)
        begin

            Env.RpsInUse = true
            Env.GenFromWsc = true
            Env.WindowHeight = WndHeight
            Env.WindowWidth = WndWidth
            Env.WindowName = UpperCase(InpWnd)

            if (Env.Verbose)
            begin
                VerboseLog("Processing UI Toolkit Window Script, input window " + UpperCase(InpWnd),true,false)
                VerboseLog(" - Height " + string(WndHeight) + " Width " + string(WndWidth) + " Structure "+atrim(FirstStr) + " Fields " + string(WscFields.Count),false,false)
            end
        end

        freturn ErrStatus

    endfunction

endnamespace
