;;*****************************************************************************
;;
;; Title:       WinDir.dbl
;;
;; Type:        Function
;;
;; Description: Returns dynamic memory section containing filenames matching
;;              a passed file specification.
;;
;; Date:        16th October 2010
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI
import System.Collections

namespace CodeGen.Engine

    enum WinDirCase
        NoChange
        UpperCase
        LowerCase
    endenum

    function WinDir, ^VAL

        required in  a_spec     ,a          ;;Search spec
        required out a_tpls     ,@ArrayList ;;Template names
        required in  a_case     ,WinDirCase ;;Return filenames in upper or lower case
        endparams

        stack record local_data
            ok          ,i4
            dll         ,i4     ;;DLL Handle
            sh          ,i4     ;;Search handle
            mhs         ,i4     ;;Current size of dynamic memory
            len         ,i4     ;;Length of file name
            posn        ,i4
            spec        ,a260   ;;Search spec
        endrecord

        stack record WIN32_FIND_DATA
            FileAttributes      ,i4     ;;File attribute bit flags
            CreationTimeLow     ,i4     ;; Low-order 32 bits of file creation time (UTC format)
            CreationTimeHigh    ,i4     ;;High-order 32 bits of file creation time (UTC format)
            LastAccessTimeLow   ,i4     ;; Low-order 32 bits of last access time (UTC format)
            LastAccessTimeHigh  ,i4     ;;High-order 32 bits of last access time (UTC format)
            LastWriteTimeLow    ,i4     ;; Low-order 32 bits of last write time (UTC format)
            LastWriteTimeHigh   ,i4     ;;High-order 32 bits of last write time (UTC format)
            FileSizeHigh        ,i4     ;;High-order 32 bits of file size (bytes)
            FileSizeLow         ,i4     ;; Low-order 32 bits of file size (bytes)
            Reserved0           ,i4     ;;
            Reserved1           ,i4     ;;
            FileName            ,a260   ;;Name of file (null-terminated string)
            AlternateFileName   ,a14    ;;8.3 file name (null-terminated string
        endrecord

        .ifdef DBLNET
        stack record
            dllArgs             ,[#]@Object
        endrecord
        .endc

        .define INVALID_HANDLE_VALUE -1
        .define FILE_ATTRIBUTE_READONLY     %x(1)
        .define FILE_ATTRIBUTE_HIDDEN       %x(2)
        .define FILE_ATTRIBUTE_SYSTEM       %x(4)
        .define FILE_ATTRIBUTE_DIRECTORY    %x(10)
        .define FILE_ATTRIBUTE_ARCHIVE      %x(20)
        .define FILE_ATTRIBUTE_NORMAL       %x(80)
        .define FILE_ATTRIBUTE_TEMPORARY    %x(100)
        .define FILE_ATTRIBUTE_COMPRESSED   %x(800)
        .define FILE_ATTRIBUTE_OFFLINE      %x(1000)

        .define INIT_SIZE       10      ;;Initial size of dynamic memory section
        .define INCR_SIZE       10      ;;Increment size of dynamic memory section

    proc

        init local_data

        ok = 1              ;Success


    .ifdef D_GUI

        dll = dll_open("kernel32.dll")

        fill(char(0),spec)
        spec(1:trim(a_spec))=a_spec

        ;;Look for the first file
        .ifdef DBLNET
        dllArgs = new Object[2]
        dllArgs[1] = (Object)^addr(spec)
        dllArgs[2] = (Object)^addr(WIN32_FIND_DATA)
        sh = dll_netcall(dll,DLL_TYPE_WINAPI,"FindFirstFileA",dllArgs)
        .else
        sh = dll_call(dll,DLL_TYPE_WINAPI,"FindFirstFileA",^addr(spec),^addr(WIN32_FIND_DATA))
        .endc

        if (sh .eq. INVALID_HANDLE_VALUE) then
            ok = 0          ;;No files found
        else
        begin
            ;;First file not a directory?
            if (.not.(FileAttributes .band. FILE_ATTRIBUTE_DIRECTORY))
            begin
                a_tpls = new ArrayList()
                call ChangeCase

                ;;Find end of file name in null-terminated string
                len = instr(1,FileName,char(0)) - 1

                ;;Store away the first file name
                a_tpls.Add((@a)FileName(1:len))
            end

            ;;Continue the search
            repeat
            begin
                .ifdef DBLNET
                dllArgs = new Object[2]
                dllArgs[1] = (Object)sh
                dllArgs[2] = (Object)^addr(WIN32_FIND_DATA)
                if (dll_netcall(dll,DLL_TYPE_WINAPI,"FindNextFileA",dllArgs)) then
                .else
                if (dll_call(dll,DLL_TYPE_WINAPI,"FindNextFileA",sh,^addr(WIN32_FIND_DATA))) then
                .endc
                begin
                    ;;Found another file, check it's not a directory
                    if (.not.(FileAttributes .band. FILE_ATTRIBUTE_DIRECTORY))
                    begin
                        call ChangeCase

                        ;;Find end of file name in null-terminated string
                        len = instr(1,FileName,char(0)) - 1

                        ;;Store away the next file name
                        a_tpls.Add((@a)FileName(1:len))
                    end
                end
                else
                    exitloop
            end

            ;;Close the search handle
            .ifdef DBLNET
            dllArgs = new Object[1]
            dllArgs[1] = (Object)sh
            dll_netcall(dll,DLL_TYPE_WINAPI,"FindClose",dllArgs)
            .else
            dll_call(dll,DLL_TYPE_WINAPI,"FindClose",sh)
            .endc

        end

        dll = dll_close(dll)

    .endc

    .ifdef OS_UNIX

        open(dll=0,i,"|find " + atrim(a_spec) + " -exec basename {} \;")

        repeat
        begin
            reads(dll,FileName,eof)

            if (a_tpls==^null)
                a_tpls = new ArrayList()

            call ChangeCase

            a_tpls.Add((@a)atrim(FileName))
        end

    eof,

        close dll

        ok = a_tpls.Count

    .endc

    .ifdef OS_VMS

        open(dll=0,i,"|dir/nohead/notrail/nodate/nosize/noown/noprot/noacl " + atrim(a_spec)+";")

        repeat
        begin
            reads(dll,FileName,eof)

            if (a_tpls==^null)
                a_tpls = new ArrayList()

            ;;Remove the directory spec
            if (posn=%rvstr(1,FileName,"]"))
                FileName = FileName(posn+1,trim(FileName))

            ;;Remove the version number
            if (posn=instr(1,FileName,";"))
                FileName = FileName(1,posn-1)

            call ChangeCase

            a_tpls.Add((@a)atrim(FileName))
        end

    eof,

        close dll

        ok = a_tpls.Count

    .endc

        freturn ok

    ;;-----------------------------------------------------
    ;;Change filename to upper or lower case

    ChangeCase,

        using a_case select
        (WinDirCase.UpperCase),
            upcase FileName
        (WinDirCase.LowerCase),
            locase FileName
        (),
            nop
        endusing

        return

    endfunction

endnamespace

