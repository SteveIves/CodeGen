;;*****************************************************************************
;;
;; Title:       CodeGenContext.dbl
;;
;; Type:        Class
;;
;; Description: Defines additional context information not avalable via the
;;              CodeGenTaskSet and CodeGenTask classes.
;;
;; Date:        31st August 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.IO
import CodeGen.RepositoryAPI
import System.Collections.Concurrent

.array 0

namespace CodeGen.Engine
	
	public class CodeGenContext
		
		public method CodeGenContext
			required in aTaskset, @CodeGenTaskSet
		proc

			Taskset = aTaskset
			
			;;Define the collections where we can build up any custom token expanders and expression evaluators
			CustomTokenExpanders = new List<Tuple<String,String,TokenValidity,TokenCaseMode,Func<Token, FileNode, IEnumerable<LoopNode>, String>>>()
			CustomExpressionEvaluators = new List<Tuple<String,String,TokenValidity,Func<Token, FileNode, IEnumerable<LoopNode>, Boolean>>>()
			
			ResetTaskContext()

		endmethod
		
		.region "Task Context"
		
		;;Main repository context
		public readwrite property Properties,				@ConcurrentDictionary<Object, Object>, new ConcurrentDictionary<Object, Object>()
		;;; <summary>
		;;; Exposes the structures BEING PROCESSED to the parser environment
		;;; </summary>
		public readwrite property Structures,				@RpsStructureCollection

		;;; <summary>
		;;; Exposes the full repository to the parser environment
		;;; </summary>
		public readwrite property Repository,				@Repository

		;;Other context

		public readwrite property Buttons,					@WscButtonCollection
		public readwrite property Counter1,					int
		public readwrite property Counter2,					int
		public readwrite property CurrentFileIndex,			int
		public readwrite property CurrentStructure,			@RpsStructure
		public readwrite property CurrentTask,				@CodeGenTask
		public readwrite property CurrentTemplate,			String

		;;Other context
		
		public property CurrentTemplateBaseName,			String
			method get
			proc
				mreturn Path.GetFileNameWithoutExtension(this.CurrentTemplate).ToUpper()
			endmethod
		endproperty

		public readwrite property FileDefinition,			@RpsFile
		public readwrite property MultiStructureMode,		boolean
		public readwrite property OutputFolder,				String
		public readwrite property SelectionWindowScript,	String
		public readwrite property StructureFileIndex,		[#]int
		public readwrite property TemplateFiles,			@List<String>
		public readwrite property TemplateFolder,			String
		public readwrite property UserTokens,				@List<UserToken>
		public readwrite property WindowHeight,				int
		public readwrite property WindowName,				String
		public readwrite property WindowWidth,				int

		public method ResetTaskContext, void
		proc
			;;Main repository context
			Structures = new RpsStructureCollection(RpsLoadMode.NoLoad)
			Repository = ^null

			;;Other context
			Buttons = new WscButtonCollection()
			Counter1 = 0
			Counter2 = 0
			CurrentFileIndex = 0
			CurrentStructure = ^null
			CurrentTask = ^null
			CurrentTemplate = String.Empty
			FileDefinition = ^null
			MultiStructureMode = false
			OutputFolder = String.Empty
			SelectionWindowScript = String.Empty
			StructureFileIndex = ^null
			TemplateFiles = new List<String>()
			TemplateFolder = String.Empty
			UserTokens = new List<UserToken>()
			WindowHeight = 0
			WindowName = String.Empty
			WindowWidth = 0
		endmethod
		
		.endregion
		
		.region "Taskset Context"
		
		;;; <summary>
		;;; The value to be used with the <AUTHOR> token.
		;;; </summary>
		public readwrite property Author, String, "CodeGen"
		
		;;; <summary>
		;;; The value to be used with the <COMPANY> token.
		;;; </summary>
		public readwrite property Company, String, "Synergex"
		
		;;; <summary>
		;;; Exposes custom token expanders from all extension sources
		;;; </summary>
		public readwrite property CustomTokenExpanders, @List<Tuple<String,String,TokenValidity,TokenCaseMode,Func<Token, FileNode, IEnumerable<LoopNode>, String>>>
		
		;;; <summary>
		;;; Exposes custom expression evaluators from all extension sources
		;;; </summary>
		public readwrite property CustomExpressionEvaluators, @List<Tuple<String,String,TokenValidity,Func<Token, FileNode, IEnumerable<LoopNode>, Boolean>>>
		
		private mGuid1, String
		
		public property Guid1, String
			method get
			proc
				if (mGuid1 == ^null)
					mGuid1 = Guid.NewGuid().ToString().ToUpper()
				mreturn mGuid1
			endmethod
		endproperty
		
		private mGuid2, String
		
		public property Guid2, String
			method get
			proc
				if (mGuid2 == ^null)
					mGuid2 = Guid.NewGuid().ToString().ToUpper()
				mreturn mGuid2
			endmethod
		endproperty
		
		private mGuid3, String
		
		public property Guid3, String
			method get
			proc
				if (mGuid3 == ^null)
					mGuid3 = Guid.NewGuid().ToString().ToUpper()
				mreturn mGuid3
			endmethod
		endproperty
		
		public readwrite property Namespace, String
		
		public readwrite property Taskset, @CodeGenTaskSet
		
		public readwrite property Version, String
		
		.endregion
		
		.region "Public methods"
		
		public property VerboseLoggingEnabled, boolean
			method get
			proc
				mreturn ((int)Taskset.LoggingLevel >= (int)LoggingLevel.Verbose)
			endmethod
		endproperty
		
		public property DebugLoggingEnabled, boolean
			method get
			proc
				mreturn ((int)Taskset.LoggingLevel >= (int)LoggingLevel.Debug)
			endmethod
		endproperty
		
		public property DeveloperDebugLoggingEnabled, boolean
			method get
			proc
				mreturn (Taskset.LoggingLevel == LoggingLevel.DeveloperDebug)
			endmethod
		endproperty
		
		.endregion
		
	endclass
	
endnamespace
