;;*****************************************************************************
;;
;; Title:       CodeGenLauncher.dbl
;;
;; Type:        Subroutine
;;
;; Description: Initialize environment and launch code generation
;;
;; Date:        21st October 2008
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI
import System.Collections
.ifdef DBLNET
import System.Collections.ObjectModel
.endc

namespace CodeGen.Engine
	
	subroutine CodeGenLauncher
		
		endparams
		
.include "CODEGEN_SRC:codegen.def"
		
		static record
			ErrStatus   ,int                    ;;Main error status variables
			StrNum      ,int                    ;;Structure number being processed
			WscFile     ,a80                    ;;UI Toolkit window script file
			ProFormaFile,a80                    ;;BusinessCraft ProForma file name
			ClBuffer    ,[10]a80                ;;Command line option values
			Templates   ,@ArrayList             ;;Collection of template names
			Structures  ,@RpsStructureCollection;;Collection of repository structures
			FileIndex   ,[#]int                 ;;Array of file indexes to use
			FileDef     ,@RpsFile               ;;Repository file definition name
			
		endrecord
		
		external function
			CleanScriptField	, a
			xsubr				,^val
		endexternal
		
.ifdef D_GUI
.define D_SEPERATOR         "\"
.endc
.ifdef OS_UNIX
.define D_SEPERATOR         "/"
.endc
		
	proc
		
		;;Open the terminal and save the channel in the Environment class
		begin
			data tmpTT, int, 0
			open(tmpTT,i,"tt:")
			Env.Tt = tmpTT
			flags(7004020,1)
		end
		
		;;-------------------------------------------------------------------------
		;;Dbr or dbs?
		
.ifdef DBLNET
		Env.Dbr = 0
.else
		begin
			data terminal ,int
			data runtime  ,int
			xcall tnmbr(terminal,runtime)
			Env.Dbr = (runtime==0)
		end
.endc
		
		;;-------------------------------------------------------------------------
		;;Echo command line?
		
		if (CommandLine("e "))
		begin
			data command, a256
			data tmpPos, int
			cmdln(command)
.ifdef DBLNET
			Log(atrim(command),true,false)
.else
			;;Find codegen_exe:codegen in the command line
			;;TODO: This won't work in .NET
			if (tmpPos = instr(1,LowerCase(command),"codegen_exe:codegen.dbr ")) then
				command = command(tmpPos+24,trimz(command))
			else
			begin
				if (tmpPos = instr(1,LowerCase(command),"codegen_exe:codegen "))
					command = command(tmpPos+20,trimz(command))
			end
			Log("codegen "+atrim(command),true,false)
.endc
		end
		
		;;-------------------------------------------------------------------------
		;;Verbose mode?
		
		if (CommandLine("v "))
			Env.Verbose = true
		
		;;-------------------------------------------------------------------------
		;;Debug mode?
		
		if (CommandLine("d "))
		begin
			Env.Verbose = true
			Env.Debug = true
			
			;;Do we also need Repository API debug logging
			if (CommandLine("rpsdebug "))
				Repository.LogChannel = Env.Tt
		end
		
		;;-------------------------------------------------------------------------
		;;Developer debug mode?
		
		if (CommandLine("debug "))
		begin
			Env.Verbose = true
			Env.Debug = true
			Env.DeveloperDebug = true
			
			;;Do we also need Repository API debug logging
			if (CommandLine("rpsdebug "))
				Repository.LogChannel = Env.Tt
		end
		
		;;-------------------------------------------------------------------------
		;;Display headings
		
		VerboseLog(CODEGEN_APPNAME + " " + CODEGEN_VERSION,true,true)
		
		;;-------------------------------------------------------------------------
		;;Are we being asked for usage information?
		
		if (CommandLine("h ") || CommandLine("?"))
		begin
			Usage()
			ErrStatus=-1
		end
		
		;;-------------------------------------------------------------------------
		;;Are we being asked for documentation?
		
		if (CommandLine("docs"))
		begin
			Documentation()
			ErrStatus=-1
		end
		
		;;-------------------------------------------------------------------------
		;;Are we being asked for version information?
		
		if (CommandLine("version"))
		begin
.ifdef DBLNET
			Log(CODEGEN_APPNAME+" "+CODEGEN_VERSION+" (Synergy .NET "+SYN_VERSION+" built "+datecompiled()+")",true,false)
.else
			Log(CODEGEN_APPNAME+" "+CODEGEN_VERSION+" (Traditional Synergy "+SYN_VERSION+" built "+datecompiled()+")",true,false)
.endc
			ErrStatus=-1
		end
		
		;;-------------------------------------------------------------------------
		;;See if we have a template file location specified with CODEGEN_TPLDIR
		;;If present, this location overrides the default location (current dir)
		
		if (!ErrStatus)
		begin
			data TmpBuf, a256
			data length, int
			getlog("CODEGEN_TPLDIR",TmpBuf,length)
			if (length)
			begin
.ifdef D_SEPERATOR
				if ((TmpBuf(length:1)!=":") && (TmpBuf(length:1)!=D_SEPERATOR))
					TmpBuf(length+1:1) = D_SEPERATOR
.endc
				Env.TemplateDir = TmpBuf

				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Template location set by CODEGEN_TPLDIR to "+Env.TemplateDir,false,false)				
			end
		end
		
		;;-------------------------------------------------------------------------
		;;See if we have a template file location command line option
		;;If present, this location overrides the default and CODEGEN_TPLDIR
		
		if (!ErrStatus)
		begin
			if (CommandLine("i ",1,ClBuffer))
			begin
				data length, int
				length = trim(ClBuffer[1])
.ifdef D_SEPERATOR
				if ((ClBuffer[1](length:1)!=":") && (ClBuffer[1](length:1)!=D_SEPERATOR))
					ClBuffer[1](length+1:1)=D_SEPERATOR
.endc
				Env.TemplateDir = ClBuffer[1]
				
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Template location set by -i to "+Env.TemplateDir,false,false)				
			end
		end
		
		;;-------------------------------------------------------------------------
		;;Report template file location (verbose mode only)
		
		if ((!ErrStatus) && Env.Verbose)
		begin
			if (Env.TemplateDir) then
				Log("Template location: " + Env.TemplateDir,false,false)
			else
				Log("Template location: Current directory",false,false)
		end
		
		;;-------------------------------------------------------------------------
		;;See if we have an output location specified with CODEGEN_OUTDIR
		;;If present, this location overrides the default location (current dir)
		
		if (!ErrStatus)
		begin
			data TmpBuf, a256
			data length, int
			getlog("CODEGEN_OUTDIR",TmpBuf,length)
			if (length)
			begin
.ifdef D_SEPERATOR
				if ((TmpBuf(length:1)!=":") && (TmpBuf(length:1)!=D_SEPERATOR))
					TmpBuf(length+1:1)=D_SEPERATOR
.endc
				Env.OutputDir = TmpBuf
				
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Output location set by CODEGEN_OUTDIR to "+Env.OutputDir,false,false)				
			end
		end
		
		;;-------------------------------------------------------------------------
		;;See if we have an output location command line option
		;;If present, this location overrides the default and CODEGEN_OUTDIR
		
		if (!ErrStatus)
		begin
			if (CommandLine("o ",1,ClBuffer))
			begin
				data length, int
				length=trim(ClBuffer[1])
.ifdef D_SEPERATOR
				if ((ClBuffer[1](length:1)!=":") && (ClBuffer[1](length:1)!=D_SEPERATOR))
					ClBuffer[1](length+1:1)=D_SEPERATOR
.endc
				Env.OutputDir = ClBuffer[1]
				
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Output location set by -o to "+Env.OutputDir,false,false)				
			end
		end
		
		;;-------------------------------------------------------------------------
		;;Report output location (verbose mode only)
		
		if (!ErrStatus && Env.Verbose)
		begin
			if (Env.OutputDir) then
				Log("Output location:   " + Env.OutputDir,false,false)
			else
				Log("Output location:   Current directory",false,false)
		end
		
		;;-------------------------------------------------------------------------
		;;Make sure we can create files in the output location.  The output location
		;;variable is in global data, for use by the generator routines.
		
		if (!ErrStatus)
		begin
			try
			begin
				data tmpch, int
				open(tmpch=0,o:s,Env.OutputDir+"temp.tmp")
				purge tmpch
			end
			catch (ex)
			begin
				ErrorLog("Can't create files in "+Env.OutputDir)
				ErrStatus=1
			end
			endtry
		end
		
		;;-------------------------------------------------------------------------
		;;Replace existing files?
		
		if (!ErrStatus)
		begin
			if (CommandLine("r ")) then
				VerboseLog("Replace files:     YES",false,false)
			else
			begin
				flags(300,1)
				VerboseLog("Replace files:     NO",false,false)
			end
		end
		
		;;-------------------------------------------------------------------------
		;;See if we have an author name specified with CODEGEN_AUTHOR
		;;If present, this location overrides the default author of CodeGen
		
		if (!ErrStatus)
		begin
			data TmpBuf, a80
			data length, int
			getlog("CODEGEN_AUTHOR",TmpBuf,length)
			if (length) then
				Env.Author = TmpBuf
			else
				Env.Author = CODEGEN_APPNAME + " " + CODEGEN_VERSION
		end
		
		;;-------------------------------------------------------------------------
		;;See if we have an author name specified with CODEGEN_COMPANY
		;;If present, this location overrides the default author of Synergex
		
		if (!ErrStatus)
		begin
			data TmpBuf, a80
			data length, int
			getlog("CODEGEN_COMPANY",TmpBuf,length)
			if (length) then
				Env.Company = TmpBuf
			else
				Env.Company = "Synergex"
		end
		
		;;-------------------------------------------------------------------------
		;;See if we have a default namespace specified with SYNDEFNS
		;;If present, this location overrides the default of "codegen"
		
		if (!ErrStatus)
		begin
			data TmpBuf, a80
			data length, int
			getlog("SYNDEFNS",TmpBuf,length)
			if (length)
			begin
				Env.DefaultNamespace = TmpBuf

				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Namespace set by SYNDEFNS to "+Env.DefaultNamespace,false,false)				
			end
		end
		
		;;-------------------------------------------------------------------------
		;;See if we have a default namespace command line option
		;;If present, this location overrides the SYNDEFNS environment variable.
		
		if (!ErrStatus)
		begin
			if (CommandLine("n ",1,ClBuffer))
			begin
				if (ClBuffer[1]) then
				begin
					Env.DefaultNamespace = ClBuffer[1]
					
					if (Env.DeveloperDebug)
						DebugLog("DEVDBG: Namespace set by -n to "+Env.DefaultNamespace,false,false)				
				end
				else
				begin
					ErrorLog("No namespace specified after -n option!")
					ErrStatus=1
				end
			end
		end
		
		;;-------------------------------------------------------------------------
		;;Are we being asked to use a field / group member prefix
		if (!ErrStatus)
		begin
			if (CommandLine("prefix ",1,ClBuffer)) then
			begin
				if (trimz(ClBuffer[1])) then
				begin
					Env.ClDoFieldPrefix = true
					Env.ClFieldPrefix = ClBuffer[1]
				end
				else
				begin
					ErrorLog("No prefix specified after -prefix option!")
					ErrStatus=1
				end
			end
			else
			begin
				Env.ClDoFieldPrefix = false
				Env.ClFieldPrefix = ""
			end
		end
		
		;;-------------------------------------------------------------------------
		;;See if we have a request to override the default pixel width of a character
		
		if (!ErrStatus)
		begin
			if (CommandLine("cw ",1,ClBuffer))
			begin
				if (ClBuffer[1]) then
				begin
					if IsNumeric(ClBuffer[1]) then
						Env.CharacterWidth = integer(atrim(ClBuffer[1]))
					else
					begin
						ErrorLog("Character width after -cw must be numeric!")
						ErrStatus=1
					end
				end
				else
				begin
					ErrorLog("No character width specified after -cw option!")
					ErrStatus=1
				end
			end
		end
		
		;;-------------------------------------------------------------------------
		;;See if we have a request to override the default pixel height of a row
		
		if (!ErrStatus)
		begin
			if (CommandLine("ch ",1,ClBuffer))
			begin
				if (ClBuffer[1]) then
				begin
					if IsNumeric(ClBuffer[1]) then
						Env.CharacterHeight = integer(atrim(ClBuffer[1]))
					else
					begin
						ErrorLog("Character height after -ch must be numeric!")
						ErrStatus=1
					end
				end
				else
				begin
					ErrorLog("No character height specified after -ch option!")
					ErrStatus=1
				end
			end
		end
		
		;;-------------------------------------------------------------------------
		;;Get a list of template files in template directory
		if (!ErrStatus)
		begin
			
			data ClTplCount, d4
			
			VerboseLog("",false,false)
			
			if (CommandLine("t ",10,ClBuffer,ClTplCount)) then
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Found -t command line option",true,false)
				
				;;Do we have a -t, but no template names
				if (!ClTplCount) then
				begin
					ErrorLog("No templates specified after -t option!")
					ErrStatus=1
				end
				else
				begin
					if (ClBuffer[1]=="*") then
					begin
						if (Env.DeveloperDebug)
							DebugLog("DEVDBG: Processing all templates (-t *)",false,false)

						if (!WinDir(Env.TemplateDir+"*.tpl",Templates,WinDirCase.NoChange))
						begin
							ErrorLog("No templates to process in "+Env.TemplateDir)
							Log("       Set template directory with CODEGEN_TPLDIR or -t option.",false,false)
							ErrStatus=1
						end
					end
					else
					begin
						data ix, int
						
						if (Env.DeveloperDebug)
							DebugLog("DEVDBG: Processing specific templates specified via -t option",false,false)
							
						;;Create a new templates collection
						Templates = new ArrayList(integer(ClTplCount))
						
						;;Check that all specified template files exist
						for ix from 1 thru ClTplCount
						begin
							
							data AlreadyThere, boolean, false
							
							;;Add ".tpl" if necessary
							if (!instr(1,LowerCase(ClBuffer[ix]),".tpl"))
								ClBuffer[ix]=atrim(ClBuffer[ix])+".tpl"
							
							;;Does this template spec contain a wildward?
							if (instr(1,ClBuffer[ix],"*")) then
							begin
								data TmpTemplates, @ArrayList
								TmpTemplates = new ArrayList()
								if (WinDir(Env.TemplateDir+ClBuffer[ix],TmpTemplates,WinDirCase.NoChange)) then
								begin
									;;Add these templates to the list to process, if not
									;;already there
									data tmpTemplate, @a
									foreach tmpTemplate in TmpTemplates
									begin
										;;Add the template to the collection
										AlUtil.AddIfMissing(Templates,tmpTemplate)
									end
								end
								else
									Log("WARNING: No templates match "+atrim(ClBuffer[ix]),false,true)
							end
							else
							begin
								;;Make sure the template can be opened
								try
								begin
									data tmpch, int
									open(tmpch=0,i:s,Env.TemplateDir+ClBuffer[ix])
									close tmpch
								end
								catch (ex)
								begin
									ErrorLog("Template "+atrim(ClBuffer[ix])+" not found!")
									ErrStatus=1
									exitloop
								end
								endtry
								
								;;Add the template to the collection
								AlUtil.AddIfMissing(Templates,ClBuffer[ix])
							end
						end
					end
				end
			end
			else
			begin
				Log("Nothing to do - specify template(s) with -t option!",false,false)
				ErrStatus=1
			end
			
			if (!ErrStatus)
			begin
				data ix, int
				;;Report templates to process
				if (Env.Verbose)
				begin
					data tmpTemplate, @a
					Log("Template(s):",false,false)
					foreach tmpTemplate in Templates
						Log(" - " + (a)tmpTemplate,false,false)
				end
				;;Remove .tpl file extensions
				for ix from 0 thru Templates.Count-1
				begin
.ifdef OS_VMS
					Templates[ix] = (@a)((a)Templates[ix]-".TPL")   ;;Temp fix for VMS, needs more work!!!
					Templates[ix] = (@a)((a)Templates[ix]-".tpl")   ;;Temp fix for VMS, needs more work!!!
.else
					Templates[ix] = (@a)((a)Templates[ix]-".tpl")
.endc
				end
			end
		end
		;;-------------------------------------------------------------------------
		;;Are we being asked to process a user defined token file?
		
		if (!ErrStatus)
		begin
			if (CommandLine("u ",1,ClBuffer))
			begin
				data tmpch, int

				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Loading user tokens from token file (-u)",false,false)
					
				try
				begin
.ifdef DBLNET
					UserTokenCollection.LoadTokensFromFile(ClBuffer[1])
.else
					data UserTokens, @UserTokenCollection
					UserTokens = new UserTokenCollection(ClBuffer[1])
					if (UserTokens.Count)
						Env.UserTokens = UserTokens
.endc
				end
				catch (ex)
				begin
					ErrorLog("Failed to open or process user token file "+Env.TemplateDir+atrim(ClBuffer[1]))
					ErrStatus=1
				end
				endtry
			end
		end
		
		;;-------------------------------------------------------------------------
		;;Do we have user defined tokens on the command line?
		
		if (!ErrStatus)
		begin
			data ClUtCount, d4
			
			if (CommandLine("ut ",10,ClBuffer,clUtCount))
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Loading user tokens from command line (-ut)",false,false)					
				
				if (!ClUtCount)
				begin
					ErrorLog("No user tokens specified after -ut option!")
					ErrStatus=1
				end
				
				if (!ErrStatus)
				begin
.ifdef DBLNET
					UserTokenCollection.AddTokens(clBuffer,clUtCount)
.else
					if (Env.UserTokens==^null) then
						Env.UserTokens = new UserTokenCollection(clBuffer,clUtCount)
					else
						Env.UserTokens.AddTokens(clBuffer,clUtCount)
.endc
				end
			end
		end		
		
		;;-------------------------------------------------------------------------
		;;Do we have a repository file definition specified?
		
		if (!ErrStatus)
		begin
			data fileCount, int
			if (CommandLine("file ",1,ClBuffer,fileCount))
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Repository file name was specified via -file",false,false)					

				if (fileCount!=1)
				begin
					ErrorLog("Must specify exactly one file definition name after the -file option!")
					ErrStatus=1
				end
				
				if (!ErrStatus)
				begin
					;;Get the file details from the repository
					upcase ClBuffer[1]
					try
					begin
						FileDef = new RpsFile(ClBuffer[1])
					end
					catch (e, @RpsFileException)
					begin
						ErrorLog("Failed to load repository file definition " + ClBuffer[1])
						ErrStatus = 1
					end
					endtry
				end
				
				if (!ErrStatus)
				begin
					;;Make sure the file has at least one structure defined, and if so set them as the structures to process
					if (FileDef.StructureCount>0) then
					begin
						Structures = FileDef.Structures
						Env.RpsInUse = true
						
						;;Default all structures to use the file being processed
						begin
							data ix, int
							FileIndex = new int[Structures.Count]
							for ix from 0 thru Structures.Count-1
							begin
								data iy, int
								FileIndex[ix+1] = 0
								for iy from 0 thru Structures[ix].Files.Count-1
								begin
									if (Structures[ix].Files[iy].Name==FileDef.Name)
									begin
										FileIndex[ix+1] = iy
										exitloop
									end
								end
							end
						end
						
					end
					else
					begin
						ErrorLog("Repository file " + atrim(ClBuffer[1]) + " doesn't have any structures assigned")
						ErrStatus = 1
					end
				end
				
			end
		end
		
		;;-------------------------------------------------------------------------
		;;Do we have a UI Toolkit window script specified?
		
		if (!ErrStatus)
		begin
			data WscCount, int
			if (CommandLine("w ",1,ClBuffer,WscCount))
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Window script was specified via -w",false,false)					
				
				if (FileDef!=^null)
				begin
					ErrorLog("Can't use -file and -w options together!")
					ErrStatus=1
				end
				
				if (!ErrStatus)
				begin
					if (WscCount==1) then
						WscFile = ClBuffer[1]
					else
					begin
						ErrorLog("Must specify exactly one window script name after the -w option!")
						ErrStatus=1
					end
				end
			end
		end
		
		;;-------------------------------------------------------------------------
		;;Do we have a BusinessCraft ProForma file specified?
		
		if (!ErrStatus)
		begin
			data ProFormaCount, int
			if (CommandLine("proforma ",1,ClBuffer,ProFormaCount))
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: ProForma file was specified via -proforma",false,false)					
				
				if (FileDef!=^null)
				begin
					ErrorLog("Can't use -file and -proforma options together!")
					ErrStatus=1
				end
				
				if (WscFile)
				begin
					ErrorLog("Can't use -w and -proforma options together!")
					ErrStatus=1
				end
				
				if (!ErrStatus)
				begin
					if (ProFormaCount==1) then
						ProFormaFile = ClBuffer[1]
					else
					begin
						ErrorLog("Must specify exactly one ProForma name after the -proforma option!")
						ErrStatus=1
					end
				end
			end
		end
		
		
		;;-------------------------------------------------------------------------
		;;Do we have a custom assembly containing a BusinessCreft ProForma processor?
		
		if (!ErrStatus&&ProFormaFile)
		begin
			data customFileSpec, a256
			data tmpLen, i4
			data libraries, @ArrayList
			data usingExtDir, Boolean, false
			
			if (Env.DeveloperDebug)
				DebugLog("DEVDBG: Attempting to load ProForma extension",false,false)					

			;;Do we have a CODEGEN_EXTDIR environment variable?
			xcall getlog("CODEGEN_EXTDIR",customFileSpec,tmpLen)
			if (tmpLen) then
				usingExtDir = true
			else
			begin
				;;No CODEGEN_EXTDIR so we'll look in CODEGEN_EXE
				xcall getlog("CODEGEN_EXE",customFileSpec,tmpLen)
			end
			
			;;Setup a file spec to locate custom token processor extensions
.ifdef DBLNET
			if (customFileSpec(%trim(customFileSpec):1)!="\")
				customFileSpec = %atrim(customFileSpec) + "\"
			customFileSpec = %atrim(customFileSpec) + "CodeGenProForma.dll"
.else
.ifdef D_GUI
			if (customFileSpec(%trim(customFileSpec):1)!="\")
				customFileSpec = %atrim(customFileSpec) + "\"
			customFileSpec = %atrim(customFileSpec) + "CodeGenProForma.elb"
.endc
.ifdef OS_UNIX
			if (customFileSpec(%trim(customFileSpec):1)!="/")
				customFileSpec = %atrim(customFileSpec) + "/"
			customFileSpec = %atrim(customFileSpec) + "CodeGenProForma.elb"
.endc
.ifdef OS_VMS
			customFileSpec = %atrim(customFileSpec) + "CodeGenProForma.exe"
.endc
.endc
			
			;;Search for and open custom token processor extensions
			if (!WinDir(customFileSpec,libraries,WinDirCase.NoChange)) then
			begin
				ErrorLog("ProForma processor "+atrim(customFileSpec)+" not found!")
				ErrStatus = 1
			end
			else
			begin
				data file, String, (a)libraries[0]
				data libSpec, String, "CODEGEN_EXE:"+file
				if (usingExtDir)
					libSpec = "CODEGEN_EXTDIR:"+file
				try
				begin
					DebugLog("Loading ProForma Extensions " + libSpec,true,false)
					xcall openelb(libSpec)
				end
				catch (e, @Exception)
				begin
					ErrorLog("Failed to load ProForma extensions")
					ErrStatus = 1
				end
				endtry
			end			
		end
		
		;;-------------------------------------------------------------------------
		;;Are we being asked to ignore field attributes in UI Toolkit window scripts
		
		if (!ErrStatus)
		begin
			if (CommandLine("wn "))
			begin
				Env.NoWscAttributes = true

				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Script field attributes will be ignored because of -wn",false,false)
			end
		end
		
		;;-------------------------------------------------------------------------
		;;Are we provided with a UI Toolkit window script to search for selection
		;;windows in?
		
		if (!ErrStatus)
		begin
			data WscCount, int
			if (CommandLine("ws ",1,ClBuffer,WscCount))
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Selection window processing requested via -ws",false,false)					
					
				if (WscCount!=1) then
				begin
					ErrorLog("Must specify exactly one window script name after the -ws option!")
					ErrStatus=1
				end
				else
				begin
					;;Open the file, fail if can't
					try
					begin
						data WscChn, int
						open(WscChn=0,i:s,ClBuffer[1])
						close WscChn
					end
					catch (ex)
					begin
						ErrorLog("Can't open selection window script " + atrim(ClBuffer[1]) + " Check your -ws option!")
						ErrStatus=1
					end
					endtry
					
					;;Store the selection windows script file for later
					if (!ErrStatus)
					begin
						Env.SelectionWindowScript = ClBuffer[1]
						DebugLog("Selection window processing enabled from file "+Env.SelectionWindowScript,false,false)
					end
				end
			end
		end
		
		;;-------------------------------------------------------------------------
		;;Do we have Repository structures specified?
		
		if (!ErrStatus)
		begin
			data ClStrCount, int
			if (CommandLine("s ",10,ClBuffer,ClStrCount))
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Found -s command line option",true,false)
					
				if (FileDef!=^null)
				begin
					ErrorLog("Can't use -file and -s options together!")
					ErrStatus=1
				end
				
				if (!ErrStatus)
				begin
					if (WscFile) then
					begin
						ErrorLog("Can't use -w and -s options together!")
						ErrStatus=1
					end
					else if (ProFormaFile)
					begin
						ErrorLog("Can't use -proforma and -s options together!")
						ErrStatus=1
					end
				end
				
				if (!ErrStatus)
				begin
					if (ClStrCount) then
						Env.RpsInUse = true
					else
					begin
						ErrorLog("No structures specified after -s option!")
						ErrStatus=1
					end
					
					if (!ErrStatus)
					begin
						;;All or specific structures?
						if (ClBuffer[1]=="*") then
						begin
							if (Env.DeveloperDebug)
								DebugLog("DEVDBG: Loading all structures (-s *)",false,false)
								
							;;Process all structures
							try
							begin
								Structures = new RpsStructureCollection(RpsLoadMode.Load)
								if (Structures.Count) then
									Env.AllStructures = true
								else
								begin
									ErrorLog("Repository contains no structures!")
									ErrStatus=1
								end
							end
							catch (ex, @RpsException)
							begin
								ErrorLog(ex.Message)
								ErrStatus=1
							end
							endtry
						end
						else
						begin
							;;Process specified structures
							data ix, int

							if (Env.DeveloperDebug)
								DebugLog("DEVDBG: Loading specific structures specified via -s option ",false,false)

							Structures = new RpsStructureCollection(RpsLoadMode.NoLoad)

							for ix from 1 thru ClStrCount
							begin
								data newStructure, @RpsStructure
								data errorText, String

								if (Env.DeveloperDebug)
									DebugLog("DEVDBG: Loading structure "+atrim(ClBuffer[ix]),false,false)
									
								;;Load the structure from the repository
								try
								begin
									newStructure = new RpsStructure(ClBuffer[ix])
								end
								catch (ex)
								begin
									ErrorLog(ex.Message)
									if (Env.DeveloperDebug)
										DebugLog("DEVDBG: Error occured in CodeGen.RepositoryAPI.RpsStructure.RpsStructure('"+atrim(ClBuffer[ix])+"')",false,false)
									ErrStatus = 1
								end
								endtry

								if (!ErrStatus)
								begin
									if (Env.SelectionWindowScript)
									begin
										if (!ProcessSelectionWindows(newStructure,errorText))
										begin
											ErrorLog("Failed to resolve selection windows for structure " + newStructure.Name + char(13) + char(10) + "       " + errorText)
											ErrStatus = 1
											exitloop
										end
									end
								end

								if (!ErrStatus)
									Structures.Add(newStructure)
							end
						end
						
						;;Default all structures to use the first file assigned
						if (!ErrStatus)
						begin
							data ix, int
							FileIndex = new int[Structures.Count]
							for ix from 1 thru Structures.Count
								FileIndex[ix] = 0
						end
						
					end
				end
			end
		end
		
		;;-------------------------------------------------------------------------
		;;Are we being asked to process a subset of the fields in a structure?
		
		if (!ErrStatus)
		begin
			Env.SubSetName = ""
			if (CommandLine("subset ",1,ClBuffer))
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Field subset processing requested via -subset",false,false)					
					
				if (!ClBuffer[1])
				begin
					ErrorLog("No subset name specified after the -subset option!")
					ErrStatus=1
				end
				
				if (!ErrStatus&&!Env.RpsInUse)
				begin
					ErrorLog("Can't use -subset without a repository structure!")
					ErrStatus=1
				end
				
				if (!ErrStatus&&Structures.Count>1)
				begin
					ErrorLog("Option -subset is only valid when processing a single structure!")
					ErrStatus=1
				end
				
				if (!ErrStatus)
					Env.SubSetName = ClBuffer[1]
			end
		end
		
		;;-------------------------------------------------------------------------
		;;If we have a window script file or ProForma file then process it
		
		if (!ErrStatus)
		begin
			
			;;Create a default (empty) button collection
			Env.Buttons = new WscButtonCollection()
			
			;;Now parse the script file
			if (WscFile) then
			begin
				data errTxt, string

				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Parsing window script "+atrim(WscFile),false,false)					
					
				ErrStatus = ParseWindowScript(WscFile,Structures,errTxt)
			end
			else if (ProFormaFile)
			begin
				data errTxt, string
				data address, D_ADDR
				
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Parsing ProForma file "+atrim(ProFormaFile),false,false)					
				
				if (address = %xaddr("ParseProForma",,1))
				begin
					data pfStructure, @RpsStructure

					Env.ProFormaStructures = new RpsStructureCollection(RpsLoadMode.NoLoad)

					try
					begin
						DebugLog("Executing ParseProForma()",false,false)

						if (ErrStatus = %xsubr(address,ProFormaFile))
							exit

						;;Did we get any structures loaded?
						if (!Env.ProFormaStructures.Count)
						begin
							ErrorLog("ParseProForma() did not load any structures!")
							ErrStatus = 1
						end
					end
					catch (e, @Exception)
					begin
						ErrorLog("Failed to execute ParseProForma()")
						Log("       " + e.Message,false,false)
						if (e.InnerException!=^null)
							Log("       " + e.InnerException.Message,false,false)
						ErrStatus = 1
					end
					endtry

					;;Load the structures from ParseProForma()
					if (!ErrStatus)
					begin
						if (Structures == ^null)
							Structures = new RpsStructureCollection(RpsLoadMode.NoLoad)
						
						foreach pfStructure in Env.ProFormaStructures.GetEnumerator()
							Structures.Add(pfStructure)

						Env.RpsInUse = true
					end
				end
			end
			
			if (ErrStatus)
				exit
			
			if (Structures!=^null)
			begin
				data ix, int
				FileIndex = new int[Structures.Count]
				for ix from 1 thru Structures.Count
					FileIndex[ix] = 0
			end
			
			;;If we got buttons from the script file, but we're being told not to do
			;;button processing (-bn), then delete the buttons
			if (CommandLine("bn ")&&Env.Buttons.Count)
			begin
				DebugLog("Removing script file buttons because of -bn",false,false)
				Env.Buttons.Clear()
			end
			
			;;If after parsing the script file we don't have any buttons, or we are being
			;;told to always use default buttons (-ba), and we're not being told to not
			;;load default buttons (-bd) and were not being told to not use any buttons
			;;(-bn) then add the default buttons that are defined in
			;;CODEGEN_EXE:DefaultButtons.xml
			if (((!Env.Buttons.Count)||(CommandLine("ba ")))&&(!CommandLine("bd "))&&(!CommandLine("bn ")))
			begin
				if (!Env.Buttons.Count) then
					DebugLog("Loading default buttons because no script file buttons were found",true,false)
				else if (CommandLine("ba "))
					DebugLog("Loading default buttons because of command line option -ba",true,false)
				Env.Buttons.LoadDefaultButtons()
			end
			
		end
		
		;;-------------------------------------------------------------------------
		;;Report if we're doing Repository processing
		
		if (!ErrStatus && Env.Verbose)
		begin
			if (Env.RpsInUse) then
			begin
				data str, @RpsStructure
				Log("Structure(s):",true,false)
				
				foreach str in Structures.GetEnumerator()
					Log(" - " + str.Name,false,false)
			end
			else
				Log("No Repository structure processing",false,false)
		end
		
		;;-------------------------------------------------------------------------
		;;Do we have structure aliases specified
		
		if (!ErrStatus&&Structures!=^null)
		begin
			data tmpStr, @RpsStructure
			data ClAliasCount, int
			data AliasIndex, int
			
			;;First, default all alias names to the same as the structure name
			foreach tmpStr in Structures.GetEnumerator()
				tmpStr.Alias = tmpStr.Name
			
			;;Now apply specific aliases from the command line
			if (CommandLine("a ",10,ClBuffer,ClAliasCount))
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Structure aliasing requested via -a",false,false)					
				
				if (WscFile)
				begin
					ErrorLog("Can't use -w and -a options together!")
					ErrStatus=1
				end
				
				if ((!ErrStatus) && (!ClAliasCount))
				begin
					ErrorLog("No aliases specified after -a option!")
					ErrStatus=1
				end
				
				if ((!ErrStatus) && (ClAliasCount > Structures.Count))
				begin
					ErrorLog("More aliases than repository structures!")
					ErrStatus=1
				end
				
				VerboseLog("Applying structure aliases",true,false)
				for AliasIndex from 1 thru ClAliasCount
				begin
					Structures[AliasIndex-1].Alias = UpperCase(ClBuffer[AliasIndex])
					VerboseLog(" - Structure "
					&	+ Structures[AliasIndex-1].Name
					&	+ " aliased as "
					&	+ Structures[AliasIndex-1].Alias,false,false)
				end
			end
		end
		
		;;-------------------------------------------------------------------------
		;;Do we have alternate repository file references specified
		
		if (!ErrStatus&&Structures!=^null)
		begin
			data clFileCount, int
			data clFileIndex, int
			
			if (CommandLine("fo ",10,ClBuffer,clFileCount))
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: File overrides requested via -fo",false,false)					
				
				if (WscFile)
				begin
					ErrorLog("Can't use file overrides (-fo) when processing a script file (-w)!")
					ErrStatus=1
				end
				
				if ((!ErrStatus) && (!clFileCount))
				begin
					ErrorLog("No repository file names specified after -fo option!")
					ErrStatus=1
				end
				
				if ((!ErrStatus) && (clFileCount > Structures.Count))
				begin
					ErrorLog("More file name overrides (-fo) than structures (-s) !")
					ErrStatus=1
				end
				
				;;Check that the alternate file names are valid for the structures
				for clFileIndex from 1 thru clFileCount
				begin
					data tmpStr, @RpsStructure
					data strFileIndex, int
					data foundFile, Boolean, false
					upcase ClBuffer[clFileIndex]
					
					tmpStr = Structures[clFileIndex-1]
					
					for strFileIndex from 0 thru tmpStr.Files.Count-1
					begin
						if (tmpStr.Files[strFileIndex].Name.eqs.ClBuffer[clFileIndex])
						begin
							;;Found it - this is the one we need later
							FileIndex[clFileIndex] = strFileIndex
							foundFile = true
							VerboseLog("Using file definition " + tmpStr.Files[strFileIndex].Name,true,false)
							exitloop
						end
					end
					if (!foundFile)
					begin
						ErrorLog("Structure "+tmpStr.Name+" is not assigned to file "+atrim(ClBuffer[clFileIndex])+"!")
						ErrStatus=1
						exitloop
					end
				end
			end
		end
		
		;;-------------------------------------------------------------------------
		;;Do we have any custom token or expression processors?
		
		if (!ErrStatus)
			ErrStatus = LoadExtensions()
		
		;;-------------------------------------------------------------------------
		;;See if we have any special structure processing filters specified
		if (!ErrStatus)
		begin
			data ClFilterCount, int
			
			;;Default to enable "excluded by language" filter
			Env.ExcludeLanguage = true
			
			if (CommandLine("f ",5,ClBuffer,ClFilterCount))
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Custom structure processing filters specified via -f",false,false)

				if (Env.GenFromWsc) then
				begin
					;;Can use filters if we're processing a script file, the fields
					;;to include are determined by the script file.
					ErrorLog("Can't use -w and -f options together!")
					ErrStatus=1
				end
				else
				begin
					if (!ClFilterCount) then
					begin
						;;We have a -f, but no filter names
						ErrorLog("No filters specified after -f option!")
						ErrStatus=1
					end
					else
					begin
						
						data ix, int
						
						VerboseLog("Custom field filters in use",false,false)
						
						for ix from 1 thru ClFilterCount
						begin
							using ClBuffer[ix] select
							("o","O"),  ;;Include overlay fields
							begin
								Env.IncludeOverlays = true
								VerboseLog(" - Overlays will be included",false,false)
							end
							("l","L"),  ;;Ignore excluded by language flag
							begin
								Env.ExcludeLanguage = false
								VerboseLog(" - 'Excluded by Language' will be ignored",false,false)
							end
							("t","T"),  ;;Honor excluded by toolkit flag
							begin
								Env.ExcludeToolkit = true
								VerboseLog(" - 'Excluded by Toolkit' will be honored",false,false)
							end
							("r","R"),  ;;Honor excluded by report writer flag
							begin
								Env.ExcludeReport = true
								VerboseLog(" - 'Excluded by ReportWriter' will be honored",false,false)
							end
							("w","W"),  ;;Honor excluded by web flag
							begin
								Env.ExcludeWeb = true
								VerboseLog(" - 'Excluded by Web' will be honored",false,false)
							end
							(),     ;;Invalid option
							begin
								ErrorLog("Invalid -f filter!")
								ErrStatus=1
							end
							endusing
						end
					end
				end
			end
		end
		
		;;-------------------------------------------------------------------------
		;;See if we have any special group processing filters specified

		if (!ErrStatus)
		begin
			data ClFilterCount, int
			
			;;Default to using both types of group field prefixes
			Env.GroupPrefix = true
			Env.GroupMemberPrefix = true
			
			if (CommandLine("g ",3,ClBuffer,ClFilterCount))
			begin
				if (Env.DeveloperDebug)
					DebugLog("DEVDBG: Custom group processing rules specified via -g",false,false)

				if (Env.GenFromWsc) then
				begin
					;;Can specify group prefixes if we're processing a script file,
					;;the field names are determined by the script file.
					ErrorLog("Can't use -w and -g options together!")
					ErrStatus=1
				end
				else
				begin
					if (!ClFilterCount) then
					begin
						;;We have a -g, but no prefix specs
						ErrorLog("No group prefix options specified after -g option!")
						ErrStatus=1
					end
					else
					begin
						
						data ix, int
						
						VerboseLog("Custom group rules in use",false,false)
						
						for ix from 1 thru ClFilterCount
						begin
							using ClBuffer[ix] select
							("f","F"),  ;;Do not prefix group fields with group name
							begin
								Env.GroupPrefix = false
								VerboseLog(" - Group members not prefixed with group field name",false,false)
							end
							("i","I"),
							begin
								Env.DontExpandImplicitGroups = true
								VerboseLog(" - Implicit groups not expanded to individual fields",false,false)
							end
							("r","R"),  ;;Do not use repository group field prefix
							begin
								Env.GroupMemberPrefix = false
								VerboseLog(" - Repository group member prefix not used",false,false)
							end
							(),     ;;Invalid option
							begin
								ErrorLog("Invalid -g option!")
								ErrStatus=1
							end
							endusing
						end
					end
				end
			end
		end
		
		;;-------------------------------------------------------------------------
		;;Are we being asked to process multiple structures at the same time (in
		;;the same template)
		
		if ((!ErrStatus)&&(Env.RpsInUse)&&(CommandLine("ms ")||((FileDef!=^null)&&(Structures.Count>1))))
		begin
			data structureToCheck, @RpsStructure
			
			if (Env.DeveloperDebug)
				DebugLog("DEVDBG: Multiple structure processing requested via -ms",false,false)

			;;Make sure that we have at least two structures
			if (Structures.Count<2)
			begin
				ErrorLog("Option -ms requires you to specify at least two structures after -s")
				ErrStatus = 1
			end
			
			;;Check all of the structures and load them into the Env.CurrentStructures collection
			if (!ErrStatus)
			begin
				foreach structureToCheck in Structures.GetEnumerator()
				begin
					if (!CheckStructure(structureToCheck))
					begin
						ErrStatus = 1
						exitloop
					end
				end
			end
			
			if (!ErrStatus)
			begin
				Env.CurrentStructures = Structures
				Env.FileIndexes = FileIndex
				VerboseLog("Processing "+string(Structures.Count)+" structures concurrently",true,false)
			end
		end
		
		;;-------------------------------------------------------------------------
		;;We're good to go. Generate souce code
		
		if (!ErrStatus)
		begin
			
			if (Env.DeveloperDebug)
			begin
				DebugLog("------------------------------",true,false)
				DebugLog("DEVDBG: READY TO GENERATE CODE",false,false)
				DebugLog("------------------------------",false,false)
			end

			VerboseLog("",false,false)
			
			if ((!Env.RpsInUse)||(Env.CurrentStructures!=^null)) then
				call process_templates
			else
			begin
				for StrNum from 0 thru Structures.Count-1
				begin
					;;Check the structure, flatten arrays and groups, etc.
					if (CheckStructure(Structures[StrNum])) then
						Env.CurrentStructure = Structures[StrNum]
					else
						nextloop
					
					Env.FileIndex = FileIndex[StrNum+1]
					
					;;Generate code for this structure
					call process_templates
					
					Env.CurrentStructure = ^null
				end
			end
			
		end
		
		;;-------------------------------------------------------------------------
		;;Cleanup and exit
		
		clear Templates
		
		if (Env.FilesCreated&&Env.FilesFailed) then
			Log(string(Env.FilesCreated) + " file(s) created, " + string(Env.FilesFailed) + " failed",(Env.Verbose||Env.Debug),false)
		else if (Env.FilesCreated) then
			Log(string(Env.FilesCreated) + " file(s) created",(Env.Verbose||Env.Debug),false)
		else if (Env.FilesFailed)
			Log(string(Env.FilesFailed) + " file(s) failed",(Env.Verbose||Env.Debug),false)
		
.ifdef D_GUI
		if (Env.Dbr)
		begin
			data TmpBuf, a1
			display(Env.Tt,13,10,"Press a key: ")
			accept(Env.Tt,TmpBuf)
		end
.endc
		
		close Env.Tt
		
		xreturn
		
		;;-------------------------------------------------------------------------------
		;;Iterate through the template files and generating code
		
	process_templates,
		
		;;Process each template
		begin
			data tmpTemplate, @a
			foreach tmpTemplate in Templates
			begin
				Env.CurrentTemplate =(a)tmpTemplate
				
				;;If we're processing multiple structures in the same template then make
				;;sure that context is set to the first structure for each template
				if (Env.CurrentStructures!=^null)
				begin
					Env.CurrentStructure = Env.CurrentStructures[0]
					Env.FileIndex = Env.FileIndexes[1]
				end
				
				;;Generate the code
				Generate()
				
				Env.CurrentTemplate = ""
			end
		end
		
		return
		
	endsubroutine
	
endnamespace
