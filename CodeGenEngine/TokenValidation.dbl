;; *****************************************************************************
;; 
;;  Title:       TokenValidation.dbl
;; 
;;  Type:        Class
;; 
;;  Description: Validates that tokens are in a valid location within the tree
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq

namespace CodeGen.Engine

    ;;; <summary>
    ;;; Validates the location of a token based on the TokenValidity of the token and the location of the
    ;;; token in the tree. For example, field loop tokens may only exist in a field loop.
    ;;; </summary>
    class TokenValidation

        tokenValidators, @Dictionary<TokenValidity, Func<FileNode, IEnumerable<LoopNode>, boolean>>

        public method TokenValidation
        proc
            tokenValidators = new Dictionary<TokenValidity, Func<FileNode, IEnumerable<LoopNode>, boolean>>()
            tokenValidators.Add(TokenValidity.Anywhere, isGenericTokenValid)
            tokenValidators.Add(TokenValidity.NotInLoop, isNotInLoopTokenValid)
            tokenValidators.Add(TokenValidity.FieldLoop, isFieldLoopTokenValid)
            tokenValidators.Add(TokenValidity.FieldSelectionLoop, isSelectionLoopTokenValid)
            tokenValidators.Add(TokenValidity.KeyLoop, isKeyLoopTokenValid)
            tokenValidators.Add(TokenValidity.KeySegmentLoop, isKeySegmentLoopTokenValid)
            tokenValidators.Add(TokenValidity.EnumLoop, isEnumLoopTokenValid)
            tokenValidators.Add(TokenValidity.EnumMemberLoop, isEnumMemberLoopTokenValid)
            tokenValidators.Add(TokenValidity.RelationLoop, isRelationLoopTokenValid)
            tokenValidators.Add(TokenValidity.RelationSegmentLoop, isRelationSegmentLoopTokenValid)
            tokenValidators.Add(TokenValidity.ButtonLoop, isButtonLoopTokenValid)
            tokenValidators.Add(TokenValidity.FileLoop, isFileLoopTokenValid)
            tokenValidators.Add(TokenValidity.TagLoop, isTagLoopTokenValid)
            tokenValidators.Add(TokenValidity.StructureLoop, isStructureLoopTokenValid)
            tokenValidators.Add(TokenValidity.AnyLoop, isAnyLoopTokenValid)
            tokenValidators.Add(TokenValidity.InterfaceLoop, isInterfaceLoopTokenValid)
            tokenValidators.Add(TokenValidity.MethodLoop, isMethodLoopTokenValid)
            tokenValidators.Add(TokenValidity.ParameterLoop, isParameterLoopTokenValid)
        endmethod

        ;TODO: I don't believe this class is actually required.
        ;It should be possible to write code to impose these rules based on Validity and location.
        ;This class just hard-codes the rules that the Validity options express.

        ;;; <summary>
        ;;; Called by ErrorReporting to determine if a token is in a valid location.
        ;;; </summary>
        ;;; <param name="validityType">Token type.</param>
        ;;; <param name="template">Tree root node.</param>
        ;;; <param name="loops">Current loop heirarchy.</param>
        ;;; <returns>True indicates that the location of the token is valid.</returns>
        public method IsValid, boolean
            validityType, TokenValidity 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn tokenValidators[validityType](template, loops)
        endmethod

        private static method isGenericTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn true
        endmethod

        private static method isNotInLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn loops.Count() == 0
        endmethod

        private static method isFieldLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.FirstOrDefault(lambda (node) {node .is. FieldLoopNode}) != ^null))
        endmethod

        private static method isSelectionLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.Last() .is. SelectionLoopNode))
        endmethod

        private static method isKeyLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.FirstOrDefault(lambda (node) {node .is. KeyLoopNode}) != ^null))
        endmethod

        private static method isKeySegmentLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.Last() .is. SegmentLoopNode))
        endmethod

        private static method isEnumLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.FirstOrDefault(lambda (node) {node .is. EnumLoopNode}) != ^null))
        endmethod

        private static method isEnumMemberLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.Last() .is. EnumMemberLoopNode))
        endmethod

        private static method isRelationLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.FirstOrDefault(lambda (node) {node .is. RelationLoopNode}) != ^null))
        endmethod

        private static method isRelationSegmentLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.Last() .is. RelationSegmentLoopNode))
        endmethod

        private static method isButtonLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.Last() .is. ButtonLoopNode))
        endmethod

        private static method isFileLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.Last() .is. FileLoopNode))
        endmethod

        private static method isTagLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.Last() .is. TagLoopNode))
        endmethod

        private static method isStructureLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.Last() .is. StructureLoopNode))
        endmethod

        private static method isAnyLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn (loops.Count() > 0)
        endmethod
	
        private static method isInterfaceLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.Last() .is. InterfaceLoopNode))
        endmethod

        private static method isMethodLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.Last() .is. MethodLoopNode))
        endmethod

        private static method isParameterLoopTokenValid, boolean
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
        proc
            mreturn ((loops.Count() > 0) && (loops.Last() .is. ParameterLoopNode))
        endmethod

    endclass

endnamespace
