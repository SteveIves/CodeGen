;;*****************************************************************************
;;
;; Title:       CommandLineParser.dbl
;;
;; Type:        Class
;;
;; Description: Parses and returns information about the command line that
;;              started the program
;;
;; Date:        14th August 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System.Collections.Generic

namespace CodeGen.Engine

    class CommandLineParser

        ;;; <summary>
        ;;; Parse the command line looking for a switch.
        ;;; </summary>
        ;;; <param name="a_opt">Switch to look for.</param>
        ;;; <returns>True if the switch was found.</returns>
        public static method Parse, boolean
            required in  a_opt,     String
        proc
            data optvals, @List<string>, new List<String>()
            mreturn parse(a_opt,optvals)
        endmethod

        ;;; <summary>
        ;;; Parse the command line looking for a switch and return associated option values.
        ;;; </summary>
        ;;; <param name="a_opt">Switch to look for.</param>
        ;;; <param name="a_optvals">Returned values associated with the switch.</param>
        ;;; <returns>True if the switch was found.</returns>
        public static method Parse, boolean
            required in  a_opt,     String
            required out a_optvals, @List<String>
        proc
            a_optvals = new List<String>()

            data optionFound = false
            data optionCharacter = %option(34) ? "/" : "-"

            data args = Environment.GetCommandLineArgs()

            if (args.Length > 1)
            begin
                data ix, int
                data option_value, String
                for ix from 2 thru args.Length
                begin
                    option_value = args[ix]

                    ;;Is this the requested option?
                    if (option_value.eqs.(optionCharacter+a_opt))
                    begin
                        ;;Found requested option
                        optionFound = true

                        ;;Are we out of arguments?
                        if (ix == args.Length)
                            exitloop

                        ;;Move on to the next argument
                        option_value = args[ix+=1]

                        ;;DO NOT CHANGE THE .ne. OPERATOR to != ... THEY ARE NOT THE SAME THING WITH STRING!
                        while(!option_value.StartsWith(optionCharacter))
                        begin
                            ;;Strip leading and trailing quote characters
                            using option_value select
                            ("'", '"'),
                            begin
                                if ((option_value.Length>1)&&(option_value(option_value.Length:1)==option_value(1:1)))
                                begin
                                    if (option_value.Length>2) then
                                        option_value = option_value(2,option_value.Length-1)
                                    else
                                        option_value = ""
                                end
                            end
                            endusing

                            ;;Add the value to the returned collection
                            a_optvals.Add(option_value)

                            ;;Are we out of arguments?
                            if (ix == args.Length)
                                exitloop

                            ;;Move on to the next argument
                            option_value = args[ix+=1]
                        end

                        ;;Adjust counter to stay in correct position in loop
                        ix -= 1
                    end
                end
            end

            mreturn optionFound

        endmethod

    endclass

endnamespace
