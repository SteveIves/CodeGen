
import System
import System.Collections.ObjectModel
import System.ComponentModel
import System.Data
import System.Drawing
import System.Windows.Forms

import CodeGen.RepositoryAPI

namespace CodeGen.Engine.PropertyEditors

	public partial class StructureEditorForm extends System.Windows.Forms.Form
		
        public method StructureEditorForm
            required in initialNames, @ObservableCollection<String>
			endparams
		proc
            this.InitializeComponent()

            ;;Load any existing selected items into the selected names list
            data iName, String
            foreach iName in initialNames
                listSelected.Items.Add(iName)
            
            ;;Get a collection of all repository structures 
            data structures = new RpsStructureCollection(RpsLoadMode.Load)

            ;;Add names that are NOT already in the selected list to the available list
            data str, @RpsStructure
            foreach str in structures.GetEnumerator()
            begin
                if (!initialNames.Contains(str.Name))
                    listAvailable.Items.Add((String)str.Name)
            end

            ;;Configure the initial state of the buttons
            if (listAvailable.Items.Count>0)
                listAvailable.SelectedIndex = 0
            if (listSelected.Items.Count>0)
                listSelected.SelectedIndex = 0
            btnAddAll.Enabled = (listAvailable.Items.Count > 0)
            btnRemoveAll.Enabled = (listSelected.Items.Count > 0)
            
        endmethod
		
        private method listAvailable_SelectedIndexChanged, void
            sender, @object 
            e, @System.EventArgs 
            endparams
        proc
            btnAdd.Enabled = (listAvailable.SelectedIndex>-1)
            btnAddAll.Enabled = (listAvailable.Items.Count > 0)            
        endmethod
        
        private method listSelected_SelectedIndexChanged, void
            sender, @object 
            e, @System.EventArgs 
            endparams
        proc
            btnRemove.Enabled = (listSelected.SelectedIndex>-1)
            btnRemoveAll.Enabled = (listSelected.Items.Count > 0)
        endmethod

        private method btnAdd_Click, void
            sender, @object 
            e, @System.EventArgs 
            endparams
        proc
            if (listAvailable.SelectedIndex>-1)
            begin
                data movedIndex, int, listAvailable.SelectedIndex
                listSelected.SelectedIndex = listSelected.Items.Add(listAvailable.Items[movedIndex])
                listAvailable.Items.RemoveAt(movedIndex)
                
                ;;Select another item in the all structures list
                if (listAvailable.Items.Count)
                begin
                    if (movedIndex<listAvailable.Items.Count-1) then
                        listAvailable.SelectedIndex = movedIndex
                    else
                        listAvailable.SelectedIndex = listAvailable.Items.Count-1
                end
            end
        endmethod
        
        private method btnRemove_Click, void
            sender, @object 
            e, @System.EventArgs 
            endparams
        proc
            if (listSelected.SelectedIndex>-1)
            begin
                data movedIndex, int, listSelected.SelectedIndex
                listAvailable.SelectedIndex = listAvailable.Items.Add(listSelected.Items[movedIndex])
                listSelected.Items.RemoveAt(movedIndex)
                
                ;;Select another item
                if (listSelected.Items.Count)
                begin
                    if (movedIndex<listSelected.Items.Count-1) then
                        listSelected.SelectedIndex = movedIndex
                    else
                        listSelected.SelectedIndex = listSelected.Items.Count-1
                end
            end
        endmethod
        
        private method btnAddAll_Click, void
            sender, @object 
            e, @System.EventArgs 
            endparams
        proc
            listSelected.Items.AddRange(listAvailable.Items)
            listAvailable.Items.Clear()
            listAvailable.SelectedIndex = -1

            btnAdd.Enabled = (listAvailable.Items.Count > 0)
            btnAddAll.Enabled = (listAvailable.Items.Count > 0)
            btnRemoveAll.Enabled = (listSelected.Items.Count > 0)
            
        endmethod
        
        private method btnRemoveAll_Click, void
            sender, @object 
            e, @System.EventArgs 
            endparams
        proc
            listAvailable.Items.AddRange(listSelected.Items)
            listSelected.Items.Clear()
                       
            btnRemove.Enabled = (listSelected.Items.Count > 0)
            btnAddAll.Enabled = (listAvailable.Items.Count > 0)
            btnRemoveAll.Enabled = (listSelected.Items.Count > 0)
            
        endmethod
        
        private method btnOK_Click, void
            sender, @object 
            e, @System.EventArgs 
            endparams
        proc
            mSelectedNames = new ObservableCollection<String>()
            data strName, String
            foreach strName in listSelected.Items
                mSelectedNames.Add(strName)

            DialogResult = DialogResult.OK
            this.Close()
        endmethod
        
        private mSelectedNames, @ObservableCollection<String>
        
        public property SelectedNames, @ObservableCollection<String>
            method get
            proc
                mreturn mSelectedNames
            endmethod
        endproperty
        
    endclass

endnamespace

