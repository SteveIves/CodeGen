;;*****************************************************************************
;;
;; Title:       ExtensionMethods.dbl
;;
;; Type:        Static class
;;
;; Description: Miscellaneous extension methods
;;
;; Date:        16th October 2019
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2019, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Collections.ObjectModel
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

    public static class ExtensionMethods

        ;;; <summary>
        ;;; Add an AddRange(T) method to System.Collections.ObjectModel.ObservableCollection<T>
        ;;; </summary>
        ;;; <param name="collectionToAddTo">Collection to add items to</param>
        ;;; <param name="collectionToAdd">Collection containing items to be added</param>
        public static extension method AddRange<T>, void
            collectionToAddTo, @ObservableCollection<T>
            collectionToAdd, @IEnumerable<T>
        proc
            if (collectionToAdd == ^null)
            begin
                throw new ArgumentNullException("collectionToAdd")
            end
            data item, T
            foreach item in collectionToAdd
            begin
                collectionToAddTo.Add(item)
            end
        endmethod

		;;supports string, int and boolean
		private static method CastObject<T(class)>, T
			obj, @Object
		proc
			data strVal = ^as(obj, @string)
			data tmpObj, @object
			if(^typeof(T).IsAssignableFrom(obj.GetType())) then
				mreturn (T)obj
			else if(^typeof(T) == ^typeof(string)) then
			begin
				mreturn (T)(strVal ?? obj.ToString())
			end
			else if(^typeof(T) == ^typeof(Nullable<Boolean>)) then
			begin
				if(obj .is. @string)
				begin
					data resultBoolean = false
					if(System.Boolean.TryParse(strVal, resultBoolean)) then
					begin
						tmpObj = resultBoolean
						mreturn (T)tmpObj
					end
					else
						mreturn ^null
				end
			end
			else if(^typeof(T) == ^typeof(Nullable<int>))
			begin
				if(obj .is. @string)
				begin
					data resultInt = 0
					if(System.Int32.TryParse(strVal, resultInt)) then
					begin
						tmpObj = resultInt
						mreturn (T)tmpObj
					end
					else
						mreturn ^null
				end
			end

			mreturn ^null
			
		endmethod

		public static extension method HasProperty, boolean
			struct, @RpsStructure
			fileContext, @FileNode
			name, @string
		proc
			data targetStructure, @Dictionary<string, Object>
			if(fileContext.Context.ExtendedRepositoryProperties.TryGetValue(struct.Name, targetStructure))
			begin
				if(targetStructure.ContainsKey(name))
					mreturn true
			end
            
			mreturn struct.UserText.Contains(name) || struct.LongDescription.Contains(name)

		endmethod

		public static extension method HasProperty, boolean
			field, @RpsField
			fileContext, @FileNode
			name, @string
		proc
			data targetStructure, @Dictionary<string, Object>
			if(fileContext.Context.ExtendedRepositoryProperties.TryGetValue(field.StructureName + "." + field.Name, targetStructure))
			begin
				if(targetStructure.ContainsKey(name))
					mreturn true
			end
            
			mreturn field.UserText.Contains(name) || field.LongDescription.Contains(name)

		endmethod

		private static method GetProperty<T(class)>, T
			targetName, @string
			userText, @string
			longDescription, @string
			fileContext, @FileNode
			name, @string
		proc
			data result, T
			data resultObject, @object
			data targetLookup, @Dictionary<string, Object>
			if(fileContext.Context.ExtendedRepositoryProperties.TryGetValue(targetName, targetLookup))
			begin
				if(targetLookup.TryGetValue(name, resultObject))
					mreturn CastObject<T>(resultObject)
			end
            
			data textIndex = -1
			data stringToTest = userText
			textIndex = userText.IndexOf(name + "=")
			if(textIndex == -1)
			begin
				stringToTest = longDescription
				textIndex = longDescription.IndexOf(name + "=")
			end

			if(textIndex > -1)
			begin
				;;include the eq in name length
				data nameLength = name.Length + 1
				data semiPos = stringToTest.IndexOf(";",textIndex)
				mreturn CastObject<T>(stringToTest.Substring(textIndex+nameLength,semiPos-textIndex-nameLength))
			end

			mreturn ^null
		endmethod

		public static extension method GetProperty<T(class)>, T
			struct, @RpsStructure
			fileContext, @FileNode
			name, @string
		proc
			mreturn GetProperty<T>(struct.Name, struct.UserText, struct.LongDescription, fileContext, name) 
		endmethod

		public static extension method GetProperty<T(class)>, T
			field, @RpsField
			fileContext, @FileNode
			name, @string
		proc
			mreturn GetProperty<T>(field.StructureName + "." + field.Name, field.UserText, field.LongDescription, fileContext, name)
		endmethod

    endclass

endnamespace
