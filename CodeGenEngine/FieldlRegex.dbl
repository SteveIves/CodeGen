;;*****************************************************************************
;;
;; Title:       FieldRegEx.dbl
;;
;; Type:        Function
;;
;; Description: Return a regular expression that can be used to constrain or
;;              validate the contents of a field.
;;
;; Date:        14th March 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

    function FieldRegex         ,String
        required in Fld         ,@RpsField
        endparams
        record
            theRegEx            ,string
        endrecord
    proc

        using Fld.DataTypeCode select
        ("D"),
            call DecimalRegex
        ("I"),
            call IntegerRegex
        (),
            call AlphaRegex
        endusing

        freturn theRegEx

    ;;-------------------------------------------------------------------------
    AlphaRegex,

        begin
            data minChars, int, 0

            ;;If it's a required field then require at least 1 character
            if (Fld.Required)
                minChars = 1

            ;;From start of string
            theRegEx = "^"

            ;;Any character up to field length
            theRegEx = theRegEx + ".{" + string(minChars) + "," + string(Fld.Size) + "}"

            ;;End of string
            theRegEx = theRegEx + "$"
        end

        return

    ;;-------------------------------------------------------------------------
    DecimalRegex,

        ;;From start of string
        theRegEx = "^"

        ;;Determine if a leading + or - are allowed
        if (Fld.NegativeAllowed==RpsFieldNegatives.None) then
            theRegEx = theRegEx + "[+]?"
        else
            theRegEx = theRegEx + "[+-]?"

        ;;Allow any number of leading zero's
        theRegEx = theRegEx + "[0]*"

        ;;Allow the appropriate number of numeric characters before the decimal point
        theRegEx = theRegEx + "[0-9]{0," + string(Fld.Size-Fld.Precision) + "}"

        if (Fld.Precision>0)
        begin
            ;;Start sub-expression. This is used to ensure that the code that allows digits
            ;;after a decimal point is excluded if there is no decimal point.
            theRegEx = theRegEx + "("

            ;;Optional decimal point
            theRegEx = theRegEx + "\."

            ;;Allow the appropriate number of numeric characters after the decimal point
            theRegEx = theRegEx + "[0-9]{0," + string(Fld.Precision) + "}"

            ;;Allow any number of trailing zero's
            theRegEx = theRegEx + "[0]*"

            ;;End sub-expression
            theRegEx = theRegEx + ")?"
        end

        ;;End of string
        theRegEx = theRegEx + "$"

        return

    ;;-------------------------------------------------------------------------
    IntegerRegex,

        ;;IMPORTANT: The regular expression for integer fields will constrain
        ;;the number of characters entered, and restrict those characters to
        ;;being numeric characters, but it will NOT restrict the user to only
        ;;entering valid numeric values. For example, an i1 field can store
        ;;up to 127, the regex will constrain the entry to 3 numeric characters
        ;;but it will still be possible to enter an out of range value (e.g. 256).

        ;;From start of string
        theRegEx = "^"

        ;;Determine if a leading + or - are allowed
        if (Fld.NegativeAllowed==RpsFieldNegatives.None) then
            theRegEx = theRegEx + "[+]?"
        else
            theRegEx = theRegEx + "[+-]?"

        ;;Allow any number of leading zero's
        theRegEx = theRegEx + "[0]*"

        ;;Allow the appropriate number of numeric characters
        using Fld.Size select
        (1),    theRegEx = theRegEx + "[0-9]{0,3}"
        (2),    theRegEx = theRegEx + "[0-9]{0,5}"
        (4),    theRegEx = theRegEx + "[0-9]{0,10}"
        (8),    theRegEx = theRegEx + "[0-9]{0,19}"
        endusing

        ;;End of string
        theRegEx = theRegEx + "$"

        return

    endfunction

endnamespace

