
import System
.ifdef DBLNET
import System.Collections
import System.IO
import Microsoft.Win32
.endc
import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine

.ifndef DBLNET

	public class CodeGenerator

		public method CodeGenerator
			endparams
		proc
			throw new Exception("The CodeGenerator class is only available in Synergy .NET!")
		endmethod

	endclass

.else

	public enum LoggingLevel
		Normal,
		Verbose,
		Debug,
		DeveloperDebug
	endenum

	;;;<summary>
	;;;Defines the signature for a method which is to receive logging messages when using
	;;;the CodeGenerator class.
	;;;</summary>
	public delegate MessageLogger	,void
		required in message			,string
		required in blankLineBefore	,boolean
		required in blankLineAfter	,boolean
	enddelegate
	
	public sealed class CodeGenerator implements IDisposable

		private UnsetTemplate					,boolean				;;Need to unset CODEGEN_TPLDIR
		private UnsetExe						,boolean				;;Need to unset CODEGEN_EXE

		private mLoggingLevel					,LoggingLevel
		private mTaskSet						,@CodeGenTaskSet

		public method CodeGenerator
			required in taskset					,@CodeGenTaskSet
			required in loggerMethod			,@MessageLogger
			endparams
		proc
			;;Save the tasks
			mTaskSet = taskset

			using mTaskSet.LoggingLevel select
			(LoggingLevel.Normal),
			begin
				Env.Verbose = false
				Env.Debug = false
				Env.DeveloperDebug = false
			end
			(LoggingLevel.Verbose),
			begin
				Env.Verbose = true
				Env.Debug = false
				Env.DeveloperDebug = false
			end
			(LoggingLevel.Debug),
			begin
				Env.Verbose = true
				Env.Debug = true
				Env.DeveloperDebug = false
			end
			(LoggingLevel.DeveloperDebug),
			begin
				Env.Verbose = true
				Env.Debug = true
				Env.DeveloperDebug = true
			end
			endusing
			
			;;Configure logging
			Env.LoggerMethod = loggerMethod
			Env.SuppressLogging = false
			Env.Dbr = false

			configureEnvironment()
			loadCustomTokens()
			
		endmethod

		public method GenerateCode, Boolean
			endparams
			.include "CODEGEN_SRC:codegen.def"
		proc
			;;Display headings
			VerboseLog(CODEGEN_APPNAME + " " + CODEGEN_VERSION,true,true)
			
			;;Process each task
			data task, @CodeGenTask
			data allSuccess, Boolean, true

			foreach task in mTaskSet.Tasks
			begin
				Env.Reset()
				if (!doGenerate(task))
					allSuccess = false
			end

			mreturn allSuccess

		endmethod

		;;;<summary>
		;;;Performs code generation for a single task
		;;;</summary>
		private method doGenerate, Boolean
			required in task, @CodeGenTask
			endparams

			static record
				ErrStatus   ,boolean                ;;Main error status variable
				StrNum      ,int                    ;;Structure number being processed
				WscFile     ,a80                    ;;UI Toolkit window script file
				Templates   ,@ArrayList             ;;Collection of template names
				Structures  ,@RpsStructureCollection;;Collection of repository structures
				FileIndex   ,[#]int                 ;;Array of file indexes to use
				FileDef     ,@RpsFile               ;;Repository file definition name
			endrecord
			
			external function
				CleanScriptField, a
			endexternal
			
			.define D_SEPERATOR "\"
			
		proc
			;;-------------------------------------------------------------------------
			;;Echo command line?
			
			if (task.EchoCommand)
			begin
				data command, String, "codegen "

				;;Templates
				if (task.Templates.Count>0)
				begin
					command += "-t "
					data tmp, String
					foreach tmp in task.Templates
						command += tmp + " "
				end

				;;Structures
				if (task.Structures.Count>0)
				begin
					command += "-s "
					data tmp, String
					foreach tmp in task.Structures
						command += tmp + " "
				end
				
				;;
				if (task.MultipleStructures)
					command += "-ms "
				
				;;Aliases
				if (task.Aliases.Count>0)
				begin
					command += "-a "
					data tmp, String
					foreach tmp in task.Aliases
						command += tmp + " "
				end
				
				;;File overrides
				if (task.FileOverrides.Count>0)
				begin
					command += "-fo "
					data tmp, String
					foreach tmp in task.FileOverrides
						command += tmp + " "
				end
				
				;;Subset
				if (task.Subset!=string.Empty)
					command += "-subset " + task.Subset + " "

				;;Repository file
				if (task.RepositoryFile!=string.Empty)
					command += "-file " + task.RepositoryFile + " "
				
				;;Window Script
				if (task.WindowScript!=string.Empty)
					command += "-w " + task.WindowScript + " "
					
				;;Ignore script field attributes
				if (task.IgnoreScriptFieldAttributes)
					command += "-wn "

				;;Selection window script
				if (task.SelectionWindowScript!=String.Empty)
					command += "-ws " + task.SelectionWindowScript + " "
					
				;;Replace files
				if (task.ReplaceFiles)
					command += "-r "

				;;Namespace
				if (task.Namespace!=String.Empty)
					command += "-n " + task.Namespace + " "

				;;Field prefix
				if (task.FieldPrefix!=String.Empty)
					command += "-prefix " + task.FieldPrefix + " "

				;;User token file
				if (task.UserTokenFile!=String.Empty)
					command += "-u " + task.UserTokenFile + " "

				;;Command line user tokens
				if (task.UserTokens.Count>0)
				begin
					command += "-ut "
					data tmp, @UserToken
.ifdef DBLNET
					foreach tmp in task.UserTokens
.else
					foreach tmp in task.UserTokens.GetEnumerator()
.endc
						command += tmp.Name + "=" + tmp.Value + " "
				end

				;;
				if (task.IncludeOverlayFields)
					command += "-f o "

				;;
				if (task.IgnoreExcludeLanguage)
					command += "-f l "
					
				;;
				if (task.HonorExcludeToolkit)
					command += "-f t "
					
				;;
				if (task.HonorExcludeReportWriter)
					command += "-f r "
					
				;;
				if (task.HonorExcludeWeb)
					command += "-f w "
					
				;;
				if (task.GroupFieldNoGroupPrefix)
					command += "-g f "
					
				;;
				if (task.GroupFieldNoRpsPrefix)
					command += "-g r "
					
				;;
				if (task.GroupNoExpand)
					command += "-g i "
				
				;;
				if (task.AlwaysLoadDefaultButtons)
					command += "-b a "
					
				;;
				if (task.NeverLoadDefaultButtons)
					command += "-b d "
				
				;;
				if (task.NeverLoadAnyButtons)
					command += "-b n "
				
				;;Template folder
				if (task.TemplateFolder!=String.Empty)
					command += "-i " + task.TemplateFolder + " "
				
				;;Output folder
				if (task.OutputFolder!=String.Empty)
					command += "-o " + task.OutputFolder + " "

				;;Character width
				if (task.CharacterWidth!=12)
					command += "-cw " + task.CharacterWidth.ToString() + " "
				
				;;Character height
				if (task.CharacterHeight!=25)
					command += "-ch " + task.CharacterHeight.ToString() + " "

				if (task.EchoCommand)
					command += "-e "

				Log(command,true,false)
			end
			
			;;-------------------------------------------------------------------------
			;;See if we have a template file location specified with CODEGEN_TPLDIR
			;;If present, this location overrides the default location (current dir)
			
			if (!ErrStatus)
			begin
				data TmpBuf, a256
				data length, int
				getlog("CODEGEN_TPLDIR",TmpBuf,length)
				if (length)
				begin
					if ((TmpBuf(length:1)!=":") && (TmpBuf(length:1)!=D_SEPERATOR))
						TmpBuf(length+1:1) = D_SEPERATOR
					Env.TemplateDir = TmpBuf
				end
			end
			
			;;-------------------------------------------------------------------------
			;;See if we have a template file location command line option
			;;If present, this location overrides the default and CODEGEN_TPLDIR
			
			if (!ErrStatus)
			begin
				if (task.TemplateFolder!=String.Empty)
				begin
					if ((!task.TemplateFolder.Trim().EndsWith(":")) && (!task.TemplateFolder.Trim().EndsWith(D_SEPERATOR)))
						task.TemplateFolder = task.TemplateFolder.Trim() + D_SEPERATOR
					Env.TemplateDir = task.TemplateFolder.Trim()
				end
			end
			
			;;-------------------------------------------------------------------------
			;;Report template file location (verbose mode only)
			
			if ((!ErrStatus) && Env.Verbose)
			begin
				if (Env.TemplateDir) then
					Log("Template location: " + Env.TemplateDir,false,false)
				else
					Log("Template location: Current directory",false,false)
			end
			
			;;-------------------------------------------------------------------------
			;;See if we have an output location specified with CODEGEN_OUTDIR
			;;If present, this location overrides the default location (current dir)
			
			if (!ErrStatus)
			begin
				data TmpBuf, a256
				data length, int
				getlog("CODEGEN_OUTDIR",TmpBuf,length)
				if (length)
				begin
					if ((TmpBuf(length:1)!=":") && (TmpBuf(length:1)!=D_SEPERATOR))
						TmpBuf(length+1:1)=D_SEPERATOR
					Env.OutputDir = TmpBuf
				end
			end
			
			;;-------------------------------------------------------------------------
			;;See if we have an output location command line option
			;;If present, this location overrides the default and CODEGEN_OUTDIR
			
			if (!ErrStatus)
			begin
				if (task.OutputFolder!=String.Empty)
				begin
					if (!task.OutputFolder.Trim().EndsWith(":")&&!task.OutputFolder.Trim().EndsWith(D_SEPERATOR))
						task.OutputFolder = task.OutputFolder.Trim() + D_SEPERATOR
					Env.OutputDir = task.OutputFolder.Trim()
				end
			end
			
			;;-------------------------------------------------------------------------
			;;Report output location (verbose mode only)
			
			if (!ErrStatus && Env.Verbose)
			begin
				if (Env.OutputDir) then
					Log("Output location:   " + Env.OutputDir,false,false)
				else
					Log("Output location:   Current directory",false,false)
			end
			
			;;-------------------------------------------------------------------------
			;;Make sure we can create files in the output location.  The output location
			;;variable is in global data, for use by the generator routines.
			
			if (!ErrStatus)
			begin
				try
				begin
					data tmpch, int
					open(tmpch=0,o:s,Env.OutputDir+"temp.tmp")
					purge tmpch
				end
				catch (ex)
				begin
					ErrorLog("Can't create files in " + Env.OutputDir)
					ErrStatus = true
				end
				endtry
			end
			
			;;-------------------------------------------------------------------------
			;;Replace existing files?
			
			if (!ErrStatus)
			begin
				if (task.ReplaceFiles) then
				begin
					xcall flags(300,0)
					VerboseLog("Replace files:     YES",false,false)
				end
				else
				begin
					xcall flags(300,1)
					VerboseLog("Replace files:     NO",false,false)
				end
			end
			
			;;-------------------------------------------------------------------------
			;;See if we have a default namespace specified with SYNDEFNS
			;;If present, this location overrides the default of "codegen"
			
			if (!ErrStatus)
			begin
				data TmpBuf, a80
				data length, int
				getlog("SYNDEFNS",TmpBuf,length)
				if (length)
					Env.DefaultNamespace = atrim(TmpBuf)
			end
			
			;;-------------------------------------------------------------------------
			;;See if we have a default namespace command line option
			;;If present, this location overrides the SYNDEFNS environment variable.
			
			if (!ErrStatus)
				if (task.Namespace!=String.Empty)
					Env.DefaultNamespace = task.Namespace
			
			;;-------------------------------------------------------------------------
			;;Are we being asked to use a field / group member prefix
			if (!ErrStatus)
			begin
				if (task.FieldPrefix!=String.Empty) then
				begin
					Env.ClDoFieldPrefix = true
					Env.ClFieldPrefix = task.FieldPrefix
				end
				else
				begin
					Env.ClDoFieldPrefix = false
					Env.ClFieldPrefix = ""
				end
			end
			
			;;-------------------------------------------------------------------------
			;;See if we have a request to override the default pixel width of a character
			
			if (!ErrStatus)
				Env.CharacterWidth = task.CharacterWidth
			
			;;-------------------------------------------------------------------------
			;;See if we have a request to override the default pixel height of a row
			
			if (!ErrStatus)
				Env.CharacterHeight = task.CharacterHeight
			
			;;-------------------------------------------------------------------------
			;;Get a list of template files in template directory

			if (!ErrStatus)
			begin
				VerboseLog("",false,false)
				
				if (task.Templates.Count==0) then
				begin
					Log("Nothing to do - specify template(s) with -t option!",false,false)
					ErrStatus = true
				end
				else
				begin
					if (task.Templates[0]=="*") then
					begin
						if (!WinDir(Env.TemplateDir+"*.tpl",Templates,WinDirCase.NoChange))
						begin
							ErrorLog("No templates to process in " + Env.TemplateDir)
							Log("       Set template directory with CODEGEN_TPLDIR or -t option.",false,false)
							ErrStatus = true
						end
					end
					else
					begin
						data ix, int
						
						;;Create a new templates collection
						Templates = new ArrayList()
						
						;;Check that all specified template files exist
						for ix from 0 thru task.Templates.Count -1
						begin								
							data AlreadyThere, boolean, false
							
							;;Add ".tpl" if necessary
							if (!instr(1,LowerCase(task.Templates[ix]),".tpl"))
								task.Templates[ix]=atrim(task.Templates[ix])+".tpl"
							
							;;Does this template spec contain a wildward?
							if (instr(1,task.Templates[ix],"*")) then
							begin
								data TmpTemplates, @ArrayList
								TmpTemplates = new ArrayList()
								if (WinDir(Env.TemplateDir+task.Templates[ix],TmpTemplates,WinDirCase.NoChange)) then
								begin
									;;Add these templates to the list to process, if not
									;;already there
									data tmpTemplate, @a
									foreach tmpTemplate in TmpTemplates
									begin
										;;Add the template to the collection
										AlUtil.AddIfMissing(Templates,tmpTemplate)
									end
								end
								else
									Log("WARNING: No templates match " + task.Templates[ix],false,true)
							end
							else
							begin
								;;Make sure the template can be opened
								try
								begin
									data tmpch, int
									open(tmpch=0,i:s,Env.TemplateDir+task.Templates[ix])
									close tmpch
								end	
								catch (ex)
								begin
									ErrorLog("Template %a not found!" + task.Templates[ix])
									ErrStatus = true
									exitloop
								end
								endtry
								
								;;Add the template to the collection
								AlUtil.AddIfMissing(Templates,task.Templates[ix])
							end
						end
					end
				end
				
				if (!ErrStatus)
				begin
					data ix, int
					;;Report templates to process
					if (Env.Verbose)
					begin
						data tmpTemplate, @a
						Log("Template(s):",false,false)
						foreach tmpTemplate in Templates
							Log(" - " + (a)tmpTemplate,false,false)
					end
					;;Remove .tpl file extensions
					for ix from 0 thru Templates.Count-1
						Templates[ix] = (@a)((a)Templates[ix]-".tpl")
				end
			end
			
			;;-------------------------------------------------------------------------
			;;Do we have a repository file definition specified?
			
			if (!ErrStatus)
			begin
				if (task.RepositoryFile!=String.Empty)
				begin
					;;Get the file details from the repository
					task.RepositoryFile = task.RepositoryFile.ToUpper()
					try
					begin
						FileDef = new RpsFile(task.RepositoryFile)
					end
					catch (e, @RpsFileException)
					begin
						ErrorLog("Failed to load repository file definition " + task.RepositoryFile)
						ErrStatus = true
					end
					endtry
					
					if (!ErrStatus)
					begin
						;;Make sure the file has at least one structure defined, and if so set them as the structures to process
						if (FileDef.StructureCount>0) then
						begin
							Structures = FileDef.Structures
							Env.RpsInUse = true
							
							;;Default all structures to use the file being processed
							begin
								data ix, int
								FileIndex = new int[Structures.Count]
								for ix from 0 thru Structures.Count-1
								begin
									data iy, int
									FileIndex[ix+1] = 0
									for iy from 0 thru Structures[ix].Files.Count-1
									begin
										if (Structures[ix].Files[iy].Name==FileDef.Name)
										begin
											FileIndex[ix+1] = iy
											exitloop
										end
									end
								end
							end
							
						end
						else
						begin
							ErrorLog("Repository file " + task.RepositoryFile + " doesn't have any structures assigned")
							ErrStatus = true
						end
					end					
				end
			end
			
			;;-------------------------------------------------------------------------
			;;Do we have a UI Toolkit window script specified?
			
			if (!ErrStatus)
			begin
				if (task.WindowScript!=String.Empty)
				begin
					if (task.RepositoryFile!=String.Empty) then
					begin
						ErrorLog("Can't use -file and -w options together!")
						ErrStatus = true
					end
					else
						WscFile = task.WindowScript
				end
			end
			
			;;-------------------------------------------------------------------------
			;;Are we being asked to ignore field attributes in UI Toolkit window scripts
			
			if (!ErrStatus)
				Env.NoWscAttributes = task.IgnoreScriptFieldAttributes
			
			;;-------------------------------------------------------------------------
			;;Are we provided with a UI Toolkit window script to search for selection
			;;windows in?
			
			if (!ErrStatus)
			begin
				if (task.SelectionWindowScript!=String.Empty)
				begin
					;;Open the file, fail if can't
					try
					begin
						data WscChn, int
						open(WscChn=0,i:s,task.SelectionWindowScript)
						close WscChn
						Env.SelectionWindowScript = task.SelectionWindowScript
						DebugLog("Selection window processing enabled from file "+Env.SelectionWindowScript,false,false)
					end
					catch (ex)
					begin
						ErrorLog("Can't open selection window script " + task.SelectionWindowScript.Trim() + " Check your -ws option!")
						ErrStatus = true
					end
					endtry
				end
			end
			
			;;-------------------------------------------------------------------------
			;;Do we have Repository structures specified?
			
			if (!ErrStatus)
			begin
				if (task.Structures.Count>0)
				begin
					if (FileDef!=^null)
					begin
						ErrorLog("Can't use -file and -s options together!")
						ErrStatus = true
					end
					
					if (!ErrStatus)
					begin
						if (task.WindowScript!=String.Empty)
						begin
							ErrorLog("Can't use -w and -s options together!")
							ErrStatus = true
						end
					end
					
					if (!ErrStatus)
					begin
						Env.RpsInUse = true
						
						if (!ErrStatus)
						begin
							;;All or specific structures?
							if (task.Structures[0]=="*") then
							begin
								;;Process all structures
								try
								begin
									Structures = new RpsStructureCollection(RpsLoadMode.Load)
									if (Structures.Count) then
										Env.AllStructures = true
									else
									begin
										ErrorLog("Repository contains no structures!")
										ErrStatus = true
									end
								end
								catch (ex, @RpsException)
								begin
									ErrorLog(ex.Message)
									ErrStatus = true
								end
								endtry
							end
							else
							begin
								;;Process specified structures
								data ix, int
								Structures = new RpsStructureCollection(RpsLoadMode.NoLoad)
								for ix from 0 thru task.Structures.Count-1 
								begin
									try
									begin
										data newStructure, @RpsStructure, new RpsStructure(task.Structures[ix])
										data errorText, String
										if (Env.SelectionWindowScript!=^null)
											if (!ProcessSelectionWindows(newStructure,errorText))
											begin
												ErrorLog("Failed to resolve selection windows for structure " + newStructure.Name + char(13) + char(10) + "       " + errorText)
												ErrStatus = true
												exitloop
											end
										Structures.Add(newStructure)
									end
									catch (ex)
									begin
										ErrorLog(ex.Message)
										ErrStatus = true
									end
									endtry
								end
							end
							
							;;Default all structures to use the first file assigned
							if (!ErrStatus)
							begin
								data ix, int
								FileIndex = new int[Structures.Count]
								for ix from 1 thru Structures.Count
									FileIndex[ix] = 0
							end							
						end
					end
				end
			end
			
			;;-------------------------------------------------------------------------
			;;Are we being asked to process a subset of the fields in a structure?
			
			if (!ErrStatus)
			begin
				Env.SubSetName = ""
				if (task.Subset!=String.Empty)
				begin
					if (!Env.RpsInUse)
					begin
						ErrorLog("Can't use -subset without a repository structure!")
						ErrStatus = true
					end
					
					if (!ErrStatus&&Structures.Count>1)
					begin
						ErrorLog("Option -subset is only valid when processing a single structure!")
						ErrStatus = true
					end
					
					if (!ErrStatus)
						Env.SubSetName = task.Subset.Trim()
				end
			end
			
			;;-------------------------------------------------------------------------
			;;If we have a window script file then process it
			
			if (!ErrStatus)
			begin
				
				;;Create a default (empty) button collection
				Env.Buttons = new WscButtonCollection()
				
				;;Now parse the script file
				if (WscFile)
				begin
					data errTxt, string
					ErrStatus = (boolean)ParseWindowScript(WscFile,Structures,errTxt)
				end
				
				if (ErrStatus)
					exit
				
				if (Structures!=^null)
				begin
					data ix, int
					FileIndex = new int[Structures.Count]
					for ix from 1 thru Structures.Count
						FileIndex[ix] = 0
				end
				
				;;If we got buttons from the script file, but we're being told not to do
				;;button processing (-bn), then delete the buttons
				if (task.NeverLoadAnyButtons&&Env.Buttons.Count)
				begin
					DebugLog("Removing script file buttons because of -bn option",false,false)
					Env.Buttons.Clear()
				end
				
				;;If after parsing the script file we don't have any buttons, or we are being
				;;told to always use default buttons (-ba), and we're not being told to not
				;;load default buttons (-bd) and were not being told to not use any buttons
				;;(-bn) then add the default buttons that are defined in
				;;CODEGEN_EXE:DefaultButtons.xml
				if (((!Env.Buttons.Count)||(task.AlwaysLoadDefaultButtons))&&(!task.NeverLoadDefaultButtons)&&(!task.NeverLoadAnyButtons))
				begin
					if (!Env.Buttons.Count) then
						DebugLog("Loading default buttons because no script file buttons were found",true,false)
					else if (task.AlwaysLoadDefaultButtons)
						DebugLog("Loading default buttons because of command line option -ba",true,false)
					Env.Buttons.LoadDefaultButtons()
				end
				
			end
			
			;;-------------------------------------------------------------------------
			;;Report if we're doing Repository processing
			
			if (!ErrStatus && Env.Verbose)
			begin
				if (Env.RpsInUse) then
				begin
					data str, @RpsStructure
					Log("Structure(s):",true,false)
					
					foreach str in Structures.GetEnumerator()
						Log(" - " + str.Name,false,false)
				end
				else
					Log("No Repository structure processing",false,false)
			end
			
			;;-------------------------------------------------------------------------
			;;Do we have structure aliases specified
			
			if (!ErrStatus&&Structures!=^null)
			begin
				data tmpStr, @RpsStructure
				data AliasIndex, int
				
				;;First, default all alias names to the same as the structure name
				foreach tmpStr in Structures.GetEnumerator()
					tmpStr.Alias = tmpStr.Name
				
				;;Now apply specific aliases from the command line
				if (task.Aliases.Count>0)
				begin
					if (WscFile)
					begin
						ErrorLog("Can't use -w and -a options together!")
						ErrStatus = true
					end
					
					if ((!ErrStatus) && (task.Aliases.Count > Structures.Count))
					begin
						ErrorLog("More aliases than repository structures!")
						ErrStatus = true
					end
					
					if (!ErrStatus)
					begin
						VerboseLog("Applying structure aliases",true,false)
						for AliasIndex from 0 thru task.Aliases.Count - 1
						begin
							Structures[AliasIndex].Alias = UpperCase(task.Aliases[AliasIndex])
							VerboseLog(" - Structure " + Structures[AliasIndex].Name + " aliased as " + Structures[AliasIndex].Alias,false,false)
						end
					end					
				end
			end
			
			;;-------------------------------------------------------------------------
			;;Do we have alternate repository file references specified
			
			if (!ErrStatus&&Structures!=^null)
			begin
				if (task.FileOverrides.Count>0)
				begin
					if (WscFile)
					begin
						ErrorLog("Can't use file overrides (-fo) when processing a script file (-w)!")
						ErrStatus = true
					end
					
					if ((!ErrStatus) && (task.FileOverrides.Count > Structures.Count))
					begin
						ErrorLog("More file name overrides (-fo) than structures (-s) !")
						ErrStatus = true
					end
					
					;;Check that the alternate file names are valid for the structures
					if (!ErrStatus)
					begin
						data clFileIndex, int
						for clFileIndex from 0 thru task.FileOverrides.Count -1
						begin
							data tmpStr, @RpsStructure
							data strFileIndex, int
							data foundFile, Boolean, false
							task.FileOverrides[clFileIndex] = task.FileOverrides[clFileIndex].ToUpper()
							
							tmpStr = Structures[clFileIndex]
							
							for strFileIndex from 0 thru tmpStr.Files.Count-1
							begin
								if (tmpStr.Files[strFileIndex].Name.eqs.task.FileOverrides[clFileIndex])
								begin
									;;Found it - this is the one we need later
									FileIndex[clFileIndex] = strFileIndex
									foundFile = true
									VerboseLog("Using file definition " + tmpStr.Files[strFileIndex].Name,true,false)
									exitloop
								end
							end
							if (!foundFile)
							begin
								data msg, a80
								s_bld(msg,,"Structure %a is not assigned to file %a!",tmpStr.Name,(a)task.FileOverrides[clFileIndex])
								ErrorLog(msg)
								ErrStatus = true
								exitloop
							end
						end
					end
				end
			end
			
			;;-------------------------------------------------------------------------
			;;Are we being asked to process a user defined token file?
			
			if (!ErrStatus)
			begin
				if (task.UserTokenFile!=string.Empty)
				begin
					data tmpch, int
					try
					begin
						UserTokenCollection.LoadTokensFromFile(task.UserTokenFile)
					end
					catch (ex)
					begin
						data mtx, a132
						ErrorLog("Failed to open or process user token file. File was:")
						s_bld(mtx,,"       %a%a.",Env.TemplateDir,(a)task.UserTokenFile)
						Log(mtx,false,false)
						ErrStatus = true
					end
					endtry
				end
			end
			
			;;-------------------------------------------------------------------------
			;;Do we have user defined tokens on the command line?
			
			if (!ErrStatus)
			begin
				if (task.UserTokens.Count>0)
				begin
					if (Env.UserTokens==^null||Env.UserTokens.Count==0) then
						Env.UserTokens = task.UserTokens
					else
						UserTokenCollection.AddTokens(task.UserTokens)
				end
			end
			
			;;-------------------------------------------------------------------------
			;;See if we have any special structure processing filters specified
			if (!ErrStatus)
			begin
				;;Default to enable "excluded by language" filter
				Env.ExcludeLanguage = true
				
				if (task.IncludeOverlayFields||task.IgnoreExcludeLanguage||task.HonorExcludeToolkit||task.HonorExcludeReportWriter||task.HonorExcludeWeb)
				begin
					if (Env.GenFromWsc) then
					begin
						;;Can's use filters if we're processing a script file, the fields
						;;to include are determined by the script file.
						ErrorLog("Can't use -w and -f options together!")
						ErrStatus = true
					end
					else
					begin
						VerboseLog("Custom field filters in use",false,false)
						
						if (task.IncludeOverlayFields)
						begin
							Env.IncludeOverlays = true
							VerboseLog(" - Overlays will be included",false,false)
						end
						
						if (task.IgnoreExcludeLanguage)
						begin
							Env.ExcludeLanguage = false
							VerboseLog(" - 'Excluded by Language' will be ignored",false,false)
						end
						
						if (task.HonorExcludeToolkit)
						begin
							Env.ExcludeToolkit = true
							VerboseLog(" - 'Excluded by Toolkit' will be honored",false,false)
						end
						
						if (task.HonorExcludeReportWriter)
						begin
							Env.ExcludeReport = true
							VerboseLog(" - 'Excluded by ReportWriter' will be honored",false,false)
						end
						
						if (task.HonorExcludeWeb)
						begin
							Env.ExcludeWeb = true
							VerboseLog(" - 'Excluded by Web' will be honored",false,false)
						end						
					end
				end
			end
			
			;;-------------------------------------------------------------------------
			;;See if we have any special structure processing filters specified
			
			if (!ErrStatus)
			begin
				;;Default to using both types of group field prefixes
				Env.GroupPrefix = true
				Env.GroupMemberPrefix = true
				
				if (task.GroupFieldNoGroupPrefix||task.GroupFieldNoRpsPrefix||task.GroupNoExpand)
				begin
					if (Env.GenFromWsc) then
					begin
						;;Can's specify group prefixes if we're processing a script file,
						;;the field names are determined by the script file.
						ErrorLog("Can't use -w and -g options together!")
						ErrStatus = true
					end
					else
					begin
						VerboseLog("Custom group rules in use",false,false)
						
						if (task.GroupFieldNoGroupPrefix)  ;;Do not prefix group fields with group name
						begin
							Env.GroupPrefix = false
							VerboseLog(" - Group members not prefixed with group field name",false,false)
						end
						
						if (task.GroupNoExpand)
						begin
							Env.DontExpandImplicitGroups = true
							VerboseLog(" - Implicit groups not expanded to individual fields",false,false)
						end
						
						if (task.GroupFieldNoRpsPrefix)  ;;Do not use repository group field prefix
						begin
							Env.GroupMemberPrefix = false
							VerboseLog(" - Repository group member prefix not used",false,false)
						end
					end
				end
			end
			
			;;-------------------------------------------------------------------------
			;;Are we being asked to process multiple structures at the same time (in the same template)
			
			if ((!ErrStatus)&&(Env.RpsInUse)&&(task.MultipleStructures||((FileDef!=^null)&&(Structures.Count>1))))
			begin
				data structureToCheck, @RpsStructure
				
				;;Make sure that we have at least two structures
				if (Structures.Count<2)
				begin
					ErrorLog("Option -ms requires you to specify at least two structures after -s")
					ErrStatus = true
				end
				
				;;Check all of the structures and load them into the Env.CurrentStructures collection
				if (!ErrStatus)
				begin
					foreach structureToCheck in Structures.GetEnumerator()
					begin
						if (!CheckStructure(structureToCheck))
						begin
							ErrStatus = true
							exitloop
						end
					end
				end
				
				if (!ErrStatus)
				begin
					Env.CurrentStructures = Structures
					Env.FileIndexes = FileIndex
					VerboseLog("Processing "+string(Structures.Count)+" structures concurrently",true,false)
				end
			end
			
			;;-------------------------------------------------------------------------
			;;We're good to go. Generate souce code
			
			if (!ErrStatus)
			begin
				
				VerboseLog("",false,false)
				
				if ((!Env.RpsInUse)||(Env.CurrentStructures!=^null)) then
					call process_templates
				else
				begin
					for StrNum from 0 thru Structures.Count-1
					begin
						;;Check the structure, flatten arrays and groups, etc.
						if (CheckStructure(Structures[StrNum])) then
							Env.CurrentStructure = Structures[StrNum]
						else
							nextloop
						
						Env.FileIndex = FileIndex[StrNum+1]
						
						;;Generate code for this structure
						call process_templates
						
						Env.CurrentStructure = ^null
					end
				end
				
			end
			
			;;-------------------------------------------------------------------------
			;;Cleanup and exit
			
			clear Templates
			
			if (Env.FilesCreated&&Env.FilesFailed) then
				Log(string(Env.FilesCreated) + " file(s) created, " + string(Env.FilesFailed) + " failed",(Env.Verbose||Env.Debug),false)
			else if (Env.FilesCreated) then
				Log(string(Env.FilesCreated) + " file(s) created",(Env.Verbose||Env.Debug),false)
			else if (Env.FilesFailed)
				Log(string(Env.FilesFailed) + " file(s) failed",(Env.Verbose||Env.Debug),false)
			
			mreturn (!ErrStatus)
			
			;;-------------------------------------------------------------------------------
			;;Iterate through the template files and generating code
			
		process_templates,
			
			;;Process each template
			begin
				data tmpTemplate, @a
				foreach tmpTemplate in Templates
				begin
					Env.CurrentTemplate =(a)tmpTemplate
					
					;;If we're processing multiple structures in the same template then make
					;;sure that context is set to the first structure for each template
					if (Env.CurrentStructures!=^null)
					begin
						Env.CurrentStructure = Env.CurrentStructures[0]
						Env.FileIndex = Env.FileIndexes[1]
					end
					
					;;Generate the code
					Generate()
					
					Env.CurrentTemplate = ""
				end
			end
			
			return
			
		endmethod

		.region "Helper methods"

		;;;<summary>
		;;;Configures the basic environment by setting the environment variables
		;;;CODEGEN_EXE, CODEGEN_TPLDIR, CODEGEN_AUTHOR and CODEGEN_COMPANY
		;;;</summary>
		private method configureEnvironment, void
			endparams
		proc
			data TxtLen		,int
			data TempString	,a256
			
			;;Explicitly set CODEGEN_EXE to the location of the running executable
			TempString = Path.GetDirectoryName(System.Reflection.Assembly.GetAssembly(^typeof(CodeGenerator)).Location)
			xcall setlog("CODEGEN_EXE",atrim(TempString),TxtLen)
			UnsetExe=true
			
			;;Is CODEGEN_TPLDIR already set in the environment?
			xcall getlog("CODEGEN_TPLDIR",TempString,TxtLen)
			if (!TxtLen)
			begin
				;;No, look in the registry for the value set by InstallShield
				data templateFolder, string
				templateFolder = (string)Registry.GetValue("HKEY_LOCAL_MACHINE\SOFTWARE\Synergex\CodeGen","TemplatePath","")
				if ((templateFolder!=^null)&&(templateFolder!="")) then
				begin
					;;Found it
					xcall setlog("CODEGEN_TPLDIR",templateFolder,TxtLen)
				end
				else
				begin
					;;Still nothing - default to current directory
					xcall setlog("CODEGEN_TPLDIR",".",TxtLen)
				end
				UnsetTemplate=true
			end
			
			;;Is CODEGEN_AUTHOR already set in the environment?
			xcall getlog("CODEGEN_AUTHOR",TempString,TxtLen)
			if (TxtLen) then
				Env.Author = atrim(TempString)
			else
			begin
				;;No, look in the registry for the value set by InstallShield
				TempString = (string)Registry.GetValue("HKEY_LOCAL_MACHINE\SOFTWARE\Synergex\CodeGen","DefaultAuthor","")
				if (TempString) then
					Env.Author = atrim(TempString)
				else
					Env.Author = CODEGEN_APPNAME + " " + CODEGEN_VERSION
			end
			
			;;Is CODEGEN_COMPANY already set in the environment?
			xcall getlog("CODEGEN_COMPANY",TempString,TxtLen)
			if (TxtLen) then
				Env.Company = atrim(TempString)
			else
			begin
				;;No, look in the registry for the value set by InstallShield
				TempString = (string)Registry.GetValue("HKEY_LOCAL_MACHINE\SOFTWARE\Synergex\CodeGen","DefaultCompany","")
				if (TempString) then
					Env.Company = atrim(TempString)
				else
					Env.Company = "Synergex"
			end
			
		endmethod

		;;;<summary>
		;;;Detects any custom token assemblies and loads any custom tokens that
		;;;they contain.
		;;;</summary>
		private method loadCustomTokens, void
			endparams
		proc
			;;-------------------------------------------------------------------------
			;;Do we have any custom token processors?
			
			data customFileSpec		,a256
			data tmpLen				,i4
			data libraries			,@ArrayList
			data loadCustomTokens	,Boolean	,false
			data usingExtDir		,Boolean	,false
				
			;;Do we have a CODEGEN_EXTDIR environment variable?
			xcall getlog("CODEGEN_EXTDIR",customFileSpec,tmpLen)
			if (tmpLen) then
				usingExtDir = true
			else
			begin
				;;No so we'll look in CODEGEN_EXE
				xcall getlog("CODEGEN_EXE",customFileSpec,tmpLen)
			end
				
			;;Setup a file spec to locate custom token processor extensions
			if (customFileSpec(%trim(customFileSpec):1)!="\")
				customFileSpec = %atrim(customFileSpec) + "\"
			customFileSpec = %atrim(customFileSpec) + "custom*.dll"
				
			;;Search for and open custom token processor extensions
			DebugLog("Checking for custom tokens (" + %atrim(customFileSpec) + ")",true,false)
			if (WinDir(customFileSpec,libraries,WinDirCase.NoChange))
			begin
				data file, @a
				foreach file in libraries
				begin
					data libSpec, String, "CODEGEN_EXE:"+(a)file
					if (usingExtDir)
						libSpec = "CODEGEN_EXTDIR:"+(a)file
					try
					begin
						DebugLog(" - Activating " + libSpec,false,false)
						xcall openelb(libSpec)
						loadCustomTokens = true
					end
					catch (e, @Exception)
					begin
						ErrorLog("Failed to open custom token library " + libSpec)
					end
					endtry
				end				
			end
				
			;;Load any custom token processor extensions
			if (loadCustomTokens)
			begin
				data address, D_ADDR
					
				;;Look for custom generic tokens
				address = %xaddr("LoadCustomTokens",,1)
				if (address)
				begin
					try
					begin
						xcall xsubr(address)
						if (Env.CustomTokens.Count>0)
						begin
							data customToken, @CustomTokenProcessor
							DebugLog(" - Custom generic tokens have been loaded:",false,false)
							foreach customToken in Env.CustomTokens
								DebugLog("   " + customToken.Token,false,false)
						end
					end
					catch (e, @Exception)
					begin
						ErrorLog("Failed to load custom generic tokens. LoadCustomTokens() failed!")
						Log("       " + e.Message,false,false)
						if (e.InnerException!=^null)
							Log("       " + e.InnerException.Message,false,false)
					end
					endtry
				end
					
				;;Look for custom field loop tokens
				address = %xaddr("LoadCustomFieldTokens",,1)
				if (address)
				begin
					try
					begin
						xcall xsubr(address)
						if (Env.CustomFieldTokens.Count>0)
						begin
							data customToken, @CustomFieldTokenProcessor
							DebugLog(" - Custom field loop tokens have been loaded:",false,false)
							foreach customToken in Env.CustomFieldTokens
								DebugLog("   " + customToken.Token,false,false)
						end
					end
					catch (e, @Exception)
					begin
						ErrorLog("Failed to load custom field loop tokens. LoadCustomFieldTokens() failed!")
					end
					endtry
				end
					
				;;Look for custom field selection loop tokens
				address = %xaddr("LoadCustomSelectionTokens",,1)
				if (address)
				begin
					try
					begin
						xcall xsubr(address)
						if (Env.CustomSelectionTokens.Count>0)
						begin
							data customToken, @CustomSelectionTokenProcessor
							DebugLog(" - Custom field selection loop tokens have been loaded:",false,false)
							foreach customToken in Env.CustomSelectionTokens
								DebugLog(" - " + customToken.Token,false,false)
						end
					end
					catch (e, @Exception)
					begin
						ErrorLog("Failed to load custom field selection loop tokens. LoadCustomSelectionTokens() failed!")
					end
					endtry
				end
					
				;;Look for custom enum loop tokens
				address = %xaddr("LoadCustomEnumTokens",,1)
				if (address)
				begin
					try
					begin
						xcall xsubr(address)
						if (Env.CustomEnumTokens.Count>0)
						begin
							data customToken, @CustomEnumTokenProcessor
							DebugLog(" - Custom enum loop tokens have been loaded:",false,false)
							foreach customToken in Env.CustomEnumTokens
								DebugLog("   " + customToken.Token,false,false)
						end
					end
					catch (e, @Exception)
					begin
						ErrorLog("Failed to load custom enum loop tokens. LoadCustomEnumTokens() failed!")
					end
					endtry
				end
					
				;;Look for custom enum member loop tokens
				address = %xaddr("LoadCustomEnumMemberTokens",,1)
				if (address)
				begin
					try
					begin
						xcall xsubr(address)
						if (Env.CustomEnumMemberTokens.Count>0)
						begin
							data customToken, @CustomEnumMemberTokenProcessor
							DebugLog(" - Custom enum member loop tokens have been loaded:",false,false)
							foreach customToken in Env.CustomEnumMemberTokens
								DebugLog("   " + customToken.Token,false,false)
						end
					end
					catch (e, @Exception)
					begin
						ErrorLog("Failed to load custom enum member loop tokens. LoadCustomEnumMemberTokens() failed!")
					end
					endtry
				end
					
				;;Look for custom key loop tokens
				address = %xaddr("LoadCustomKeyTokens",,1)
				if (address)
				begin
					try
					begin
						xcall xsubr(address)
						if (Env.CustomKeyTokens.Count>0)
						begin
							data customToken, @CustomKeyTokenProcessor
							DebugLog(" - Custom key loop tokens have been loaded:",false,false)
							foreach customToken in Env.CustomKeyTokens
								DebugLog("   " + customToken.Token,false,false)
						end
					end
					catch (e, @Exception)
					begin
						ErrorLog("Failed to load custom key loop tokens. LoadCustomKeyTokens() failed!")
					end
					endtry
				end
					
				;;Look for custom key segment loop tokens
				address = %xaddr("LoadCustomSegmentTokens",,1)
				if (address)
				begin
					try
					begin
						xcall xsubr(address)
						if (Env.CustomSegmentTokens.Count>0)
						begin
							data customToken, @CustomSegmentTokenProcessor
							DebugLog(" - Custom key segment loop tokens have been loaded:",false,false)
							foreach customToken in Env.CustomSegmentTokens
								DebugLog("   " + customToken.Token,false,false)
						end
					end
					catch (e, @Exception)
					begin
						ErrorLog("Failed to load custom key segment loop tokens. LoadCustomSegmentTokens() failed!")
					end
					endtry
				end
					
				;;Look for custom relation loop tokens
				address = %xaddr("LoadCustomRelationTokens",,1)
				if (address)
				begin
					try
					begin
						xcall xsubr(address)
						if (Env.CustomRelationTokens.Count>0)
						begin
							data customToken, @CustomRelationTokenProcessor
							DebugLog(" - Custom relation loop tokens have been loaded:",false,false)
							foreach customToken in Env.CustomRelationTokens
								DebugLog("   " + customToken.Token,false,false)
						end
					end
					catch (e, @Exception)
					begin
						ErrorLog("Failed to load custom relation loop tokens. LoadCustomRelationTokens() failed!")
					end
					endtry
				end
					
				;;Look for custom button loop tokens
				address = %xaddr("LoadCustomButtonTokens",,1)
				if (address)
				begin
					try
					begin
						xcall xsubr(address)
						if (Env.CustomButtonTokens.Count>0)
						begin
							data customToken, @CustomButtonTokenProcessor
							DebugLog(" - Custom button loop tokens have been loaded:",false,false)
							foreach customToken in Env.CustomButtonTokens
								DebugLog("   " + customToken.Token,false,false)
						end
					end
					catch (e, @Exception)
					begin
						ErrorLog("Failed to load custom button loop tokens. LoadCustomButtonTokens() failed!")
					end
					endtry
				end
					
				;;Look for custom file loop tokens
				address = %xaddr("LoadCustomFileTokens",,1)
				if (address)
				begin
					try
					begin
						xcall xsubr(address)
						if (Env.CustomFileTokens.Count>0)
						begin
							data customToken, @CustomFileTokenProcessor
							DebugLog(" - Custom file loop tokens have been loaded:",false,false)
							foreach customToken in Env.CustomFileTokens
								DebugLog("   " + customToken.Token,false,false)
						end
					end
					catch (e, @Exception)
					begin
						ErrorLog("Failed to load custom file loop tokens. LoadCustomFileTokens() failed!")
					end
					endtry
				end
			end
			
		endmethod

		.endregion

		.region "IDisposable"
		
		public method Dispose, void
			endparams
		proc
			;;Unset any environment variables that we set
			data status, int
			if (UnsetTemplate)
				xcall setlog("CODEGEN_TPLDIR",,status)
			if (UnsetExe)
				xcall setlog("CODEGEN_EXE",,status)
		endmethod
		
		.endregion
		
	endclass

.endc

endnamespace

