;; *****************************************************************************
;; 
;;  Title:       TreeNodes.dbl
;; 
;;  Type:        Classes
;; 
;;  Description: Classes that define various types of tree nodes
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Jeff Greene, Synergex Development
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import CodeGen.RepositoryAPI
import System
import System.Collections.Generic
import System.IO
import CodeGen.MethodCatalogAPI

.array 0

namespace CodeGen.Engine

    ;;; <summary>
    ;;; Defines the requirements for all tree node classes.
    ;;; </summary>
    public interface ITreeNode

        method Accept, void
            visitor, @ITreeNodeVisitor 
        endmethod

    endinterface

    ;;; <summary>
    ;;; An abstract class that describes a control node. Control nodes are nodes
    ;;; associated with tokens that implement logic within a template but are not
    ;;; expanded to produce output. Examples are loop and expression tokens.
    ;;; </summary>
    public abstract class ControlNode implements ITreeNode

        public OpenToken,@Token
        public Body,@List<ITreeNode>
        public CloseToken,@Token

        public abstract method Accept, void
            visitor, @ITreeNodeVisitor 
        proc

        endmethod

    endclass

    ;;; <summary>
    ;;; Represents a loop token in a template file.
    ;;; </summary>
    public class LoopNode extends ControlNode

        public CurrentIndex, int
        public MaxIndex, int

        public override method Accept, void
            visitor, @ITreeNodeVisitor 
        proc
            visitor.Visit(this)
        endmethod

        public override method ToString, string
        proc
            mreturn String.Format("LoopNode: <{0}>", OpenToken.Value)
        endmethod

    endclass

    ;;; <summary>
    ;;; Represents a field loop token in a template file.
    ;;; </summary>
    public class FieldLoopNode extends LoopNode
        public CurrentField, @RpsField
    endclass

    ;;; <summary>
    ;;; Represents a field delection loop token in a template file.
    ;;; </summary>
    public class SelectionLoopNode extends LoopNode
        public CurrentField, @RpsField
        public CurrentSelection, String
    endclass

    ;;; <summary>
    ;;; Represents a key loop token in a template file.
    ;;; </summary>
    public class KeyLoopNode extends LoopNode
        public CurrentKey, @RpsKey
        public FirstUniqueKeyNumber, int
    endclass

    ;;; <summary>
    ;;; Represents a key segment loop token in a template file.
    ;;; </summary>
    public class SegmentLoopNode extends LoopNode
        public CurrentKey, @RpsKey
        public CurrentSegment, @RpsKeySegment
        public CurrentField, @RpsField
    endclass

    ;;; <summary>
    ;;; Represents an enumeration loop token in a template file.
    ;;; </summary>
    public class EnumLoopNode extends LoopNode
        public CurrentEnumeration, @RpsEnum
    endclass

    ;;; <summary>
    ;;; Represents an enumeration member loop token in a template file.
    ;;; </summary>
    public class EnumMemberLoopNode extends LoopNode
        public CurrentEnumeration, @RpsEnum
        public CurrentMember, @RpsEnumMember
    endclass

    ;;; <summary>
    ;;; Represents a relation loop token in a template file.
    ;;; </summary>
    public class RelationLoopNode extends LoopNode
        public CurrentRelation, @RpsRelation
        public FromKey, @RpsKey
        public ToStructure, @RpsStructure
        public ToKey, @RpsKey
    endclass

    ;;; <summary>
    ;;; Represents a relation key segment loop token in a template file.
    ;;; </summary>
    public class RelationSegmentLoopNode extends SegmentLoopNode
        public CurrentRelation, @RpsRelation
        public ToStructure, @RpsStructure
        public ToKey, @RpsKey
    endclass

    ;;; <summary>
    ;;; Represents a button loop token in a template file.
    ;;; </summary>
    public class ButtonLoopNode extends LoopNode
        public CurrentButton, @WscButton
    endclass

    ;;; <summary>
    ;;; Represents a file loop token in a template file.
    ;;; </summary>
    public class FileLoopNode extends LoopNode
        public CurrentFile, @RpsFile
    endclass

    ;;; <summary>
    ;;; Represents a tag loop token in a template file.
    ;;; </summary>
    public class TagLoopNode extends LoopNode
        public CurrentTag, @RpsTag
    endclass

    ;;; <summary>
    ;;; Represents a structure loop token in a template file.
    ;;; </summary>
    public class StructureLoopNode extends LoopNode

    endclass

    ;;; <summary>
    ;;; Represents an interface loop token in a template file.
    ;;; </summary>
    public class InterfaceLoopNode extends LoopNode
        public CurrentInterface, @SmcInterface
    endclass

    ;;; <summary>
    ;;; Represents a method loop token in a template file.
    ;;; </summary>
    public class MethodLoopNode extends LoopNode
        public CurrentInterface, @SmcInterface
        public CurrentMethod, @SmcMethod
    endclass

    ;;; <summary>
    ;;; Represents a parameter loop token in a template file.
    ;;; </summary>
    public class ParameterLoopNode extends LoopNode
        public CurrentEnum, @RpsEnum
        public CurrentInterface, @SmcInterface
        public CurrentMethod, @SmcMethod
        public CurrentParameter, @SmcParameter
        public CurrentStructure, @RpsStructure
        public FirstEnumInstance, boolean
        public FirstStructureInstance, boolean
    endclass

    ;;; <summary>
    ;;; Represents an expression in a template file.
    ;;; For example in the expression <IF PROMPT> an ExpressionNode would represent the PROMPT portion.
    ;;; </summary>
    public class ExpressionNode implements ITreeNode

        public Value, @Token

        public method Accept, void
            visitor, @ITreeNodeVisitor 
        proc
            visitor.Visit(this)
        endmethod

    endclass

	public class UnaryExpressionNode extends ExpressionNode

		public Expression, @ExpressionNode

		new public method Accept, void
			visitor, @ITreeNodeVisitor 
		proc
			visitor.Visit(this)
		endmethod

	endclass

	public class BinaryExpressionNode extends ExpressionNode

		public Left, @ExpressionNode
		public Right, @ExpressionNode

		new public method Accept, void
			visitor, @ITreeNodeVisitor 
		proc
			visitor.Visit(this)
		endmethod

	endclass

	public class GroupExpressionNode extends ExpressionNode

		public Expression, @ExpressionNode

		new public method Accept, void
			visitor, @ITreeNodeVisitor 
		proc
			visitor.Visit(this)
		endmethod

	endclass

	public class ConditionalNode extends ControlNode
		public Expression, @ExpressionNode
		public Next, @ConditionalNode

		public override method Accept, void
			visitor, @ITreeNodeVisitor 
		proc
			throw new NotImplementedException()
		endmethod
    endclass


    ;;; <summary>
    ;;; Represents an IF token in a template file.
    ;;; </summary>
    public class IfNode extends ConditionalNode

        public override method Accept, void
            visitor, @ITreeNodeVisitor 
        proc
            visitor.Visit(this)
        endmethod

        public override method ToString, string
        proc
            mreturn String.Format("IfNode: <IF {0}>", Expression.Value.Value)
        endmethod

    endclass

    ;;; <summary>
    ;;; Represents an ELSE token in a template file.
    ;;; </summary>
    public class ElseNode extends ConditionalNode

        public override method Accept, void
            visitor, @ITreeNodeVisitor 
        proc
            visitor.Visit(this)
        endmethod

    endclass

    ;;; <summary>
    ;;; Represents an expandable token in a template file.
    ;;; </summary>
    public class ExpansionNode implements ITreeNode

        public Value, @Token

        public method Accept, void
            visitor, @ITreeNodeVisitor 
        proc
            visitor.Visit(this)
        endmethod

        public override method ToString, string
        proc
            mreturn string.Format("Token: <{0}>", Value.Value)
        endmethod

    endclass

    ;;; <summary>
    ;;; Represents raw text in a template file.
    ;;; The text in a TextNode does not contain any other tokens.
    ;;; </summary>
    public class TextNode implements ITreeNode

        public FirstLineNotInResult, boolean
        public LastLineNotInResult, boolean
        public RemoveTrailingWhitespace, boolean
        public Value, @Token

        public method Accept, void
            visitor, @ITreeNodeVisitor 
        proc
            visitor.Visit(this)
        endmethod

        public override method ToString, string
        proc
            mreturn string.Format("{0}: {1}", Value.TypeOfToken, Value)
        endmethod

    endclass

    ;;; <summary>
    ;;; Represents the root of the tree of nodes that in turn represents the content of a template file.
    ;;; </summary>
    public class FileNode implements ITreeNode

        public Body, @List<ITreeNode>
        public OutputFileNameTokens, @List<ITreeNode>
        public OutputFileName, string
        public OutputFolder, string
        public RequiredUserTokens, @List<string>
        public RequiredCustomTokens, @List<Tuple<TokenValidity, string>>
        public RequiredCustomExpressions, @List<Tuple<TokenValidity, string>>
        public RequiredOptions, @List<string>
        public ProcessTemplates, @List<string>
        public ProvideFiles, @List<string>
        public RequiresRepository, boolean, false
        public RequiresNamespace, boolean, false
        public RequiredCodeGenVersion, @Version

        ;; Taskset level code generation data
        public Context, @CodeGenContext

        public method Accept, void
            visitor, @ITreeNodeVisitor 
        proc
            visitor.Visit(this)
        endmethod

        public method GetTokenErrorMessage, string
            tkn, @Token 
            issue, String 
        proc
            mreturn String.Format("Template {0} line {1} <{2}> {3}.", Context.CurrentTemplateBaseName, tkn.StartLineNumber, tkn.Value, issue)
        endmethod

    endclass

endnamespace
