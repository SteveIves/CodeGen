;;*****************************************************************************
;;
;; Title:       ProcessCounters.dbl
;;
;; Type:        Function
;;
;; Description: Process counter tokens
;;
;; Date:        19th November 2012
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace CodeGen.Engine
	
	function ProcessCounters            ,Boolean
		required in	   token			,String         ;;Start positopm pf token in buffer
		required inout buffer           ,a              ;;Buffer containing token to be replaced
		required in    outputOff		,Boolean
		endparams
		
		stack record
			ReplacedToken   ,boolean
		endrecord
		
	proc
		
		ReplacedToken = false
		
		using token select
		
		("<COUNTER_1_DECREMENT>"),
		begin
			if (!outputOff)
				Env.Counter1 = Env.Counter1 - 1
			ReplacedToken = ReplaceToken(buffer,token,"")
			if (!buffer)
				buffer="~~~ REMOVE THIS RECORD ~~~"
		end
		
		("<COUNTER_1_INCREMENT>"),
		begin
			if (!outputOff)
				Env.Counter1 = Env.Counter1 + 1
			ReplacedToken = ReplaceToken(buffer,token,"")
			if (!buffer)
				buffer="~~~ REMOVE THIS RECORD ~~~"
		end
		
		("<COUNTER_1_RESET>"),
		begin
			if (!outputOff)
				Env.Counter1 = 0
			ReplacedToken = ReplaceToken(buffer,token,"")
			if (!buffer)
				buffer="~~~ REMOVE THIS RECORD ~~~"
		end
		
		("<COUNTER_1_VALUE>"),
			ReplacedToken = ReplaceToken(buffer,token,string(Env.Counter1))
			
		("<COUNTER_2_DECREMENT>"),
		begin
			if (!outputOff)
				Env.Counter2 = Env.Counter2 - 1
			ReplacedToken = ReplaceToken(buffer,token,"")
			if (!buffer)
				buffer="~~~ REMOVE THIS RECORD ~~~"
		end
		
		("<COUNTER_2_INCREMENT>"),
		begin
			if (!outputOff)
				Env.Counter2 = Env.Counter2 + 1
			ReplacedToken = ReplaceToken(buffer,token,"")
			if (!buffer)
				buffer="~~~ REMOVE THIS RECORD ~~~"
		end
		
		("<COUNTER_2_RESET>"),
		begin
			if (!outputOff)
				Env.Counter2 = 0
			ReplacedToken = ReplaceToken(buffer,token,"")
			if (!buffer)
				buffer="~~~ REMOVE THIS RECORD ~~~"
		end
		
		("<COUNTER_2_VALUE>"),
			ReplacedToken = ReplaceToken(buffer,token,string(Env.Counter2))
			
		endusing
		
		freturn ReplacedToken
		
	endfunction
	
endnamespace

