import System.Collections.ObjectModel
import System
import System.Collections.Generic
import System.Text
import HarmonyCoreGenerator.Model
import CodeGen.Engine
import System.Linq
import System.IO

namespace HarmonyCoreGenerator.Generator

	public abstract class GeneratorBase
		public readwrite property Priority, int

		public virtual method ValidateSolution, @List<string>
			solution, @Solution
        proc
            mreturn new List<string>()
		endmethod

		public virtual method ApplyDefaults, void
			solution, @Solution
		proc
		endmethod

		public abstract method GenerateTasks, @List<CodeGenTask>
			solution, @Solution 
		proc
		endmethod


		public static method DescribeGenerators, @string
			enabledGenerators, @HashSet<string>
		proc
			data hasOData = enabledGenerators.Contains(^nameof(ODataGenerator))
			data hasModels = enabledGenerators.Contains(^nameof(ModelGenerator))
			data hasTraditionalBridge = enabledGenerators.Contains(^nameof(TraditionalBridgeGenerator))
			data hasEfCore = enabledGenerators.Contains(^nameof(EFCoreGenerator))
			data hasSignalR = enabledGenerators.Contains(^nameof(SignalRGenerator))
            data hasWebApi, boolean ; Workaround for comoiler AccVio (9/15/2022)
			hasWebApi = enabledGenerators.Contains(^nameof(WebApiGenerator))

			data generatorResults = new List<string>()
			if(hasOData && hasModels && hasEfCore)
			begin
				generatorResults.Add("Generated OData Services")
			end

			if(!hasOData && hasModels && hasEfCore)
			begin
				generatorResults.Add("EF Core Provider")
			end

			if(hasOData && hasModels && !hasEfCore)
			begin
				generatorResults.Add("Custom OData Services")
			end

			if(hasTraditionalBridge && !hasSignalR && !hasWebApi)
			begin
				generatorResults.Add("Custom Traditional Bridge Services")
			end

			if(hasTraditionalBridge && (hasSignalR || hasWebApi))
			begin
				generatorResults.Add("Generated Traditional Bridge Services")
			end

			data resultDescription = string.Join(" | ", generatorResults)
			if(String.IsNullOrWhiteSpace(resultDescription)) then
				mreturn "None"
			else
				mreturn resultDescription

		endmethod

		public static method ShortCodeGenerators, @string
			enabledGenerators, @HashSet<string>
		proc
			data hasOData = enabledGenerators.Contains(^nameof(ODataGenerator))
			data hasModels = enabledGenerators.Contains(^nameof(ModelGenerator))
			data hasTraditionalBridge = enabledGenerators.Contains(^nameof(TraditionalBridgeGenerator))
			data hasEfCore = enabledGenerators.Contains(^nameof(EFCoreGenerator))
			data hasSignalR = enabledGenerators.Contains(^nameof(SignalRGenerator))
            data hasWebApi, boolean ; Workaround for comoiler AccVio (9/15/2022)
            hasWebApi = enabledGenerators.Contains(^nameof(WebApiGenerator))

			data generatorResults = new List<string>()
			if(hasOData && hasModels && hasEfCore)
			begin
				generatorResults.Add("OData")
			end

			if(!hasOData && hasModels && hasEfCore)
			begin
				generatorResults.Add("EF")
			end

			if(hasOData && hasModels && !hasEfCore)
			begin
				generatorResults.Add("CustomOData")
			end

			if(hasTraditionalBridge && !hasSignalR && !hasWebApi)
			begin
				generatorResults.Add("CustomTB")
			end

			if(hasTraditionalBridge && hasSignalR)
			begin
				generatorResults.Add("TBSignalR")
			end

			if(hasTraditionalBridge && hasWebApi)
			begin
				generatorResults.Add("TBWebApi")
			end

			data resultDescription = string.Join(" | ", generatorResults)
			if(String.IsNullOrWhiteSpace(resultDescription)) then
				mreturn "None"
			else
				mreturn resultDescription

		endmethod

		private static method TryAdd, void
			hash, @HashSet<string>
			{ParamArray}
			items, [#]string
		proc
			data item, @string
			foreach item in items
			begin
				if(!hash.Contains(item))
					hash.Add(item)
			end

		endmethod

		public static method ParseGeneratorShortCodes, @HashSet<string>
			shortCodes, @string 
		proc
			data result = new HashSet<string>(StringComparer.CurrentCultureIgnoreCase)
			data splitCodes = shortCodes?.Split(new char[#] { '|' }, StringSplitOptions.RemoveEmptyEntries)
			data code, @string
			foreach code in splitCodes
			begin
				using code.Trim().ToLower() select
				("tbwebapi"),
					TryAdd(result, ^nameof(TraditionalBridgeGenerator), ^nameof(WebApiGenerator), ^nameof(ModelGenerator))
				("tbsignalr"),
					TryAdd(result, ^nameof(TraditionalBridgeGenerator), ^nameof(SignalRGenerator), ^nameof(ModelGenerator))
				("customtb"),
					TryAdd(result, ^nameof(TraditionalBridgeGenerator), ^nameof(ModelGenerator))
				("customodata"),
					TryAdd(result, ^nameof(ODataGenerator), ^nameof(ModelGenerator))
				("ef"),
					TryAdd(result, ^nameof(EFCoreGenerator), ^nameof(ModelGenerator))
				("odata"),
					TryAdd(result, ^nameof(EFCoreGenerator), ^nameof(ModelGenerator), ^nameof(ODataGenerator))
				(),
					throw new InvalidOperationException(string.Format("invalid generator code {0}", code))
				endusing
			end
		endmethod


		public virtual method GetTargetStructures, @List<StructureEx>
			generatorName, @string
			targetSolution, @Solution
		proc
			mreturn targetSolution.ExtendedStructures.Where(lambda(struct) { struct.EnabledGenerators.Contains(generatorName) }).ToList()
		endmethod
	
		public virtual method GetTargetInterfaces, @List<InterfaceEx>
			generatorName, @string
			targetSolution, @Solution
		proc
			lambda interfacePicker(iface)
			begin
				if(generatorName == ^nameof(TraditionalBridgeGenerator)) then
					mreturn iface.GenerateInterface
				else if(generatorName == ^nameof(ODataGenerator)) then
					mreturn iface.GenerateODataController
				else if(generatorName == ^nameof(WebApiGenerator)) then
					mreturn iface.GenerateWebAPIController
				else if(generatorName == ^nameof(SignalRGenerator)) then
					mreturn iface.GenerateSignalRHub
				else if(iface.EnabledGenerators?.Contains(generatorName) ?? false) then
					mreturn true
				else
					mreturn false
			end

			mreturn targetSolution.ExtendedInterfaces.Where(interfacePicker).ToList()
		endmethod
;		this cant be implemented for user tokens, because they apply to the entire task. Some tasks likle dbcontext 
;		are run for all structures at the same time and this cant be broken up
;		public static method StructureTaskHelper, @IEnumerable<CodeGenTask>
;			targetSolution, @Solution
;			taskDescription, @string
;			taskNamespace, @string
;			taskOutput, @string
;			multiStructure, boolean
;			generatorNameForStructures, @string
;			targetTemplates, [#]@string
;			userTokens, [#]@UserToken
;			default templateFolder, @string, ^null
;		proc
;			data targetStructures = GetTargetStructures(generatorNameForStructures, targetSolution)
;			data userTokenGroups = new Dictionary<string, List<StructureEx>>()
;			data struct, @StructureEx
;			foreach struct in targetStructures
;			begin
;				data structTokenIdentifier = string.Join("|", struct.GetUserTokens(targetSolution).Select(lambda(tkn) { tkn.Name }))
;				data sameTokens, @List<StructureEx>
;				if(!userTokenGroups.TryGetValue(structTokenIdentifier, sameTokens))
;				begin
;					sameTokens = new List<StructureEx>()
;					userTokenGroups.Add(structTokenIdentifier, sameTokens)
;				end
;				sameTokens.Add(struct)
;			end
;
;			data sameTokenStructures, @List<StructureEx>
;			foreach sameTokenStructures in targetStructures.Values
;			begin
;				StructureTaskHelperInternal(targetSolution, taskDescription, taskNamespace, taskOutput, 
;			end
;		endmethod


		public virtual method StructureTaskHelper, @CodeGenTask
			targetSolution, @Solution
			taskDescription, @string
			taskNamespace, @string
			taskOutput, @string
			multiStructure, boolean
			generatorNameForStructures, @string
			targetTemplates, [#]@string
			userTokens, [#]@UserToken
			default templateFolder, @string, ^null
			default useStructures, boolean, true
		proc
			data targetStructures = new List<StructureEx>()
			if (useStructures)
				targetStructures = GetTargetStructures(generatorNameForStructures, targetSolution)
            data task = new CodeGen.Engine.CodeGenTask()

            task.UseAlternateFieldNames = targetSolution.AlternateFieldNames ?? false

			task.Description = taskDescription
			task.Templates.AddRange<String>(targetTemplates)
			if(!string.IsNullOrEmpty(templateFolder))
				task.TemplateFolder = templateFolder

			task.OutputFolder = taskOutput

			if(!Directory.Exists(taskOutput))
				Directory.CreateDirectory(taskOutput)

			if(targetSolution.FieldOverlays)
				task.IncludeOverlayFields = true

			task.Namespace = taskNamespace
			task.AllowTemplateFolder = true
			task.ReplaceFiles = true
			task.MultipleStructures = multiStructure

			if(targetSolution.NoCustomPluralization ?? false)
				task.NoCustomPluralization = true

			task.UserTokens.AddRange<UserToken>(MergeTokens(targetSolution.GetUserDefinedTokens(), userTokens))
			if (useStructures)
            begin
				;;each structure may have multiple aliases, if it does it will need to be processed multiple times
                data targetStruct, @StructureEx
                foreach targetStruct in targetStructures
                begin
                    data aliases = targetStruct?.Aliases == ^null ? new List<string>() : new List<string>(targetStruct?.Aliases)
                    if(aliases.Count == 0)
                        aliases.Add(targetStruct.Name)

                    data alias, @string
                    foreach alias in aliases
                    begin
                        task.Aliases.Add(alias)
						task.Structures.Add(targetStruct.Name)
                    end
                end
			end

			mreturn task
		endmethod

		public virtual method InterfaceTaskHelper, @CodeGenTask
			targetSolution, @Solution
			taskDescription, @string
			taskNamespace, @string
			taskOutput, @string
			targetInterface, @InterfaceEx
			generatorName, @string
			targetTemplates, [#]@string
			userTokens, [#]@UserToken
			default templateFolder, @string, ^null
			default useStructures, boolean, true
			default multiStructureMode, boolean, false
		proc
			data task = StructureTaskHelper(targetSolution, taskDescription, taskNamespace, taskOutput, multiStructureMode, generatorName, targetTemplates, userTokens, templateFolder, false)
			task.MethodCatalogInterface = targetInterface.Name
            if(useStructures)
				task.MethodCatalogStructureMode = true
			mreturn task
        endmethod

        public virtual method InterfaceTaskHelper, @CodeGenTask
            targetSolution, @Solution 
            taskDescription, @string
            taskNamespace, @string
            taskOutput, @string
            targetInterfaces, @IEnumerable<InterfaceEx>
            generatorName, @string
            targetTemplates, [#]@string
            userTokens, [#]@UserToken
            default templateFolder, @string, ^null
            default useStructures, boolean, true 
            default multiStructureMode, boolean, false
        proc
            data task = StructureTaskHelper(targetSolution, taskDescription, taskNamespace, taskOutput, multiStructureMode, generatorName, targetTemplates, userTokens, templateFolder, false)
            task.MethodCatalogInterfaces = new ObservableCollection<string>(targetInterfaces.Select(lambda(iface) { iface.Name }))

            if(useStructures)
                task.MethodCatalogStructureMode = true
            mreturn task
        endmethod

		public virtual method MergeTokens, @IEnumerable<UserToken>
			baseTokens, @IEnumerable<UserToken>
			overrideTokens, @IEnumerable<UserToken>
		proc
			data result = new Dictionary<string, UserToken>()

			data baseToken, @UserToken
			foreach baseToken in baseTokens
			begin
				if(!result.ContainsKey(baseToken.Name)) then
					result.Add(baseToken.Name, baseToken)
				else
					result[baseToken.Name] = baseToken
			end

			data overrideToken, @UserToken
			if(overrideTokens != ^null)
			begin
				foreach overrideToken in overrideTokens
				begin
					if(result.ContainsKey(overrideToken.Name)) then
						result[overrideToken.Name] = overrideToken
					else
						result.Add(overrideToken.Name, overrideToken)
				end
			end

			mreturn result.Values
		endmethod

	endclass

endnamespace
