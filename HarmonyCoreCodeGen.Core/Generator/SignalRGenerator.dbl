import System
import System.Collections.Generic
import System.Text
import System.IO
import CodeGen.Engine
import HarmonyCoreGenerator.Model


namespace HarmonyCoreGenerator.Generator

	public class SignalRGenerator extends GeneratorBase

		public override method ApplyDefaults, void
			solution, @HarmonyCoreGenerator.Model.Solution 
			endparams
		proc
			
		endmethod

		public override method ValidateSolution, @List<string>
			solution, @HarmonyCoreGenerator.Model.Solution 
			endparams
		proc
			mreturn new List<string>()
		endmethod

		public override method GenerateTasks, @List<CodeGen.Engine.CodeGenTask>
			targetSolution, @HarmonyCoreGenerator.Model.Solution 
			endparams
		proc
			data result = new List<CodeGenTask>()
			data iface, @InterfaceEx
			foreach iface in GeneratorBase.GetTargetInterfaces(^nameof(SignalRGenerator), targetSolution)
			begin
				result.Add(GeneratorBase.InterfaceTaskHelper(targetSolution, "Generate a SignalR hub for the Interface", targetSolution.ControllersNamespace, targetSolution.ControllersFolder, iface, ^nameof(SignalRGenerator), 
				&	new string[#] { "SignalRHub" }, new UserToken[#] { new UserToken("MODELS_NAMESPACE", String.Format("{0}.{1}",targetSolution.TraditionalBridgeFolder,"Models")) }, Path.Combine(targetSolution.TemplatesFolder,"SignalR"))) 
			end

			mreturn result
				
		endmethod
	endclass


endnamespace
