<!DOCTYPE HTML>
<html id="hs-topic-p">
<!-- saved from url=(0025)http://www.helpsmith.com/ -->
<head>
<title>Key Segment Loops</title>
<meta charset="windows-1252" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="generator" content="HelpSmith 9.8 (Build 23.918)" />
<link type="text/css" rel="stylesheet" href="../css/topics/style.css" />
<script type="text/javascript" src="../js/jquery-3.6.0.min.js"></script>
<style type="text/css" media="screen">
body {
  margin: 0;
}
</style>
<script type="text/javascript" src="../js/settings.js?56cd242c"></script>
<script type="text/javascript" src="../js/core.min.js?2f01eb41"></script>
<script type="text/javascript" src="../js/topic.min.js?2f01eb41"></script>
<script type="text/javascript">
	var topicContext = 170;
</script>
<!-- Web Help Topic -->
  
<!-- HTML Help (CHM) Topic -->
</head>
<body class="nsa-wrapper">
<div id="nsa-box" class="nsa-content0">
  <h1 class="hd0"><span class="ts0">Key Segment Loops</span></h1>
</div>
<div id="sa-box">
  <div id="content-box" class="sa-content0">
    <p>&nbsp;</p>
    <p class="ps1"><span class="ts2">A key segment loop is a template file construct which allows you to iterate through the collection of key segments for a particular key that CodeGen has information about.&nbsp; In order to use a key segment loop you must be processing a repository structure, either directly via the </span><a href="commandlinereference.htm#option_s" class="hs0">&ndash;s command line option</a><span class="ts2">, or because the structure is referenced by the UI Toolkit input window that you are processing via the </span><a href="commandlinereference.htm#option_w" class="hs0">&ndash;w command line option</a><span class="ts2">, and must be inside a key loop.</span></p>
    <p class="ps1"><span class="ts2">Key segment loops are delimited by a matching pair of </span><span class="ts3">&lt;SEGMENT_LOOP&gt;</span><span class="ts2">&nbsp;and </span><span class="ts3">&lt;/SEGMENT_LOOP&gt;</span><span class="ts2">&nbsp;tags, which surround the template code to be inserted for each key segment.</span></p>
    <p class="ps1"><span class="ts2">Key segment loop tokens are tokens that can only be used within a key segment loop:</span></p>
    <p class="ps0"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><a href="keysegmentloopexpansiontokens.htm" class="hs2">Key Segment Loop Expansion Tokens</a></p>
    <p class="ps0"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><a href="keysegmentloopexpressiontokens.htm" class="hs2">Key Segment Loop Expression Tokens</a></p>
    <p class="ps1"><span class="ts2">There are two types of key segment loop, multi-line key segment loops and in-line key segment loops.</span></p>
    <h2 class="hd1"><span class="ts1">Multi-Line Key Segment Loops</span></h2>
    <p class="ps1"><span class="ts2">Multi-line key segment loops occur when the opening and closing key segment loop tags appear on separate lines in a template file, and delimit one or more entire lines of template code, like this:</span></p>
    <p class="ps9"><span class="ts3">&lt;KEY_LOOP&gt;</span><br /><span class="ts3">[code]</span><br /><span class="ts4">&lt;SEGMENT_LOOP&gt;</span><br /><span class="ts4">code</span><br /><span class="ts4">&lt;/SEGMENT_LOOP&gt;</span><br /><span class="ts3">[code]</span><br /><span class="ts3">&lt;/KEY_LOOP&gt;</span></p>
    <p class="ps1"><span class="ts2">Multi-line key segment loops generate one or more lines of output code for each key segment that is processed.</span></p>
    <h2 class="hd1"><span class="ts1">In-Line Key Segment Loops</span></h2>
    <p class="ps1"><span class="ts2">In-line key segment loops exist when the opening and closing key segment loop tags appear on the same line in a template file, and delimit part of a line of template code, like this:</span></p>
    <p class="ps9"><span class="ts3">&lt;KEY_LOOP&gt;</span><br /><span class="ts3">[code]</span><br /><span class="ts3">[code] </span><span class="ts4">&lt;SEGMENT_LOOP&gt; code &lt;/SEGMENT_LOOP&gt;</span><span class="ts3">&nbsp;[code]</span><br /><span class="ts3">[code]</span><br /><span class="ts3">&lt;/KEY_LOOP&gt;</span></p>
    <p class="ps1"><span class="ts2">In-line key loops generate code into the current output line only.</span></p>
    <p class="ps1"><span class="ts2">Note: Key segment loops can also be used within alternate key loops and primary key blocks. Also, in the last example, the outer key loop could also be an in-line key loop.</span></p>
    <p class="ps1"><span class="ts2">The code between the opening and closing tags of a key segment loop is repeated for each key segment in the key being processed.</span></p>
    <p class="ps1"><span class="ts2">This code within a key segment loop can contain generic tokens, structure tokens, and special key segment loop tokens, which are discussed later. Most key loop tokens can also be used inside a key segment loop.</span></p>
    <p class="ps1"><span class="ts2">Key segment loop tokens can only be used inside a key segment loop, and a key segment loop can only be declared within one of the supported key loop constructs.</span></p>
    <h2 class="hd1"><a id="KeySegmentFilterLoop"></a><span class="ts1">Key Segment Filter Loops</span></h2>
    <p class="ps1"><span class="ts2">A key segment filter loop is similar to a key segment loop; except that the final key segment is not processed.&nbsp; As with key segment loops, CodeGen supports both multi-line and in-line key segment filter loops.</span></p>
    <p class="ps1"><span class="ts2">A multi-line key segment filter loop looks like this:</span></p>
    <p class="ps9"><span class="ts3">&lt;KEY_LOOP&gt;</span><br /><span class="ts3">[code]</span><br /><span class="ts4">&lt;SEGMENT_LOOP_FILTER&gt;</span><br /><span class="ts4">code</span><br /><span class="ts4">&lt;/SEGMENT_LOOP_FILTER&gt;</span><br /><span class="ts3">[code]</span><br /><span class="ts3">&lt;/KEY_LOOP&gt;</span></p>
    <p class="ps1"><span class="ts2">And an in-line key segment filter loop looks like this:</span></p>
    <p class="ps9"><span class="ts3">&lt;KEY_LOOP&gt;</span><br /><span class="ts3">[code]</span><br /><span class="ts3">[code] </span><span class="ts4">&lt;SEGMENT_LOOP_FILTER&gt; code &lt;/SEGMENT_LOOP_FILTER&gt;</span><span class="ts3">&nbsp;[code]</span><br /><span class="ts3">[code]</span><br /><span class="ts3">&lt;/KEY_LOOP&gt;</span></p>
    <p class="ps1"><span class="ts2">Note: Key segment filter loops can also be used within alternate key loops and primary key blocks. Also, in the last example, the outer key loop could also be an in-line key loop.</span></p>
    <p class="ps1"><span class="ts2">If you use a segment filter loop with a key which only has one segment, then no code will be inserted into the output file.</span></p>
    <h2 class="hd1"><a id="FirstSegmentRestrictions"></a><span class="ts1">First Segment Restrictions</span></h2>
    <p class="ps1"><span class="ts2">A first segment restriction behaves in a similar way to a key segment loop; except that only the first key segment is processed.&nbsp; As with key segment loops, CodeGen supports both multi-line and in-line first segment restrictions.</span></p>
    <p class="ps1"><span class="ts2">A multi-line first segment restriction looks like this:</span></p>
    <p class="ps9"><span class="ts3">&lt;KEY_LOOP&gt;</span><br /><span class="ts3">[code]</span><br /><span class="ts4">&lt;FIRST_SEGMENT&gt;</span><br /><span class="ts3">code</span><br /><span class="ts4">&lt;/FIRST_SEGMENT&gt;</span><br /><span class="ts3">[code]</span><br /><span class="ts3">&lt;/KEY_LOOP&gt;</span></p>
    <p class="ps1"><span class="ts2">And an in-line first segment restriction looks like this:</span></p>
    <p class="ps9"><span class="ts3">&lt;KEY_LOOP&gt;</span><br /><span class="ts3">[code]</span><br /><span class="ts3">[code] </span><span class="ts4">&lt;FIRST_SEGMENT&gt;</span><span class="ts3">&nbsp;code </span><span class="ts4">&lt;/FIRST_SEGMENT&gt;</span><span class="ts3">&nbsp;[code]</span><br /><span class="ts3">[code]</span><br /><span class="ts3">&lt;/KEY_LOOP&gt;</span></p>
    <p class="ps1"><span class="ts2">Note: first segment restrictions can also be used within alternate key loops and primary key blocks. Also, in the last example, the outer key loop could also be an in-line key loop.</span></p>
    <h2 class="hd1"><a id="SecondSegmentRestrictions"></a><span class="ts1">Second Segment Restrictions</span></h2>
    <p class="ps1"><span class="ts2">Similar to a first segment restriction, as second segment restriction can be used to indicate that only the second segment of a key should be processed within a key loop. This can be particularly useful when processing structures that have a structure tag value as the first key segment and the main useful segment of the key is often then the second segment.</span></p>
    <p class="ps1"><span class="ts2">A multi-line second segment restriction looks like this:</span></p>
    <p class="ps9"><span class="ts3">&lt;KEY_LOOP&gt;</span><br /><span class="ts3">[code]</span><br /><span class="ts4">&lt;SECOND_SEGMENT&gt;</span><br /><span class="ts3">code</span><br /><span class="ts4">&lt;/SECOND_SEGMENT&gt;</span><br /><span class="ts3">[code]</span><br /><span class="ts3">&lt;/KEY_LOOP&gt;</span></p>
    <p class="ps1"><span class="ts2">And an in-line first segment restriction looks like this:</span></p>
    <p class="ps9"><span class="ts3">&lt;KEY_LOOP&gt;</span><br /><span class="ts3">[code]</span><br /><span class="ts3">[code] </span><span class="ts4">&lt;SECOND_SEGMENT&gt;</span><span class="ts3">&nbsp;code </span><span class="ts4">&lt;/SECOND_SEGMENT&gt;</span><span class="ts3">&nbsp;[code]</span><br /><span class="ts3">[code]</span><br /><span class="ts3">&lt;/KEY_LOOP&gt;</span></p>
    <p class="ps1"><span class="ts3">&nbsp;</span></p>
    <p><span class="ts2">&nbsp;</span></p>
    <p><span class="ts2">&nbsp;</span></p>
    <div class="hr-wrapper">
      <hr class="hline1" />
    </div>
    <p class="ps8"><span class="ts10">Copyright &copy; 2021&nbsp; Synergex International, Inc.</span></p>
  </div>
</div>
</body>
</html>