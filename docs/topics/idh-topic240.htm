<!DOCTYPE HTML>
<html id="hs-topic-p">
<!-- saved from url=(0025)http://www.helpsmith.com/ -->
<head>
<title>Writing Custom Expansion Tokens</title>
<meta charset="windows-1252" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="generator" content="HelpSmith 8.4 (Build 20.825)" />
<style type="text/css" media="screen">
html {
  overflow: hidden;
  margin: 0;
  padding: 0;
  height: 100%;
}
body {
  overflow: hidden;
  margin: 0;
  padding: 0;
  height: 100%;
}
#non-scrolling-area {
  padding: 0 10px 0 10px;
  background-color: #5e5f5f;
}
#container {
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}
#content {
  padding: 0 10px 5px 10px;
}
</style>
<link type="text/css" rel="stylesheet" href="../css/topics/style.css" />
<script type="text/javascript" src="../js/jquery-3.5.1.min.js"></script>
<script type="text/javascript" src="../js/nsa.js?e72569b7"></script>
<script type="text/javascript" src="../js/settings.js?fd891844"></script>
<script type="text/javascript" src="../js/core.min.js?e72569b7"></script>
<script type="text/javascript" src="../js/topic.min.js?e72569b7"></script>
<script type="text/javascript">
	var topicContext = 240;
</script>
<!-- Web Help Topic -->
  
<!-- HTML Help (CHM) Topic -->
</head>
<body>
<div id="non-scrolling-area">
  <p><span class="ts0">Writing Custom Expansion Tokens</span></p>
</div>
<div id="container">
  <div id="content-background">
    <div id="content">
      <p>&nbsp;</p>
      <p class="ps0"><span class="ts2">CodeGen supports the ability for developers to define custom expansion tokens by writing plug-in modules to provide logic associated with those tokens. This plug-in mechanism is implemented in a way that does not require developers to edit the core CodeGen source files. This is important because it means that it will not impede the ability to download future source code updates to the core CodeGen environment.</span></p>
      <p class="ps0"><span class="ts1">Writing Custom Expansion Tokens</span></p>
      <p class="ps0"><span class="ts2">Custom expansion tokens are implemented as classes in a class library assembly. To implement custom tokens a developer creates a class library assembly containing one or more extension classes, and simply drops the library into the main CodeGen folder alongside the other CodeGen assemblies.</span></p>
      <p class="ps0"><span class="ts2">If you prefer to have your custom token extensions loaded from a different location then you can set the environment variable CODEGEN_EXTDIR to the location of the custom token extensions assembly.</span></p>
      <p class="ps0"><span class="ts2">When CodeGen loads it will check for any custom token assemblies, and if it finds any it will dynamically load them. In order to achieve this a naming convention is used. The name of any custom extensions assembly must begin with the word &quot;custom&quot;. For example you might chose to create an assembly named CustomTokens.dll.</span></p>
      <p class="ps0"><span class="ts2">Each class that implements a custom expansion token must implement the interface CodeGen.Engine.IExpansionToken which can be accessed by adding a reference to the CodeGenEngine.dll assembly.</span></p>
      <p class="ps0"><span class="ts1">Source Code Example</span></p>
      <p class="ps0"><span class="ts2">The CodeGen source code package includes a sample project called CustomExtensionsExample which contains examples of implementing all of the various types of custom expansion tokens. This project is configured not to build when you build the main solution because it is intended to only be an example. Developers are encouraged to develop their custom token processors in a separate solution. </span></p>
      <p class="ps0"><span class="ts2">The code below shows an example of a custom field loop expansion token:</span></p>
      <p class="ps0"><span class="ts31">import</span><span class="ts32">&nbsp;System</span><br /><span class="ts31">import</span><span class="ts32">&nbsp;System.Collections.Generic</span><br /><span class="ts31">import</span><span class="ts32">&nbsp;CodeGen.Engine</span><br /><span class="ts31">import</span><span class="ts32">&nbsp;CodeGen.RepositoryAPI</span></p>
      <p class="ps0"><span class="ts31">namespace</span><span class="ts32">&nbsp;CustomExtensionsExample</span></p>
      <p class="ps0"><span class="ts32">&nbsp; </span><span class="ts33">;;To implement a custom expansion token you must provide a class that</span><br /><span class="ts33">&nbsp; </span><span class="ts33">;;implements the CodeGen.Engine.IExpansionToken interface. The class</span><br /><span class="ts33">&nbsp; </span><span class="ts33">;;MUST have a default constructor. By default classes have an</span><br /><span class="ts33">&nbsp; </span><span class="ts33">;;implicit default constructor, but if you need to explicitly define</span><br /><span class="ts33">&nbsp; </span><span class="ts33">;;a constructor, make sure you don't define any parameters.</span><br /><span class="ts33">&nbsp; </span><span class="ts33">;;</span><br /><span class="ts33">&nbsp; </span><span class="ts33">;;This token can be used in field loops, like this:</span><br /><span class="ts33">&nbsp; </span><span class="ts33">;;</span><br /><span class="ts33">&nbsp; </span><span class="ts33">;;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts33">&lt;FIELD_LOOP&gt;</span><br /><span class="ts33">&nbsp; </span><span class="ts33">;;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts33">My custom token produced this output: &lt;CUSTOM_FIELD_LOOP_TOKEN&gt;</span><br /><span class="ts33">&nbsp; </span><span class="ts33">;;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts33">&lt;/FIELD_LOOP&gt;</span><br /><span class="ts33">&nbsp; </span><span class="ts33">;;</span></p>
      <p class="ps0"><span class="ts31">&nbsp; </span><span class="ts31">public</span><span class="ts32">&nbsp;</span><span class="ts31">class</span><span class="ts32">&nbsp;</span><span class="ts34">CustomFieldLoopToken</span><span class="ts32">&nbsp;</span><span class="ts31">implements</span><span class="ts32">&nbsp;</span><span class="ts35">IExpansionToken</span></p>
      <p class="ps0"><span class="ts31">&nbsp;&nbsp;&nbsp; </span><span class="ts31">public</span><span class="ts32">&nbsp;</span><span class="ts31">property</span><span class="ts32">&nbsp;TokenName, </span><span class="ts35">String</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">method</span><span class="ts32">&nbsp;get</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">proc</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">mreturn</span><span class="ts32">&nbsp;</span><span class="ts36">&quot;CUSTOM_FIELD_LOOP_TOKEN&quot;</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">endmethod</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp; </span><span class="ts31">endproperty</span></p>
      <p class="ps0"><span class="ts31">&nbsp;&nbsp;&nbsp; </span><span class="ts31">public</span><span class="ts32">&nbsp;</span><span class="ts31">property</span><span class="ts32">&nbsp;Description, </span><span class="ts35">String</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">method</span><span class="ts32">&nbsp;get</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">proc</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">mreturn</span><span class="ts32">&nbsp;</span><span class="ts36">&quot;An example of a custom field loop token.&quot;</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">endmethod</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp; </span><span class="ts31">endproperty</span></p>
      <p class="ps0"><span class="ts31">&nbsp;&nbsp;&nbsp; </span><span class="ts31">public</span><span class="ts32">&nbsp;</span><span class="ts31">property</span><span class="ts32">&nbsp;Validity, </span><span class="ts35">TokenValidity</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">method</span><span class="ts32">&nbsp;get</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">proc</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">mreturn</span><span class="ts32">&nbsp;</span><span class="ts35">TokenValidity</span><span class="ts32">.FieldLoop</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">endmethod</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp; </span><span class="ts31">endproperty</span></p>
      <p class="ps0"><span class="ts31">&nbsp;&nbsp;&nbsp; </span><span class="ts31">public</span><span class="ts32">&nbsp;</span><span class="ts31">property</span><span class="ts32">&nbsp;TokenCase, </span><span class="ts35">TokenCaseMode</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">method</span><span class="ts32">&nbsp;get</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">proc</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">mreturn</span><span class="ts32">&nbsp;</span><span class="ts35">TokenCaseMode</span><span class="ts32">.UppercaseOnly</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">endmethod</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp; </span><span class="ts31">endproperty</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
      <p class="ps0"><span class="ts31">&nbsp;&nbsp;&nbsp; </span><span class="ts31">public</span><span class="ts32">&nbsp;</span><span class="ts31">method</span><span class="ts32">&nbsp;Expand, </span><span class="ts35">String</span><br /><span class="ts32">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts32">tkn, @</span><span class="ts35">Token</span><br /><span class="ts32">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; template</span><span class="ts32">, @</span><span class="ts35">F</span><span class="ts35">ileNode</span><span class="ts32">&nbsp;</span><br /><span class="ts32">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts32">loops, @</span><span class="ts35">IEnumerable</span><span class="ts32">&lt;</span><span class="ts35">LoopNode</span><span class="ts32">&gt;</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">endparams</span><br /><span class="ts32">&nbsp;&nbsp;&nbsp; </span><span class="ts31">proc</span></p>
      <p class="ps0"><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">lambda</span><span class="ts32">&nbsp;doExpand(str, field)</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">begin</span><br /><span class="ts33">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts33">;TODO: Add any code you need here, and return the string</span><br /><span class="ts33">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts33">;that is to be used to replace the token.</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">mreturn</span><span class="ts32">&nbsp;</span><span class="ts36">&quot;This is the output from CUSTOM_FIELD_LOOP_TOKEN&quot;</span><br /><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">end</span></p>
      <p class="ps0"><span class="ts31">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts31">mreturn</span><span class="ts32">&nbsp;</span><span class="ts35">TokenExpander</span><span class="ts32">.ExpandFieldLoopToken(tkn, </span><span class="ts32">template</span><span class="ts32">, loops, doExpand)</span></p>
      <p class="ps0"><span class="ts31">&nbsp;&nbsp;&nbsp; </span><span class="ts31">endmethod</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
      <p class="ps0"><span class="ts31">&nbsp; </span><span class="ts31">endclass</span></p>
      <p class="ps0"><span class="ts31">endnamespace</span></p>
      <p class="ps0"><span class="ts37">&nbsp;</span></p>
      <p><span class="ts2">&nbsp;</span></p>
      <p><span class="ts2">&nbsp;</span></p>
      <div>
        <hr class="hline1" />
      </div>
      <p class="ps8"><span class="ts10">Copyright &copy; 2018&nbsp; Synergex International, Inc.</span></p>
    </div>
  </div>
</div>
</body>
</html>