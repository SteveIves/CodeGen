<!DOCTYPE HTML>
<html id="hs-topic-p">
<!-- saved from url=(0025)http://www.helpsmith.com/ -->
<head>
<title>The CodeGen API</title>
<meta charset="windows-1252" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="generator" content="HelpSmith 9.3 (Build 22.118)" />
<style type="text/css" media="screen">
html {
  overflow: hidden;
  margin: 0;
  padding: 0;
  height: 100%;
}
body {
  overflow: hidden;
  margin: 0;
  padding: 0;
  height: 100%;
}
#non-scrolling-area {
  padding: 0 10px 0 10px;
  background-color: #5e5f5f;
}
#container {
  overflow: auto;
  -webkit-overflow-scrolling: touch;
}
#content {
  padding: 0 10px 5px 10px;
}
</style>
<link type="text/css" rel="stylesheet" href="../css/topics/style.css" />
<script type="text/javascript" src="../js/jquery-3.6.0.min.js"></script>
<script type="text/javascript" src="../js/nsa.js?4d4a8070"></script>
<script type="text/javascript" src="../js/settings.js?50759fca"></script>
<script type="text/javascript" src="../js/core.min.js?4d4a8070"></script>
<script type="text/javascript" src="../js/topic.min.js?4d4a8070"></script>
<script type="text/javascript">
	var topicContext = 2160;
</script>
<!-- Web Help Topic -->
  
<!-- HTML Help (CHM) Topic -->
</head>
<body>
<div id="non-scrolling-area">
  <h1 class="hd0"><span class="ts0">The CodeGen API</span></h1>
</div>
<div id="container">
  <div id="content-background">
    <div id="content">
      <p>&nbsp;</p>
      <p class="ps1"><span class="ts2">As an alternative to using the </span><a href="commandlinereference.htm" class="hs0">command-line interface</a><span class="ts2">&nbsp;a developer could integrate CodeGen more tightly into their development environment by writing custom tools or utilities to generate code, using the core CodeGen environment.</span></p>
      <p class="ps1"><span class="ts2">To make this possible CodeGen provides a .NET API that developers can code directly against in order to generate code. The main classes in the CodeGen API are:</span></p>
      <p class="ps0"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><a href="codegentaskset.htm" class="hs0">CodeGen.Engine.CodeGenTaskSet</a></p>
      <p class="ps0"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><a href="codegentask.htm" class="hs0">CodeGen.Engine.CodeGenTask</a></p>
      <p class="ps0"><span style="font-size: 14pt; line-height: 0; vertical-align: middle; color: Black">&bull;</span><span style="display: inline-block; width: 18px"></span><a href="codegenerator.htm" class="hs0">CodeGen.Engine.CodeGenerator</a></p>
      <h2 class="hd1"><a id="CodeExample"></a><span class="ts1">CodeGen API Example</span></h2>
      <p class="ps1"><span class="ts2">This is a very simple example of using the CodeGen API. This code segment is essentially the same as using the command line:</span></p>
      <p class="ps9"><span class="ts3">codegen -s CUSTOMER -t DataClass -r -v</span></p>
      <p class="ps1"><span class="ts2">Here's the sample code:</span></p>
      <p class="ps9"><span class="ts11">;;Create a new task set</span><br /><span class="ts3">data taskset = new CodeGenTaskSet()</span><br /><span class="ts3">taskset.LoggingLevel = LoggingLevel.Verbose</span></p>
      <p class="ps9"><span class="ts11">;;Create a task and define what it shold do</span><br /><span class="ts3">data task = new CodeGenTask()</span><br /><span class="ts3">task.Structures.Add(&quot;CUSTOMER&quot;)</span><br /><span class="ts3">task.Templates.Add(&quot;DataClass&quot;)</span><br /><span class="ts3">task.ReplaceFiles = true</span><br /><br /><span class="ts11">;;Add the task to the task set</span><br /><span class="ts3">taskset.Tasks.Add(task)</span></p>
      <p class="ps9"><span class="ts11">;;Create a code generator and tell it about the task set</span><br /><span class="ts3">data generator = new CodeGenerator(taskset)</span></p>
      <p class="ps9"><span class="ts11">;;Generate the code</span><br /><span class="ts3">generator.GenerateCode()</span></p>
      <p class="ps9"><span class="ts11">;;Did it work?</span><br /><span class="ts3">if (taskset.Complete) then</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts11">;;Good to go</span><br /><span class="ts3">else</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts11">;;Something failed!</span></p>
      <p class="ps1"><span class="ts2">You won't see anything happening when you execute this code because the CodeGen API doesn't implement any UI. But if you wanted to see the messages that are generated as the task set it processed you could register an event handler method against either taskset.Messages.CollectionChanged or task.Messages.CollectionChanged and monitor / report on the messages as they are generated. For example if you were in a console application you could log messages to standard out like this:</span></p>
      <p class="ps9"><span class="ts3">lambda messageFromTaskSet(sender, e)</span><br /><span class="ts3">begin</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts3">if (e.Action==NotifyCollectionChangedAction.Add)</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts3">begin</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts3">data message, String</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts3">foreach message in e.NewItems</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts3">if (message!=^null)</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts3">Console.WriteLine(message)</span></p>
      <p class="ps9">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts3">end</span><br /><span class="ts3">end</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>
      <p class="ps9"><span class="ts44">;;Listen for messages from the taskset as it processes</span><br /><span class="ts3">taskset.Messages.CollectionChanged += messageFromTaskSet </span></p>
      <p class="ps1"><span class="ts2">&nbsp;</span></p>
      <p><span class="ts2">&nbsp;</span></p>
      <p><span class="ts2">&nbsp;</span></p>
      <div>
        <hr class="hline1" />
      </div>
      <p class="ps8"><span class="ts10">Copyright &copy; 2021&nbsp; Synergex International, Inc.</span></p>
    </div>
  </div>
</div>
</body>
</html>