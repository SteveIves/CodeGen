<!DOCTYPE HTML>
<html id="hs-topic-p">
<!-- saved from url=(0025)http://www.helpsmith.com/ -->
<head>
<title>Template Files</title>
<meta charset="windows-1252" />
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="generator" content="HelpSmith 9.8 (Build 23.918)" />
<link type="text/css" rel="stylesheet" href="../css/topics/style.css" />
<script type="text/javascript" src="../js/jquery-3.6.0.min.js"></script>
<style type="text/css" media="screen">
body {
  margin: 0;
}
</style>
<script type="text/javascript" src="../js/settings.js?56cd242c"></script>
<script type="text/javascript" src="../js/core.min.js?2f01eb41"></script>
<script type="text/javascript" src="../js/topic.min.js?2f01eb41"></script>
<script type="text/javascript">
	var topicContext = 100;
</script>
<!-- Web Help Topic -->
  
<!-- HTML Help (CHM) Topic -->
</head>
<body class="nsa-wrapper">
<div id="nsa-box" class="nsa-content0">
  <h1 class="hd0"><span class="ts0">Template Files</span></h1>
</div>
<div id="sa-box">
  <div id="content-box" class="sa-content0">
    <p>&nbsp;</p>
    <p class="ps1"><span class="ts2">Template files are text files which define some piece of generic source code. They contain a combination of actual source code and </span><a href="expansiontokens.htm" class="hs9">tokens</a><span class="ts2">&nbsp;that have special meaning to CodeGen. Template files have a </span><span class="ts3">.tpl</span><span class="ts2">&nbsp;file extension. When CodeGen processes a template file, any tokens that are encountered in the template cause it to take some action. Some tokens cause some piece of information obtained from the metadata source to be written to the output file, while other tokens cause CodeGen to perform some specific action.</span></p>
    <p class="ps1"><span class="ts2">A simple template named </span><span class="ts3">HelloWorld.tpl</span><span class="ts2">&nbsp;might contain:</span></p>
    <p class="ps9"><span class="ts11">;;</span><br /><span class="ts11">;; Description: A Synergy function that returns &quot;Hello World&quot;</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Author:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;AUTHOR&gt;</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Created:&nbsp;&nbsp;&nbsp;&nbsp; &lt;DATE&gt; at &lt;TIME&gt;</span><br /><span class="ts11">;;</span><br /><span class="ts12">function </span><span class="ts3">HelloWorld, a</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; </span><span class="ts13">endparams</span><br /><span class="ts12">proc</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; </span><span class="ts13">freturn</span><span class="ts3">&nbsp;&quot;Hello World&quot;</span><br /><span class="ts12">endfunction</span></p>
    <p class="ps1"><span class="ts2">This template is so simple that it does not require an external source of metadata, as no tokens relating to any specific data structure are being used. The template contains three tokens, </span><a href="genericexpansiontokens.htm#%3CAUTHOR%3E" class="hs9">&lt;AUTHOR&gt;</a><span class="ts2">, </span><a href="genericexpansiontokens.htm#%3CDATE%3E" class="hs9">&lt;DATE&gt;</a><span class="ts2">&nbsp;and </span><a href="genericexpansiontokens.htm#%3CTIME%3E" class="hs9">&lt;TIME&gt;</a>. <span class="ts2">You can probably guess what these tokens do:</span></p>
    <p class="ps7"><span style="font-family: Tahoma; font-size: 10pt; color: Black">1.</span><span style="display: inline-block; width: 13px"></span><span class="ts2">The </span><a href="genericexpansiontokens.htm#%3CAUTHOR%3E" class="hs9">&lt;AUTHOR&gt;</a><span class="ts2">&nbsp;token will be replaced by the name of the person using CodeGen.</span></p>
    <p class="ps7"><span style="font-family: Tahoma; font-size: 10pt; color: Black">2.</span><span style="display: inline-block; width: 13px"></span><span class="ts2">The </span><a href="genericexpansiontokens.htm#%3CDATE%3E" class="hs9">&lt;DATE&gt;</a><span class="ts2">&nbsp;token will be replaced by the current date, in MM/DD/YYYY format.</span></p>
    <p class="ps7"><span style="font-family: Tahoma; font-size: 10pt; color: Black">3.</span><span style="display: inline-block; width: 13px"></span><span class="ts2">The </span><a href="genericexpansiontokens.htm#%3CTIME%3E" class="hs9">&lt;TIME&gt;</a><span class="ts2">&nbsp;token will be replaced by the current time, in HH:MM format.</span></p>
    <p class="ps1"><span class="ts2">If this template were processed by CodeGen an output file would be created and would contain containing something like:</span></p>
    <p class="ps9"><span class="ts11">;;</span><br /><span class="ts11">;; Description: A Synergy function that returns &quot;Hello World&quot;</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Author:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Jodah Veloper</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Created:&nbsp;&nbsp;&nbsp;&nbsp; 03/11/2010 at 11:23</span><br /><span class="ts11">;;</span><br /><span class="ts12">function</span><span class="ts3">&nbsp;HelloWorld, a</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; </span><span class="ts13">endparams</span><br /><span class="ts12">proc</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; </span><span class="ts13">freturn</span><span class="ts3">&nbsp;&quot;Hello World&quot;</span><br /><span class="ts12">endfunction</span></p>
    <h2 class="hd1"><span class="ts1">Default Output File Names</span></h2>
    <p class="ps1"><span class="ts2">The name of the output file created by CodeGen would be </span><span class="ts3">helloworld.dbl</span><span class="ts2">. This is because CodeGen has default rules for the naming of output files. If no repository structure is being used then the default output file name is the base name of the template being used, with a file extension of .dbl, in lowercase:</span></p>
    <p class="ps9"><span class="ts3">&lt;template&gt;.dbl</span></p>
    <p class="ps1"><span class="ts2">If a repository structure is being used then the default output file name is the name of the repository structure, followed by an underscore, followed by the base name of the template, with a file extension of .dbl, all in lowercase:</span></p>
    <p class="ps9"><span class="ts3">&lt;structure&gt;_&lt;template&gt;.dbl</span></p>
    <h2 class="hd1"><span class="ts1">Customizing Output File Names</span></h2>
    <p class="ps1"><span class="ts2">You can override these default output file naming rules by adding a special </span><a href="fileheadertokens.htm#%3CCODEGEN_FILENAME%3E" class="hs9">&lt;CODEGEN_FILENAME&gt;</a><span class="ts2">&nbsp;token to the template file which defines rules for naming the output file to be created. For example the template file could be updated like this:</span></p>
    <p class="ps9"><span class="ts14">&lt;CODEGEN_FILENAME&gt;HelloWorldFunction.dbl&lt;/CODEGEN_FILENAME&gt;</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Description: A Synergy function that returns &quot;Hello World&quot;</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Author:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;AUTHOR&gt;</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Created:&nbsp;&nbsp;&nbsp;&nbsp; &lt;DATE&gt; at &lt;TIME&gt;</span><br /><span class="ts11">;;</span><br /><span class="ts12">function</span><span class="ts3">&nbsp;HelloWorld, a</span><br />&nbsp;&nbsp;&nbsp; <span class="ts13">endparams</span><br /><br /><span class="ts12">proc</span><br /><br /><span class="ts2">&nbsp;&nbsp;&nbsp; </span><span class="ts13">freturn</span><span class="ts3">&nbsp;&quot;Hello World&quot;</span><br /><br /><span class="ts12">endfunction</span></p>
    <p class="ps1"><span class="ts2">If the template was then reprocessed the name of the output file would be changed to </span><span class="ts3">HelloWorldFunction.dbl</span><span class="ts2">.</span></p>
    <p class="ps1"><span class="ts2">The content of the output file would be exactly the same as in the earlier example, because the </span><a href="fileheadertokens.htm#%3CCODEGEN_FILENAME%3E" class="hs9">&lt;CODEGEN_FILENAME&gt;</a><span class="ts2">&nbsp;token is a special instruction to CodeGen and does not cause anything to be sent to the output file.</span></p>
    <h2 class="hd1"><span class="ts1">Template File Comments</span></h2>
    <p class="ps1"><span class="ts2">Template files can contain special comments which can be used to document the template file, but which are also not sent to the output file.&nbsp; A template file comment is any text which follows the special sequence of characters </span><span class="ts3">;//</span><span class="ts2">.&nbsp; For example, the template file could be updated like this:</span></p>
    <p class="ps9"><span class="ts3">&lt;CODEGEN_FILENAME&gt;HelloWorldFunction.dbl&lt;/CODEGEN_FILENAME&gt;</span><br /><span class="ts15">;//--------------------------------------------------------</span><br /><span class="ts15">;// Template author: Jodah Veloper</span><br /><span class="ts15">;// Revision:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.0</span><br /><span class="ts15">;// Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 03/11/2010</span><br /><span class="ts15">;//--------------------------------------------------------</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Description: A Synergy function that returns &quot;Hello World&quot;</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Author:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;AUTHOR&gt;</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Created:&nbsp;&nbsp;&nbsp;&nbsp; &lt;DATE&gt; at &lt;TIME&gt;</span><br /><span class="ts11">;;</span><br /><span class="ts12">function</span><span class="ts3">&nbsp;HelloWorld, a</span><br />&nbsp;&nbsp;&nbsp; <span class="ts13">endparams</span><br /><br /><span class="ts12">proc</span><br /><br />&nbsp;&nbsp;&nbsp; <span class="ts13">freturn</span><span class="ts3">&nbsp;&quot;Hello World&quot;</span><br /><br /><span class="ts12">endfunction</span></p>
    <h2 class="hd1"><span class="ts1">Using Repository Metadata</span></h2>
    <p class="ps1"><span class="ts2">Template files which do not require a source of metadata are rare, because it is difficult to generate anything useful without a source of metadata! Most templates are written to create output based on a source of metadata, which is usually a repository structure.</span></p>
    <p class="ps1"><span class="ts2">Most of the useful metadata is found in repository structure and field definitions, but some tokens require you to define keys, tags, relations and files in the repository also. For more information, refer to </span><a href="preparingyourrepository.htm" class="hs8">Repository Setup</a><span class="ts2">.</span></p>
    <p class="ps1"><span class="ts2">For a simple example of how a repository structure can be used as a source of metadata, consider the following hypothetical structure definition</span></p>
    <p class="ps9"><span class="ts3">STRUCTURE DEPARTMENT</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; DEPT_ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A10&nbsp;&nbsp; ;Department ID (primary key)</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; DEPT_NAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A30&nbsp;&nbsp; ;Department name</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; DEPT_MANAGER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,D4&nbsp;&nbsp;&nbsp; ;Managers employee ID</span><br /><span class="ts3">ENDSTRUCTURE</span></p>
    <p class="ps1"><span class="ts2">If a programmer wanted to create a template for a Synergy external subroutine which would accept the value of the primary key for a record and then read and returned the record, they could write a template like this:</span></p>
    <p class="ps9"><span class="ts3">&lt;CODEGEN_FILENAME&gt;Get&lt;StructureName&gt;.dbl&lt;/CODEGEN_FILENAME&gt;</span><br /><span class="ts11">;//&lt;CATEGORY&gt;Synergy Subroutines&lt;/CATEGORY&gt;</span><br /><span class="ts11">;//&lt;DESCRIPTION&gt;Creates a subroutine that returns a record from a file&lt;/DESCRIPTION&gt;</span><br /><span class="ts11">;//--------------------------------------------------------</span><br /><span class="ts11">;// Template author: Jodah Veloper</span><br /><span class="ts11">;// Revision:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1.0</span><br /><span class="ts11">;// Date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 03/11/2010</span><br /><span class="ts11">;//--------------------------------------------------------</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Description: Returns a &lt;STRUCTURE_NAME&gt; record</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Author:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;AUTHOR&gt;</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Created:&nbsp;&nbsp;&nbsp;&nbsp; &lt;DATE&gt; at &lt;TIME&gt;</span><br /><span class="ts11">;;</span></p>
    <p class="ps9"><span class="ts12">.include</span><span class="ts3">&nbsp;&ldquo;&lt;STRUCTURE_NAME&gt;&rdquo; </span><span class="ts13">repository</span>, <span class="ts13">structure</span><span class="ts3">=&rdquo;str&lt;StructureName&gt;&rdquo;</span>, <span class="ts13">end</span><br /><br /><span class="ts12">subroutine </span>Get&lt;StructureName&gt;</p>
    <p class="ps9"><span class="ts3">&nbsp;&nbsp;&nbsp; &lt;PRIMARY_KEY&gt;</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; &lt;SEGMENT_LOOP&gt;</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; required in&nbsp; a&lt;SegmentName&gt;, &lt;segment_spec&gt;</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; &lt;/SEGMENT_LOOP&gt;</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; &lt;/PRIMARY_KEY&gt;</span></p>
    <p class="ps9"><span class="ts3">&nbsp;&nbsp;&nbsp; required out a&lt;StructureName&gt;, str&lt;StructureName&gt;</span></p>
    <p class="ps9"><span class="ts13">&nbsp;&nbsp;&nbsp; endparams</span></p>
    <p class="ps9"><span class="ts13">&nbsp;&nbsp;&nbsp; stack record</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ch&lt;StructureName&gt;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts3">,int</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; </span><span class="ts13">endrecord</span></p>
    <p class="ps9"><span class="ts12">proc</span><br /><br /><span class="ts3">&nbsp;&nbsp;&nbsp; &lt;PRIMARY_KEY&gt;</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; &lt;SEGMENT_LOOP&gt;</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; a&lt;StructureName&gt;.&lt;segment_name&gt; = a&lt;SegmentName&gt;</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; &lt;/SEGMENT_LOOP&gt;</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; &lt;/PRIMARY_KEY&gt;</span></p>
    <p class="ps9"><span class="ts13">&nbsp;&nbsp;&nbsp; try</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; begin</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; open</span><span class="ts3">(ch&lt;StructureName&gt;=syn_freechn(),i:i,&rdquo;&lt;FILE_NAME&gt;&rdquo;)</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; read</span><span class="ts3">(ch&lt;StructureName&gt;,a&lt;StructureName&gt;,keyval(ch&lt;StructureName&gt;,a&lt;StructureName&gt;,0))</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; end</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; catch </span><span class="ts3">(ex)</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; begin</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clear </span><span class="ts3">a&lt;StructureName&gt;</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; end</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; finally</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; begin</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if </span><span class="ts3">(chopen(ch&lt;StructureName&gt;))</span><br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span class="ts13">close</span><span class="ts3">&nbsp;ch&lt;StructureName&gt;</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; end</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; endtry</span></p>
    <p class="ps9"><span class="ts13">&nbsp;&nbsp;&nbsp; xreturn</span></p>
    <p class="ps9"><span class="ts12">endsubroutine</span></p>
    <p class="ps1"><span class="ts2">Having created the template, the developer could then process the template in conjunction with the repository structure DEPARTMENT, and CodeGen would create an output file like the one below. Notice that the template file includes a </span><a href="fileheadertokens.htm#%3CCODEGEN_FILENAME%3E" class="hs9">&lt;CODEGEN_FILENAME&gt;</a><span class="ts2">&nbsp;rule, so in this case the name of the output file would be GetDepartment.dbl. The file would contain:</span></p>
    <p class="ps9"><span class="ts11">;;</span><br /><span class="ts11">;; Description: Returns a DEPARTMENT record</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Author:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Jodah Veloper</span><br /><span class="ts11">;;</span><br /><span class="ts11">;; Created:&nbsp;&nbsp;&nbsp;&nbsp; 11/28/2014 at 12:00</span><br /><span class="ts11">;;</span></p>
    <p class="ps9"><span class="ts12">.include</span><span class="ts3">&nbsp;&quot;DEPARTMENT&quot; </span><span class="ts13">repository</span>, <span class="ts13">structure</span><span class="ts3">=&quot;strDepartment&quot;, </span><span class="ts13">end</span><br /><br /><span class="ts12">subroutine</span><span class="ts3">&nbsp;GetDepartment</span></p>
    <p class="ps9"><span class="ts3">&nbsp;&nbsp;&nbsp; required in&nbsp; aDeptId, a10</span></p>
    <p class="ps9"><span class="ts3">&nbsp;&nbsp;&nbsp; required out aDepartment, strDepartment</span></p>
    <p class="ps9"><span class="ts13">&nbsp;&nbsp;&nbsp; endparams</span></p>
    <p class="ps9"><span class="ts13">&nbsp;&nbsp;&nbsp; stack record</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; chDepartment</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ts3">,int</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp; </span><span class="ts13">endrecord</span></p>
    <p class="ps9"><span class="ts12">proc</span><br /><br /><span class="ts3">&nbsp;&nbsp;&nbsp; aDepartment.dept_id = aDeptId</span><br /><br /><span class="ts13">&nbsp;&nbsp;&nbsp; try</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; begin</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; open</span><span class="ts3">(chDepartment=syn_freechn(),i:i,&rdquo;DAT:department.ism&rdquo;)</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; read</span><span class="ts3">(chDepartment,aDepartment,keyval(chDepartment,aDepartment,0))</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; end</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; catch </span><span class="ts3">(ex)</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; begin</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clear</span><span class="ts3">&nbsp;aDepartment</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; end</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; finally</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; begin</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if</span><span class="ts3">&nbsp;(chopen(chDepartment))</span><br /><span class="ts3">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts13">close</span><span class="ts3">&nbsp;chDepartment</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; end</span><br /><span class="ts13">&nbsp;&nbsp;&nbsp; endtry</span></p>
    <p class="ps9"><span class="ts13">&nbsp;&nbsp;&nbsp; xreturn</span></p>
    <p class="ps9"><span class="ts12">endsubroutine</span></p>
    <p class="ps1"><span class="ts2">Notice how all of the tokens that were present in the original template have been replaced by meaningful pieces of information from the metadata source, resulting in a useful piece of source code. We could just as easily use the same template to create a routine to read an employee record, or a location record, or a customer record. The idea is to define the rules in a template once, then use that template to generate many routines.</span></p>
    <h2 class="hd1"><span class="ts1">Sample Templates</span></h2>
    <p class="ps1"><span class="ts2">CodeGen ships with a collection of sample template files. that are intended to provide you with examples of some of the types of output files that you can create with CodeGen, but you may be able to use some of the templates unaltered.</span></p>
    <p class="ps1"><span class="ts2">Having installed CodeGen you will find the sample templates in the Public Documents folder, which us usually in this location:</span></p>
    <p class="ps9"><span class="ts3">C:\Users\Public\Documents\CodeGenTemplates</span></p>
    <p class="ps1"><span class="ts2">You can also use the </span><a href="templatebrowserutility.htm" class="hs4">Template Browser</a><span class="ts2">&nbsp;utility to view the sample templates.</span></p>
    <p class="ps1"><span class="ts2">The sample templates may also be viewed directly on the GitHub web site at </span><a href="https://github.com/Synergex/CodeGen/tree/master/SampleTemplates" target="_blank" class="hs2">https://github.com/Synergex/CodeGen/tree/master/SampleTemplates</a><span class="ts2">.</span></p>
    <p><span class="ts2">&nbsp;</span></p>
    <p><span class="ts2">&nbsp;</span></p>
    <div class="hr-wrapper">
      <hr class="hline1" />
    </div>
    <p class="ps8"><span class="ts10">Copyright &copy; 2021&nbsp; Synergex International, Inc.</span></p>
  </div>
</div>
</body>
</html>