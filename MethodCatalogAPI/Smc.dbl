;;*****************************************************************************
;;
;; Title:       Smc.dbl
;;
;; Type:        Class
;;
;; Description: Represents a Synergy Method Catalog
;;
;; Date:        5th February 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System.Collections.Generic
import System.IO
import System.Xml
import CodeGen.RepositoryAPI

namespace CodeGen.MethodCatalogAPI

    public class Smc

        public readonly property Interfaces, @List<SmcInterface>, new List<SmcInterface>()

        public readonly property Structures, @List<RpsStructure>, new List<RpsStructure>()

        ;;; <summary>
        ;;; Constructs a new MethodCatalog object by parsing the information contained in a method catalog.
        ;;; </summary>
        ;;; <param name="inputFile">Method catalog XML file to parse.</param>
        public method Smc
            required in inputFile, String
        proc
            ;;Make sure the file is present
            if (!File.Exists(inputFile))
                throw new ApplicationException("Failed to method catalog XML file!")

            ;;And parse it
            parseMethodCatalogXml(inputFile)

        endmethod

        private method parseMethodCatalogXml, void
            required in inputFile, String
        proc
            data doc = new XmlDocument()

            ;;Parse the XML file
            try
            begin
                doc.Load(inputFile)
            end
            catch (e, @Exception)
            begin
                throw new ApplicationException("Failed to parse method catalog XML file!")
            end
            endtry

            if (doc.DocumentElement == ^null || doc.DocumentElement.Name != "component")
                throw new ApplicationException("Input file is not a method catalog XML file!")

            ;;---------------------------------------------------------------------------------
            ;;Does the XML file contain any structure definitions?

            data structureNodes = doc.DocumentElement.GetElementsByTagName("structure")

            ;;Do we have structures to work with?
            data structureNode, @XmlNode
            foreach structureNode in structureNodes
            begin
                ;;Get the structure name
                data structureName = structureNode.Attributes["name"].Value.ToUpper()

                ;;Load the repository structure and add it to the collection
                try
                begin
                    Structures.Add(new RpsStructure(structureName))
                end
                catch (e, @Exception)
                begin
                    throw new ApplicationException(String.Format("Failed to load SMC structure {0} from Repository. {1}",structureName,e.Message))
                end
                endtry
            end

            ;;---------------------------------------------------------------------------------
            ;;Get the interface definitions

            data interfaceNodes = doc.DocumentElement.GetElementsByTagName("interface")
            

            ;;Do we have interfaces to work with?
            if (interfaceNodes.Count == 0)
                throw new ApplicationException("No interfaces defined in input file.")

            data interfaceNode, @XmlNode
            foreach interfaceNode in interfaceNodes
                parseInterface(interfaceNode)

            if (this.Interfaces.Count==0)
                throw new ApplicationException("No application interfaces defined in input file.")

        endmethod

        private method parseInterface, void
            required in interfaceNode, @XmlNode
        proc
            ;;Get the interface name
            data interfaceName = interfaceNode.Attributes["name"]

            if (interfaceName==^null || String.IsNullOrWhiteSpace(interfaceName.Value) || (interfaceName.Value=="xfTest"))
                mreturn

            ;;Create the new interface object
            data thisInterface = new SmcInterface() { Name=interfaceName.Value }

            ;;Get the method definitions
            data methodNodes = interfaceNode.ChildNodes

            ;;Do we have methods to work with?
            if (methodNodes.Count==0)
                throw new ApplicationException("No methods defined in interface " + interfaceName.Value)

            data methodNode, @XmlNode
            foreach methodNode in methodNodes
                parseMethod(methodNode,thisInterface)

            ;Add the interface to the collection of interfaces
            Interfaces.Add(thisInterface)

        endmethod

        private method parseMethod, void
            required in methodNode, @XmlNode
            required in thisInterface, @SmcInterface
        proc
            ;;Get the attributes from the method element

            data thisMethod = new SmcMethod() {
            &    Name = methodNode.Attributes["name"].Value,
            &    Id = methodNode.Attributes["id"].Value,
            &    Routine = methodNode.Attributes["routine"].Value,
            &    Elb = methodNode.Attributes["elb"].Value
            &    }

            ;;Make sure we have a "routine name". Pre 8.3 catalogs didn't have this.
            if (String.IsNullOrWhiteSpace(thisMethod.Routine))
            begin
                throw new ApplicationException("ERROR: Method has no 'routine name'. Possible pre V8.3 method catalog file. Please import and export your file using the MDU to convert it to the latest format.")
            end

            data encryptAttribute = methodNode.Attributes["encrypt"]
            if (encryptAttribute != ^null)
                thisMethod.Encrypt = (encryptAttribute.Value == "true")

            ;;Return Value
            parseRetrunValue(methodNode,thisMethod,thisInterface)

            ;;comment
            thisMethod.Comment = getComments(methodNode)

            ;;Process the method <param> elements
            data parameterNodes = methodNode.SelectNodes("param")

            ;;Do we have parameters to work with?
            if (parameterNodes.Count > 0)
            begin
                data parameterNode, @XmlNode
                data ix = 0
                foreach parameterNode in parameterNodes
                begin
                    parseParameter(parameterNode,thisMethod,ix+=1)
                end
            end

            thisInterface.Methods.Add(thisMethod)

        endmethod

        private method parseRetrunValue, void
            required in methodNode,    @XmlNode
            required in thisMethod,    @SmcMethod
            required in thisInterface, @SmcInterface
            endparams
            record 
                returnValue,    @SmcReturnValue
            endrecord
        proc

            ;;Is there a methodresult child node?
            data childNodes = methodNode.SelectNodes("methodresult")
            if (childNodes.Count > 0)
            begin
                ;;Yes, we're working with a function
                returnValue = new SmcReturnValue()
                data returnValueNode = childNodes[0]

                ;;Return value type
                data methodReturnType = returnValueNode.Attributes["type"].Value
                using methodReturnType select
                ("alpha"),
                    returnValue.Type = ReturnType.Alpha
                ("decimal"),
                    returnValue.Type = ReturnType.Decimal
                ("integer"),
                    returnValue.Type = ReturnType.Integer
                ("value"),
                    returnValue.Type = ReturnType.HatVal
                ("string"),
                    returnValue.Type = ReturnType.String
                ("enum"),
                    returnValue.Type = ReturnType.Enumeration
                (),
                    throw new ApplicationException("Interface "+thisInterface.Name+" method "+thisMethod.Name+" has an invalud return value type!")
                endusing

                ;;size
                data returnValueSize = returnValueNode.Attributes["size"]
                if (returnValueSize != ^null)
                begin
                    try 
                    begin
                        returnValue.Size = %integer(returnValueSize.Value)
                    end
                    catch (ex, @BadDigitException)
                    begin
                        throw new ApplicationException("Invalid size attribute value for interface "+thisInterface.Name+" method "+thisMethod.Name+" return value")
                    end
                    endtry
                end

                ;precision
                data returnValuePrecision = returnValueNode.Attributes["precision"]
                if (returnValuePrecision != ^null)
                begin
                    if (returnValue.Type == ReturnType.Decimal) then
                    begin
                        try 
                        begin
                            returnValue.Type = ReturnType.ImpliedDecimal
                            returnValue.Precision = %integer(returnValuePrecision.Value)
                        end
                        catch (ex, @BadDigitException)
                        begin
                            throw new ApplicationException("Invalid precision attribute value for interface "+thisInterface.Name+" method "+thisMethod.Name+" return value")
                        end
                        endtry
                    end
                    else
                        throw new ApplicationException("Invalid precision attribute for interface "+thisInterface.Name+" method "+thisMethod.Name+" return value")
                end

                ;;enumName
                data returnValueEnumName = returnValueNode.Attributes["enumName"]
                if (returnValueEnumName != ^null) then 
                begin
                    if (returnValue.Type == ReturnType.Enumeration) then 
                        returnValue.EnumName = returnValueEnumName.Value.ToUpper()
                    else
                        throw new ApplicationException("Invalid enumName attribute for interface "+thisInterface.Name+" method "+thisMethod.Name+" return value")
                end
                else
                begin
                    if (returnValue.Type == ReturnType.Enumeration)
                        throw new ApplicationException("Missing enumName attribute for interface "+thisInterface.Name+" method "+thisMethod.Name+" return value")
                end

                ;;coerce
                data returnValueCoerce = returnValueNode.Attributes["coerce"]
                if (returnValueCoerce != ^null)
                begin
                    using returnValue.Type select
                    (ReturnType.Decimal),
                    begin
                        using returnValueCoerce.Value select
                        ("boolean"),
                            returnValue.CoerceType = CoerceType.Boolean
                        ("byte"),
                            returnValue.CoerceType = CoerceType.Byte
                        ("datetime"),
                            returnValue.CoerceType = CoerceType.DateTime
                        ("decimal"),
                            returnValue.CoerceType = CoerceType.Decimal
                        ("int"),
                            returnValue.CoerceType = CoerceType.Int
                        ("long"),
                            returnValue.CoerceType = CoerceType.Long
                        ("sbyte"),
                            returnValue.CoerceType = CoerceType.Sbyte
                        ("short"),
                            returnValue.CoerceType = CoerceType.Short
                        ("uint"),
                            returnValue.CoerceType = CoerceType.Uint
                        ("ulong"),
                            returnValue.CoerceType = CoerceType.Ulong
                        ("ushort"),
                            returnValue.CoerceType = CoerceType.Ushort
                        (),
                            throw new ApplicationException("Invalid coerce attribute value for interface "+thisInterface.Name+" method "+thisMethod.Name+" return value")
                        endusing
                    end
                    (ReturnType.ImpliedDecimal),
                    begin
                        using returnValueCoerce.Value select
                        ("decimal"),
                            returnValue.CoerceType = CoerceType.Decimal
                        ("double"),
                            returnValue.CoerceType = CoerceType.Double
                        ("float"),
                            returnValue.CoerceType = CoerceType.Float
                        (),
                            throw new ApplicationException("Invalid coerce attribute value for interface "+thisInterface.Name+" method "+thisMethod.Name+" return value")
                        endusing
                    end
                    (ReturnType.Integer),
                    begin
                        using returnValueCoerce.Value select
                        ("boolean"),
                            returnValue.CoerceType = CoerceType.Boolean
                        ("byte"),
                            returnValue.CoerceType = CoerceType.Byte
                        ("int"),
                            returnValue.CoerceType = CoerceType.Int
                        ("long"),
                            returnValue.CoerceType = CoerceType.Long
                        ("sbyte"),
                            returnValue.CoerceType = CoerceType.Sbyte
                        ("short"),
                            returnValue.CoerceType = CoerceType.Short
                        ("uint"),
                            returnValue.CoerceType = CoerceType.Uint
                        ("ulong"),
                            returnValue.CoerceType = CoerceType.Ulong
                        ("ushort"),
                            returnValue.CoerceType = CoerceType.Ushort
                        (),
                            throw new ApplicationException("Invalid coerce attribute value for interface "+thisInterface.Name+" method "+thisMethod.Name+" return value")
                        endusing
                    end
                    (),
                        throw new ApplicationException("Invalid coerce attribute for interface "+thisInterface.Name+" method "+thisMethod.Name+" return value")
                    endusing
                end

                ;;nullable
                data returnValueNullable = returnValueNode.Attributes["nullable"]
                if (returnValueNullable != ^null)
                begin
                    using returnValue.CoerceType select
                    (CoerceType.DateTime),
                        if (returnValueNullable.Value == "true")
                            returnValue.CoerceType = CoerceType.DateTimeNullable
                    (CoerceType.Decimal),
                        if (returnValueNullable.Value == "true")
                            returnValue.CoerceType = CoerceType.DecimalNullable
                    (),
                        throw new ApplicationException("Invalid nullable attribute for interface "+thisInterface.Name+" method "+thisMethod.Name+" return value")
                    endusing
                end

                ;;format
                data returnValueFormat = returnValueNode.Attributes["format"]
                if (returnValueFormat != ^null) then 
                begin
                    if (returnValue.CoerceType == CoerceType.DateTime
                    &    || returnValue.CoerceType == CoerceType.DateTimeNullable) then 
                    begin
                        using returnValueFormat.Value select
                        ("YYYYMMDD"),
                            returnValue.DateFormat = DateFormat.YYYYMMDD
                        ("YYMMDD"),
                            returnValue.DateFormat = DateFormat.YYMMDD
                        ("YYJJJ"),
                            returnValue.DateFormat = DateFormat.YYJJJ
                        ("YYYYJJJ"),
                            returnValue.DateFormat = DateFormat.YYYYJJJ
                        ("HHMM"),
                            returnValue.DateFormat = DateFormat.HHMM
                        ("HHMMSS"),
                            returnValue.DateFormat = DateFormat.HHMMSS
                        ("YYYYMMDDHHMISS"),
                            returnValue.DateFormat = DateFormat.YYYYMMDDHHMISS
                        ("YYYYMMDDHHMISSUUUUUU"),
                            returnValue.DateFormat = DateFormat.YYYYMMDDHHMISSUUUUUU
                        (),
                            throw new ApplicationException("Invalid format attribute value for interface "+thisInterface.Name+" method "+thisMethod.Name+" return value")
                        endusing
                    end
                    else
                        throw new ApplicationException("Invalid format attribute for interface "+thisInterface.Name+" method "+thisMethod.Name+" return value")
                end
                else
                begin
                    if (returnValue.CoerceType == CoerceType.DateTime
                    &    || returnValue.CoerceType == CoerceType.DateTimeNullable)
                        throw new ApplicationException("Missing format attribute for interface "+thisInterface.Name+" method "+thisMethod.Name+" return value")
                end

                ;;comment
                returnValue.Comment = getComments(returnValueNode)
            end

            if (returnValue==^null) then 
                thisMethod.MethodType = MethodType.Subroutine
            else
            begin
                thisMethod.MethodType = MethodType.Function
                thisMethod.ReturnValue = returnValue
            end

        endmethod

        private method parseParameter, void
            required in parameterNode,   @XmlNode
            required in thisMethod,         @SmcMethod
            required in parameterNumber,    int
        proc
            ;;Get the attributes from the parameter element

            ;;name (all parameters)
            data thisParameter = new SmcParameter() { Name = parameterNode.Attributes["name"].Value, Number = parameterNumber }

            ;;comment
            thisParameter.Comment = getComments(parameterNode)

            ;;type (all parameters)
            using parameterNode.Attributes["type"].Value select
            ("alpha"),
                thisParameter.Type = ParameterType.Alpha
            ("binaryarray"),
                thisParameter.Type = ParameterType.BinaryHandle
            ("decimal"),
                thisParameter.Type = ParameterType.Decimal
            ("enum"),
                thisParameter.Type = ParameterType.Enumeration
            ("handle"),
                thisParameter.Type = ParameterType.Handle
            ("integer"),
                thisParameter.Type = ParameterType.Integer
            ("string"),
                thisParameter.Type = ParameterType.String
            ("structure"),
                thisParameter.Type = ParameterType.Structure
            (),
                throw new ApplicationException("Invalid type attribute value for method "+thisMethod.Name+" parameter "+thisParameter.Name)
            endusing

            ;;size
            data parameterAttribute = parameterNode.Attributes["size"]
            if (parameterAttribute != ^null)
            begin
                try 
                begin
                    thisParameter.Size = %integer(parameterAttribute.Value)
                end
                catch (ex, @BadDigitException)
                begin
                    throw new ApplicationException("Invalid size attribute value for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                end
                endtry
            end

            ;;precision
            parameterAttribute = parameterNode.Attributes["precision"]
            if (parameterAttribute != ^null)
            begin
                if (thisParameter.Type == ParameterType.Decimal) then
                begin
                    try 
                    begin
                        thisParameter.Type = ParameterType.ImpliedDecimal
                        thisParameter.Precision = %integer(parameterAttribute.Value)
                    end
                    catch (ex, @BadDigitException)
                    begin
                        throw new ApplicationException("Invalid precision attribute for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                    end
                    endtry
                end
                else
                    throw new ApplicationException("Invalid precision attribute for method "+thisMethod.Name+" parameter "+thisParameter.Name)
            end

            ;;enumName
            parameterAttribute = parameterNode.Attributes["enumName"]
            if (parameterAttribute != ^null) then 
            begin
                if (thisParameter.Type == ParameterType.Enumeration) then 
                begin
                    thisParameter.EnumName = parameterAttribute.Value.ToUpper()
                end
                else
                    throw new ApplicationException("Invalid enumName attribute for method "+thisMethod.Name+" parameter "+thisParameter.Name)
            end
            else
            begin
                if (thisParameter.Type == ParameterType.Enumeration)
                    throw new ApplicationException("Missing enumName attribute for method "+thisMethod.Name+" parameter "+thisParameter.Name)
            end

            ;;structureName (only then type="structure")
            parameterAttribute = parameterNode.Attributes["structureName"]
            if (parameterAttribute != ^null) then 
            begin
                if (thisParameter.Type == ParameterType.Structure) then 
                begin
                    thisParameter.StructureName = parameterAttribute.Value.ToUpper()
                end
                else
                    throw new ApplicationException("Invalid structureName attribute for method "+thisMethod.Name+" parameter "+thisParameter.Name)
            end
            else
            begin
                if (thisParameter.Type == ParameterType.Structure)
                    throw new ApplicationException("Missing structureName attribute for method "+thisMethod.Name+" parameter "+thisParameter.Name)
            end

            ;;coerce
            parameterAttribute = parameterNode.Attributes["coerce"]
            if (parameterAttribute != ^null)
            begin
                using thisParameter.Type select
                (ParameterType.Decimal),
                begin
                    using parameterAttribute.Value select
                    ("boolean"),
                        thisParameter.CoerceType = CoerceType.Boolean
                    ("byte"),
                        thisParameter.CoerceType = CoerceType.Byte
                    ("datetime"),
                        thisParameter.CoerceType = CoerceType.DateTime
                    ("decimal"),
                        thisParameter.CoerceType = CoerceType.Decimal
                    ("int"),
                        thisParameter.CoerceType = CoerceType.Int
                    ("long"),
                        thisParameter.CoerceType = CoerceType.Long
                    ("sbyte"),
                        thisParameter.CoerceType = CoerceType.Sbyte
                    ("short"),
                        thisParameter.CoerceType = CoerceType.Short
                    ("uint"),
                        thisParameter.CoerceType = CoerceType.Uint
                    ("ulong"),
                        thisParameter.CoerceType = CoerceType.Ulong
                    ("ushort"),
                        thisParameter.CoerceType = CoerceType.Ushort
                    (),
                        throw new ApplicationException("Invalid coerce attribute value for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                    endusing
                end
                (ParameterType.ImpliedDecimal),
                begin
                    using parameterAttribute.Value select
                    ("decimal"),
                        thisParameter.CoerceType = CoerceType.Decimal
                    ("double"),
                        thisParameter.CoerceType = CoerceType.Double
                    ("float"),
                        thisParameter.CoerceType = CoerceType.Float
                    (),
                        throw new ApplicationException("Invalid coerce attribute value for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                    endusing
                end
                (ParameterType.Integer),
                begin
                    using parameterAttribute.Value select
                    ("boolean"),
                        thisParameter.CoerceType = CoerceType.Boolean
                    ("byte"),
                        thisParameter.CoerceType = CoerceType.Byte
                    ("int"),
                        thisParameter.CoerceType = CoerceType.Int
                    ("long"),
                        thisParameter.CoerceType = CoerceType.Long
                    ("sbyte"),
                        thisParameter.CoerceType = CoerceType.Sbyte
                    ("short"),
                        thisParameter.CoerceType = CoerceType.Short
                    ("uint"),
                        thisParameter.CoerceType = CoerceType.Uint
                    ("ulong"),
                        thisParameter.CoerceType = CoerceType.Ulong
                    ("ushort"),
                        thisParameter.CoerceType = CoerceType.Ushort
                    (),
                        throw new ApplicationException("Invalid coerce attribute value for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                    endusing
                end
                (),
                    throw new ApplicationException("Invalid coerce attribute for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                endusing

            end

            ;;nullable
            parameterAttribute = parameterNode.Attributes["nullable"]
            if (parameterAttribute != ^null)
            begin
                using thisParameter.CoerceType select
                (CoerceType.DateTime),
                    if (parameterAttribute.Value == "true")
                        thisParameter.CoerceType = CoerceType.DateTimeNullable
                (CoerceType.Decimal),
                    if (parameterAttribute.Value == "true")
                        thisParameter.CoerceType = CoerceType.DecimalNullable
                (),
                    throw new ApplicationException("Invalid nullable attribute for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                endusing
            end

            ;;format
            parameterAttribute = parameterNode.Attributes["format"]
            if (parameterAttribute != ^null) then 
            begin
                if (thisParameter.CoerceType == CoerceType.DateTime
                &    || thisParameter.CoerceType == CoerceType.DateTimeNullable) then 
                begin
                    using parameterAttribute.Value select
                    ("YYYYMMDD"),
                        thisParameter.DateFormat = DateFormat.YYYYMMDD
                    ("YYMMDD"),
                        thisParameter.DateFormat = DateFormat.YYMMDD
                    ("YYJJJ"),
                        thisParameter.DateFormat = DateFormat.YYJJJ
                    ("YYYYJJJ"),
                        thisParameter.DateFormat = DateFormat.YYYYJJJ
                    ("HHMM"),
                        thisParameter.DateFormat = DateFormat.HHMM
                    ("HHMMSS"),
                        thisParameter.DateFormat = DateFormat.HHMMSS
                    ("YYYYMMDDHHMISS"),
                        thisParameter.DateFormat = DateFormat.YYYYMMDDHHMISS
                    (),
                        throw new ApplicationException("Invalid format attribute value for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                    endusing
                end
                else
                    throw new ApplicationException("Invalid format attribute for method "+thisMethod.Name+" parameter "+thisParameter.Name)
            end
            else
            begin
                if (thisParameter.CoerceType == CoerceType.DateTime
                &    || thisParameter.CoerceType == CoerceType.DateTimeNullable)
                    throw new ApplicationException("Missing format attribute for method "+thisMethod.Name+" parameter "+thisParameter.Name)
            end

            ;;collection
            parameterAttribute = parameterNode.Attributes["collection"]
            if (parameterAttribute != ^null)
            begin
                using parameterAttribute.Value select
                ("ArrayList"),
                    thisParameter.CollectionType = ParameterCollectionType.MemoryHandle
                ("System.ArrayList"),
                    thisParameter.CollectionType = ParameterCollectionType.ArrayList
                (),
                    throw new ApplicationException("Invalid collection attribute for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                endusing
            end

            ;;dim
            parameterAttribute = parameterNode.Attributes["dim"]
            if (parameterAttribute != ^null)
            begin
                if (thisParameter.Type == ParameterType.String) then 
                    throw new ApplicationException("Invalid dim attribute for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                else
                begin
                    using parameterAttribute.Value select
                    ("0"),
                        nop
                    ("1"),
                        thisParameter.CollectionType = ParameterCollectionType.Array
                    (),
                        throw new ApplicationException("Invalid dim attribute value for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                    endusing
                end
            end

            ;;datatable
            parameterAttribute = parameterNode.Attributes["datatable"]
            if (parameterAttribute != ^null)
            begin
                using thisParameter.CollectionType select
                (ParameterCollectionType.MemoryHandle,ParameterCollectionType.ArrayList),
                begin
                    using parameterAttribute.Value select
                    ("true "),
                        thisParameter.DataTable = true
                    ("false "),
                        nop
                    (),
                        throw new ApplicationException("Invalid datatable attribute value for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                    endusing
                end
                (),
                    throw new ApplicationException("Invalid datatable attribute for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                endusing
            end

            ;;dir
            parameterAttribute = parameterNode.Attributes["dir"]
            if (parameterAttribute == ^null) then 
                thisParameter.Direction = ParameterDirection.In
            else
            begin
                using parameterAttribute.Value select
                ("inout"),
                    thisParameter.Direction = ParameterDirection.InOut
                ("in"),
                    thisParameter.Direction = ParameterDirection.In
                ("out"),
                    thisParameter.Direction = ParameterDirection.Out
                (),
                    throw new ApplicationException("Invalid dir attribute value for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                endusing
            end

            ;;passby
            parameterAttribute = parameterNode.Attributes["passby"]
            if (parameterAttribute != ^null) then 
            begin
                using parameterAttribute.Value select
                ("descriptor"),
                    thisParameter.PassBy = ParameterPassBy.Descriptor
                ("val"),
                    thisParameter.PassBy = ParameterPassBy.Value
                ("ref"),
                    thisParameter.PassBy = ParameterPassBy.Reference
                (),
                    throw new ApplicationException("Invalid passby attribute value for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                endusing
            end
            else
                thisParameter.PassBy = ParameterPassBy.Descriptor

            ;;required
            parameterAttribute = parameterNode.Attributes["required"]
            if (parameterAttribute == ^null) then 
                thisParameter.Required = true
            else
            begin
                using parameterAttribute.Value select
                ("yes"),
                    thisParameter.Required = true
                ("no"),
                    thisParameter.Required = false
                (),
                    throw new ApplicationException("Invalid required attribute value for method "+thisMethod.Name+" parameter "+thisParameter.Name)
                endusing
            end

            thisMethod.Parameters.Add(thisParameter)

        endmethod

        private method getComments, string
            required in method_or_param, @XmlNode
        proc

            data comment = String.Empty

            ;Is there a "comment" element?
            data commentNode = method_or_param.SelectSingleNode("comment")
            if (commentNode != ^null)
            begin
                ;;Yes, there should be 1 - 6 "linex" elements
                data lineNode, @XmlNode
                foreach lineNode in commentNode.ChildNodes
                begin
                    if (!String.IsNullOrWhiteSpace(lineNode.InnerText))
                    begin
                        if (comment.Length == 0) then
                            comment = lineNode.InnerText
                        else
                            comment = String.Format("{0} {1}",comment, lineNode.InnerText)
                    end
                end
            end

            mreturn comment

        endmethod

    endclass

endnamespace
