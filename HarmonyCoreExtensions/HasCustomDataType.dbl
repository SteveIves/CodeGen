
import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace HarmonyCoreExtensions

    public class HasCustomDataType implements IExpressionToken

        public property TokenName, String
            method get
            proc
                mreturn "HARMONYCORE_CUSTOM_DATATYPE"
            endmethod
        endproperty

        public property Description, String
            method get
            proc
                mreturn "Does the field have a custom data type?"
            endmethod
        endproperty

        public property Validity, TokenValidity
            method get
            proc
                mreturn TokenValidity.FieldLoop
            endmethod
        endproperty

        public method Evaluate, Boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode>
            endparams
        proc
            lambda doEvaluate(str, field, index)
            begin
                data textToSearch = field.LongDescription + field.UserText
                ;Add code here to determine the result of the expression, and return true or false
                if (textToSearch.Contains("HARMONYCORE_CUSTOM_FIELD_DATATYPE="))
                begin
                    data startPos = textToSearch.IndexOf("HARMONYCORE_CUSTOM_FIELD_DATATYPE=")
                    data semiPos = -1
                    if (startPos!=-1)
                        semiPos = textToSearch.IndexOf(";",startPos)
                    mreturn (startPos!=-1) && (semiPos!=-1) && (semiPos>(startPos+34))
                end
                mreturn false
            end
            mreturn ExpressionEvaluator.EvaluateFieldLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

    endclass

endnamespace
