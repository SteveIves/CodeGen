;;*****************************************************************************
;;
;; Title:       Helpers.dbl
;;
;; Type:        Class
;;
;; Description: Helper code for dealing with relations
;;
;;*****************************************************************************
;;
;; Copyright (c) 2019, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Linq
import System.Collections.Generic
import System.Collections.Concurrent
import System.Text
import CodeGen.Engine
import CodeGen.RepositoryAPI
import System.IO
import Newtonsoft.Json
import Newtonsoft.Json.Linq

namespace HarmonyCoreExtensions

	public static class Helpers

		public class RelationLookup
			private readwrite property Relations, @ConcurrentDictionary<string, CustomRelationSpec>, new ConcurrentDictionary<string, CustomRelationSpec>()
			private readwrite property Structures, @RpsStructureCollection

			public method RelationLookup
				required in structures,                @RpsStructureCollection
				required in customizationFileName,  @string
			proc
                this.Structures = structures
                
				if (File.Exists(customizationFileName))
				begin
					;;Load custom relation names
					data json = File.ReadAllText(customizationFileName)
					data configFileObject = (@JObject)JsonConvert.DeserializeObject(json)
					data configProp = configFileObject.Property("CustomRelations")
					if(configProp != ^null && configProp.Value != ^null)
					begin
						data customRelationSpecs = configProp.Value.ToObject<List<CustomRelationSpec>>()
						this.Init(customRelationSpecs)
					end
				end
			endmethod

			private method Init, void
				required in customRelationSpecs,  @List<CustomRelationSpec>
			proc
				data customRelation, @CustomRelationSpec
				foreach customRelation in customRelationSpecs
				begin
					data relationLookup = string.Format("{0}-{1}-{2}-{3}", customRelation.FromStructure, customRelation.ToStructure, customRelation.FromKey, customRelation.ToKey)
					data madeRelation = MakeRelation(customRelation.FromStructure, customRelation.ToStructure, customRelation.FromKey, customRelation.ToKey, customRelation.RequiresMatch, customRelation.ValidationMode)

					if(!string.IsNullOrWhitespace(customRelation.BackRelation))
						madeRelation.BackRelation = customRelation.BackRelation

					if(!string.IsNullOrWhitespace(customRelation.RelationType))
						madeRelation.RelationType = customRelation.RelationType

					if(!string.IsNullOrWhitespace(customRelation.RelationName))
						madeRelation.RelationName = customRelation.RelationName

					Relations.TryAdd(relationLookup, madeRelation)
				end
			endmethod

			;;; <summary>
			;;; Constructor
			;;; </summary>
			;;; <param name="context"></param>
			;;; <param name="customizationFileName"></param>
			public method RelationLookup
				required in structures,           @RpsStructureCollection
				required in customRelationSpecs,  @List<CustomRelationSpec>
			proc
				this.Structures = structures
				this.Init(customRelationSpecs)
			endmethod

			;;; <summary>
			;;; Find a relation
			;;; </summary>
			;;; <param name="fromStructure">Relation FROM structure</param>
			;;; <param name="toStructure">Relation TO structure</param>
			;;; <param name="fromKey">Relation FROM key</param>
			;;; <param name="toKey">Relation TO key</param>
			;;; <param name="backLink">Back link</param>
			;;; <returns>CustomRelationSpec object</returns>
			public method FindRelation, @CustomRelationSpec
				required in fromStructure,  @string
				required in toStructure,    @string
				required in fromKey,        @string
				required in toKey,          @string
				required in backLink,       boolean
			proc
				data relationLookup = string.Format("{0}-{1}-{2}-{3}", fromStructure, toStructure, fromKey, toKey)
				data outboundRelation = Relations.GetOrAdd(relationLookup, lambda(lookupKey) { MakeRelation(fromStructure, toStructure, fromKey, toKey) })
				if(backLink) then
				begin
					if(String.IsNullOrWhiteSpace(outboundRelation.BackRelation))
					begin
						throw new InvalidOperationException(string.Format("Attempting to get backlink for a relation where none exists, relation was {0}", relationLookup))
					end

					data relationLookupParts = outboundRelation.BackRelation.Split("-")
					if(relationLookupParts.Length != 4)
						throw new NotImplementedException()

					data backRelation = Relations.GetOrAdd(outboundRelation.BackRelation, lambda(lookupKey) { MakeRelation(relationLookupParts[1], relationLookupParts[2], relationLookupParts[3], relationLookupParts[4]) })
					mreturn backRelation
				end
				else
				begin
					mreturn outboundRelation
				end

			endmethod

			;;; <summary>
			;;; 
			;;; </summary>
			;;; <param name="fromStructure"></param>
			;;; <param name="toStructure"></param>
			;;; <param name="fromKey"></param>
			;;; <param name="toKey"></param>
			;;; <returns></returns>
			private method MakeRelation, @CustomRelationSpec
				required in fromStructure,  @string
				required in toStructure,    @string
				required in fromKey,        @string
				required in toKey,          @string
			proc
				mreturn MakeRelation(fromStructure,toStructure,fromKey,toKey,false,RelationValidationMode.None)
			endmethod

			;;; <summary>
			;;; 
			;;; </summary>
			;;; <param name="fromStructure"></param>
			;;; <param name="toStructure"></param>
			;;; <param name="fromKey"></param>
			;;; <param name="toKey"></param>
			;;; <param name="aRequiresMatch"></param>
			;;; <returns></returns>
			private method MakeRelation, @CustomRelationSpec
				required in fromStructure,  @string
				required in toStructure,    @string
				required in fromKey,        @string
				required in toKey,          @string
				required in aRequiresMatch, boolean
				required in aValidationMode, RelationValidationMode
			proc
				data fromRealStructure = Structures.FirstOrDefault(lambda(str) { str.Name == fromStructure })
				if (fromRealStructure == ^null)
				begin
					throw new ApplicationException(String.Format("From structure {0} not found. Check your Harmony Core customization file!",fromStructure))
				end

				data toRealStructure = Structures.FirstOrDefault(lambda(str) { str.Name == toStructure })
				if (toRealStructure == ^null)
				begin
					throw new ApplicationException(String.Format("To structure {0} not found. Check your Harmony Core customization file!",toStructure))
				end

				data realFromKey = fromRealStructure.Keys.FirstOrDefault(lambda(key) { key.Name == fromKey })
				if (realFromKey == ^null)
				begin
					throw new ApplicationException(String.Format("From key {0} not found. Check your Harmony Core customization file!",fromKey))
				end

				data realToKey = toRealStructure.Keys.FirstOrDefault(lambda(key) { key.Name == toKey })
				if (realToKey == ^null)
				begin
					throw new ApplicationException(String.Format("To key {0} not found. Check your Harmony Core customization file!",toKey))
				end

				data madeRelation = new CustomRelationSpec()
				madeRelation.FromKey = fromKey
				madeRelation.ToKey = toKey
				madeRelation.FromStructure = fromStructure
				madeRelation.ToStructure = toStructure
				madeRelation.RequiresMatch = aRequiresMatch
				madeRelation.ValidationMode = aValidationMode
				SynthesizeRelationInfo(fromRealStructure, toRealStructure, realFromKey, realToKey, madeRelation)
				mreturn madeRelation
			endmethod

			;;; <summary>
			;;; 
			;;; </summary>
			;;; <param name="fromStructure"></param>
			;;; <param name="toStructure"></param>
			;;; <param name="fromKey"></param>
			;;; <param name="toKey"></param>
			;;; <param name="targetRelation"></param>
			private method SynthesizeRelationInfo, void
				required in fromStructure,  @RpsStructure
				required in toStructure,    @RpsStructure
				required in fromKey,        @RpsKey
				required in toKey,          @RpsKey
				required in targetRelation, @CustomRelationSpec
			proc

				data fkCleanFromKey, @RpsKey, fromKey
				if(fromKey.Name.StartsWith("FK_"))
				begin
					;;Remove the FK_ from the from the key name
					data fkCleanName = fromKey.Name.Substring(3)
					data fkDescr = fromKey.Description
					;;Locate the matching access key
					data fromStructureKey, @RpsKey
					foreach fromStructureKey in fromStructure.Keys
					begin
						if (fromStructureKey.Name == fkCleanName || string.Compare(fromStructureKey.Name, fkDescr, true) == 0)
						begin
							fkCleanFromKey = fromStructureKey
							exitloop
						end
					end
				end

				data toRelation, @RpsRelation
				data hasBackRelation = false

				foreach toRelation in toStructure.Relations
				begin
					if(toRelation.ToStructure == fromStructure.Name)
					begin
						if(toRelation.ToKey == fkCleanFromKey.Name)
						begin
							hasBackRelation = true
							exitloop
						end
					end
				end

				data toStructureNoPlural, string, StringTools.PascalCase(toStructure.Alias.EndsWith("S") ? toStructure.Alias.Substring(0,toStructure.Alias.Length-1) : toStructure.Alias)
				data toStructurePlural, string, StringTools.PascalCase(toStructure.Alias.EndsWith("S") ? toStructure.Alias : String.Format("{0}S",toStructure.Alias))

				data fkToKey = hasBackRelation ? toStructure.Keys.FirstOrDefault(lambda(target) { target.Name == toRelation.FromKey } ) : toKey
				data fFromKey = hasBackRelation ? fromStructure.Keys.FirstOrDefault(lambda(target) { target.Name == toRelation.ToKey } ) : fkCleanFromKey
				data isOneToOneToOne = (fkToKey.Size >= fFromKey.Size && fFromKey.Duplicates == RpsKeyDuplicates.NoDuplicates && toKey.Duplicates == RpsKeyDuplicates.NoDuplicates)
				data isOneToOne = ((toKey.Size < fromKey.Size) || (toKey.Size == fromKey.Size && toKey.Duplicates == RpsKeyDuplicates.NoDuplicates))

				if(String.IsNullOrWhiteSpace(targetRelation.BackRelation))
					targetRelation.BackRelation = hasBackRelation ? string.Format("{0}-{1}-{2}-{3}", toRelation.FromStructure, toRelation.ToStructure, toRelation.FromKey, toRelation.ToKey) : ^null
                
				if (isOneToOne && !isOneToOneToOne && hasBackRelation) then
				begin
					;Type A: MANY_TO_ONE_TO_MANY
					if(String.IsNullOrWhiteSpace(targetRelation.RelationName))
						targetRelation.RelationName = toStructureNoPlural

					if(String.IsNullOrWhiteSpace(targetRelation.RelationType))
						targetRelation.RelationType = "A"
				end
				else if (isOneToOne && isOneToOneToOne && hasBackRelation) then
				begin
					;Type B: ONE_TO_ONE_TO_ONE
					if(String.IsNullOrWhiteSpace(targetRelation.RelationName))
						targetRelation.RelationName = toStructureNoPlural
                    
					if(String.IsNullOrWhiteSpace(targetRelation.RelationType))
						targetRelation.RelationType = "B"
				end
				else if (isOneToOne && !hasBackRelation) then
				begin
					;Type C: ONE_TO_ONE
					if(String.IsNullOrWhiteSpace(targetRelation.RelationName))
						targetRelation.RelationName = toStructureNoPlural
                    
					if(String.IsNullOrWhiteSpace(targetRelation.RelationType))
						targetRelation.RelationType = "C"
				end
				else if (!isOneToOne && hasBackRelation) then
				begin
					;Type D: ONE_TO_MANY_TO_ONE
					if(String.IsNullOrWhiteSpace(targetRelation.RelationName))
						targetRelation.RelationName = toStructurePlural
                    
					if(String.IsNullOrWhiteSpace(targetRelation.RelationType))
						targetRelation.RelationType = "D"
				end
				else if (!isOneToOne && !hasBackRelation)
				begin
					;Type E: ONE_TO_MANY
					if(String.IsNullOrWhiteSpace(targetRelation.RelationName))
						targetRelation.RelationName = toStructurePlural
                   
					if(String.IsNullOrWhiteSpace(targetRelation.RelationType))
						targetRelation.RelationType = "E"
				end
			endmethod

		endclass

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="context"></param>
		;;; <param name="fromStructure"></param>
		;;; <param name="tostr"></param>
		;;; <param name="fromkey"></param>
		;;; <param name="tokey"></param>
		;;; <param name="backLink"></param>
		;;; <returns></returns>
		public static method GetRelationSpec, @CustomRelationSpec
			required in context,        @CodeGenContext
			required in fromStructure,  @RpsStructure
			required in tostr,          @RpsStructure
			required in fromkey,        @RpsKey
			required in tokey,          @RpsKey
			required in backLink,        boolean
		proc
			mreturn GetRelationSpec(context.TemplateFolder, context.Properties, context.Structures, fromStructure, tostr, fromkey, tokey, backLink)
		endmethod

        public static method GetRelationSpec, @CustomRelationSpec
            required in templateFolder, @string
            required in properties, @ConcurrentDictionary<Object, Object>
			required in structures, @RpsStructureCollection
            required in fromStructure,  @RpsStructure
            required in tostr,          @RpsStructure
            required in fromkey,        @RpsKey
            required in tokey,          @RpsKey
            required in backLink,        boolean
        proc
            data harmonyCustomizationFile = Path.Combine(templateFolder,"HarmonyCoreCustomization.json")
            data relationLookup = ^as(properties.GetOrAdd(^typeof(RelationLookup), lambda(lookupKey) { new RelationLookup(structures, harmonyCustomizationFile) }), @RelationLookup)
            mreturn relationLookup.FindRelation(fromStructure.Name, tostr.Name, fromkey.Name, tokey.Name, backLink)
        endmethod

		;;; <summary>
		;;; 
		;;; </summary>
		;;; <param name="tkn"></param>
		;;; <param name="template"></param>
		;;; <param name="loops"></param>
		;;; <param name="context"></param>
		;;; <param name="fromStructure"></param>
		;;; <param name="relation"></param>
		;;; <param name="index"></param>
		;;; <param name="fromkey"></param>
		;;; <param name="tostr"></param>
		;;; <param name="tokey"></param>
		;;; <returns></returns>
		public static method MatchRelationType, boolean

			required in tkn,            @Token
			required in template,       @FileNode 
			required in loops,          @IEnumerable<LoopNode>

			required in context,        @CodeGenContext
			required in fromStructure,  @RpsStructure
			required in relation,       @RpsRelation
			required in index,          int
			required in fromkey,        @RpsKey
			required in tostr,          @RpsStructure
			required in tokey,          @RpsKey

		proc
			data targetRelation = GetRelationSpec(context, fromStructure, toStr, fromkey, tokey, false)

			using tkn.Value select
			("ONE_TO_ONE"),
				mreturn targetRelation.RelationType == "C"
			("ONE_TO_MANY"),
				mreturn targetRelation.RelationType == "E"
			("ONE_TO_MANY_TO_ONE"),
				mreturn targetRelation.RelationType == "D"
			("ONE_TO_ONE_TO_ONE"),
				mreturn targetRelation.RelationType == "B"
			("MANY_TO_ONE_TO_MANY"),
				mreturn targetRelation.RelationType == "A"
			("TO_ONE"),
				mreturn targetRelation.RelationType == "A" || targetRelation.RelationType == "B" || targetRelation.RelationType == "C"
			("TO_MANY"),
				mreturn targetRelation.RelationType == "D" || targetRelation.RelationType == "E"
			endusing

			;;Should never get here!
			throw new ApplicationException(String.Format("Invalid expression token {0} encountered in evaluateRelationType()",tkn.Value))

		endmethod

		;;; <summary>
		;;; Does a relation REQUIRE matching data in the file targeted by the TO structure and key.
		;;; </summary>
		;;; <param name="context"></param>
		;;; <param name="fromStructure"></param>
		;;; <param name="fromkey"></param>
		;;; <param name="tostr"></param>
		;;; <param name="tokey"></param>
		;;; <returns>True if matching data is required</returns>
		public static method RequiresMatch, boolean
			required in context,        @CodeGenContext
			required in fromStructure,  @RpsStructure
			required in fromkey,        @RpsKey
			required in tostr,          @RpsStructure
			required in tokey,          @RpsKey
		proc
			data targetRelation = GetRelationSpec(context, fromStructure, toStr, fromkey, tokey, false)
			mreturn targetRelation.RequiresMatch
		endmethod

		;;; <summary>
		;;; What is the ValidationMode of the relation?
		;;; </summary>
		;;; <param name="context"></param>
		;;; <param name="fromStructure"></param>
		;;; <param name="fromkey"></param>
		;;; <param name="tostr"></param>
		;;; <param name="tokey"></param>
		;;; <returns>True if matching data is required</returns>
		public static method ValidationMode, RelationValidationMode
			required in context,        @CodeGenContext
			required in fromStructure,  @RpsStructure
			required in fromkey,        @RpsKey
			required in tostr,          @RpsStructure
			required in tokey,          @RpsKey
		proc
			data targetRelation = GetRelationSpec(context, fromStructure, toStr, fromkey, tokey, false)
			;;Figure out a default based on the value of the DEPRECATED property RequiresMatch
			data notPresentDefault, RelationValidationMode, targetRelation.RequiresMatch ? RelationValidationMode.Always : RelationValidationMode.None
			;;Return the value. If not specified, use the default based on RequiresMatch.
			mreturn targetRelation.ValidationMode != RelationValidationMode.Unspecified ? targetRelation.ValidationMode : notPresentDefault
		endmethod

	endclass

endnamespace
