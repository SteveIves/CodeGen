
import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace HarmonyCoreExtensions

    public class CustomFieldType implements IExpansionToken

        public property TokenName, String
            method get
            proc
                mreturn "HARMONYCORE_CUSTOM_FIELD_TYPE"
            endmethod
        endproperty

        public property Description, String
            method get
            proc
                mreturn "An example of a custom field loop token."
            endmethod
        endproperty

        public property Validity, TokenValidity
            method get
            proc
                mreturn TokenValidity.FieldLoop
            endmethod
        endproperty

        public property TokenCase, TokenCaseMode
            method get
            proc
                mreturn TokenCaseMode.UppercaseOnly
            endmethod
        endproperty

        public method Expand, String
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode>
            endparams
        proc
            lambda doExpand(str, field)
            begin
                data textToSearch = field.LongDescription + field.UserText
                if (field.LongDescription.Contains("HARMONYCORE_CUSTOM_FIELD_TYPE="))
                begin
                    data startPos = textToSearch.IndexOf("HARMONYCORE_CUSTOM_FIELD_TYPE=")
                    data semiPos = -1
                    if (startPos!=-1)
                        semiPos = textToSearch.IndexOf(";",startPos)
                    if ((startPos!=-1) && (semiPos!=-1) && (semiPos>(startPos+30)))
                        mreturn textToSearch.SubString(startPos+30,semiPos-startPos-30)
                end
                mreturn ""
            end
            mreturn TokenExpander.ExpandFieldLoopToken(tkn, template, loops, doExpand)
        endmethod

    endclass

endnamespace
