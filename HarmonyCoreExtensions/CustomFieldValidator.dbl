;;*****************************************************************************
;;
;; Title:       CustomFieldValidator.dbl
;;
;; Type:        Class
;;
;; Description: A custom field loop expansion token for use with Harmony Core
;;
;; Date:        30th March 2022
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2022, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System
import System.Collections.Generic
import CodeGen.Engine
import CodeGen.RepositoryAPI

namespace HarmonyCoreExtensions

    ; Custom field loop expression.

    public class HasCustomFieldValidator implements IExpressionToken

        public property TokenName, String
            method get
            proc
                mreturn "HARMONYCORE_CUSTOM_FIELD_VALIDATOR"
            endmethod
        endproperty

        public property Description, String
            method get
            proc
                mreturn "Does the field have a custom field validator class specified?"
            endmethod
        endproperty

        public property Validity, TokenValidity
            method get
            proc
                mreturn TokenValidity.FieldLoop
            endmethod
        endproperty

        public method Evaluate, Boolean
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode>
            endparams
        proc
            lambda doEvaluate(str, field, index)
            begin
                mreturn field.HasProperty(template, "HARMONYCORE_CUSTOM_FIELD_VALIDATOR")
            end
            mreturn ExpressionEvaluator.EvaluateFieldLoopExpression(tkn, template, loops, doEvaluate)
        endmethod

    endclass

    ; Custom field loop expansion token.

    public class CustomFieldValidator implements IExpansionToken

        public property TokenName, String
            method get
            proc
                mreturn "HARMONYCORE_CUSTOM_FIELD_VALIDATOR"
            endmethod
        endproperty

        public property Description, String
            method get
            proc
                mreturn "Defines the name of a custom validation class for a field."
            endmethod
        endproperty

        public property Validity, TokenValidity
            method get
            proc
                mreturn TokenValidity.FieldLoop
            endmethod
        endproperty

        public property TokenCase, TokenCaseMode
            method get
            proc
                mreturn TokenCaseMode.UppercaseOnly
            endmethod
        endproperty

        public method Expand, String
            tkn, @Token
            template, @FileNode 
            loops, @IEnumerable<LoopNode>
            endparams
        proc
            lambda doExpand(str, field)
            begin
                data propValue = field.GetProperty<string>(template, "HARMONYCORE_CUSTOM_FIELD_VALIDATOR")
                if(propValue != ^null) then
                    mreturn propValue
                else
                    mreturn ""
            end
            mreturn TokenExpander.ExpandFieldLoopToken(tkn, template, loops, doExpand)
        endmethod

    endclass

endnamespace
